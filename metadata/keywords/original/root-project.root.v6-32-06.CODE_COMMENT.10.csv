id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:46,Performance,load,loaded,46,/// The limit (threshold) value for number of loaded ASTs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:16,Performance,load,load,16,"/// Storage and load of ASTUnits, cached access, and providing searchability; /// are the concerns of ASTUnitStorage class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:34,Performance,cache,cached,34,"/// Storage and load of ASTUnits, cached access, and providing searchability; /// are the concerns of ASTUnitStorage class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:41,Security,access,access,41,"/// Storage and load of ASTUnits, cached access, and providing searchability; /// are the concerns of ASTUnitStorage class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:494,Availability,error,error,494,/// Loads an ASTUnit for a function.; ///; /// \param FunctionName USR name of the function.; /// \param CrossTUDir Path to the directory used to store CTU related files.; /// \param IndexName Name of the file inside \p CrossTUDir which maps; /// function USR names to file paths. These files contain the corresponding; /// AST-dumps.; /// \param DisplayCTUProgress Display a message about loading new ASTs.; ///; /// \return An Expected instance which contains the ASTUnit pointer or the; /// error occurred during the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:376,Integrability,message,message,376,/// Loads an ASTUnit for a function.; ///; /// \param FunctionName USR name of the function.; /// \param CrossTUDir Path to the directory used to store CTU related files.; /// \param IndexName Name of the file inside \p CrossTUDir which maps; /// function USR names to file paths. These files contain the corresponding; /// AST-dumps.; /// \param DisplayCTUProgress Display a message about loading new ASTs.; ///; /// \return An Expected instance which contains the ASTUnit pointer or the; /// error occurred during the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:4,Performance,Load,Loads,4,/// Loads an ASTUnit for a function.; ///; /// \param FunctionName USR name of the function.; /// \param CrossTUDir Path to the directory used to store CTU related files.; /// \param IndexName Name of the file inside \p CrossTUDir which maps; /// function USR names to file paths. These files contain the corresponding; /// AST-dumps.; /// \param DisplayCTUProgress Display a message about loading new ASTs.; ///; /// \return An Expected instance which contains the ASTUnit pointer or the; /// error occurred during the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:390,Performance,load,loading,390,/// Loads an ASTUnit for a function.; ///; /// \param FunctionName USR name of the function.; /// \param CrossTUDir Path to the directory used to store CTU related files.; /// \param IndexName Name of the file inside \p CrossTUDir which maps; /// function USR names to file paths. These files contain the corresponding; /// AST-dumps.; /// \param DisplayCTUProgress Display a message about loading new ASTs.; ///; /// \return An Expected instance which contains the ASTUnit pointer or the; /// error occurred during the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:520,Performance,load,load,520,/// Loads an ASTUnit for a function.; ///; /// \param FunctionName USR name of the function.; /// \param CrossTUDir Path to the directory used to store CTU related files.; /// \param IndexName Name of the file inside \p CrossTUDir which maps; /// function USR names to file paths. These files contain the corresponding; /// AST-dumps.; /// \param DisplayCTUProgress Display a message about loading new ASTs.; ///; /// \return An Expected instance which contains the ASTUnit pointer or the; /// error occurred during the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:57,Performance,load,load,57,/// Identifies the path of the file which can be used to load the ASTUnit; /// for a given function.; ///; /// \param FunctionName USR name of the function.; /// \param CrossTUDir Path to the directory used to store CTU related files.; /// \param IndexName Name of the file inside \p CrossTUDir which maps; /// function USR names to file paths. These files contain the corresponding; /// AST-dumps.; ///; /// \return An Expected instance containing the filepath.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:4,Performance,Load,Loads,4,/// Loads the AST based on the identifier found in the index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:24,Performance,load,loaded,24,/// Limit the number of loaded ASTs. It is used to limit the memory usage; /// of the CrossTranslationUnitContext. The ASTUnitStorage has the; /// information whether the AST to load is actually loaded or returned from; /// cache. This information is needed to maintain the counter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:178,Performance,load,load,178,/// Limit the number of loaded ASTs. It is used to limit the memory usage; /// of the CrossTranslationUnitContext. The ASTUnitStorage has the; /// information whether the AST to load is actually loaded or returned from; /// cache. This information is needed to maintain the counter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:195,Performance,load,loaded,195,/// Limit the number of loaded ASTs. It is used to limit the memory usage; /// of the CrossTranslationUnitContext. The ASTUnitStorage has the; /// information whether the AST to load is actually loaded or returned from; /// cache. This information is needed to maintain the counter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:224,Performance,cache,cache,224,/// Limit the number of loaded ASTs. It is used to limit the memory usage; /// of the CrossTranslationUnitContext. The ASTUnitStorage has the; /// information whether the AST to load is actually loaded or returned from; /// cache. This information is needed to maintain the counter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:1291,Availability,failure,failure,1291,"d and for every file; /// found, an event is synthesized as if the file was added.; ///; /// This is not a general purpose directory monitoring tool - list of; /// limitations follows.; ///; /// Only flat directories with no subdirectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the whole watched directory is sent.; ///; /// Directories containing ""too many"" files and/or receiving events ""too; /// frequently"" are not supported - if the initial scan can't be finished before; /// th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:2287,Availability,error,error,2287,"ectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the whole watched directory is sent.; ///; /// Directories containing ""too many"" files and/or receiving events ""too; /// frequently"" are not supported - if the initial scan can't be finished before; /// the watcher instance gets invalidated (see WatcherGotInvalidated) there's no; /// good error handling strategy - the only option for client is to destroy the; /// watcher, restart watching with new instance and hope it won't repeat.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:1264,Deployability,continuous,continuous,1264,"d and for every file; /// found, an event is synthesized as if the file was added.; ///; /// This is not a general purpose directory monitoring tool - list of; /// limitations follows.; ///; /// Only flat directories with no subdirectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the whole watched directory is sent.; ///; /// Directories containing ""too many"" files and/or receiving events ""too; /// frequently"" are not supported - if the initial scan can't be finished before; /// th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:334,Energy Efficiency,monitor,monitoring,334,"/// Provides notifications for file changes in a directory.; ///; /// Invokes client-provided function on every filesystem event in the watched; /// directory. Initially the watched directory is scanned and for every file; /// found, an event is synthesized as if the file was added.; ///; /// This is not a general purpose directory monitoring tool - list of; /// limitations follows.; ///; /// Only flat directories with no subdirectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:1782,Energy Efficiency,monitor,monitored,1782,"ectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the whole watched directory is sent.; ///; /// Directories containing ""too many"" files and/or receiving events ""too; /// frequently"" are not supported - if the initial scan can't be finished before; /// the watcher instance gets invalidated (see WatcherGotInvalidated) there's no; /// good error handling strategy - the only option for client is to destroy the; /// watcher, restart watching with new instance and hope it won't repeat.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:1582,Integrability,interface,interface,1582,"ectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the whole watched directory is sent.; ///; /// Directories containing ""too many"" files and/or receiving events ""too; /// frequently"" are not supported - if the initial scan can't be finished before; /// the watcher instance gets invalidated (see WatcherGotInvalidated) there's no; /// good error handling strategy - the only option for client is to destroy the; /// watcher, restart watching with new instance and hope it won't repeat.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:1772,Security,access,access,1772,"ectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the whole watched directory is sent.; ///; /// Directories containing ""too many"" files and/or receiving events ""too; /// frequently"" are not supported - if the initial scan can't be finished before; /// the watcher instance gets invalidated (see WatcherGotInvalidated) there's no; /// good error handling strategy - the only option for client is to destroy the; /// watcher, restart watching with new instance and hope it won't repeat.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:1470,Usability,simpl,simplicity,1470,"ectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the whole watched directory is sent.; ///; /// Directories containing ""too many"" files and/or receiving events ""too; /// frequently"" are not supported - if the initial scan can't be finished before; /// the watcher instance gets invalidated (see WatcherGotInvalidated) there's no; /// good error handling strategy - the only option for client is to destroy the; /// watcher, restart watching with new instance and hope it won't repeat.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:652,Availability,error,errors,652,"/// The DirectoryWatcher that originated this event is no longer valid and; /// its behavior is unspecified.; ///; /// The prime case is kernel signalling to OS-specific implementation of; /// DirectoryWatcher some resource limit being hit.; /// *Usually* kernel starts dropping or squashing events together after; /// that and so would DirectoryWatcher. This means that *some* events; /// might still be passed to Receiver but this behavior is unspecified.; ///; /// Another case is after the watched directory itself is deleted.; /// WatcherGotInvalidated will be received at least once during; /// DirectoryWatcher instance lifetime - when handling errors this is done; /// on best effort basis, when an instance is being destroyed then this is; /// guaranteed.; ///; /// The only proper response to this kind of event is to destruct the; /// originating DirectoryWatcher instance and create a new one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:100,Availability,Error,Error,100,/// llvm fatal_error if \param Path doesn't exist or isn't a directory.; /// Returns llvm::Expected Error if OS kernel API told us we can't start; /// watching. In such case it's unclear whether just retrying has any chance; /// to succeed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:55,Performance,perform,perform,55,"/// Action - Represent an abstract compilation step to perform.; ///; /// An action represents an edge in the compilation graph; typically; /// it is a job to transform an input using some tool.; ///; /// The current driver is hard wired to expect actions which produce a; /// single primary output, at least in terms of controlling the; /// compilation. Actions can produce auxiliary files, but can only; /// produce a single output to feed into subsequent actions.; ///; /// Actions are usually owned by a Compilation, which creates new; /// actions via MakeAction().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:91,Integrability,depend,depend,91,"/// Flag that is set to true if this action can be collapsed with others; /// actions that depend on it. This is true by default and set to false when; /// the action is used by two different tool chains, which is enabled by the; /// offloading support implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:103,Availability,mask,mask,103,///; /// Offload information.; ///; /// The host offloading kind - a combination of kinds encoded in a mask.; /// Multiple programming models may be supported simultaneously by the same; /// host.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:76,Integrability,depend,dependences,76,/// Set the device offload info of this action and propagate it to its; /// dependences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:77,Integrability,depend,dependences,77,/// Append the host offload info of this action and propagate it to its; /// dependences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:108,Integrability,depend,dependences,108,"/// Set the offload info of this action to be the same as the provided action,; /// and propagate it to its dependences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:115,Integrability,depend,dependence,115,/// Check if this action have any offload kinds. Note that host offload kinds; /// are only set if the action is a dependence to a host offload action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:166,Integrability,depend,dependences,166,/// An offload action combines host or/and device actions according to the; /// programming model implementation needs and propagates the offloading kind to; /// its dependences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:90,Deployability,update,updated,90,"// Lists that keep the information for each dependency. All the lists are; // meant to be updated in sync. We are adopting separate lists instead of a; // list of structs, because that simplifies forwarding the actions list to; // initialize the inputs of the base Action class.; /// The dependence actions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:44,Integrability,depend,dependency,44,"// Lists that keep the information for each dependency. All the lists are; // meant to be updated in sync. We are adopting separate lists instead of a; // list of structs, because that simplifies forwarding the actions list to; // initialize the inputs of the base Action class.; /// The dependence actions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:288,Integrability,depend,dependence,288,"// Lists that keep the information for each dependency. All the lists are; // meant to be updated in sync. We are adopting separate lists instead of a; // list of structs, because that simplifies forwarding the actions list to; // initialize the inputs of the base Action class.; /// The dependence actions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:185,Usability,simpl,simplifies,185,"// Lists that keep the information for each dependency. All the lists are; // meant to be updated in sync. We are adopting separate lists instead of a; // list of structs, because that simplifies forwarding the actions list to; // initialize the inputs of the base Action class.; /// The dependence actions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:29,Integrability,depend,dependence,29,/// The offload kind of each dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:8,Integrability,depend,dependence,8,/// The dependence action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:29,Integrability,depend,dependence,29,/// The offload kind of each dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:76,Integrability,depend,dependencies,76,/// Constructor version that obtains the offload kinds from the device; /// dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:54,Integrability,depend,dependence,54,/// Execute the work specified in \a Work on the host dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:57,Integrability,depend,dependence,57,/// Execute the work specified in \a Work on each device dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:50,Integrability,depend,dependence,50,/// Execute the work specified in \a Work on each dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:65,Integrability,depend,dependence,65,"/// Execute the work specified in \a Work on each host or device dependence if; /// \a IsHostDependenceto is true or false, respectively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:41,Integrability,depend,dependence,41,/// Return true if the action has a host dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:20,Integrability,depend,dependence,20,/// Return the host dependence of this action. This function is only expected; /// to be called if the host dependence exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:108,Integrability,depend,dependence,108,/// Return the host dependence of this action. This function is only expected; /// to be called if the host dependence exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:50,Integrability,depend,dependence,50,"/// Return true if the action has a single device dependence. If \a; /// DoNotConsiderHostActions is set, ignore the host dependence, if any, while; /// accounting for the number of dependences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:122,Integrability,depend,dependence,122,"/// Return true if the action has a single device dependence. If \a; /// DoNotConsiderHostActions is set, ignore the host dependence, if any, while; /// accounting for the number of dependences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:182,Integrability,depend,dependences,182,"/// Return true if the action has a single device dependence. If \a; /// DoNotConsiderHostActions is set, ignore the host dependence, if any, while; /// accounting for the number of dependences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:29,Integrability,depend,dependence,29,"/// Return the single device dependence of this action. This function is only; /// expected to be called if a single device dependence exists. If \a; /// DoNotConsiderHostActions is set, a host dependence is allowed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:124,Integrability,depend,dependence,124,"/// Return the single device dependence of this action. This function is only; /// expected to be called if a single device dependence exists. If \a; /// DoNotConsiderHostActions is set, a host dependence is allowed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:194,Integrability,depend,dependence,194,"/// Return the single device dependence of this action. This function is only; /// expected to be called if a single device dependence exists. If \a; /// DoNotConsiderHostActions is set, a host dependence is allowed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:58,Integrability,depend,depend,58,/// Type that provides information about the actions that depend on this; /// unbundling action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:26,Integrability,depend,dependent,26,/// The tool chain of the dependent action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:34,Integrability,depend,dependent,34,/// The bound architecture of the dependent action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:28,Integrability,depend,dependent,28,/// The offload kind of the dependent action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:48,Integrability,depend,dependence,48,/// Container that keeps information about each dependence of this unbundling; /// action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:33,Integrability,depend,dependent,33,/// Register information about a dependent action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:37,Integrability,depend,depending,37,/// Return the information about all depending actions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Action.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:36,Performance,perform,perform,36,/// Compilation - A set of tasks to perform for a single driver; /// invocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:6,Availability,mask,mask,6,/// A mask of all the programming models the host has to support in the; /// current compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:62,Performance,perform,perform,62,/// The driver translated arguments. Note that toolchains may perform their; /// own argument translation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:66,Security,access,accessible,66,/// The list of actions we've created via MakeAction. This is not accessible; /// to consumers; it's here just to manage ownership.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:4,Performance,Cache,Cache,4,"/// Cache of translated arguments for a particular tool chain, bound; /// architecture, and device offload kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:44,Availability,failure,failure,44,/// Result files which should be removed on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:50,Availability,failure,failure,50,"/// Result files which are generated correctly on failure, and which should; /// only be removed if we crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:15,Availability,error,error,15,/// Whether an error during the parsing of the input args.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:3,Deployability,Update,Update,3,// Update the host offload kind to also contain this kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:4,Deployability,Install,Installs,4,/// Installs a handler that is executed when a compilation job is finished.; /// The arguments of the callback specify the compilation job as an instance; /// of class Command and the exit status of the child process executed that; /// job.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:234,Performance,perform,performed,234,"/// getArgsForToolChain - Return the derived argument list for the; /// tool chain \p TC (or the default tool chain, if TC is not specified).; /// If a device offloading kind is specified, a translation specific for that; /// kind is performed, if any.; ///; /// \param BoundArch - The bound architecture name, or 0.; /// \param DeviceOffloadKind - The offload device kind that should be used in; /// the translation, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:44,Availability,failure,failure,44,"/// addResultFile - Add a file to remove on failure, and returns its; /// argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:77,Availability,failure,failures,77,/// CleanupFile - Delete a given file.; ///; /// \param IssueErrors - Report failures as errors.; /// \return Whether the file was removed successfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:89,Availability,error,errors,89,/// CleanupFile - Delete a given file.; ///; /// \param IssueErrors - Report failures as errors.; /// \return Whether the file was removed successfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:96,Availability,failure,failures,96,/// CleanupFileList - Remove the files in the given list.; ///; /// \param IssueErrors - Report failures as errors.; /// \return Whether all files were removed successfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:108,Availability,error,errors,108,/// CleanupFileList - Remove the files in the given list.; ///; /// \param IssueErrors - Report failures as errors.; /// \return Whether all files were removed successfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:224,Availability,failure,failures,224,"/// CleanupFileMap - Remove the files in the given map.; ///; /// \param JA - If specified, only delete the files associated with this; /// JobAction. Otherwise, delete all files in the map.; /// \param IssueErrors - Report failures as errors.; /// \return Whether all files were removed successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:236,Availability,error,errors,236,"/// CleanupFileMap - Remove the files in the given map.; ///; /// \param JA - If specified, only delete the files associated with this; /// JobAction. Otherwise, delete all files in the map.; /// \param IssueErrors - Report failures as errors.; /// \return Whether all files were removed successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:175,Testability,Log,LogOnly,175,"/// ExecuteCommand - Execute an actual command.; ///; /// \param FailingCommand - For non-zero results, this will be set to the; /// Command which failed, if any.; /// \param LogOnly - When true, only tries to log the command, not actually; /// execute it.; /// \return The result code of the subprocess.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:210,Testability,log,log,210,"/// ExecuteCommand - Execute an actual command.; ///; /// \param FailingCommand - For non-zero results, this will be set to the; /// Command which failed, if any.; /// \param LogOnly - When true, only tries to log the command, not actually; /// execute it.; /// \return The result code of the subprocess.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:189,Testability,Log,LogOnly,189,"/// ExecuteJob - Execute a single job.; ///; /// \param FailingCommands - For non-zero results, this will be a vector of; /// failing commands and their associated result code.; /// \param LogOnly - When true, only tries to log the command, not actually; /// execute it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:224,Testability,log,log,224,"/// ExecuteJob - Execute a single job.; ///; /// \param FailingCommands - For non-zero results, this will be a vector of; /// failing commands and their associated result code.; /// \param LogOnly - When true, only tries to log the command, not actually; /// execute it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:22,Availability,error,error,22,/// Return whether an error during the parsing of the input args.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:82,Availability,error,error,82,/// Force driver to fail before toolchain is created. This is necessary when; /// error happens in action builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:39,Safety,detect,detection,39,"//===--- Distro.h - Linux distribution detection support --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:30,Safety,detect,detecting,30,/// Distro - Helper class for detecting and classifying Linux distributions.; ///; /// This class encapsulates the clang Linux distribution detection mechanism; /// as well as helper functions that match the specific (versioned) results; /// into wider distribution classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:140,Safety,detect,detection,140,/// Distro - Helper class for detecting and classifying Linux distributions.; ///; /// This class encapsulates the clang Linux distribution detection mechanism; /// as well as helper functions that match the specific (versioned) results; /// into wider distribution classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:45,Performance,perform,performed,45,// Special value means that no detection was performed yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:31,Safety,detect,detection,31,// Special value means that no detection was performed yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:7,Deployability,Release,Releases,7,"// NB: Releases of a particular Linux distro should be kept together; // in this enum, because some tests are done by integer comparison against; // the first and last known member in the family, e.g. IsRedHat().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:100,Testability,test,tests,100,"// NB: Releases of a particular Linux distro should be kept together; // in this enum, because some tests are done by integer comparison against; // the first and last known member in the family, e.g. IsRedHat().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:4,Safety,Detect,Detects,4,/// Detects the distribution using specified VFS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:25,Testability,log,logic,25,/// Driver - Encapsulate logic for constructing compilation processes; /// from a set of gcc-driver-like command line arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:48,Deployability,integrat,integrated,48,"/// The LLVM OpenMP runtime. When completed and integrated, this will become; /// the default for Clang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:48,Integrability,integrat,integrated,48,"/// The LLVM OpenMP runtime. When completed and integrated, this will become; /// the default for Clang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:146,Integrability,depend,dependencies,146,/// The legacy name for the LLVM OpenMP runtime from when it was the Intel; /// OpenMP runtime. We support this mode for users with existing; /// dependencies on this runtime library name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:25,Integrability,interface,interface,25,// FIXME: Privatize once interface is stable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:20,Deployability,install,installed,20,"/// The path to the installed clang directory, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:25,Modifiability,config,config,25,/// System directory for config files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:23,Modifiability,config,config,23,/// User directory for config files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:12,Performance,load,loader,12,"/// Dynamic loader prefix, if present",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,Testability,log,log,16,"/// The file to log CC_PRINT_PROC_STAT_FILE output to, if enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,Testability,log,log,16,"/// The file to log CC_PRINT_INTERNAL_STAT_FILE output to, if enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,Testability,log,log,16,"/// The file to log CC_PRINT_OPTIONS output to, if enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,Testability,log,log,16,"/// The file to log CC_PRINT_HEADERS output to, if enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:16,Testability,log,log,16,"/// The file to log CC_LOG_DIAGNOSTICS output to, if enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:52,Testability,log,logs,52,"/// Set CC_PRINT_OPTIONS mode, which is like -v but logs the commands to; /// CCPrintOptionsFilename or to stderr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:173,Modifiability,variab,variable,173,"/// The format of the header information that is emitted. If CC_PRINT_HEADERS; /// is set, the format is textual. Otherwise, the format is determined by the; /// enviroment variable CC_PRINT_HEADERS_FORMAT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:112,Modifiability,variab,variable,112,"/// This flag determines whether clang should filter the header information; /// that is emitted. If enviroment variable CC_PRINT_HEADERS_FILTERING is set; /// to ""only-direct-system"", only system headers that are directly included; /// from non-system headers are emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:62,Testability,log,log,62,"/// Set CC_LOG_DIAGNOSTICS mode, which causes the frontend to log diagnostics; /// to CCLogDiagnosticsFilename or to stderr, in a stable machine readable; /// format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:70,Performance,perform,performance,70,"/// Set CC_PRINT_PROC_STAT mode, which causes the driver to dump; /// performance report to CC_PRINT_PROC_STAT_FILE or to stdout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:83,Performance,perform,performance,83,"/// Set CC_PRINT_INTERNAL_STAT mode, which causes the driver to dump internal; /// performance report to CC_PRINT_INTERNAL_STAT_FILE or to stdout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:47,Availability,avail,available,47,"/// Pointer to the ExecuteCC1Tool function, if available.; /// When the clangDriver lib is used through clang.exe, this provides a; /// shortcut for executing the -cc1 command-line directly, in the same; /// process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:13,Deployability,configurat,configuration,13,/// Paths to configuration files used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:13,Modifiability,config,configuration,13,/// Paths to configuration files used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:41,Deployability,configurat,configuration,41,/// Object that stores strings read from configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:41,Modifiability,config,configuration,41,/// Object that stores strings read from configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:30,Deployability,configurat,configuration,30,/// Arguments originated from configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:30,Modifiability,config,configuration,30,/// Arguments originated from configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:56,Deployability,upgrade,upgrade,56,"/// Whether to probe for PCH files on disk, in order to upgrade; /// -include foo.h to -include-pch foo.h.pch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:262,Availability,down,down,262,"/// Cache of all the ToolChains in use by the driver.; ///; /// This maps from the string representation of a triple to a ToolChain; /// created targeting that triple. The driver owns all the ToolChain objects; /// stored in it, and will clean them up when torn down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:4,Performance,Cache,Cache,4,"/// Cache of all the ToolChains in use by the driver.; ///; /// This maps from the string representation of a triple to a ToolChain; /// created targeting that triple. The driver owns all the ToolChain objects; /// stored in it, and will clean them up when torn down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:4,Performance,Cache,Cache,4,/// Cache of known offloading architectures for the ToolChain already derived.; /// This should only be modified when we first initialize the offloading; /// toolchains.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:187,Performance,cache,cache,187,"/// Find the appropriate .crash diagonostic file for the child crash; /// under this driver and copy it out to a temporary destination with the; /// other reproducer related files (.sh, .cache, etc). If not found, suggest a; /// directory for the user to look at.; ///; /// \param ReproCrashFilename The file path to copy the .crash to.; /// \param CrashDiagDir The suggested directory for the user to look at; /// in case the search or copy fails.; ///; /// \returns If the .crash is found and successfully copied return true,; /// otherwise false and return the suggested directory in \p CrashDiagDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:10,Security,Access,Accessors,10,/// @name Accessors; /// @{; /// Name to use when invoking gcc/g++.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:51,Deployability,install,installed,51,/// Get the path to where the clang executable was installed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:236,Deployability,update,update,236,"/// @}; /// @name Primary Functionality; /// @{; /// CreateOffloadingDeviceToolChains - create all the toolchains required to; /// support offloading devices given the programming models specified in the; /// current compilation. Also, update the host tool chain kind accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:245,Availability,error,error,245,"/// BuildCompilation - Construct a compilation object for a command; /// line argument vector.; ///; /// \return A compilation, or 0 if none was built for the given; /// argument vector. A null return value does not necessarily; /// indicate an error condition, the diagnostics should be queried; /// to determine if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:320,Availability,error,error,320,"/// BuildCompilation - Construct a compilation object for a command; /// line argument vector.; ///; /// \return A compilation, or 0 if none was built for the given; /// argument vector. A null return value does not necessarily; /// indicate an error condition, the diagnostics should be queried; /// to determine if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:52,Performance,perform,perform,52,"/// BuildActions - Construct the list of actions to perform for the; /// given arguments, which are only done for a single architecture.; ///; /// \param C - The compilation that is being built.; /// \param Args - The input arguments.; /// \param Actions - The list to store the resulting actions onto.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:61,Performance,perform,perform,61,"/// BuildUniversalActions - Construct the list of actions to perform; /// for the given arguments, which may require a universal build.; ///; /// \param C - The compilation that is being built.; /// \param TC - The default host tool chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:62,Performance,perform,perform,62,/// BuildOffloadingActions - Construct the list of actions to perform for the; /// offloading toolchain that will be embedded in the host.; ///; /// \param C - The compilation that is being built.; /// \param Args - The input arguments.; /// \param Input - The input type and arguments; /// \param HostAction - The host action used in the offloading toolchain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:216,Availability,error,errors,216,/// Returns the set of bound architectures active for this offload kind.; /// If there are no bound architctures we return a set containing only the; /// empty string. The \p SuppressError option is used to suppress errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:275,Availability,error,errors,275,"/// ExecuteCompilation - Execute the compilation according to the command line; /// arguments and return an appropriate exit code.; ///; /// This routine handles additional processing that must be done in addition; /// to just running the subprocesses, for example reporting errors, setting; /// up response files, removing temporary files, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:146,Integrability,rout,routine,146,"/// ExecuteCompilation - Execute the compilation according to the command line; /// arguments and return an appropriate exit code.; ///; /// This routine handles additional processing that must be done in addition; /// to just running the subprocesses, for example reporting errors, setting; /// up response files, removing temporary files, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:47,Performance,perform,perform,47,"/// BuildJobsForAction - Construct the jobs to perform for the action \p A and; /// return an InputInfo for the result of running \p A. Will only construct; /// jobs for a given (Action, ToolChain, BoundArch, DeviceKind) tuple once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:205,Availability,robust,robust,205,/// GetTemporaryPath - Return the pathname of a temporary file to use; /// as part of compilation; the file will have the given prefix and suffix.; ///; /// GCC goes to extra lengths here to be a bit more robust.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:27,Performance,perform,performing,27,/// Returns true if we are performing any kind of LTO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:39,Performance,perform,performed,39,/// Get the specific kind of LTO being performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:79,Availability,error,error,79,/// Tries to load options from configuration files.; ///; /// \returns true if error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:31,Deployability,configurat,configuration,31,/// Tries to load options from configuration files.; ///; /// \returns true if error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:31,Modifiability,config,configuration,31,/// Tries to load options from configuration files.; ///; /// \returns true if error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:13,Performance,load,load,13,/// Tries to load options from configuration files.; ///; /// \returns true if error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:127,Availability,error,error,127,/// Tries to load options from default configuration files (deduced from; /// executable filename).; ///; /// \returns true if error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:39,Deployability,configurat,configuration,39,/// Tries to load options from default configuration files (deduced from; /// executable filename).; ///; /// \returns true if error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:39,Modifiability,config,configuration,39,/// Tries to load options from default configuration files (deduced from; /// executable filename).; ///; /// \returns true if error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:13,Performance,load,load,13,/// Tries to load options from default configuration files (deduced from; /// executable filename).; ///; /// \returns true if error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:157,Availability,error,error,157,"/// Read options from the specified file.; ///; /// \param [in] FileName File to read.; /// \param [in] Search and expansion options.; /// \returns true, if error occurred while reading.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:76,Performance,cache,cache,76,"/// Retrieves a ToolChain for a particular \p Target triple.; ///; /// Will cache ToolChains for the life of the driver object, and create them; /// on-demand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:386,Performance,cache,cache,386,"/// @}; /// Retrieves a ToolChain for a particular device \p Target triple; ///; /// \param[in] HostTC is the host ToolChain paired with the device; ///; /// \param[in] TargetDeviceOffloadKind (e.g. OFK_Cuda/OFK_OpenMP/OFK_SYCL) is; /// an Offloading action that is optionally passed to a ToolChain (used by; /// CUDA, to specify if it's used in conjunction with OpenMP); ///; /// Will cache ToolChains for the life of the driver object, and create them; /// on-demand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:55,Performance,cache,cache,55,"/// Helper used in BuildJobsForAction. Doesn't use the cache when building; /// jobs specifically for the given action, but will use the cache when; /// building jobs for the Action's inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:137,Performance,cache,cache,137,"/// Helper used in BuildJobsForAction. Doesn't use the cache when building; /// jobs specifically for the given action, but will use the cache when; /// building jobs for the Action's inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:33,Performance,cache,cache-path,33,/// Compute the default -fmodule-cache-path.; /// \return True if the system provides a default cache directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:96,Performance,cache,cache,96,/// Compute the default -fmodule-cache-path.; /// \return True if the system provides a default cache directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:37,Performance,optimiz,optimization,37,/// \return True if the last defined optimization level is -Ofast.; /// And False otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:178,Availability,failure,failure,178,"/// Returns the driver mode option's value, i.e. `X` in `--driver-mode=X`. If \p; /// Args doesn't mention one explicitly, tries to deduce from `ProgName`.; /// Returns empty on failure.; /// Common values are ""gcc"", ""g++"", ""cpp"", ""cl"" and ""flang"". Returned value need; /// not be one of these.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/InputInfo.h:16,Integrability,Wrap,Wrapper,16,/// InputInfo - Wrapper for information about an input source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/InputInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/InputInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:367,Usability,learn,learn,367,"/// The encoding to use when writing response files on Windows. Ignored on; /// other host OSes.; ///; /// Windows use cases: - GCC and Binutils on mingw only accept ANSI response; /// files encoded with the system current code page.; /// - MSVC's CL.exe and LINK.exe accept UTF16 on Windows.; /// - Clang accepts both UTF8 and UTF16.; ///; /// FIXME: When GNU tools learn how to parse UTF16 on Windows, we should; /// always use UTF16 for Windows, which is the Windows official encoding for; /// international characters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Job.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:81,Availability,error,error,81,"// FIXME: This really shouldn't be copyable, but is currently copied in some; // error handling in Driver::generateCompilationDiagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Job.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:107,Modifiability,variab,variables,107,"/// Sets the environment to be used by the new process.; /// \param NewEnvironment An array of environment variables.; /// \remark If the environment remains unset, then the environment; /// from the parent process will be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Job.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:35,Availability,avail,available,35,"/// Use the CC1 tool callback when available, to avoid creating a new process",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Job.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:49,Safety,avoid,avoid,49,"/// Use the CC1 tool callback when available, to avoid creating a new process",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Job.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:36,Performance,perform,perform,36,/// JobList - A sequence of jobs to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Job.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:4,Usability,Clear,Clear,4,/// Clear the job list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Job.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h:183,Testability,assert,assert,183,"/// GCCSuffix, OSSuffix & IncludeSuffix will be appended directly to the; /// sysroot string so they must either be empty or begin with a '/' character.; /// This is enforced with an assert in the constructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Multilib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h:25,Deployability,install,installation,25,"/// Get the detected GCC installation path suffix for the multi-arch; /// target variant. Always starts with a '/', unless empty",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Multilib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h:12,Safety,detect,detected,12,"/// Get the detected GCC installation path suffix for the multi-arch; /// target variant. Always starts with a '/', unless empty",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Multilib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h:12,Safety,detect,detected,12,"/// Get the detected os path suffix for the multi-arch; /// target variant. Always starts with a '/', unless empty",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Multilib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h:32,Usability,simpl,simplify,32,"/// Uses regular expressions to simplify flags used for multilib selection.; /// For example, we may wish both -mfloat-abi=soft and -mfloat-abi=softfp to; /// be treated as -mfloat-abi=soft.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Multilib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h:25,Deployability,install,installation,25,"/// Get the detected GCC installation path suffix for the multi-arch; /// target variant. Always starts with a '/', unless empty",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h:12,Safety,detect,detected,12,"/// Get the detected GCC installation path suffix for the multi-arch; /// target variant. Always starts with a '/', unless empty",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h:16,Deployability,install,installation,16,/// Set the GCC installation path suffix.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h:12,Safety,detect,detected,12,"/// Get the detected os path suffix for the multi-arch; /// target variant. Always starts with a '/', unless empty",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/MultilibBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h:13,Availability,error,error,13,// TODO: Add error checking from ClangOffloadBundler.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h:38,Availability,error,error,38,// List bundle IDs. Return true if an error was found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h:380,Modifiability,variab,variable,380,"// CompressedOffloadBundle represents the format for the compressed offload; // bundles.; //; // The format is as follows:; // - Magic Number (4 bytes) - A constant ""CCOB"".; // - Version (2 bytes); // - Compression Method (2 bytes) - Uses the values from; // llvm::compression::Format.; // - Uncompressed Size (4 bytes).; // - Truncated MD5 Hash (8 bytes).; // - Compressed Data (variable length).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h:341,Security,Hash,Hash,341,"// CompressedOffloadBundle represents the format for the compressed offload; // bundles.; //; // The format is as follows:; // - Magic Number (4 bytes) - A constant ""CCOB"".; // - Version (2 bytes); // - Compression Method (2 bytes) - Uses the values from; // llvm::compression::Format.; // - Uncompressed Size (4 bytes).; // - Truncated MD5 Hash (8 bytes).; // - Compressed Data (variable length).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OptionUtils.h:107,Availability,error,error,107,"/// Return the value of the last argument as an integer, or a default. If Diags; /// is non-null, emits an error if the argument is given, but non-integral.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/OptionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OptionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h:9,Security,Sanitiz,SanitizerArgs,9,"//===--- SanitizerArgs.h - Arguments for sanitizer tools -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h:41,Security,sanitiz,sanitizer,41,"//===--- SanitizerArgs.h - Arguments for sanitizer tools -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h:15,Security,sanitiz,sanitizer,15,/// Parses the sanitizer arguments from an argument list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Tool.h:132,Availability,failure,failures,132,"/// Does this tool have ""good"" standardized diagnostics, or should the; /// driver add an additional ""command failed"" diagnostic on failures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Tool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Tool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Tool.h:37,Performance,perform,perform,37,"/// ConstructJob - Construct jobs to perform the action \p JA,; /// writing to \p Output and with \p Inputs, and add the jobs to; /// \p C.; ///; /// \param TCArgs - The argument list for this toolchain, with any; /// tool chain specific translations applied.; /// \param LinkingOutput - If this output will eventually feed the; /// linker, then this is the final output name of the linked image.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Tool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Tool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Tool.h:22,Performance,perform,perform,22,"/// Construct jobs to perform the action \p JA, writing to the \p Outputs and; /// with \p Inputs, and add the jobs to \p C. The default implementation; /// assumes a single output and is expected to be overloaded for the tools; /// that support multiple inputs.; ///; /// \param TCArgs The argument list for this toolchain, with any; /// tool chain specific translations applied.; /// \param LinkingOutput If this output will eventually feed the; /// linker, then this is the final output name of the linked image.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Tool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Tool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:16,Security,Access,Access,16,/// ToolChain - Access to tools for a single platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:25,Performance,Cache,CachedRTTIArg,25,// We need to initialize CachedRTTIArg before CachedRTTIMode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:46,Performance,Cache,CachedRTTIMode,46,// We need to initialize CachedRTTIArg before CachedRTTIMode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:3,Security,Access,Accessors,3,// Accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:100,Integrability,depend,depends,100,"/// Get the toolchain's aux triple, if it has one.; ///; /// Exactly what the aux triple represents depends on the toolchain, but for; /// example when compiling CUDA code for the GPU, the triple might be NVPTX,; /// while the aux triple is the host (CPU) toolchain, e.g. x86-linux-gnu.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:557,Modifiability,extend,extended,557,"/// Get flags suitable for multilib selection, based on the provided clang; /// command line arguments. The command line arguments aren't suitable to be; /// used directly for multilib selection because they are not normalized and; /// normalization is a complex process. The result of this function is similar; /// to clang command line arguments except that the list of arguments is; /// incomplete. Only certain command line arguments are processed. If more; /// command line arguments are needed for multilib selection then this; /// function should be extended.; /// To allow users to find out what flags are returned, clang accepts a; /// -print-multi-flags-experimental argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:134,Performance,perform,perform,134,"// Tool access.; /// TranslateArgs - Create a new derived argument list for any argument; /// translations this ToolChain may wish to perform, or 0 if no tool chain; /// specific translations are needed. If \p DeviceOffloadKind is specified; /// the translation specific for that offload kind is performed.; ///; /// \param BoundArch - The bound architecture name, or 0.; /// \param DeviceOffloadKind - The device offload kind used for the; /// translation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:296,Performance,perform,performed,296,"// Tool access.; /// TranslateArgs - Create a new derived argument list for any argument; /// translations this ToolChain may wish to perform, or 0 if no tool chain; /// specific translations are needed. If \p DeviceOffloadKind is specified; /// the translation specific for that offload kind is performed.; ///; /// \param BoundArch - The bound architecture name, or 0.; /// \param DeviceOffloadKind - The device offload kind used for the; /// translation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:8,Security,access,access,8,"// Tool access.; /// TranslateArgs - Create a new derived argument list for any argument; /// translations this ToolChain may wish to perform, or 0 if no tool chain; /// specific translations are needed. If \p DeviceOffloadKind is specified; /// the translation specific for that offload kind is performed.; ///; /// \param BoundArch - The bound architecture name, or 0.; /// \param DeviceOffloadKind - The device offload kind used for the; /// translation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:96,Energy Efficiency,Allocate,AllocatedArgs,96,"/// Append the argument following \p A to \p DAL assuming \p A is an Xarch; /// argument. If \p AllocatedArgs is null pointer, synthesized arguments are; /// added to \p DAL, otherwise they are appended to \p AllocatedArgs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:209,Energy Efficiency,Allocate,AllocatedArgs,209,"/// Append the argument following \p A to \p DAL assuming \p A is an Xarch; /// argument. If \p AllocatedArgs is null pointer, synthesized arguments are; /// added to \p DAL, otherwise they are appended to \p AllocatedArgs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:359,Availability,error,error,359,"/// Returns the linker path, respecting the -fuse-ld= argument to determine; /// the linker suffix or name.; /// If LinkerIsLLD is non-nullptr, it is set to true if the returned linker; /// is LLD. If it's set, it can be assumed that the linker is LLD built; /// at the same revision as clang, and clang can make assumptions about; /// LLD's supported flags, error output, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:64,Deployability,integrat,integrated-as,64,/// IsIntegratedAssemblerDefault - Does this tool chain enable -integrated-as; /// by default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:64,Integrability,integrat,integrated-as,64,/// IsIntegratedAssemblerDefault - Does this tool chain enable -integrated-as; /// by default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:77,Deployability,integrat,integrated-objemitter,77,/// IsNonIntegratedBackendSupported - Does this tool chain support; /// -fno-integrated-objemitter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:77,Integrability,integrat,integrated-objemitter,77,/// IsNonIntegratedBackendSupported - Does this tool chain support; /// -fno-integrated-objemitter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:42,Deployability,integrat,integrated,42,/// Check if the toolchain should use the integrated assembler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:42,Integrability,integrat,integrated,42,/// Check if the toolchain should use the integrated assembler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:42,Deployability,integrat,integrated,42,/// Check if the toolchain should use the integrated backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:42,Integrability,integrat,integrated,42,/// Check if the toolchain should use the integrated backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:77,Deployability,integrat,integrated,77,/// Check if the toolchain should use AsmParser to parse inlineAsm when; /// integrated assembler is not default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:77,Integrability,integrat,integrated,77,/// Check if the toolchain should use AsmParser to parse inlineAsm when; /// integrated assembler is not default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:86,Modifiability,extend,extended-block-signature,86,/// IsEncodeExtendedBlockSignatureDefault - Does this tool chain enable; /// -fencode-extended-block-signature by default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:38,Modifiability,variab,variable,38,/// Get the default trivial automatic variable initialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:4,Testability,Test,Test,4,/// Test whether this toolchain supports outline atomics by default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:4,Testability,Test,Test,4,/// Test whether this toolchain defaults to PIC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:4,Testability,Test,Test,4,/// Test whether this toolchain defaults to PIE.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:4,Testability,Test,Tests,4,"/// Tests whether this toolchain forces its default for PIC, PIE or; /// non-PIC. If this returns true, any PIC related flags should be ignored; /// and instead the results of \c isPICDefault() and \c isPIEDefault(const; /// llvm::opt::ArgList &Args) are used exclusively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:240,Deployability,deploy,deployment,240,"/// ComputeEffectiveClangTriple - Return the Clang triple to use for this; /// target, which may take into account the command line arguments. For; /// example, on Darwin the -mmacosx-version-min= command line argument (which; /// sets the deployment target) determines the version in the triple passed to; /// Clang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:144,Deployability,Deploy,DeploymentTarget,144,/// getDefaultObjCRuntime - Return the default Objective-C runtime; /// for this platform.; ///; /// FIXME: this really belongs on some sort of DeploymentTarget abstraction,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:200,Deployability,Deploy,DeploymentTarget,200,"/// hasBlocksRuntime - Given that the user is compiling with; /// -fblocks, does this tool chain guarantee the existence of a; /// blocks runtime?; ///; /// FIXME: this really belongs on some sort of DeploymentTarget abstraction",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:92,Testability,log,logic,92,"/// Return the sysroot, possibly searching for a default sysroot using; /// target-specific logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:73,Integrability,rout,routine,73,/// Add the clang cc1 arguments for system include paths.; ///; /// This routine is responsible for adding the necessary cc1 arguments to; /// include headers from standard system header directories.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:22,Availability,avail,available,22,// Detect the highest available version of libc++ in include path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:3,Safety,Detect,Detect,3,// Detect the highest available version of libc++ in include path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:59,Safety,unsafe,unsafe,59,"/// If a runtime library exists that sets global flags for unsafe floating; /// point math, return true.; ///; /// This checks for presence of the -Ofast, -ffast-math or -funsafe-math flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:96,Safety,unsafe,unsafe,96,"/// AddFastMathRuntimeIfAvailable - If a runtime library exists that sets; /// global flags for unsafe floating point math, add it and return true.; ///; /// This checks for presence of the -Ofast, -ffast-math or -funsafe-math flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:56,Availability,avail,availible,56,/// getSystemGPUArchs - Use a tool to detect the user's availible GPUs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:38,Safety,detect,detect,38,/// getSystemGPUArchs - Use a tool to detect the user's availible GPUs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:32,Availability,avail,available,32,/// Return sanitizers which are available in this toolchain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:11,Security,sanitiz,sanitizers,11,/// Return sanitizers which are available in this toolchain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:11,Security,sanitiz,sanitizers,11,/// Return sanitizers which are enabled by default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Types.h:129,Safety,Avoid,AvoidConcat,129,"/// isDerivedFromC - Is the input derived from C.; ///; /// That is, does the lexer follow the rules of; /// TokenConcatenation::AvoidConcat. If this is the case, the preprocessor may; /// add and remove whitespace between tokens. Used to determine whether the; /// input can be processed by -fminimize-whitespace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Types.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Types.h:98,Testability,log,logic,98,"/// isSrcFile - Is this a source file, i.e. something that still has to be; /// preprocessed. The logic behind this is the same that decides if the first; /// compilation phase is a preprocessing one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Driver/Types.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Types.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Edit/Rewriters.h:9,Modifiability,Rewrite,Rewriters,9,"//===--- Rewriters.h - Rewritings ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Edit/Rewriters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Edit/Rewriters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:170,Usability,simpl,simplifies,170,"/// DocComment is a vector of RawComment::CommentLine.; ///; /// Each line represents one line of striped documentation comment,; /// with source range information. This simplifies calculating the source; /// location of a character in the doc comment for pointing back to the source; /// file.; /// e.g.; /// \code; /// /// This is a documentation comment; /// ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~' First line.; /// /// with multiple lines.; /// ^~~~~~~~~~~~~~~~~~~~~~~' Second line.; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:64,Modifiability,variab,variables,64,/// This holds information associated with Objective-C instance variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:66,Integrability,interface,interface,66,/// Determine whether the Category is derived from external class interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:55,Integrability,interface,interfaces,55,/// This holds information associated with Objective-C interfaces/classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:55,Integrability,protocol,protocols,55,/// This holds information associated with Objective-C protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:154,Availability,alive,alive,154,"/// Create and add a global variable record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:338,Availability,alive,alive,338,"/// Create and add a global variable record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:28,Modifiability,variab,variable,28,"/// Create and add a global variable record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:147,Availability,alive,alive,147,"/// Create and add a function record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:331,Availability,alive,alive,331,"/// Create and add a function record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:153,Availability,alive,alive,153,"/// Create and add an enum constant record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:337,Availability,alive,alive,337,"/// Create and add an enum constant record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:144,Availability,alive,alive,144,"/// Create and add an enum record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:328,Availability,alive,alive,328,"/// Create and add an enum record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:151,Availability,alive,alive,151,"/// Create and add a record field record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:335,Availability,alive,alive,335,"/// Create and add a record field record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:145,Availability,alive,alive,145,"/// Create and add a record record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:329,Availability,alive,alive,329,"/// Create and add a record record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:160,Availability,alive,alive,160,"/// Create and add an Objective-C category record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:344,Availability,alive,alive,344,"/// Create and add an Objective-C category record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:161,Availability,alive,alive,161,"/// Create and add an Objective-C interface record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:345,Availability,alive,alive,345,"/// Create and add an Objective-C interface record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:34,Integrability,interface,interface,34,"/// Create and add an Objective-C interface record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:158,Availability,alive,alive,158,"/// Create and add an Objective-C method record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:342,Availability,alive,alive,342,"/// Create and add an Objective-C method record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:160,Availability,alive,alive,160,"/// Create and add an Objective-C property record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:344,Availability,alive,alive,344,"/// Create and add an Objective-C property record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:169,Availability,alive,alive,169,"/// Create and add an Objective-C instance variable record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:353,Availability,alive,alive,353,"/// Create and add an Objective-C instance variable record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:43,Modifiability,variab,variable,43,"/// Create and add an Objective-C instance variable record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:160,Availability,alive,alive,160,"/// Create and add an Objective-C protocol record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:344,Availability,alive,alive,344,"/// Create and add an Objective-C protocol record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:34,Integrability,protocol,protocol,34,"/// Create and add an Objective-C protocol record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:147,Availability,alive,alive,147,"/// Create a macro definition record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSRForMacro(StringRef Name,; /// SourceLocation SL, const SourceManager &SM) is a helper method to generate; /// the USR for the macro and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:394,Availability,alive,alive,394,"/// Create a macro definition record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSRForMacro(StringRef Name,; /// SourceLocation SL, const SourceManager &SM) is a helper method to generate; /// the USR for the macro and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:138,Availability,alive,alive,138,"/// Create a typedef record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:322,Availability,alive,alive,322,"/// Create a typedef record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/APIIgnoresList.h:25,Security,access,access,25,/// A type that provides access to a new line separated list of symbol names to; /// ignore when extracting API information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/APIIgnoresList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/APIIgnoresList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/APIIgnoresList.h:131,Availability,Error,Error,131,/// The API to use for generating from the files at \p IgnoresFilePathList.; ///; /// \returns an initialized APIIgnoresList or an Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/APIIgnoresList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/APIIgnoresList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h:18,Availability,Avail,AvailabilityInfo,18,"//===- ExtractAPI/AvailabilityInfo.h - Availability Info --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the AvailabilityInfo struct that collects availability; /// attributes of a symbol.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h:39,Availability,Avail,Availability,39,"//===- ExtractAPI/AvailabilityInfo.h - Availability Info --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the AvailabilityInfo struct that collects availability; /// attributes of a symbol.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h:418,Availability,Avail,AvailabilityInfo,418,"//===- ExtractAPI/AvailabilityInfo.h - Availability Info --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the AvailabilityInfo struct that collects availability; /// attributes of a symbol.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h:456,Availability,avail,availability,456,"//===- ExtractAPI/AvailabilityInfo.h - Availability Info --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the AvailabilityInfo struct that collects availability; /// attributes of a symbol.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h:11,Availability,avail,availability,11,/// Stores availability attributes of a symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h:30,Availability,avail,availability,30,/// The domain for which this availability info item applies,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h:22,Availability,Avail,AvailabilityInfo,22,/// Determine if this AvailabilityInfo represents the default availability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h:62,Availability,avail,availability,62,/// Determine if this AvailabilityInfo represents the default availability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/AvailabilityInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h:145,Testability,log,logic,145,"/// Build FunctionSignature for a function-like declaration \c FunctionT like; /// FunctionDecl, ObjCMethodDecl, or CXXMethodDecl.; ///; /// The logic and implementation of building a signature for a FunctionDecl,; /// CXXMethodDecl, and ObjCMethodDecl are exactly the same, but they do not; /// share a common base. This template helps reuse the code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h:37,Modifiability,variab,variable,37,/// Build DeclarationFragments for a variable declaration VarDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h:50,Integrability,interface,interface,50,/// Build DeclarationFragments for an Objective-C interface declaration; /// ObjCInterfaceDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h:50,Integrability,protocol,protocol,50,/// Build DeclarationFragments for an Objective-C protocol declaration; /// ObjCProtocolDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h:47,Modifiability,variab,variable,47,/// Build DeclarationFragments for a parameter variable declaration; /// ParmVarDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:450,Integrability,interface,interface,450,"//===- ExtractAPI/ExtractAPIVisitor.h ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the ExtractAPVisitor AST visitation interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:41,Modifiability,inherit,inheritance,41,// FIXME: store AccessSpecifier given by inheritance,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:16,Security,Access,AccessSpecifier,16,// FIXME: store AccessSpecifier given by inheritance,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:20,Modifiability,inherit,inherited,20,// skip classes not inherited as public,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:19,Modifiability,variab,variables,19,// Skip non-global variables in records (struct/union/class) but not static; // members.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:14,Modifiability,variab,variables,14,// Skip local variables inside function or method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:55,Modifiability,variab,variable,55,// Build declaration fragments and sub-heading for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:18,Modifiability,variab,variable,18,// Add the global variable record to the API set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:3,Integrability,Inject,Inject,3,// Inject template fragments before class fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:3,Security,Inject,Inject,3,// Inject template fragments before class fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:55,Modifiability,variab,variable,55,// Build declaration fragments and sub-heading for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:3,Integrability,Inject,Inject,3,// Inject template fragments before var fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:3,Security,Inject,Inject,3,// Inject template fragments before var fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:55,Modifiability,variab,variable,55,// Build declaration fragments and sub-heading for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:55,Modifiability,variab,variable,55,// Build declaration fragments and sub-heading for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:55,Integrability,interface,interface,55,// Build declaration fragments and sub-heading for the interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:55,Integrability,protocol,protocol,55,// Build declaration fragments and sub-heading for the protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:64,Modifiability,variab,variable,64,// Build declaration fragments and sub-heading for the instance variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h:439,Integrability,Wrap,WrappingExtractAPIAction,439,"//===- ExtractAPI/FrontendActions.h -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the ExtractAPIAction and WrappingExtractAPIAction frontend; /// actions.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h:4,Integrability,Wrap,Wrap,4,"/// Wrap ExtractAPIAction on top of a pre-existing action; ///; /// Used when the ExtractAPI action needs to be executed as a side effect of a; /// regular compilation job. Unlike ExtarctAPIAction, this is meant to be used; /// on regular source files ( .m , .c files) instead of header files",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h:25,Integrability,wrap,wrapper,25,/// Flag to check if the wrapper front end action's consumer is; /// craeted or not,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h:95,Integrability,Wrap,Wrapper,95,/// Called after executing the action on the synthesized input buffer.; ///; /// Executes both Wrapper and ExtractAPIBase end source file; /// actions. This is the place where all the gathered symbol graph; /// information is emited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h:443,Integrability,interface,interface,443,"//===- ExtractAPI/Serialization/SerializerBase.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the ExtractAPI APISetVisitor interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h:13,Integrability,interface,interface,13,/// The base interface of visitors for API information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h:19,Modifiability,variab,variable,19,/// Visit a global variable record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h:4,Integrability,Wrap,Wrap,4,/// Wrap serialize(void) and write out the serialized JSON object to \p os.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h:25,Modifiability,inherit,inherited,25,/// The source symbol is inherited from the target symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h:82,Integrability,protocol,protocol,82,/// The source symbol conforms to the target symbol.; /// For example Objective-C protocol conformances.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h:100,Modifiability,extend,extending,100,/// The source symbol is an extension to the target symbol.; /// For example Objective-C categories extending an external type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h:19,Modifiability,variab,variable,19,/// Visit a global variable record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:417,Modifiability,config,configurably,417,"//===--- Format.h - Format C++ code -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Various functions to configurably format source code.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:35,Modifiability,config,configure,35,/// The ``FormatStyle`` is used to configure the formatting to follow; /// specific guidelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:84,Usability,guid,guidelines,84,/// The ``FormatStyle`` is used to configure the formatting to follow; /// specific guidelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:23,Modifiability,Inherit,InheritParentConfig,23,// If the BasedOn: was InheritParentConfig and this style needs the file from; // the parent directories. It is not part of the actual style for formatting.; // Thus the // instead of ///.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:35,Security,access,access,35,"/// The extra indent or outdent of access modifiers, e.g. ``public:``.; /// \version 3.3",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:81,Testability,test,test,81,"/// Align array column and left justify the columns e.g.:; /// \code; /// struct test demo[] =; /// {; /// {56, 23, ""hello""},; /// {-1, 93463, ""world""},; /// {7, 5, ""!!"" }; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:82,Testability,test,test,82,"/// Align array column and right justify the columns e.g.:; /// \code; /// struct test demo[] =; /// {; /// {56, 23, ""hello""},; /// {-1, 93463, ""world""},; /// { 7, 5, ""!!""}; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:87,Testability,log,log,87,"/// Whether aligning is enabled.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:124,Testability,log,log,124,"/// Whether aligning is enabled.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:238,Testability,log,log,238,"/// Whether aligning is enabled.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:275,Testability,log,log,275,"/// Whether aligning is enabled.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:95,Testability,log,log,95,"/// Whether to align across empty lines.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:132,Testability,log,log,132,"/// Whether to align across empty lines.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:251,Testability,log,log,251,"/// Whether to align across empty lines.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:288,Testability,log,log,288,"/// Whether to align across empty lines.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; ///; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:92,Testability,log,log,92,"/// Whether to align across comments.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:129,Testability,log,log,129,"/// Whether to align across comments.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:265,Testability,log,log,265,"/// Whether to align across comments.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:302,Testability,log,log,302,"/// Whether to align across comments.; /// \code; /// true:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// /* A comment. */; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:163,Testability,log,log,163,"/// Whether aligned case labels are aligned on the colon, or on the; /// , or on the tokens after the colon.; /// \code; /// true:; /// switch (level) {; /// case log::info : return ""info:"";; /// case log::warning: return ""warning:"";; /// default : return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:201,Testability,log,log,201,"/// Whether aligned case labels are aligned on the colon, or on the; /// , or on the tokens after the colon.; /// \code; /// true:; /// switch (level) {; /// case log::info : return ""info:"";; /// case log::warning: return ""warning:"";; /// default : return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:316,Testability,log,log,316,"/// Whether aligned case labels are aligned on the colon, or on the; /// , or on the tokens after the colon.; /// \code; /// true:; /// switch (level) {; /// case log::info : return ""info:"";; /// case log::warning: return ""warning:"";; /// default : return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:353,Testability,log,log,353,"/// Whether aligned case labels are aligned on the colon, or on the; /// , or on the tokens after the colon.; /// \code; /// true:; /// switch (level) {; /// case log::info : return ""info:"";; /// case log::warning: return ""warning:"";; /// default : return """";; /// }; ///; /// false:; /// switch (level) {; /// case log::info: return ""info:"";; /// case log::warning: return ""warning:"";; /// default: return """";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:70,Integrability,wrap,wrapped,70,/// Do not align operands of binary and ternary expressions.; /// The wrapped lines are indented ``ContinuationIndentWidth`` spaces from; /// the start of the line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:328,Integrability,wrap,wrapped,328,"/// Horizontally align operands of binary and ternary expressions.; ///; /// Specifically, this aligns operands of a single expression that needs; /// to be split over multiple lines, e.g.:; /// \code; /// int aaa = bbbbbbbbbbbbbbb +; /// ccccccccccccccc;; /// \endcode; ///; /// When ``BreakBeforeBinaryOperators`` is set, the wrapped operator is; /// aligned with the operand on the first line.; /// \code; /// int aaa = bbbbbbbbbbbbbbb; /// + ccccccccccccccc;; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:211,Integrability,wrap,wrapped,211,"/// Horizontally align operands of binary and ternary expressions.; ///; /// This is similar to ``AO_Align``, except when; /// ``BreakBeforeBinaryOperators`` is set, the operator is un-indented so; /// that the wrapped operand is aligned with the operand on the first line.; /// \code; /// int aaa = bbbbbbbbbbbbbbb; /// + ccccccccccccccc;; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,Usability,simpl,simple,10,"/// For a simple ``noexcept`` there is no line break allowed, but when we; /// have a condition it is.; /// \code; /// void foo(int arg1,; /// double arg2) noexcept;; ///; /// void bar(int arg1, double arg2); /// noexcept(noexcept(baz(arg1)) &&; /// noexcept(baz(arg2)));; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Depend,Dependent,4,"/// Dependent on the value, ``while (true) { continue; }`` can be put on a; /// single line.; /// \version 3.5",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:43,Integrability,contract,contracted,43,"/// If ``true``, short case labels will be contracted to a single line.; /// \code; /// true: false:; /// switch (a) { vs. switch (a) {; /// case 1: x = 1; break; case 1:; /// case 2: return; x = 1;; /// } break;; /// case 2:; /// return;; /// }; /// \endcode; /// \version 3.6",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Depend,Dependent,4,"/// Dependent on the value, ``int f() { return 0; }`` can be put on a; /// single line.; /// \version 3.5",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Depend,Dependent,4,"/// Dependent on the value, ``if (a) return;`` can be put on a single line.; /// \version 3.3",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Depend,Dependent,4,"/// Dependent on the value, ``auto lambda []() { return 0; }`` can be put on a; /// single line.; /// \version 9",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:220,Integrability,wrap,wrapping,220,"/// If ``true``, always break before multiline string literals.; ///; /// This flag is mean to make cases where there are multiple multiline strings; /// in a file look more consistent. Thus, it will only take effect if wrapping; /// the string at that point leads to it being indented; /// ``ContinuationIndentWidth`` spaces from the start of the line.; /// \code; /// true: false:; /// aaaa = vs. aaaa = ""bbbb""; /// ""bbbb"" ""cccc"";; /// ""cccc"";; /// \endcode; /// \version 3.4",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:387,Deployability,configurat,configuration,387,"/// A vector of strings that should be interpreted as attributes/qualifiers; /// instead of identifiers. This can be useful for language extensions or; /// static analyzer annotations.; ///; /// For example:; /// \code; /// x = (char *__capability)&y;; /// int function(void) __unused;; /// void only_writes_to_buffer(char *__output buffer);; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// AttributeMacros: ['__capability', '__output', '__unused']; /// \endcode; ///; /// \version 12",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:387,Modifiability,config,configuration,387,"/// A vector of strings that should be interpreted as attributes/qualifiers; /// instead of identifiers. This can be useful for language extensions or; /// static analyzer annotations.; ///; /// For example:; /// \code; /// x = (char *__capability)&y;; /// int function(void) __unused;; /// void only_writes_to_buffer(char *__output buffer);; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// AttributeMacros: ['__capability', '__output', '__unused']; /// \endcode; ///; /// \version 12",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:419,Modifiability,config,configured,419,"/// A vector of strings that should be interpreted as attributes/qualifiers; /// instead of identifiers. This can be useful for language extensions or; /// static analyzer annotations.; ///; /// For example:; /// \code; /// x = (char *__capability)&y;; /// int function(void) __unused;; /// void only_writes_to_buffer(char *__output buffer);; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// AttributeMacros: ['__capability', '__output', '__unused']; /// \endcode; ///; /// \version 12",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:22,Integrability,wrap,wrap,22,/// Different ways to wrap braces after control statements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,Integrability,wrap,wrap,10,/// Never wrap braces after a control statement.; /// \code; /// if (foo()) {; /// } else {; /// }; /// for (int i = 0; i < 10; ++i) {; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:9,Integrability,wrap,wrap,9,/// Only wrap braces after a multi-line control statement.; /// \code; /// if (foo && bar &&; /// baz); /// {; /// quux();; /// }; /// while (foo || bar) {; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:11,Integrability,wrap,wrap,11,/// Always wrap braces after a control statement.; /// \code; /// if (foo()); /// {; /// } else; /// {}; /// for (int i = 0; i < 10; ++i); /// {}; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:29,Integrability,wrap,wrapping,29,/// Precise control over the wrapping of braces.; /// \code; /// # Should be declared this way:; /// BreakBeforeBraces: Custom; /// BraceWrapping:; /// AfterClass: true; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap case labels.; /// \code; /// false: true:; /// switch (foo) { vs. switch (foo) {; /// case 1: { case 1:; /// bar(); {; /// break; bar();; /// } break;; /// default: { }; /// plop(); default:; /// } {; /// } plop();; /// }; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap class definitions.; /// \code; /// true:; /// class foo; /// {};; ///; /// false:; /// class foo {};; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap control statements (``if``/``for``/``while``/``switch``/..).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap enum definitions.; /// \code; /// true:; /// enum X : int; /// {; /// B; /// };; ///; /// false:; /// enum X : int { B };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap function definitions.; /// \code; /// true:; /// void foo(); /// {; /// bar();; /// bar2();; /// }; ///; /// false:; /// void foo() {; /// bar();; /// bar2();; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap namespace definitions.; /// \code; /// true:; /// namespace; /// {; /// int foo();; /// int bar();; /// }; ///; /// false:; /// namespace {; /// int foo();; /// int bar();; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,"/// Wrap ObjC definitions (interfaces, implementations...).; /// \note; /// @autoreleasepool and @synchronized blocks are wrapped; /// according to ``AfterControlStatement`` flag.; /// \endnote",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:27,Integrability,interface,interfaces,27,"/// Wrap ObjC definitions (interfaces, implementations...).; /// \note; /// @autoreleasepool and @synchronized blocks are wrapped; /// according to ``AfterControlStatement`` flag.; /// \endnote",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:98,Integrability,synchroniz,synchronized,98,"/// Wrap ObjC definitions (interfaces, implementations...).; /// \note; /// @autoreleasepool and @synchronized blocks are wrapped; /// according to ``AfterControlStatement`` flag.; /// \endnote",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:122,Integrability,wrap,wrapped,122,"/// Wrap ObjC definitions (interfaces, implementations...).; /// \note; /// @autoreleasepool and @synchronized blocks are wrapped; /// according to ``AfterControlStatement`` flag.; /// \endnote",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap struct definitions.; /// \code; /// true:; /// struct foo; /// {; /// int x;; /// };; ///; /// false:; /// struct foo {; /// int x;; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap union definitions.; /// \code; /// true:; /// union foo; /// {; /// int x;; /// }; ///; /// false:; /// union foo {; /// int x;; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,"/// Wrap extern blocks.; /// \code; /// true:; /// extern ""C""; /// {; /// int foo();; /// }; ///; /// false:; /// extern ""C"" {; /// int foo();; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:50,Integrability,Wrap,Wrap,50,// Partially superseded by IndentExternBlock; /// Wrap before ``catch``.; /// \code; /// true:; /// try {; /// foo();; /// }; /// catch () {; /// }; ///; /// false:; /// try {; /// foo();; /// } catch () {; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap before ``else``.; /// \code; /// true:; /// if (foo()) {; /// }; /// else {; /// }; ///; /// false:; /// if (foo()) {; /// } else {; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap lambda block.; /// \code; /// true:; /// connect(; /// [](); /// {; /// foo();; /// bar();; /// });; ///; /// false:; /// connect([]() {; /// foo();; /// bar();; /// });; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Integrability,Wrap,Wrap,4,/// Wrap before ``while``.; /// \code; /// true:; /// do {; /// foo();; /// }; /// while (1);; ///; /// false:; /// do {; /// foo();; /// } while (1);; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:15,Integrability,wrap,wrapped,15,/// Indent the wrapped braces themselves.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:156,Integrability,wrap,wrapped,156,"/// If ``false``, empty function body can be put on a single line.; /// This option is used only if the opening brace of the function has; /// already been wrapped, i.e. the ``AfterFunction`` brace wrapping mode is; /// set, and the function could/should not be put on a single line (as per; /// ``AllowShortFunctionsOnASingleLine`` and constructor formatting; /// options).; /// \code; /// false: true:; /// int f() vs. int f(); /// {} {; /// }; /// \endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:198,Integrability,wrap,wrapping,198,"/// If ``false``, empty function body can be put on a single line.; /// This option is used only if the opening brace of the function has; /// already been wrapped, i.e. the ``AfterFunction`` brace wrapping mode is; /// set, and the function could/should not be put on a single line (as per; /// ``AllowShortFunctionsOnASingleLine`` and constructor formatting; /// options).; /// \code; /// false: true:; /// int f() vs. int f(); /// {} {; /// }; /// \endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:182,Integrability,wrap,wrapped,182,"/// If ``false``, empty record (e.g. class, struct or union) body; /// can be put on a single line. This option is used only if the opening; /// brace of the record has already been wrapped, i.e. the ``AfterClass``; /// (for classes) brace wrapping mode is set.; /// \code; /// false: true:; /// class Foo vs. class Foo; /// {} {; /// }; /// \endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:240,Integrability,wrap,wrapping,240,"/// If ``false``, empty record (e.g. class, struct or union) body; /// can be put on a single line. This option is used only if the opening; /// brace of the record has already been wrapped, i.e. the ``AfterClass``; /// (for classes) brace wrapping mode is set.; /// \code; /// false: true:; /// class Foo vs. class Foo; /// {} {; /// }; /// \endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:158,Integrability,wrap,wrapped,158,"/// If ``false``, empty namespace body can be put on a single line.; /// This option is used only if the opening brace of the namespace has; /// already been wrapped, i.e. the ``AfterNamespace`` brace wrapping mode is; /// set.; /// \code; /// false: true:; /// namespace Foo vs. namespace Foo; /// {} {; /// }; /// \endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:201,Integrability,wrap,wrapping,201,"/// If ``false``, empty namespace body can be put on a single line.; /// This option is used only if the opening brace of the namespace has; /// already been wrapped, i.e. the ``AfterNamespace`` brace wrapping mode is; /// set.; /// \code; /// false: true:; /// namespace Foo vs. namespace Foo; /// {} {; /// }; /// \endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:32,Integrability,wrap,wrapping,32,"/// Control of individual brace wrapping cases.; ///; /// If ``BreakBeforeBraces`` is set to ``BS_Custom``, use this to specify how; /// each individual brace case should be handled. Otherwise, this is ignored.; /// \code{.yaml}; /// # Example of usage:; /// BreakBeforeBraces: Custom; /// BraceWrapping:; /// AfterEnum: true; /// AfterStruct: false; /// SplitEmptyFunction: false; /// \endcode; /// \version 3.8",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:51,Modifiability,variab,variable,51,"/// Break after a group of C++11 attributes before variable or function; /// (including constructor/destructor) declaration/definition names or before; /// control statements, i.e. ``if``, ``switch`` (including ``case`` and; /// ``default`` labels), ``for``, and ``while`` statements.; /// \version 16",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:17,Integrability,wrap,wrapping,17,/// The style of wrapping parameters on the same line (bin-packed) or; /// on one line each.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:15,Integrability,wrap,wrap,15,/// The way to wrap binary operators.; /// \version 3.6,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Modifiability,Config,Configure,4,/// Configure each individual brace in ``BraceWrapping``.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:95,Integrability,depend,depends,95,/// Breaking between template declaration and ``concept`` is allowed. The; /// actual behavior depends on the content and line breaking rules and; /// penalties.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:212,Testability,test,test,212,"/// Break before inline ASM colon if the line length is longer than column; /// limit.; /// \code; /// asm volatile(""string"", : : val);; /// asm(""cmoveq %1, %2, %[result]""; /// : [result] ""=r""(result); /// : ""r""(test), ""r""(new), ""[result]""(old));; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:136,Performance,load,loader,136,/// Break after each annotation on a field in Java files.; /// \code{.java}; /// true: false:; /// @Partial vs. @Partial @Mock DataLoad loader;; /// @Mock; /// DataLoad loader;; /// \endcode; /// \version 3.8,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:169,Performance,load,loader,169,/// Break after each annotation on a field in Java files.; /// \code{.java}; /// true: false:; /// @Partial vs. @Partial @Mock DataLoad loader;; /// @Mock; /// DataLoad loader;; /// \endcode; /// \version 3.8,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:122,Testability,Mock,Mock,122,/// Break after each annotation on a field in Java files.; /// \code{.java}; /// true: false:; /// @Partial vs. @Partial @Mock DataLoad loader;; /// @Mock; /// DataLoad loader;; /// \endcode; /// \version 3.8,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:150,Testability,Mock,Mock,150,/// Break after each annotation on a field in Java files.; /// \code{.java}; /// true: false:; /// @Partial vs. @Partial @Mock DataLoad loader;; /// @Mock; /// DataLoad loader;; /// \endcode; /// \version 3.8,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:28,Modifiability,inherit,inheritance,28,/// Different ways to break inheritance list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,Modifiability,inherit,inheritance,10,"/// Break inheritance list before the colon and after the commas.; /// \code; /// class Foo; /// : Base1,; /// Base2; /// {};; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,Modifiability,inherit,inheritance,10,"/// Break inheritance list before the colon and commas, and align; /// the commas with the colon.; /// \code; /// class Foo; /// : Base1; /// , Base2; /// {};; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,Modifiability,inherit,inheritance,10,"/// Break inheritance list after the colon and commas.; /// \code; /// class Foo :; /// Base1,; /// Base2; /// {};; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,Modifiability,inherit,inheritance,10,"/// Break inheritance list only after the commas.; /// \code; /// class Foo : Base1,; /// Base2; /// {};; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:8,Modifiability,inherit,inheritance,8,/// The inheritance list style to use.; /// \version 7,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:376,Integrability,wrap,wrapped,376,"/// If ``true``, consecutive namespace declarations will be on the same; /// line. If ``false``, each namespace is declared on a new line.; /// \code; /// true:; /// namespace Foo { namespace Bar {; /// }}; ///; /// false:; /// namespace Foo {; /// namespace Bar {; /// }; /// }; /// \endcode; ///; /// If it does not fit on a single line, the overflowing namespaces get; /// wrapped:; /// \code; /// namespace Foo { namespace Bar {; /// namespace Extra {; /// }}}; /// \endcode; /// \version 5",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:273,Modifiability,inherit,inheritance,273,/// This option is **deprecated**. See ``CurrentLine`` of; /// ``PackConstructorInitializers``.; /// \version 3.7; // bool ConstructorInitializerAllOnOneLineOrOnePerLine;; /// The number of characters to use for indentation of constructor; /// initializer lists as well as inheritance lists.; /// \version 3.7,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:459,Modifiability,variab,variable,459,"/// If ``true``, format braced lists as best suited for C++11 braced; /// lists.; ///; /// Important differences:; /// - No spaces inside the braced list.; /// - No line break before the closing brace.; /// - Indentation with the continuation indent, not with the block indent.; ///; /// Fundamentally, C++11 braced lists are formatted exactly like function; /// calls would be formatted in their place. If the braced list follows a name; /// (e.g. a type or variable name), clang-format formats as if the ``{}`` were; /// the parentheses of a function call with that name. If there is no name,; /// a zero-length name is assumed.; /// \code; /// true: false:; /// vector<int> x{1, 2, 3, 4}; vs. vector<int> x{ 1, 2, 3, 4 };; /// vector<T> x{{}, {}, {}, {}}; vector<T> x{ {}, {}, {}, {} };; /// f(MyMap[{composite, key}]); f(MyMap[{ composite, key }]);; /// new int[3]{1, 2, 3}; new int[3]{ 1, 2, 3 };; /// \endcode; /// \version 3.4",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:299,Deployability,update,updated,299,"/// This option is **deprecated**. See ``DeriveLF`` and ``DeriveCRLF`` of; /// ``LineEnding``.; /// \version 10; // bool DeriveLineEnding;; /// If ``true``, analyze the formatted file for the most common; /// alignment of ``&`` and ``*``.; /// Pointer and reference alignment styles are going to be updated according; /// to the preferences found in the file.; /// ``PointerAlignment`` is then used only as fallback.; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:99,Deployability,configurat,configuration,99,/// Different styles for empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:99,Modifiability,config,configuration,99,/// Different styles for empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:42,Security,access,access,42,/// Different styles for empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:164,Security,access,access,164,/// Different styles for empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:33,Security,access,access,33,/// Remove all empty lines after access modifiers.; /// \code; /// struct foo {; /// private:; /// int i;; /// protected:; /// int j;; /// /* comment */; /// public:; /// foo() {}; /// private:; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:36,Security,access,access,36,/// Keep existing empty lines after access modifiers.; /// MaxEmptyLinesToKeep is applied instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:32,Security,access,access,32,/// Always add empty line after access modifiers if there are none.; /// MaxEmptyLinesToKeep is applied also.; /// \code; /// struct foo {; /// private:; ///; /// int i;; /// protected:; ///; /// int j;; /// /* comment */; /// public:; ///; /// foo() {}; /// private:; ///; /// protected:; ///; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:101,Deployability,configurat,configuration,101,/// Defines when to put an empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.; /// \version 13,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:101,Modifiability,config,configuration,101,/// Defines when to put an empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.; /// \version 13,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:44,Security,access,access,44,/// Defines when to put an empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.; /// \version 13,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:166,Security,access,access,166,/// Defines when to put an empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.; /// \version 13,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:43,Security,access,access,43,/// Different styles for empty line before access modifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:34,Security,access,access,34,/// Remove all empty lines before access modifiers.; /// \code; /// struct foo {; /// private:; /// int i;; /// protected:; /// int j;; /// /* comment */; /// public:; /// foo() {}; /// private:; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:37,Security,access,access,37,/// Keep existing empty lines before access modifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:29,Security,access,access,29,/// Add empty line only when access modifier starts a new logical block.; /// Logical block is a group of one or more member fields or functions.; /// \code; /// struct foo {; /// private:; /// int i;; ///; /// protected:; /// int j;; /// /* comment */; /// public:; /// foo() {}; ///; /// private:; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:58,Testability,log,logical,58,/// Add empty line only when access modifier starts a new logical block.; /// Logical block is a group of one or more member fields or functions.; /// \code; /// struct foo {; /// private:; /// int i;; ///; /// protected:; /// int j;; /// /* comment */; /// public:; /// foo() {}; ///; /// private:; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:78,Testability,Log,Logical,78,/// Add empty line only when access modifier starts a new logical block.; /// Logical block is a group of one or more member fields or functions.; /// \code; /// struct foo {; /// private:; /// int i;; ///; /// protected:; /// int j;; /// /* comment */; /// public:; /// foo() {}; ///; /// private:; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:33,Security,access,access,33,/// Always add empty line before access modifiers unless access modifier; /// is at the start of struct or class definition.; /// \code; /// struct foo {; /// private:; /// int i;; ///; /// protected:; /// int j;; /// /* comment */; ///; /// public:; /// foo() {}; ///; /// private:; ///; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:57,Security,access,access,57,/// Always add empty line before access modifiers unless access modifier; /// is at the start of struct or class definition.; /// \code; /// struct foo {; /// private:; /// int i;; ///; /// protected:; /// int j;; /// /* comment */; ///; /// public:; /// foo() {}; ///; /// private:; ///; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:52,Security,access,access,52,/// Defines in which cases to put empty line before access modifiers.; /// \version 12,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:505,Modifiability,config,config,505,"/// If ``true``, clang-format detects whether function calls and; /// definitions are formatted with one parameter per line.; ///; /// Each call can be bin-packed, one-per-line or inconclusive. If it is; /// inconclusive, e.g. completely on one line, but a decision needs to be; /// made, clang-format analyzes whether there are other bin-packed cases in; /// the input file and act accordingly.; ///; /// \note; /// This is an experimental flag, that might go away or be renamed. Do; /// not use this in config files, etc. Use at your own risk.; /// \endnote; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:30,Safety,detect,detects,30,"/// If ``true``, clang-format detects whether function calls and; /// definitions are formatted with one parameter per line.; ///; /// Each call can be bin-packed, one-per-line or inconclusive. If it is; /// inconclusive, e.g. completely on one line, but a decision needs to be; /// made, clang-format analyzes whether there are other bin-packed cases in; /// the input file and act accordingly.; ///; /// \note; /// This is an experimental flag, that might go away or be renamed. Do; /// not use this in config files, etc. Use at your own risk.; /// \endnote; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:540,Safety,risk,risk,540,"/// If ``true``, clang-format detects whether function calls and; /// definitions are formatted with one parameter per line.; ///; /// Each call can be bin-packed, one-per-line or inconclusive. If it is; /// inconclusive, e.g. completely on one line, but a decision needs to be; /// made, clang-format analyzes whether there are other bin-packed cases in; /// the input file and act accordingly.; ///; /// \note; /// This is an experimental flag, that might go away or be renamed. Do; /// not use this in config files, etc. Use at your own risk.; /// \endnote; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:272,Deployability,configurat,configuration,272,"/// A vector of macros that should be interpreted as foreach loops; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// FOREACH(<variable-declaration>, ...); /// <loop-body>; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// ForEachMacros: ['RANGES_FOR', 'FOREACH']; /// \endcode; ///; /// For example: BOOST_FOREACH.; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:182,Modifiability,variab,variable-declaration,182,"/// A vector of macros that should be interpreted as foreach loops; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// FOREACH(<variable-declaration>, ...); /// <loop-body>; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// ForEachMacros: ['RANGES_FOR', 'FOREACH']; /// \endcode; ///; /// For example: BOOST_FOREACH.; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:272,Modifiability,config,configuration,272,"/// A vector of macros that should be interpreted as foreach loops; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// FOREACH(<variable-declaration>, ...); /// <loop-body>; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// ForEachMacros: ['RANGES_FOR', 'FOREACH']; /// \endcode; ///; /// For example: BOOST_FOREACH.; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:304,Modifiability,config,configured,304,"/// A vector of macros that should be interpreted as foreach loops; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// FOREACH(<variable-declaration>, ...); /// <loop-body>; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// ForEachMacros: ['RANGES_FOR', 'FOREACH']; /// \endcode; ///; /// For example: BOOST_FOREACH.; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:291,Deployability,configurat,configuration,291,"/// A vector of macros that should be interpreted as conditionals; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// IF(...); /// <conditional-body>; /// else IF(...); /// <conditional-body>; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// IfMacros: ['IF']; /// \endcode; ///; /// For example: `KJ_IF_MAYBE; /// <https://github.com/capnproto/capnproto/blob/master/kjdoc/tour.md#maybes>`_; /// \version 13",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:291,Modifiability,config,configuration,291,"/// A vector of macros that should be interpreted as conditionals; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// IF(...); /// <conditional-body>; /// else IF(...); /// <conditional-body>; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// IfMacros: ['IF']; /// \endcode; ///; /// For example: `KJ_IF_MAYBE; /// <https://github.com/capnproto/capnproto/blob/master/kjdoc/tour.md#maybes>`_; /// \version 13",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:323,Modifiability,config,configured,323,"/// A vector of macros that should be interpreted as conditionals; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// IF(...); /// <conditional-body>; /// else IF(...); /// <conditional-body>; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// IfMacros: ['IF']; /// \endcode; ///; /// For example: `KJ_IF_MAYBE; /// <https://github.com/capnproto/capnproto/blob/master/kjdoc/tour.md#maybes>`_; /// \version 13",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:20,Security,access,access,20,"/// Specify whether access modifiers should have their own indentation level.; ///; /// When ``false``, access modifiers are indented (or outdented) relative to; /// the record members, respecting the ``AccessModifierOffset``. Record; /// members are indented one level below the record.; /// When ``true``, access modifiers get their own indentation level. As a; /// consequence, record members are always indented 2 levels below the record,; /// regardless of the access modifier presence. Value of the; /// ``AccessModifierOffset`` is ignored.; /// \code; /// false: true:; /// class C { vs. class C {; /// class D { class D {; /// void bar(); void bar();; /// protected: protected:; /// D(); D();; /// }; };; /// public: public:; /// C(); C();; /// }; };; /// void foo() { void foo() {; /// return 1; return 1;; /// } }; /// \endcode; /// \version 13",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:104,Security,access,access,104,"/// Specify whether access modifiers should have their own indentation level.; ///; /// When ``false``, access modifiers are indented (or outdented) relative to; /// the record members, respecting the ``AccessModifierOffset``. Record; /// members are indented one level below the record.; /// When ``true``, access modifiers get their own indentation level. As a; /// consequence, record members are always indented 2 levels below the record,; /// regardless of the access modifier presence. Value of the; /// ``AccessModifierOffset`` is ignored.; /// \code; /// false: true:; /// class C { vs. class C {; /// class D { class D {; /// void bar(); void bar();; /// protected: protected:; /// D(); D();; /// }; };; /// public: public:; /// C(); C();; /// }; };; /// void foo() { void foo() {; /// return 1; return 1;; /// } }; /// \endcode; /// \version 13",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:203,Security,Access,AccessModifierOffset,203,"/// Specify whether access modifiers should have their own indentation level.; ///; /// When ``false``, access modifiers are indented (or outdented) relative to; /// the record members, respecting the ``AccessModifierOffset``. Record; /// members are indented one level below the record.; /// When ``true``, access modifiers get their own indentation level. As a; /// consequence, record members are always indented 2 levels below the record,; /// regardless of the access modifier presence. Value of the; /// ``AccessModifierOffset`` is ignored.; /// \code; /// false: true:; /// class C { vs. class C {; /// class D { class D {; /// void bar(); void bar();; /// protected: protected:; /// D(); D();; /// }; };; /// public: public:; /// C(); C();; /// }; };; /// void foo() { void foo() {; /// return 1; return 1;; /// } }; /// \endcode; /// \version 13",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:308,Security,access,access,308,"/// Specify whether access modifiers should have their own indentation level.; ///; /// When ``false``, access modifiers are indented (or outdented) relative to; /// the record members, respecting the ``AccessModifierOffset``. Record; /// members are indented one level below the record.; /// When ``true``, access modifiers get their own indentation level. As a; /// consequence, record members are always indented 2 levels below the record,; /// regardless of the access modifier presence. Value of the; /// ``AccessModifierOffset`` is ignored.; /// \code; /// false: true:; /// class C { vs. class C {; /// class D { class D {; /// void bar(); void bar();; /// protected: protected:; /// D(); D();; /// }; };; /// public: public:; /// C(); C();; /// }; };; /// void foo() { void foo() {; /// return 1; return 1;; /// } }; /// \endcode; /// \version 13",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:466,Security,access,access,466,"/// Specify whether access modifiers should have their own indentation level.; ///; /// When ``false``, access modifiers are indented (or outdented) relative to; /// the record members, respecting the ``AccessModifierOffset``. Record; /// members are indented one level below the record.; /// When ``true``, access modifiers get their own indentation level. As a; /// consequence, record members are always indented 2 levels below the record,; /// regardless of the access modifier presence. Value of the; /// ``AccessModifierOffset`` is ignored.; /// \code; /// false: true:; /// class C { vs. class C {; /// class D { class D {; /// void bar(); void bar();; /// protected: protected:; /// D(); D();; /// }; };; /// public: public:; /// C(); C();; /// }; };; /// void foo() { void foo() {; /// return 1; return 1;; /// } }; /// \endcode; /// \version 13",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:512,Security,Access,AccessModifierOffset,512,"/// Specify whether access modifiers should have their own indentation level.; ///; /// When ``false``, access modifiers are indented (or outdented) relative to; /// the record members, respecting the ``AccessModifierOffset``. Record; /// members are indented one level below the record.; /// When ``true``, access modifiers get their own indentation level. As a; /// consequence, record members are always indented 2 levels below the record,; /// regardless of the access modifier presence. Value of the; /// ``AccessModifierOffset`` is ignored.; /// \code; /// false: true:; /// class C { vs. class C {; /// class D { class D {; /// void bar(); void bar();; /// protected: protected:; /// D(); D();; /// }; };; /// public: public:; /// C(); C();; /// }; };; /// void foo() { void foo() {; /// return 1; return 1;; /// } }; /// \endcode; /// \version 13",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:33,Security,hash,hash,33,/// Indents directives after the hash.; /// \code; /// #if FOO; /// # if BAR; /// # include <foo>; /// # endif; /// #endif; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:34,Security,hash,hash,34,/// Indents directives before the hash.; /// \code; /// #if FOO; /// #if BAR; /// #include <foo>; /// #endif; /// #endif; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:54,Integrability,wrap,wrapped,54,/// Indent if a function definition or declaration is wrapped after the; /// type.; /// \code; /// true:; /// LoooooooooooooooooooooooooooooooooooooooongReturnType; /// LoooooooooooooooooooooooooooooooongFunctionDeclaration();; ///; /// false:; /// LoooooooooooooooooooooooooooooooooooooooongReturnType; /// LoooooooooooooooooooooooooooooooongFunctionDeclaration();; /// \endcode; /// \version 3.7,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:59,Integrability,wrap,wrapped,59,"/// Insert trailing commas in container literals that were wrapped over; /// multiple lines. Note that this is conceptually incompatible with; /// bin-packing, because the trailing comma is used as an indicator; /// that a container should be formatted one-per-line (i.e. not bin-packed).; /// So inserting a trailing comma counteracts bin-packing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:165,Availability,avail,available,165,"/// If set to ``TCS_Wrapped`` will insert trailing commas in container; /// literals (arrays and objects) that wrap across multiple lines.; /// It is currently only available for JavaScript; /// and disabled by default ``TCS_None``.; /// ``InsertTrailingCommas`` cannot be used together with ``BinPackArguments``; /// as inserting the comma disables bin-packing.; /// \code; /// TSC_Wrapped:; /// const someArray = [; /// aaaaaaaaaaaaaaaaaaaaaaaaaa,; /// aaaaaaaaaaaaaaaaaaaaaaaaaa,; /// aaaaaaaaaaaaaaaaaaaaaaaaaa,; /// // ^ inserted; /// ]; /// \endcode; /// \version 11",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:111,Integrability,wrap,wrap,111,"/// If set to ``TCS_Wrapped`` will insert trailing commas in container; /// literals (arrays and objects) that wrap across multiple lines.; /// It is currently only available for JavaScript; /// and disabled by default ``TCS_None``.; /// ``InsertTrailingCommas`` cannot be used together with ``BinPackArguments``; /// as inserting the comma disables bin-packing.; /// \code; /// TSC_Wrapped:; /// const someArray = [; /// aaaaaaaaaaaaaaaaaaaaaaaaaa,; /// aaaaaaaaaaaaaaaaaaaaaaaaaa,; /// aaaaaaaaaaaaaaaaaaaaaaaaaa,; /// // ^ inserted; /// ]; /// \endcode; /// \version 11",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:256,Modifiability,config,config,256,"/// Separator format of integer literals of different bases.; ///; /// If negative, remove separators. If ``0``, leave the literal as is. If; /// positive, insert separators between digits starting from the rightmost; /// digit.; ///; /// For example, the config below will leave separators in binary literals; /// alone, insert separators in decimal literals to separate the digits into; /// groups of 3, and remove separators in hexadecimal literals.; /// \code; /// IntegerLiteralSeparator:; /// Binary: 0; /// Decimal: 3; /// Hex: -1; /// \endcode; ///; /// You can also specify a minimum number of digits (``BinaryMinDigits``,; /// ``DecimalMinDigits``, and ``HexMinDigits``) the integer literal must; /// have in order for the separators to be inserted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:494,Deployability,configurat,configuration,494,"/// A vector of prefixes ordered by the desired groups for Java imports.; ///; /// One group's prefix can be a subset of another - the longest prefix is; /// always matched. Within a group, the imports are ordered lexicographically.; /// Static imports are grouped separately and follow the same group rules.; /// By default, static imports are placed before non-static imports,; /// but this behavior is changed by another option,; /// ``SortJavaStaticImport``.; ///; /// In the .clang-format configuration file, this can be configured like; /// in the following yaml example. This will result in imports being; /// formatted as in the Java example below.; /// \code{.yaml}; /// JavaImportGroups: ['com.example', 'com', 'org']; /// \endcode; ///; /// \code{.java}; /// import static com.example.function1;; ///; /// import static com.test.function2;; ///; /// import static org.example.function3;; ///; /// import com.example.ClassA;; /// import com.example.Test;; /// import com.example.a.ClassB;; ///; /// import com.test.ClassC;; ///; /// import org.example.ClassD;; /// \endcode; /// \version 8",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:494,Modifiability,config,configuration,494,"/// A vector of prefixes ordered by the desired groups for Java imports.; ///; /// One group's prefix can be a subset of another - the longest prefix is; /// always matched. Within a group, the imports are ordered lexicographically.; /// Static imports are grouped separately and follow the same group rules.; /// By default, static imports are placed before non-static imports,; /// but this behavior is changed by another option,; /// ``SortJavaStaticImport``.; ///; /// In the .clang-format configuration file, this can be configured like; /// in the following yaml example. This will result in imports being; /// formatted as in the Java example below.; /// \code{.yaml}; /// JavaImportGroups: ['com.example', 'com', 'org']; /// \endcode; ///; /// \code{.java}; /// import static com.example.function1;; ///; /// import static com.test.function2;; ///; /// import static org.example.function3;; ///; /// import com.example.ClassA;; /// import com.example.Test;; /// import com.example.a.ClassB;; ///; /// import com.test.ClassC;; ///; /// import org.example.ClassD;; /// \endcode; /// \version 8",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:526,Modifiability,config,configured,526,"/// A vector of prefixes ordered by the desired groups for Java imports.; ///; /// One group's prefix can be a subset of another - the longest prefix is; /// always matched. Within a group, the imports are ordered lexicographically.; /// Static imports are grouped separately and follow the same group rules.; /// By default, static imports are placed before non-static imports,; /// but this behavior is changed by another option,; /// ``SortJavaStaticImport``.; ///; /// In the .clang-format configuration file, this can be configured like; /// in the following yaml example. This will result in imports being; /// formatted as in the Java example below.; /// \code{.yaml}; /// JavaImportGroups: ['com.example', 'com', 'org']; /// \endcode; ///; /// \code{.java}; /// import static com.example.function1;; ///; /// import static com.test.function2;; ///; /// import static org.example.function3;; ///; /// import com.example.ClassA;; /// import com.example.Test;; /// import com.example.a.ClassB;; ///; /// import com.test.ClassC;; ///; /// import org.example.ClassD;; /// \endcode; /// \version 8",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:835,Testability,test,test,835,"/// A vector of prefixes ordered by the desired groups for Java imports.; ///; /// One group's prefix can be a subset of another - the longest prefix is; /// always matched. Within a group, the imports are ordered lexicographically.; /// Static imports are grouped separately and follow the same group rules.; /// By default, static imports are placed before non-static imports,; /// but this behavior is changed by another option,; /// ``SortJavaStaticImport``.; ///; /// In the .clang-format configuration file, this can be configured like; /// in the following yaml example. This will result in imports being; /// formatted as in the Java example below.; /// \code{.yaml}; /// JavaImportGroups: ['com.example', 'com', 'org']; /// \endcode; ///; /// \code{.java}; /// import static com.example.function1;; ///; /// import static com.test.function2;; ///; /// import static org.example.function3;; ///; /// import com.example.ClassA;; /// import com.example.Test;; /// import com.example.a.ClassB;; ///; /// import com.test.ClassC;; ///; /// import org.example.ClassD;; /// \endcode; /// \version 8",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:959,Testability,Test,Test,959,"/// A vector of prefixes ordered by the desired groups for Java imports.; ///; /// One group's prefix can be a subset of another - the longest prefix is; /// always matched. Within a group, the imports are ordered lexicographically.; /// Static imports are grouped separately and follow the same group rules.; /// By default, static imports are placed before non-static imports,; /// but this behavior is changed by another option,; /// ``SortJavaStaticImport``.; ///; /// In the .clang-format configuration file, this can be configured like; /// in the following yaml example. This will result in imports being; /// formatted as in the Java example below.; /// \code{.yaml}; /// JavaImportGroups: ['com.example', 'com', 'org']; /// \endcode; ///; /// \code{.java}; /// import static com.example.function1;; ///; /// import static com.test.function2;; ///; /// import static org.example.function3;; ///; /// import com.example.ClassA;; /// import com.example.Test;; /// import com.example.a.ClassB;; ///; /// import com.test.ClassC;; ///; /// import org.example.ClassD;; /// \endcode; /// \version 8",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:1020,Testability,test,test,1020,"/// A vector of prefixes ordered by the desired groups for Java imports.; ///; /// One group's prefix can be a subset of another - the longest prefix is; /// always matched. Within a group, the imports are ordered lexicographically.; /// Static imports are grouped separately and follow the same group rules.; /// By default, static imports are placed before non-static imports,; /// but this behavior is changed by another option,; /// ``SortJavaStaticImport``.; ///; /// In the .clang-format configuration file, this can be configured like; /// in the following yaml example. This will result in imports being; /// formatted as in the Java example below.; /// \code{.yaml}; /// JavaImportGroups: ['com.example', 'com', 'org']; /// \endcode; ///; /// \code{.java}; /// import static com.example.function1;; ///; /// import static com.test.function2;; ///; /// import static org.example.function3;; ///; /// import com.example.ClassA;; /// import com.example.Test;; /// import com.example.a.ClassB;; ///; /// import com.test.ClassC;; ///; /// import org.example.ClassD;; /// \endcode; /// \version 8",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:36,Integrability,wrap,wrap,36,"// clang-format off; /// Whether to wrap JavaScript import/export statements.; /// \code{.js}; /// true:; /// import {; /// VeryLongImportsAreAnnoying,; /// VeryLongImportsAreAnnoying,; /// VeryLongImportsAreAnnoying,; /// } from 'some/module.js'; ///; /// false:; /// import {VeryLongImportsAreAnnoying, VeryLongImportsAreAnnoying, VeryLongImportsAreAnnoying,} from ""some/module.js""; /// \endcode; /// \version 3.9",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:16,Testability,log,logic,16,/// Indentation logic for lambda bodies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:52,Deployability,configurat,configuration,52,"/// Supported languages.; ///; /// When stored in a configuration file, specifies the language, that the; /// configuration targets. When passed to the ``reformat()`` function, enables; /// syntax features specific to the language.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:110,Deployability,configurat,configuration,110,"/// Supported languages.; ///; /// When stored in a configuration file, specifies the language, that the; /// configuration targets. When passed to the ``reformat()`` function, enables; /// syntax features specific to the language.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:52,Modifiability,config,configuration,52,"/// Supported languages.; ///; /// When stored in a configuration file, specifies the language, that the; /// configuration targets. When passed to the ``reformat()`` function, enables; /// syntax features specific to the language.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:110,Modifiability,config,configuration,110,"/// Supported languages.; ///; /// When stored in a configuration file, specifies the language, that the; /// configuration targets. When passed to the ``reformat()`` function, enables; /// syntax features specific to the language.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:23,Integrability,Protocol,Protocol,23,/// Should be used for Protocol Buffers; /// (https://developers.google.com/protocol-buffers/).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:76,Integrability,protocol,protocol-buffers,76,/// Should be used for Protocol Buffers; /// (https://developers.google.com/protocol-buffers/).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:23,Integrability,Protocol,Protocol,23,/// Should be used for Protocol Buffer messages in text format; /// (https://developers.google.com/protocol-buffers/).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:39,Integrability,message,messages,39,/// Should be used for Protocol Buffer messages in text format; /// (https://developers.google.com/protocol-buffers/).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:99,Integrability,protocol,protocol-buffers,99,/// Should be used for Protocol Buffer messages in text format; /// (https://developers.google.com/protocol-buffers/).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:620,Integrability,depend,depending,620,"/// A list of macros of the form \c <definition>=<expansion> .; ///; /// Code will be parsed with macros expanded, in order to determine how to; /// interpret and format the macro arguments.; ///; /// For example, the code:; /// \code; /// A(a*b);; /// \endcode; ///; /// will usually be interpreted as a call to a function A, and the; /// multiplication expression will be formatted as ``a * b``.; ///; /// If we specify the macro definition:; /// \code{.yaml}; /// Macros:; /// - A(x)=x; /// \endcode; ///; /// the code will now be parsed as a declaration of the variable b of type a*,; /// and formatted as ``a* b`` (depending on pointer-binding rules).; ///; /// Features and restrictions:; /// * Both function-like macros and object-like macros are supported.; /// * Macro arguments must be used exactly once in the expansion.; /// * No recursive expansion; macros referencing other macros will be; /// ignored.; /// * Overloading by arity is supported: for example, given the macro; /// definitions A=x, A()=y, A(a)=a; ///; /// \code; /// A; -> x;; /// A(); -> y;; /// A(z); -> z;; /// A(a, b); // will not be expanded.; /// \endcode; ///; /// \version 17",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:565,Modifiability,variab,variable,565,"/// A list of macros of the form \c <definition>=<expansion> .; ///; /// Code will be parsed with macros expanded, in order to determine how to; /// interpret and format the macro arguments.; ///; /// For example, the code:; /// \code; /// A(a*b);; /// \endcode; ///; /// will usually be interpreted as a call to a function A, and the; /// multiplication expression will be formatted as ``a * b``.; ///; /// If we specify the macro definition:; /// \code{.yaml}; /// Macros:; /// - A(x)=x; /// \endcode; ///; /// the code will now be parsed as a declaration of the variable b of type a*,; /// and formatted as ``a* b`` (depending on pointer-binding rules).; ///; /// Features and restrictions:; /// * Both function-like macros and object-like macros are supported.; /// * Macro arguments must be used exactly once in the expansion.; /// * No recursive expansion; macros referencing other macros will be; /// ignored.; /// * Overloading by arity is supported: for example, given the macro; /// definitions A=x, A()=y, A(a)=a; ///; /// \code; /// A; -> x;; /// A(); -> y;; /// A(z); -> z;; /// A(a, b); // will not be expanded.; /// \endcode; ///; /// \version 17",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:239,Testability,TEST,TESTSUITE,239,"/// A vector of macros which are used to open namespace blocks.; ///; /// These are expected to be macros of the form:; /// \code; /// NAMESPACE(<namespace-name>, ...) {; /// <namespace-content>; /// }; /// \endcode; ///; /// For example: TESTSUITE; /// \version 9",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:37,Integrability,protocol,protocol,37,"/// Controls bin-packing Objective-C protocol conformance list; /// items into as few lines as possible when they go over ``ColumnLimit``.; ///; /// If ``Auto`` (the default), delegates to the value in; /// ``BinPackParameters``. If that is ``true``, bin-packs Objective-C; /// protocol conformance list items into as few lines as possible; /// whenever they go over ``ColumnLimit``.; ///; /// If ``Always``, always bin-packs Objective-C protocol conformance; /// list items into as few lines as possible whenever they go over; /// ``ColumnLimit``.; ///; /// If ``Never``, lays out Objective-C protocol conformance list items; /// onto individual lines whenever they go over ``ColumnLimit``.; ///; /// \code{.objc}; /// Always (or Auto, if BinPackParameters=true):; /// @interface ccccccccccccc () <; /// ccccccccccccc, ccccccccccccc,; /// ccccccccccccc, ccccccccccccc> {; /// }; ///; /// Never (or Auto, if BinPackParameters=false):; /// @interface ddddddddddddd () <; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd> {; /// }; /// \endcode; /// \version 7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:278,Integrability,protocol,protocol,278,"/// Controls bin-packing Objective-C protocol conformance list; /// items into as few lines as possible when they go over ``ColumnLimit``.; ///; /// If ``Auto`` (the default), delegates to the value in; /// ``BinPackParameters``. If that is ``true``, bin-packs Objective-C; /// protocol conformance list items into as few lines as possible; /// whenever they go over ``ColumnLimit``.; ///; /// If ``Always``, always bin-packs Objective-C protocol conformance; /// list items into as few lines as possible whenever they go over; /// ``ColumnLimit``.; ///; /// If ``Never``, lays out Objective-C protocol conformance list items; /// onto individual lines whenever they go over ``ColumnLimit``.; ///; /// \code{.objc}; /// Always (or Auto, if BinPackParameters=true):; /// @interface ccccccccccccc () <; /// ccccccccccccc, ccccccccccccc,; /// ccccccccccccc, ccccccccccccc> {; /// }; ///; /// Never (or Auto, if BinPackParameters=false):; /// @interface ddddddddddddd () <; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd> {; /// }; /// \endcode; /// \version 7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:438,Integrability,protocol,protocol,438,"/// Controls bin-packing Objective-C protocol conformance list; /// items into as few lines as possible when they go over ``ColumnLimit``.; ///; /// If ``Auto`` (the default), delegates to the value in; /// ``BinPackParameters``. If that is ``true``, bin-packs Objective-C; /// protocol conformance list items into as few lines as possible; /// whenever they go over ``ColumnLimit``.; ///; /// If ``Always``, always bin-packs Objective-C protocol conformance; /// list items into as few lines as possible whenever they go over; /// ``ColumnLimit``.; ///; /// If ``Never``, lays out Objective-C protocol conformance list items; /// onto individual lines whenever they go over ``ColumnLimit``.; ///; /// \code{.objc}; /// Always (or Auto, if BinPackParameters=true):; /// @interface ccccccccccccc () <; /// ccccccccccccc, ccccccccccccc,; /// ccccccccccccc, ccccccccccccc> {; /// }; ///; /// Never (or Auto, if BinPackParameters=false):; /// @interface ddddddddddddd () <; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd> {; /// }; /// \endcode; /// \version 7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:594,Integrability,protocol,protocol,594,"/// Controls bin-packing Objective-C protocol conformance list; /// items into as few lines as possible when they go over ``ColumnLimit``.; ///; /// If ``Auto`` (the default), delegates to the value in; /// ``BinPackParameters``. If that is ``true``, bin-packs Objective-C; /// protocol conformance list items into as few lines as possible; /// whenever they go over ``ColumnLimit``.; ///; /// If ``Always``, always bin-packs Objective-C protocol conformance; /// list items into as few lines as possible whenever they go over; /// ``ColumnLimit``.; ///; /// If ``Never``, lays out Objective-C protocol conformance list items; /// onto individual lines whenever they go over ``ColumnLimit``.; ///; /// \code{.objc}; /// Always (or Auto, if BinPackParameters=true):; /// @interface ccccccccccccc () <; /// ccccccccccccc, ccccccccccccc,; /// ccccccccccccc, ccccccccccccc> {; /// }; ///; /// Never (or Auto, if BinPackParameters=false):; /// @interface ddddddddddddd () <; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd> {; /// }; /// \endcode; /// \version 7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:771,Integrability,interface,interface,771,"/// Controls bin-packing Objective-C protocol conformance list; /// items into as few lines as possible when they go over ``ColumnLimit``.; ///; /// If ``Auto`` (the default), delegates to the value in; /// ``BinPackParameters``. If that is ``true``, bin-packs Objective-C; /// protocol conformance list items into as few lines as possible; /// whenever they go over ``ColumnLimit``.; ///; /// If ``Always``, always bin-packs Objective-C protocol conformance; /// list items into as few lines as possible whenever they go over; /// ``ColumnLimit``.; ///; /// If ``Never``, lays out Objective-C protocol conformance list items; /// onto individual lines whenever they go over ``ColumnLimit``.; ///; /// \code{.objc}; /// Always (or Auto, if BinPackParameters=true):; /// @interface ccccccccccccc () <; /// ccccccccccccc, ccccccccccccc,; /// ccccccccccccc, ccccccccccccc> {; /// }; ///; /// Never (or Auto, if BinPackParameters=false):; /// @interface ddddddddddddd () <; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd> {; /// }; /// \endcode; /// \version 7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:940,Integrability,interface,interface,940,"/// Controls bin-packing Objective-C protocol conformance list; /// items into as few lines as possible when they go over ``ColumnLimit``.; ///; /// If ``Auto`` (the default), delegates to the value in; /// ``BinPackParameters``. If that is ``true``, bin-packs Objective-C; /// protocol conformance list items into as few lines as possible; /// whenever they go over ``ColumnLimit``.; ///; /// If ``Always``, always bin-packs Objective-C protocol conformance; /// list items into as few lines as possible whenever they go over; /// ``ColumnLimit``.; ///; /// If ``Never``, lays out Objective-C protocol conformance list items; /// onto individual lines whenever they go over ``ColumnLimit``.; ///; /// \code{.objc}; /// Always (or Auto, if BinPackParameters=true):; /// @interface ccccccccccccc () <; /// ccccccccccccc, ccccccccccccc,; /// ccccccccccccc, ccccccccccccc> {; /// }; ///; /// Never (or Auto, if BinPackParameters=false):; /// @interface ddddddddddddd () <; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd,; /// ddddddddddddd> {; /// }; /// \endcode; /// \version 7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:43,Integrability,protocol,protocol,43,"/// Add a space in front of an Objective-C protocol list, i.e. use; /// ``Foo <Protocol>`` instead of ``Foo<Protocol>``.; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:79,Integrability,Protocol,Protocol,79,"/// Add a space in front of an Objective-C protocol list, i.e. use; /// ``Foo <Protocol>`` instead of ``Foo<Protocol>``.; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:108,Integrability,Protocol,Protocol,108,"/// Add a space in front of an Objective-C protocol list, i.e. use; /// ``Foo <Protocol>`` instead of ``Foo<Protocol>``.; /// \version 3.7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:787,Deployability,update,updated,787,"/// Defines hints for detecting supported languages code blocks in raw; /// strings.; ///; /// A raw string with a matching delimiter or a matching enclosing function; /// name will be reformatted assuming the specified language based on the; /// style for that language defined in the .clang-format file. If no style has; /// been defined in the .clang-format file for the specific language, a; /// predefined style given by 'BasedOnStyle' is used. If 'BasedOnStyle' is not; /// found, the formatting is based on llvm style. A matching delimiter takes; /// precedence over a matching enclosing function name for determining the; /// language of the raw string contents.; ///; /// If a canonical delimiter is specified, occurrences of other delimiters for; /// the same language will be updated to the canonical if possible.; ///; /// There should be at most one specification per language and each delimiter; /// and enclosing function should not occur in multiple specifications.; ///; /// To configure this in the .clang-format file, use:; /// \code{.yaml}; /// RawStringFormats:; /// - Language: TextProto; /// Delimiters:; /// - 'pb'; /// - 'proto'; /// EnclosingFunctions:; /// - 'PARSE_TEXT_PROTO'; /// BasedOnStyle: google; /// - Language: Cpp; /// Delimiters:; /// - 'cc'; /// - 'cpp'; /// BasedOnStyle: llvm; /// CanonicalDelimiter: 'cc'; /// \endcode; /// \version 6",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:995,Modifiability,config,configure,995,"/// Defines hints for detecting supported languages code blocks in raw; /// strings.; ///; /// A raw string with a matching delimiter or a matching enclosing function; /// name will be reformatted assuming the specified language based on the; /// style for that language defined in the .clang-format file. If no style has; /// been defined in the .clang-format file for the specific language, a; /// predefined style given by 'BasedOnStyle' is used. If 'BasedOnStyle' is not; /// found, the formatting is based on llvm style. A matching delimiter takes; /// precedence over a matching enclosing function name for determining the; /// language of the raw string contents.; ///; /// If a canonical delimiter is specified, occurrences of other delimiters for; /// the same language will be updated to the canonical if possible.; ///; /// There should be at most one specification per language and each delimiter; /// and enclosing function should not occur in multiple specifications.; ///; /// To configure this in the .clang-format file, use:; /// \code{.yaml}; /// RawStringFormats:; /// - Language: TextProto; /// Delimiters:; /// - 'pb'; /// - 'proto'; /// EnclosingFunctions:; /// - 'PARSE_TEXT_PROTO'; /// BasedOnStyle: google; /// - Language: Cpp; /// Delimiters:; /// - 'cc'; /// - 'cpp'; /// BasedOnStyle: llvm; /// CanonicalDelimiter: 'cc'; /// \endcode; /// \version 6",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:22,Safety,detect,detecting,22,"/// Defines hints for detecting supported languages code blocks in raw; /// strings.; ///; /// A raw string with a matching delimiter or a matching enclosing function; /// name will be reformatted assuming the specified language based on the; /// style for that language defined in the .clang-format file. If no style has; /// been defined in the .clang-format file for the specific language, a; /// predefined style given by 'BasedOnStyle' is used. If 'BasedOnStyle' is not; /// found, the formatting is based on llvm style. A matching delimiter takes; /// precedence over a matching enclosing function name for determining the; /// language of the raw string contents.; ///; /// If a canonical delimiter is specified, occurrences of other delimiters for; /// the same language will be updated to the canonical if possible.; ///; /// There should be at most one specification per language and each delimiter; /// and enclosing function should not occur in multiple specifications.; ///; /// To configure this in the .clang-format file, use:; /// \code{.yaml}; /// RawStringFormats:; /// - Language: TextProto; /// Delimiters:; /// - 'pb'; /// - 'proto'; /// EnclosingFunctions:; /// - 'PARSE_TEXT_PROTO'; /// BasedOnStyle: google; /// - Language: Cpp; /// Delimiters:; /// - 'cc'; /// - 'cpp'; /// BasedOnStyle: llvm; /// CanonicalDelimiter: 'cc'; /// \endcode; /// \version 6",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:13,Availability,redundant,redundant,13,/// Types of redundant parentheses to remove.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:13,Safety,redund,redundant,13,/// Types of redundant parentheses to remove.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:11,Availability,redundant,redundant,11,"/// Remove redundant parentheses.; /// \warning; /// Setting this option to any value other than ``Leave`` could lead to; /// incorrect code formatting due to clang-format's lack of complete semantic; /// information. As such, extra care should be taken to review code changes; /// made by this option.; /// \endwarning; /// \version 17",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:11,Safety,redund,redundant,11,"/// Remove redundant parentheses.; /// \warning; /// Setting this option to any value other than ``Leave`` could lead to; /// incorrect code formatting due to clang-format's lack of complete semantic; /// information. As such, extra care should be taken to review code changes; /// made by this option.; /// \endwarning; /// \version 17",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:16,Testability,log,logic,16,/// Indentation logic for requires expression bodies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:79,Deployability,A/B,A/B,79,"/// Includes are never sorted.; /// \code; /// #include ""B/A.h""; /// #include ""A/B.h""; /// #include ""a/b.h""; /// #include ""A/b.h""; /// #include ""B/a.h""; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:101,Deployability,a/b,a/b,101,"/// Includes are never sorted.; /// \code; /// #include ""B/A.h""; /// #include ""A/B.h""; /// #include ""a/b.h""; /// #include ""A/b.h""; /// #include ""B/a.h""; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:123,Deployability,A/b,A/b,123,"/// Includes are never sorted.; /// \code; /// #include ""B/A.h""; /// #include ""A/B.h""; /// #include ""a/b.h""; /// #include ""A/b.h""; /// #include ""B/a.h""; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:96,Deployability,A/B,A/B,96,"/// Includes are sorted in an ASCIIbetical or case sensitive fashion.; /// \code; /// #include ""A/B.h""; /// #include ""A/b.h""; /// #include ""B/A.h""; /// #include ""B/a.h""; /// #include ""a/b.h""; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:118,Deployability,A/b,A/b,118,"/// Includes are sorted in an ASCIIbetical or case sensitive fashion.; /// \code; /// #include ""A/B.h""; /// #include ""A/b.h""; /// #include ""B/A.h""; /// #include ""B/a.h""; /// #include ""a/b.h""; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:184,Deployability,a/b,a/b,184,"/// Includes are sorted in an ASCIIbetical or case sensitive fashion.; /// \code; /// #include ""A/B.h""; /// #include ""A/b.h""; /// #include ""B/A.h""; /// #include ""B/a.h""; /// #include ""a/b.h""; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:98,Deployability,A/B,A/B,98,"/// Includes are sorted in an alphabetical or case insensitive fashion.; /// \code; /// #include ""A/B.h""; /// #include ""A/b.h""; /// #include ""a/b.h""; /// #include ""B/A.h""; /// #include ""B/a.h""; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:120,Deployability,A/b,A/b,120,"/// Includes are sorted in an alphabetical or case insensitive fashion.; /// \code; /// #include ""A/B.h""; /// #include ""A/b.h""; /// #include ""a/b.h""; /// #include ""B/A.h""; /// #include ""B/a.h""; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:142,Deployability,a/b,a/b,142,"/// Includes are sorted in an alphabetical or case insensitive fashion.; /// \code; /// #include ""A/B.h""; /// #include ""A/b.h""; /// #include ""a/b.h""; /// #include ""B/A.h""; /// #include ""B/a.h""; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:47,Testability,log,logical,47,"/// If ``true``, a space is inserted after the logical not operator (``!``).; /// \code; /// true: false:; /// ! someExpression(); vs. !someExpression();; /// \endcode; /// \version 9",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:48,Modifiability,inherit,inheritance,48,"/// If ``false``, spaces will be removed before inheritance colon.; /// \code; /// true: false:; /// class Foo : Bar {} vs. class Foo: Bar {}; /// \endcode; /// \version 7",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Modifiability,Config,Configure,4,/// Configure each individual space before parentheses in; /// ``SpaceBeforeParensOptions``.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Modifiability,Config,Configure,4,/// Configure each individual space in parentheses in; /// `SpacesInParensOptions`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:14,Safety,detect,detection,14,/// Automatic detection based on the input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:328,Modifiability,variab,variable,328,"/// Macros which are ignored in front of a statement, as if they were an; /// attribute. So that they are not parsed as identifier, for example for Qts; /// emit.; /// \code; /// AlignConsecutiveDeclarations: true; /// StatementAttributeLikeMacros: []; /// unsigned char data = 'x';; /// emit signal(data); // This is parsed as variable declaration.; ///; /// AlignConsecutiveDeclarations: true; /// StatementAttributeLikeMacros: [emit]; /// unsigned char data = 'x';; /// emit signal(data); // Now it's fine again.; /// \endcode; /// \version 12",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:243,Deployability,configurat,configuration,243,"/// \brief A vector of macros that should be interpreted as type declarations; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// STACK_OF(...); /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// TypenameMacros: ['STACK_OF', 'LIST']; /// \endcode; ///; /// For example: OpenSSL STACK_OF, BSD LIST_ENTRY.; /// \version 9",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:243,Modifiability,config,configuration,243,"/// \brief A vector of macros that should be interpreted as type declarations; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// STACK_OF(...); /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// TypenameMacros: ['STACK_OF', 'LIST']; /// \endcode; ///; /// For example: OpenSSL STACK_OF, BSD LIST_ENTRY.; /// \version 9",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:275,Modifiability,config,configured,275,"/// \brief A vector of macros that should be interpreted as type declarations; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// STACK_OF(...); /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// TypenameMacros: ['STACK_OF', 'LIST']; /// \endcode; ///; /// For example: OpenSSL STACK_OF, BSD LIST_ENTRY.; /// \version 9",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:141,Usability,clear,clear,141,"/// For Verilog, put each port on its own line in module instantiations.; /// \code; /// true:; /// ffnand ff1(.q(),; /// .qbar(out1),; /// .clear(in1),; /// .preset(in2));; ///; /// false:; /// ffnand ff1(.q(), .qbar(out1), .clear(in1), .preset(in2));; /// \endcode; /// \version 17",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:226,Usability,clear,clear,226,"/// For Verilog, put each port on its own line in module instantiations.; /// \code; /// true:; /// ffnand ff1(.q(),; /// .qbar(out1),; /// .clear(in1),; /// .preset(in2));; ///; /// false:; /// ffnand ff1(.q(), .qbar(out1), .clear(in1), .preset(in2));; /// \endcode; /// \version 17",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:217,Deployability,configurat,configuration,217,"/// A vector of macros which are whitespace-sensitive and should not; /// be touched.; ///; /// These are expected to be macros of the form:; /// \code; /// STRINGIZE(...); /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// WhitespaceSensitiveMacros: ['STRINGIZE', 'PP_STRINGIZE']; /// \endcode; ///; /// For example: BOOST_PP_STRINGIZE; /// \version 11",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:217,Modifiability,config,configuration,217,"/// A vector of macros which are whitespace-sensitive and should not; /// be touched.; ///; /// These are expected to be macros of the form:; /// \code; /// STRINGIZE(...); /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// WhitespaceSensitiveMacros: ['STRINGIZE', 'PP_STRINGIZE']; /// \endcode; ///; /// For example: BOOST_PP_STRINGIZE; /// \version 11",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:249,Modifiability,config,configured,249,"/// A vector of macros which are whitespace-sensitive and should not; /// be touched.; ///; /// These are expected to be macros of the form:; /// \code; /// STRINGIZE(...); /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// WhitespaceSensitiveMacros: ['STRINGIZE', 'PP_STRINGIZE']; /// \endcode; ///; /// For example: BOOST_PP_STRINGIZE; /// \version 11",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:271,Availability,alive,alive,271,"// Stores per-language styles. A FormatStyle instance inside has an empty; // StyleSet. A FormatStyle instance returned by the Get method has its; // StyleSet set to a copy of the originating StyleSet, effectively keeping the; // internal representation of that StyleSet alive.; //; // The memory management and ownership reminds of a birds nest: chicks; // leaving the nest take photos of the nest with them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:3,Usability,Clear,Clears,3,// Clears this FormatStyleSet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:252,Integrability,protocol,protocol-buffers,252,/// Returns a format style complying with one of Google's style guides:; /// http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml.; /// http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml.; /// https://developers.google.com/protocol-buffers/docs/style.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:64,Usability,guid,guides,64,/// Returns a format style complying with one of Google's style guides:; /// http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml.; /// http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml.; /// https://developers.google.com/protocol-buffers/docs/style.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:59,Usability,guid,guide,59,/// Returns a format style complying with Chromium's style guide:; /// http://www.chromium.org/developers/coding-style.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:58,Usability,guid,guide,58,/// Returns a format style complying with Mozilla's style guide:; /// https://firefox-source-docs.mozilla.org/code-quality/coding-style/index.html.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:57,Usability,guid,guide,57,/// Returns a format style complying with Webkit's style guide:; /// http://www.webkit.org/coding/coding-style.html,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:58,Usability,guid,guide,58,/// Returns a format style complying with Microsoft style guide:; /// https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2017,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:369,Availability,error,errors,369,"/// Parse configuration from YAML-formatted text.; ///; /// Style->Language is used to get the base style, if the ``BasedOnStyle``; /// option is present.; ///; /// The FormatStyleSet of Style is reset.; ///; /// When ``BasedOnStyle`` is not present, options not present in the YAML; /// document, are retained in \p Style.; ///; /// If AllowUnknownOptions is true, no errors are emitted if unknown; /// format options are occurred.; ///; /// If set all diagnostics are emitted through the DiagHandler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,Deployability,configurat,configuration,10,"/// Parse configuration from YAML-formatted text.; ///; /// Style->Language is used to get the base style, if the ``BasedOnStyle``; /// option is present.; ///; /// The FormatStyleSet of Style is reset.; ///; /// When ``BasedOnStyle`` is not present, options not present in the YAML; /// document, are retained in \p Style.; ///; /// If AllowUnknownOptions is true, no errors are emitted if unknown; /// format options are occurred.; ///; /// If set all diagnostics are emitted through the DiagHandler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,Modifiability,config,configuration,10,"/// Parse configuration from YAML-formatted text.; ///; /// Style->Language is used to get the base style, if the ``BasedOnStyle``; /// option is present.; ///; /// The FormatStyleSet of Style is reset.; ///; /// When ``BasedOnStyle`` is not present, options not present in the YAML; /// document, are retained in \p Style.; ///; /// If AllowUnknownOptions is true, no errors are emitted if unknown; /// format options are occurred.; ///; /// If set all diagnostics are emitted through the DiagHandler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:9,Deployability,configurat,configuration,9,/// Gets configuration in a YAML string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:9,Modifiability,config,configuration,9,/// Gets configuration in a YAML string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:126,Availability,Error,Error,126,"/// Returns the replacements corresponding to applying and formatting; /// \p Replaces on success; otheriwse, return an llvm::Error carrying; /// llvm::StringError.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:147,Availability,Error,Error,147,"/// Returns the replacements corresponding to applying \p Replaces and; /// cleaning up the code after that on success; otherwise, return an llvm::Error; /// carrying llvm::StringError.; /// This also supports inserting/deleting C++ #include directives:; /// - If a replacement has offset UINT_MAX, length 0, and a replacement text; /// that is an #include directive, this will insert the #include into the; /// correct block in the \p Code.; /// - If a replacement has offset UINT_MAX, length 1, and a replacement text; /// that is the name of the header to be removed, the header will be removed; /// from \p Code if it exists.; /// The include manipulation is done via ``tooling::HeaderInclude``, see its; /// documentation for more details on how include insertion points are found and; /// what edits are produced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:100,Availability,recover,recoverable,100,/// A value of ``false`` means that any of the affected ranges were not; /// formatted due to a non-recoverable syntax error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:119,Availability,error,error,119,/// A value of ``false`` means that any of the affected ranges were not; /// formatted due to a non-recoverable syntax error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:100,Safety,recover,recoverable,100,/// A value of ``false`` means that any of the affected ranges were not; /// formatted due to a non-recoverable syntax error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:109,Availability,error,error,109,"/// If ``FormatComplete`` is false, ``Line`` records a one-based; /// original line number at which a syntax error might have occurred. This is; /// based on a best-effort analysis and could be imprecise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:70,Modifiability,extend,extended,70,"/// Reformats the given \p Ranges in \p Code.; ///; /// Each range is extended on either end to its next bigger logic unit, i.e.; /// everything that might influence its formatting or might be influenced by its; /// formatting.; ///; /// Returns the ``Replacements`` necessary to make all \p Ranges comply with; /// \p Style.; ///; /// If ``Status`` is non-null, its value will be populated with the status of; /// this formatting attempt. See \c FormattingAttemptStatus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:112,Testability,log,logic,112,"/// Reformats the given \p Ranges in \p Code.; ///; /// Each range is extended on either end to its next bigger logic unit, i.e.; /// everything that might influence its formatting or might be influenced by its; /// formatting.; ///; /// Returns the ``Replacements`` necessary to make all \p Ranges comply with; /// \p Style.; ///; /// If ``Status`` is non-null, its value will be populated with the status of; /// this formatting attempt. See \c FormattingAttemptStatus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:165,Availability,recover,recoverable,165,"/// Same as above, except if ``IncompleteFormat`` is non-null, its value; /// will be set to true if any of the affected ranges were not formatted due to; /// a non-recoverable syntax error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:184,Availability,error,error,184,"/// Same as above, except if ``IncompleteFormat`` is non-null, its value; /// will be set to true if any of the affected ranges were not formatted due to; /// a non-recoverable syntax error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:165,Safety,recover,recoverable,165,"/// Same as above, except if ``IncompleteFormat`` is non-null, its value; /// will be set to true if any of the affected ranges were not formatted due to; /// a non-recoverable syntax error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:27,Availability,redundant,redundant,27,/// Clean up any erroneous/redundant code in the given \p Ranges in \p; /// Code.; ///; /// Returns the ``Replacements`` that clean up all \p Ranges in \p Code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:27,Safety,redund,redundant,27,/// Clean up any erroneous/redundant code in the given \p Ranges in \p; /// Code.; ///; /// Returns the ``Replacements`` that clean up all \p Ranges in \p Code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:1232,Availability,error,errors,1232,"/// Construct a FormatStyle based on ``StyleName``.; ///; /// ``StyleName`` can take several forms:; /// * ""{<key>: <value>, ...}"" - Set specic style parameters.; /// * ""<style name>"" - One of the style names supported by; /// getPredefinedStyle().; /// * ""file"" - Load style configuration from a file called ``.clang-format``; /// located in one of the parent directories of ``FileName`` or the current; /// directory if ``FileName`` is empty.; /// * ""file:<format_file_path>"" to explicitly specify the configuration file to; /// use.; ///; /// \param[in] StyleName Style name to interpret according to the description; /// above.; /// \param[in] FileName Path to start search for .clang-format if ``StyleName``; /// == ""file"".; /// \param[in] FallbackStyle The name of a predefined style used to fallback to; /// in case \p StyleName is ""file"" and no file can be found.; /// \param[in] Code The actual code to be formatted. Used to determine the; /// language if the filename isn't sufficient.; /// \param[in] FS The underlying file system, in which the file resides. By; /// default, the file system is the real file system.; /// \param[in] AllowUnknownOptions If true, unknown format options only; /// emit a warning. If false, errors are emitted on unknown format; /// options.; ///; /// \returns FormatStyle as specified by ``StyleName``. If ``StyleName`` is; /// ""file"" and no file is found, returns ``FallbackStyle``. If no style could be; /// determined, returns an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:1475,Availability,Error,Error,1475,"/// Construct a FormatStyle based on ``StyleName``.; ///; /// ``StyleName`` can take several forms:; /// * ""{<key>: <value>, ...}"" - Set specic style parameters.; /// * ""<style name>"" - One of the style names supported by; /// getPredefinedStyle().; /// * ""file"" - Load style configuration from a file called ``.clang-format``; /// located in one of the parent directories of ``FileName`` or the current; /// directory if ``FileName`` is empty.; /// * ""file:<format_file_path>"" to explicitly specify the configuration file to; /// use.; ///; /// \param[in] StyleName Style name to interpret according to the description; /// above.; /// \param[in] FileName Path to start search for .clang-format if ``StyleName``; /// == ""file"".; /// \param[in] FallbackStyle The name of a predefined style used to fallback to; /// in case \p StyleName is ""file"" and no file can be found.; /// \param[in] Code The actual code to be formatted. Used to determine the; /// language if the filename isn't sufficient.; /// \param[in] FS The underlying file system, in which the file resides. By; /// default, the file system is the real file system.; /// \param[in] AllowUnknownOptions If true, unknown format options only; /// emit a warning. If false, errors are emitted on unknown format; /// options.; ///; /// \returns FormatStyle as specified by ``StyleName``. If ``StyleName`` is; /// ""file"" and no file is found, returns ``FallbackStyle``. If no style could be; /// determined, returns an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:276,Deployability,configurat,configuration,276,"/// Construct a FormatStyle based on ``StyleName``.; ///; /// ``StyleName`` can take several forms:; /// * ""{<key>: <value>, ...}"" - Set specic style parameters.; /// * ""<style name>"" - One of the style names supported by; /// getPredefinedStyle().; /// * ""file"" - Load style configuration from a file called ``.clang-format``; /// located in one of the parent directories of ``FileName`` or the current; /// directory if ``FileName`` is empty.; /// * ""file:<format_file_path>"" to explicitly specify the configuration file to; /// use.; ///; /// \param[in] StyleName Style name to interpret according to the description; /// above.; /// \param[in] FileName Path to start search for .clang-format if ``StyleName``; /// == ""file"".; /// \param[in] FallbackStyle The name of a predefined style used to fallback to; /// in case \p StyleName is ""file"" and no file can be found.; /// \param[in] Code The actual code to be formatted. Used to determine the; /// language if the filename isn't sufficient.; /// \param[in] FS The underlying file system, in which the file resides. By; /// default, the file system is the real file system.; /// \param[in] AllowUnknownOptions If true, unknown format options only; /// emit a warning. If false, errors are emitted on unknown format; /// options.; ///; /// \returns FormatStyle as specified by ``StyleName``. If ``StyleName`` is; /// ""file"" and no file is found, returns ``FallbackStyle``. If no style could be; /// determined, returns an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:504,Deployability,configurat,configuration,504,"/// Construct a FormatStyle based on ``StyleName``.; ///; /// ``StyleName`` can take several forms:; /// * ""{<key>: <value>, ...}"" - Set specic style parameters.; /// * ""<style name>"" - One of the style names supported by; /// getPredefinedStyle().; /// * ""file"" - Load style configuration from a file called ``.clang-format``; /// located in one of the parent directories of ``FileName`` or the current; /// directory if ``FileName`` is empty.; /// * ""file:<format_file_path>"" to explicitly specify the configuration file to; /// use.; ///; /// \param[in] StyleName Style name to interpret according to the description; /// above.; /// \param[in] FileName Path to start search for .clang-format if ``StyleName``; /// == ""file"".; /// \param[in] FallbackStyle The name of a predefined style used to fallback to; /// in case \p StyleName is ""file"" and no file can be found.; /// \param[in] Code The actual code to be formatted. Used to determine the; /// language if the filename isn't sufficient.; /// \param[in] FS The underlying file system, in which the file resides. By; /// default, the file system is the real file system.; /// \param[in] AllowUnknownOptions If true, unknown format options only; /// emit a warning. If false, errors are emitted on unknown format; /// options.; ///; /// \returns FormatStyle as specified by ``StyleName``. If ``StyleName`` is; /// ""file"" and no file is found, returns ``FallbackStyle``. If no style could be; /// determined, returns an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:276,Modifiability,config,configuration,276,"/// Construct a FormatStyle based on ``StyleName``.; ///; /// ``StyleName`` can take several forms:; /// * ""{<key>: <value>, ...}"" - Set specic style parameters.; /// * ""<style name>"" - One of the style names supported by; /// getPredefinedStyle().; /// * ""file"" - Load style configuration from a file called ``.clang-format``; /// located in one of the parent directories of ``FileName`` or the current; /// directory if ``FileName`` is empty.; /// * ""file:<format_file_path>"" to explicitly specify the configuration file to; /// use.; ///; /// \param[in] StyleName Style name to interpret according to the description; /// above.; /// \param[in] FileName Path to start search for .clang-format if ``StyleName``; /// == ""file"".; /// \param[in] FallbackStyle The name of a predefined style used to fallback to; /// in case \p StyleName is ""file"" and no file can be found.; /// \param[in] Code The actual code to be formatted. Used to determine the; /// language if the filename isn't sufficient.; /// \param[in] FS The underlying file system, in which the file resides. By; /// default, the file system is the real file system.; /// \param[in] AllowUnknownOptions If true, unknown format options only; /// emit a warning. If false, errors are emitted on unknown format; /// options.; ///; /// \returns FormatStyle as specified by ``StyleName``. If ``StyleName`` is; /// ""file"" and no file is found, returns ``FallbackStyle``. If no style could be; /// determined, returns an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:504,Modifiability,config,configuration,504,"/// Construct a FormatStyle based on ``StyleName``.; ///; /// ``StyleName`` can take several forms:; /// * ""{<key>: <value>, ...}"" - Set specic style parameters.; /// * ""<style name>"" - One of the style names supported by; /// getPredefinedStyle().; /// * ""file"" - Load style configuration from a file called ``.clang-format``; /// located in one of the parent directories of ``FileName`` or the current; /// directory if ``FileName`` is empty.; /// * ""file:<format_file_path>"" to explicitly specify the configuration file to; /// use.; ///; /// \param[in] StyleName Style name to interpret according to the description; /// above.; /// \param[in] FileName Path to start search for .clang-format if ``StyleName``; /// == ""file"".; /// \param[in] FallbackStyle The name of a predefined style used to fallback to; /// in case \p StyleName is ""file"" and no file can be found.; /// \param[in] Code The actual code to be formatted. Used to determine the; /// language if the filename isn't sufficient.; /// \param[in] FS The underlying file system, in which the file resides. By; /// default, the file system is the real file system.; /// \param[in] AllowUnknownOptions If true, unknown format options only; /// emit a warning. If false, errors are emitted on unknown format; /// options.; ///; /// \returns FormatStyle as specified by ``StyleName``. If ``StyleName`` is; /// ""file"" and no file is found, returns ``FallbackStyle``. If no style could be; /// determined, returns an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:265,Performance,Load,Load,265,"/// Construct a FormatStyle based on ``StyleName``.; ///; /// ``StyleName`` can take several forms:; /// * ""{<key>: <value>, ...}"" - Set specic style parameters.; /// * ""<style name>"" - One of the style names supported by; /// getPredefinedStyle().; /// * ""file"" - Load style configuration from a file called ``.clang-format``; /// located in one of the parent directories of ``FileName`` or the current; /// directory if ``FileName`` is empty.; /// * ""file:<format_file_path>"" to explicitly specify the configuration file to; /// use.; ///; /// \param[in] StyleName Style name to interpret according to the description; /// above.; /// \param[in] FileName Path to start search for .clang-format if ``StyleName``; /// == ""file"".; /// \param[in] FallbackStyle The name of a predefined style used to fallback to; /// in case \p StyleName is ""file"" and no file can be found.; /// \param[in] Code The actual code to be formatted. Used to determine the; /// language if the filename isn't sufficient.; /// \param[in] FS The underlying file system, in which the file resides. By; /// default, the file system is the real file system.; /// \param[in] AllowUnknownOptions If true, unknown format options only; /// emit a warning. If false, errors are emitted on unknown format; /// options.; ///; /// \returns FormatStyle as specified by ``StyleName``. If ``StyleName`` is; /// ""file"" and no file is found, returns ``FallbackStyle``. If no style could be; /// determined, returns an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Format/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:26,Availability,avail,available,26,/// \brief Enumerates the available scopes for skipping function bodies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:26,Availability,avail,available,26,/// \brief Enumerates the available kinds for capturing diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:22,Performance,load,loading,22,/// Utility class for loading a ASTContext from an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:99,Performance,load,loaded,99,/// The AST consumer that received information about the translation; /// unit as it was parsed or loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:97,Availability,avail,available,97,"/// Optional owned invocation, just used to make the invocation used in; /// LoadFromCommandLine available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:77,Performance,Load,LoadFromCommandLine,77,"/// Optional owned invocation, just used to make the invocation used in; /// LoadFromCommandLine available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:16,Performance,load,loader,16,/// Fake module loader: the AST unit doesn't need to load any modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:53,Performance,load,load,53,/// Fake module loader: the AST unit doesn't need to load any modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:36,Performance,load,loaded,36,/// Track whether the main file was loaded from an AST or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:324,Energy Efficiency,efficient,efficient,324,/// Track the top-level decls which appeared in an ASTUnit which was loaded; /// from a source file.; //; // FIXME: This is just an optimization hack to avoid deserializing large parts; // of a PCH file when using the Index library on an ASTUnit loaded from; // source. In the long term we should make the Index library use efficient and; // more scalable search mechanisms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:69,Performance,load,loaded,69,/// Track the top-level decls which appeared in an ASTUnit which was loaded; /// from a source file.; //; // FIXME: This is just an optimization hack to avoid deserializing large parts; // of a PCH file when using the Index library on an ASTUnit loaded from; // source. In the long term we should make the Index library use efficient and; // more scalable search mechanisms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:132,Performance,optimiz,optimization,132,/// Track the top-level decls which appeared in an ASTUnit which was loaded; /// from a source file.; //; // FIXME: This is just an optimization hack to avoid deserializing large parts; // of a PCH file when using the Index library on an ASTUnit loaded from; // source. In the long term we should make the Index library use efficient and; // more scalable search mechanisms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:246,Performance,load,loaded,246,/// Track the top-level decls which appeared in an ASTUnit which was loaded; /// from a source file.; //; // FIXME: This is just an optimization hack to avoid deserializing large parts; // of a PCH file when using the Index library on an ASTUnit loaded from; // source. In the long term we should make the Index library use efficient and; // more scalable search mechanisms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:347,Performance,scalab,scalable,347,/// Track the top-level decls which appeared in an ASTUnit which was loaded; /// from a source file.; //; // FIXME: This is just an optimization hack to avoid deserializing large parts; // of a PCH file when using the Index library on an ASTUnit loaded from; // source. In the long term we should make the Index library use efficient and; // more scalable search mechanisms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:153,Safety,avoid,avoid,153,/// Track the top-level decls which appeared in an ASTUnit which was loaded; /// from a source file.; //; // FIXME: This is just an optimization hack to avoid deserializing large parts; // of a PCH file when using the Index library on an ASTUnit loaded from; // source. In the long term we should make the Index library use efficient and; // more scalable search mechanisms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:76,Availability,failure,failure,76,"/// The set of diagnostics produced when failing to parse, e.g. due; /// to failure to load the PCH.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:87,Performance,load,load,87,"/// The set of diagnostics produced when failing to parse, e.g. due; /// to failure to load the PCH.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Performance,Cache,Cache,4,"/// Cache pairs ""filename - source location""; ///; /// Cache contains only source locations from preamble so it is; /// guaranteed that they stay valid when the SourceManager is recreated.; /// This cache is used when loading preamble to increase performance; /// of that loading. It must be cleared when preamble is recreated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:55,Performance,Cache,Cache,55,"/// Cache pairs ""filename - source location""; ///; /// Cache contains only source locations from preamble so it is; /// guaranteed that they stay valid when the SourceManager is recreated.; /// This cache is used when loading preamble to increase performance; /// of that loading. It must be cleared when preamble is recreated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:199,Performance,cache,cache,199,"/// Cache pairs ""filename - source location""; ///; /// Cache contains only source locations from preamble so it is; /// guaranteed that they stay valid when the SourceManager is recreated.; /// This cache is used when loading preamble to increase performance; /// of that loading. It must be cleared when preamble is recreated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:218,Performance,load,loading,218,"/// Cache pairs ""filename - source location""; ///; /// Cache contains only source locations from preamble so it is; /// guaranteed that they stay valid when the SourceManager is recreated.; /// This cache is used when loading preamble to increase performance; /// of that loading. It must be cleared when preamble is recreated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:247,Performance,perform,performance,247,"/// Cache pairs ""filename - source location""; ///; /// Cache contains only source locations from preamble so it is; /// guaranteed that they stay valid when the SourceManager is recreated.; /// This cache is used when loading preamble to increase performance; /// of that loading. It must be cleared when preamble is recreated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:272,Performance,load,loading,272,"/// Cache pairs ""filename - source location""; ///; /// Cache contains only source locations from preamble so it is; /// guaranteed that they stay valid when the SourceManager is recreated.; /// This cache is used when loading preamble to increase performance; /// of that loading. It must be cleared when preamble is recreated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:292,Usability,clear,cleared,292,"/// Cache pairs ""filename - source location""; ///; /// Cache contains only source locations from preamble so it is; /// guaranteed that they stay valid when the SourceManager is recreated.; /// This cache is used when loading preamble to increase performance; /// of that loading. It must be cleared when preamble is recreated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:306,Availability,error,errors,306,"/// The number of warnings that occurred while parsing the preamble.; ///; /// This value will be used to restore the state of the \c DiagnosticsEngine; /// object when re-using the precompiled preamble. Note that only the; /// number of warnings matters, since we will not save the preamble; /// when any errors are present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:83,Performance,cache,cached,83,/// Whether to include brief documentation within the set of code; /// completions cached.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:6,Performance,cache,cached,6,"/// A cached code-completion result, which may be introduced in one of; /// many different contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:8,Availability,avail,availability,8,/// The availability of this code-completion result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:8,Usability,simpl,simplified,8,/// The simplified type class for a non-macro completion result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:105,Performance,cache,cached,105,"/// The type of a non-macro completion result, stored as a unique; /// integer used by the string map of cached completion types.; ///; /// This value will be zero if the type is not known, or a unique value; /// determined by the formatted type string. Se \c CachedCompletionTypes; /// for more information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:260,Performance,Cache,CachedCompletionTypes,260,"/// The type of a non-macro completion result, stored as a unique; /// integer used by the string map of cached completion types.; ///; /// This value will be zero if the type is not known, or a unique value; /// determined by the formatted type string. Se \c CachedCompletionTypes; /// for more information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:35,Performance,cache,cache,35,/// Retrieve the allocator used to cache global code completions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:28,Performance,cache,cached,28,/// Allocator used to store cached code completions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:15,Performance,cache,cached,15,/// The set of cached code-completion results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:233,Performance,cache,cache,233,/// A string hash of the top-level declaration and macro definition; /// names processed the last time that we reparsed the file.; ///; /// This hash value is used to determine when we need to refresh the; /// global code-completion cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:13,Security,hash,hash,13,/// A string hash of the top-level declaration and macro definition; /// names processed the last time that we reparsed the file.; ///; /// This hash value is used to determine when we need to refresh the; /// global code-completion cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:145,Security,hash,hash,145,/// A string hash of the top-level declaration and macro definition; /// names processed the last time that we reparsed the file.; ///; /// This hash value is used to determine when we need to refresh the; /// global code-completion cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:249,Performance,cache,cache,249,/// A string hash of the top-level declaration and macro definition; /// names processed the last time that we reparsed the precompiled preamble.; ///; /// This hash value is used to determine when we need to refresh the; /// global code-completion cache after a rebuild of the precompiled preamble.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:13,Security,hash,hash,13,/// A string hash of the top-level declaration and macro definition; /// names processed the last time that we reparsed the precompiled preamble.; ///; /// This hash value is used to determine when we need to refresh the; /// global code-completion cache after a rebuild of the precompiled preamble.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:161,Security,hash,hash,161,/// A string hash of the top-level declaration and macro definition; /// names processed the last time that we reparsed the precompiled preamble.; ///; /// This hash value is used to determine when we need to refresh the; /// global code-completion cache after a rebuild of the precompiled preamble.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:16,Security,hash,hash,16,/// The current hash value for the top-level declaration and macro; /// definition names,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:104,Safety,safe,safe,104,"/// Bit used by CIndex to mark when a translation unit may be in an; /// inconsistent state, and is not safe to free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Performance,Cache,Cache,4,"/// Cache any ""global"" code-completion results, so that we can avoid; /// recomputing them with each completion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:63,Safety,avoid,avoid,63,"/// Cache any ""global"" code-completion results, so that we can avoid; /// recomputing them with each completion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Usability,Clear,Clear,4,/// Clear out and deallocate,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:308,Deployability,release,release,308,"/// Allows us to assert that ASTUnit is not being used concurrently,; /// which is not supported.; ///; /// Clients should create instances of the ConcurrencyCheck class whenever; /// using the ASTUnit in a way that isn't intended to be concurrent, which is; /// just about any usage.; /// Becomes a noop in release mode; only useful for debug mode checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:55,Performance,concurren,concurrently,55,"/// Allows us to assert that ASTUnit is not being used concurrently,; /// which is not supported.; ///; /// Clients should create instances of the ConcurrencyCheck class whenever; /// using the ASTUnit in a way that isn't intended to be concurrent, which is; /// just about any usage.; /// Becomes a noop in release mode; only useful for debug mode checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:147,Performance,Concurren,ConcurrencyCheck,147,"/// Allows us to assert that ASTUnit is not being used concurrently,; /// which is not supported.; ///; /// Clients should create instances of the ConcurrencyCheck class whenever; /// using the ASTUnit in a way that isn't intended to be concurrent, which is; /// just about any usage.; /// Becomes a noop in release mode; only useful for debug mode checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:237,Performance,concurren,concurrent,237,"/// Allows us to assert that ASTUnit is not being used concurrently,; /// which is not supported.; ///; /// Clients should create instances of the ConcurrencyCheck class whenever; /// using the ASTUnit in a way that isn't intended to be concurrent, which is; /// just about any usage.; /// Becomes a noop in release mode; only useful for debug mode checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:17,Testability,assert,assert,17,"/// Allows us to assert that ASTUnit is not being used concurrently,; /// which is not supported.; ///; /// Clients should create instances of the ConcurrencyCheck class whenever; /// using the ASTUnit in a way that isn't intended to be concurrent, which is; /// just about any usage.; /// Becomes a noop in release mode; only useful for debug mode checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:41,Integrability,message,messages,41,/// Enable source-range based diagnostic messages.; ///; /// If diagnostic messages with source-range information are to be expected; /// and AST comes not from file (e.g. after LoadFromCompilerInvocation) this; /// function has to be called.; /// The function is to be called only once and the AST should be associated; /// with the same source file afterwards.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:75,Integrability,message,messages,75,/// Enable source-range based diagnostic messages.; ///; /// If diagnostic messages with source-range information are to be expected; /// and AST comes not from file (e.g. after LoadFromCompilerInvocation) this; /// function has to be called.; /// The function is to be called only once and the AST should be associated; /// with the same source file afterwards.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:178,Performance,Load,LoadFromCompilerInvocation,178,/// Enable source-range based diagnostic messages.; ///; /// If diagnostic messages with source-range information are to be expected; /// and AST comes not from file (e.g. after LoadFromCompilerInvocation) this; /// function has to be called.; /// The function is to be called only once and the AST should be associated; /// with the same source file afterwards.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:55,Security,hash,hash,55,/// Retrieve a reference to the current top-level name hash value.; ///; /// Note: This is used internally by the top-level tracking action,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:283,Performance,load,loaded,283,"/// Get the source location for the given file:line:col triplet.; ///; /// The difference with SourceManager::getLocation is that this method checks; /// whether the requested location points inside the precompiled preamble; /// in which case the returned source location will be a ""loaded"" one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:19,Performance,load,loaded,19,"/// If \p Loc is a loaded location from the preamble, returns; /// the corresponding local location of the main file, otherwise it returns; /// \p Loc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:113,Performance,load,loaded,113,"/// If \p Loc is a local location of the main file but inside the; /// preamble chunk, returns the corresponding loaded location from the; /// preamble, otherwise it returns \p Loc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:139,Performance,load,loaded,139,"/// Returns an iterator range for the local preprocessing entities; /// of the local Preprocessor, if this is a parsed source file, or the loaded; /// preprocessing entities of the primary module if this is an AST file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:119,Safety,abort,abort,119,/// Type for a function iterating over a number of declarations.; /// \returns true to continue iteration and false to abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:96,Performance,load,loaded,96,/// Iterate over local declarations (locally parsed if this is a parsed; /// source file or the loaded declarations of the primary module if this is an; /// AST file).; /// \returns true if the iteration was complete or false if it was aborted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:236,Safety,abort,aborted,236,/// Iterate over local declarations (locally parsed if this is a parsed; /// source file or the loaded declarations of the primary module if this is an; /// AST file).; /// \returns true if the iteration was complete or false if it was aborted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Performance,Load,Load,4,/// Load options and the preprocessor state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Performance,Load,Load,4,"/// Load the AST, but do not restore Sema state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Performance,Load,Load,4,"/// Load everything, including Sema.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:261,Availability,error,errors,261,/// Create a ASTUnit from an AST file.; ///; /// \param Filename - The AST file to load.; ///; /// \param PCHContainerRdr - The PCHContainerOperations to use for loading and; /// creating modules.; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \returns - The initialized ASTUnit or null if the AST failed to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:302,Modifiability,extend,extend,302,/// Create a ASTUnit from an AST file.; ///; /// \param Filename - The AST file to load.; ///; /// \param PCHContainerRdr - The PCHContainerOperations to use for loading and; /// creating modules.; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \returns - The initialized ASTUnit or null if the AST failed to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:83,Performance,load,load,83,/// Create a ASTUnit from an AST file.; ///; /// \param Filename - The AST file to load.; ///; /// \param PCHContainerRdr - The PCHContainerOperations to use for loading and; /// creating modules.; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \returns - The initialized ASTUnit or null if the AST failed to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:162,Performance,load,loading,162,/// Create a ASTUnit from an AST file.; ///; /// \param Filename - The AST file to load.; ///; /// \param PCHContainerRdr - The PCHContainerOperations to use for loading and; /// creating modules.; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \returns - The initialized ASTUnit or null if the AST failed to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:418,Performance,load,load,418,/// Create a ASTUnit from an AST file.; ///; /// \param Filename - The AST file to load.; ///; /// \param PCHContainerRdr - The PCHContainerOperations to use for loading and; /// creating modules.; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \returns - The initialized ASTUnit or null if the AST failed to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:683,Availability,failure,failure,683,"/// Helper function for \c LoadFromCompilerInvocation() and; /// \c LoadFromCommandLine(), which loads an AST from a compiler invocation.; ///; /// \param PrecompilePreambleAfterNParses After how many parses the preamble; /// of this translation unit should be precompiled, to improve the performance; /// of reparsing. Set to zero to disable preambles.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem).; ///; /// \returns \c true if a catastrophic failure occurred (which means that the; /// \c ASTUnit itself is invalid), or \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:27,Performance,Load,LoadFromCompilerInvocation,27,"/// Helper function for \c LoadFromCompilerInvocation() and; /// \c LoadFromCommandLine(), which loads an AST from a compiler invocation.; ///; /// \param PrecompilePreambleAfterNParses After how many parses the preamble; /// of this translation unit should be precompiled, to improve the performance; /// of reparsing. Set to zero to disable preambles.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem).; ///; /// \returns \c true if a catastrophic failure occurred (which means that the; /// \c ASTUnit itself is invalid), or \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:68,Performance,Load,LoadFromCommandLine,68,"/// Helper function for \c LoadFromCompilerInvocation() and; /// \c LoadFromCommandLine(), which loads an AST from a compiler invocation.; ///; /// \param PrecompilePreambleAfterNParses After how many parses the preamble; /// of this translation unit should be precompiled, to improve the performance; /// of reparsing. Set to zero to disable preambles.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem).; ///; /// \returns \c true if a catastrophic failure occurred (which means that the; /// \c ASTUnit itself is invalid), or \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:97,Performance,load,loads,97,"/// Helper function for \c LoadFromCompilerInvocation() and; /// \c LoadFromCommandLine(), which loads an AST from a compiler invocation.; ///; /// \param PrecompilePreambleAfterNParses After how many parses the preamble; /// of this translation unit should be precompiled, to improve the performance; /// of reparsing. Set to zero to disable preambles.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem).; ///; /// \returns \c true if a catastrophic failure occurred (which means that the; /// \c ASTUnit itself is invalid), or \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:289,Performance,perform,performance,289,"/// Helper function for \c LoadFromCompilerInvocation() and; /// \c LoadFromCommandLine(), which loads an AST from a compiler invocation.; ///; /// \param PrecompilePreambleAfterNParses After how many parses the preamble; /// of this translation unit should be precompiled, to improve the performance; /// of reparsing. Set to zero to disable preambles.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem).; ///; /// \returns \c true if a catastrophic failure occurred (which means that the; /// \c ASTUnit itself is invalid), or \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:544,Performance,load,loaded,544,"/// Helper function for \c LoadFromCompilerInvocation() and; /// \c LoadFromCommandLine(), which loads an AST from a compiler invocation.; ///; /// \param PrecompilePreambleAfterNParses After how many parses the preamble; /// of this translation unit should be precompiled, to improve the performance; /// of reparsing. Set to zero to disable preambles.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem).; ///; /// \returns \c true if a catastrophic failure occurred (which means that the; /// \c ASTUnit itself is invalid), or \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:425,Security,access,accesses,425,"/// Helper function for \c LoadFromCompilerInvocation() and; /// \c LoadFromCommandLine(), which loads an AST from a compiler invocation.; ///; /// \param PrecompilePreambleAfterNParses After how many parses the preamble; /// of this translation unit should be precompiled, to improve the performance; /// of reparsing. Set to zero to disable preambles.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem).; ///; /// \returns \c true if a catastrophic failure occurred (which means that the; /// \c ASTUnit itself is invalid), or \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:578,Security,access,access,578,"/// Helper function for \c LoadFromCompilerInvocation() and; /// \c LoadFromCommandLine(), which loads an AST from a compiler invocation.; ///; /// \param PrecompilePreambleAfterNParses After how many parses the preamble; /// of this translation unit should be precompiled, to improve the performance; /// of reparsing. Set to zero to disable preambles.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem).; ///; /// \returns \c true if a catastrophic failure occurred (which means that the; /// \c ASTUnit itself is invalid), or \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:477,Availability,error,errors,477,"/// Create an ASTUnit from a source file, via a CompilerInvocation; /// object, by invoking the optionally provided ASTFrontendAction.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param Action - The ASTFrontendAction to invoke. Its ownership is not; /// transferred.; ///; /// \param Unit - optionally an already created ASTUnit. Its ownership is not; /// transferred.; ///; /// \param Persistent - if true the returned ASTUnit will be complete.; /// false means the caller is only interested in getting info through the; /// provided \see Action.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; /// This will only receive an ASTUnit if a new one was created. If an already; /// created ASTUnit was passed in \p Unit then the caller can check that.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:518,Modifiability,extend,extend,518,"/// Create an ASTUnit from a source file, via a CompilerInvocation; /// object, by invoking the optionally provided ASTFrontendAction.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param Action - The ASTFrontendAction to invoke. Its ownership is not; /// transferred.; ///; /// \param Unit - optionally an already created ASTUnit. Its ownership is not; /// transferred.; ///; /// \param Persistent - if true the returned ASTUnit will be complete.; /// false means the caller is only interested in getting info through the; /// provided \see Action.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; /// This will only receive an ASTUnit if a new one was created. If an already; /// created ASTUnit was passed in \p Unit then the caller can check that.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:373,Performance,load,loading,373,"/// Create an ASTUnit from a source file, via a CompilerInvocation; /// object, by invoking the optionally provided ASTFrontendAction.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param Action - The ASTFrontendAction to invoke. Its ownership is not; /// transferred.; ///; /// \param Unit - optionally an already created ASTUnit. Its ownership is not; /// transferred.; ///; /// \param Persistent - if true the returned ASTUnit will be complete.; /// false means the caller is only interested in getting info through the; /// provided \see Action.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; /// This will only receive an ASTUnit if a new one was created. If an already; /// created ASTUnit was passed in \p Unit then the caller can check that.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:1062,Performance,load,loaded,1062,"/// Create an ASTUnit from a source file, via a CompilerInvocation; /// object, by invoking the optionally provided ASTFrontendAction.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param Action - The ASTFrontendAction to invoke. Its ownership is not; /// transferred.; ///; /// \param Unit - optionally an already created ASTUnit. Its ownership is not; /// transferred.; ///; /// \param Persistent - if true the returned ASTUnit will be complete.; /// false means the caller is only interested in getting info through the; /// provided \see Action.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; /// This will only receive an ASTUnit if a new one was created. If an already; /// created ASTUnit was passed in \p Unit then the caller can check that.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:451,Availability,error,errors,451,"/// LoadFromCompilerInvocation - Create an ASTUnit from a source file, via a; /// CompilerInvocation object.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; //; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:492,Modifiability,extend,extend,492,"/// LoadFromCompilerInvocation - Create an ASTUnit from a source file, via a; /// CompilerInvocation object.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; //; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Performance,Load,LoadFromCompilerInvocation,4,"/// LoadFromCompilerInvocation - Create an ASTUnit from a source file, via a; /// CompilerInvocation object.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; //; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:347,Performance,load,loading,347,"/// LoadFromCompilerInvocation - Create an ASTUnit from a source file, via a; /// CompilerInvocation object.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; //; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:435,Availability,error,errors,435,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:476,Modifiability,extend,extend,476,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Performance,Load,LoadFromCommandLine,4,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:331,Performance,load,loading,331,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:1157,Performance,load,loaded,1157,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:1437,Performance,load,loaded,1437,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:1318,Security,access,accesses,1318,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:1471,Security,access,access,1471,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:519,Availability,failure,failure,519,"/// Reparse the source files using the same command-line options that; /// were originally used to produce this translation unit.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should give an access to; /// this(i.e. be an overlay over RealFileSystem).; /// FileMgr->getVirtualFileSystem() will be used if \p VFS is nullptr.; ///; /// \returns True if a failure occurred that causes the ASTUnit not to; /// contain any translation-unit information, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:320,Performance,load,loaded,320,"/// Reparse the source files using the same command-line options that; /// were originally used to produce this translation unit.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should give an access to; /// this(i.e. be an overlay over RealFileSystem).; /// FileMgr->getVirtualFileSystem() will be used if \p VFS is nullptr.; ///; /// \returns True if a failure occurred that causes the ASTUnit not to; /// contain any translation-unit information, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:201,Security,access,accesses,201,"/// Reparse the source files using the same command-line options that; /// were originally used to produce this translation unit.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should give an access to; /// this(i.e. be an overlay over RealFileSystem).; /// FileMgr->getVirtualFileSystem() will be used if \p VFS is nullptr.; ///; /// \returns True if a failure occurred that causes the ASTUnit not to; /// contain any translation-unit information, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:357,Security,access,access,357,"/// Reparse the source files using the same command-line options that; /// were originally used to produce this translation unit.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should give an access to; /// this(i.e. be an overlay over RealFileSystem).; /// FileMgr->getVirtualFileSystem() will be used if \p VFS is nullptr.; ///; /// \returns True if a failure occurred that causes the ASTUnit not to; /// contain any translation-unit information, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Performance,Perform,Perform,4,"/// Perform code completion at the given file, line, and; /// column within this translation unit.; ///; /// \param File The file in which code completion will occur.; ///; /// \param Line The line at which code completion will occur.; ///; /// \param Column The column at which code completion will occur.; ///; /// \param IncludeMacros Whether to include macros in the code-completion; /// results.; ///; /// \param IncludeCodePatterns Whether to include code patterns (such as a; /// for loop) in the code-completion results.; ///; /// \param IncludeBriefComments Whether to include brief documentation within; /// the set of code completions returned.; ///; /// \param Act If supplied, this argument is used to parse the input file,; /// allowing customized parsing by overriding SyntaxOnlyAction lifecycle; /// methods.; ///; /// FIXME: The Diag, LangOpts, SourceMgr, FileMgr, StoredDiagnostics, and; /// OwnedBuffers parameters are all disgusting hacks. They will go away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:106,Availability,error,error,106,/// Save this translation unit to a file with the given name.; ///; /// \returns true if there was a file error or false if the save was; /// successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:96,Availability,error,error,96,"/// Serialize this translation unit with the given output stream.; ///; /// \returns True if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ChainedDiagnosticConsumer.h:36,Availability,error,errors,36,// Default implementation (Warnings/errors count).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/ChainedDiagnosticConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ChainedDiagnosticConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CommandLineSourceLoc.h:84,Availability,error,error,84,/// Construct a parsed source location from a string; the Filename is empty on; /// error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CommandLineSourceLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CommandLineSourceLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:342,Integrability,rout,routines,342,"/// CompilerInstance - Helper class for managing a single instance of the Clang; /// compiler.; ///; /// The CompilerInstance serves two purposes:; /// (1) It manages the various objects which are necessary to run the compiler,; /// for example the preprocessor, the target information, and the AST; /// context.; /// (2) It provides utility routines for constructing and manipulating the; /// common Clang objects.; ///; /// The compiler instance generally owns the instance of all the objects that it; /// manages. However, clients can still share objects by manually setting the; /// object and retaking ownership prior to destroying the CompilerInstance.; ///; /// The compiler instance is intended to simplify clients, but not to lock them; /// in to the compiler instance for everything. When possible, utility functions; /// come in two forms; a short form that reuses the CompilerInstance objects,; /// and a long form that takes explicit instances of any required objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:706,Usability,simpl,simplify,706,"/// CompilerInstance - Helper class for managing a single instance of the Clang; /// compiler.; ///; /// The CompilerInstance serves two purposes:; /// (1) It manages the various objects which are necessary to run the compiler,; /// for example the preprocessor, the target information, and the AST; /// context.; /// (2) It provides utility routines for constructing and manipulating the; /// common Clang objects.; ///; /// The compiler instance generally owns the instance of all the objects that it; /// manages. However, clients can still share objects by manually setting the; /// object and retaking ownership prior to destroying the CompilerInstance.; ///; /// The compiler instance is intended to simplify clients, but not to lock them; /// in to the compiler instance for everything. When possible, utility functions; /// come in two forms; a short form that reuses the CompilerInstance objects,; /// and a long form that takes explicit instances of any required objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:8,Performance,cache,cache,8,/// The cache of PCM files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:15,Integrability,depend,dependency,15,/// The module dependency collector for crashdumps,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:555,Availability,error,error,555,"/// @name High-Level Operations; /// @{; /// ExecuteAction - Execute the provided action against the compiler's; /// CompilerInvocation object.; ///; /// This function makes the following assumptions:; ///; /// - The invocation options should be initialized. This function does not; /// handle the '-help' or '-version' options, clients should handle those; /// directly.; ///; /// - The diagnostics engine should have already been created by the client.; ///; /// - No other CompilerInstance state should have been initialized (this is; /// an unchecked error).; ///; /// - Clients should have initialized any LLVM target features that may be; /// required.; ///; /// - Clients should eventually call llvm_shutdown() upon the completion of; /// this routine to ensure that any managed objects are properly destroyed.; ///; /// Note that this routine may write output to 'stderr'.; ///; /// \param Act - The action to execute.; /// \return - True on success.; //; // FIXME: Eliminate the llvm_shutdown requirement, that should either be part; // of the context or else not CompilerInstance specific.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:751,Integrability,rout,routine,751,"/// @name High-Level Operations; /// @{; /// ExecuteAction - Execute the provided action against the compiler's; /// CompilerInvocation object.; ///; /// This function makes the following assumptions:; ///; /// - The invocation options should be initialized. This function does not; /// handle the '-help' or '-version' options, clients should handle those; /// directly.; ///; /// - The diagnostics engine should have already been created by the client.; ///; /// - No other CompilerInstance state should have been initialized (this is; /// an unchecked error).; ///; /// - Clients should have initialized any LLVM target features that may be; /// required.; ///; /// - Clients should eventually call llvm_shutdown() upon the completion of; /// this routine to ensure that any managed objects are properly destroyed.; ///; /// Note that this routine may write output to 'stderr'.; ///; /// \param Act - The action to execute.; /// \return - True on success.; //; // FIXME: Eliminate the llvm_shutdown requirement, that should either be part; // of the context or else not CompilerInstance specific.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:843,Integrability,rout,routine,843,"/// @name High-Level Operations; /// @{; /// ExecuteAction - Execute the provided action against the compiler's; /// CompilerInvocation object.; ///; /// This function makes the following assumptions:; ///; /// - The invocation options should be initialized. This function does not; /// handle the '-help' or '-version' options, clients should handle those; /// directly.; ///; /// - The diagnostics engine should have already been created by the client.; ///; /// - No other CompilerInstance state should have been initialized (this is; /// an unchecked error).; ///; /// - Clients should have initialized any LLVM target features that may be; /// required.; ///; /// - Clients should eventually call llvm_shutdown() upon the completion of; /// this routine to ensure that any managed objects are properly destroyed.; ///; /// Note that this routine may write output to 'stderr'.; ///; /// \param Act - The action to execute.; /// \return - True on success.; //; // FIXME: Eliminate the llvm_shutdown requirement, that should either be part; // of the context or else not CompilerInstance specific.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:21,Modifiability,plugin,plugins,21,/// Load the list of plugins requested in the \c FrontendOptions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:4,Performance,Load,Load,4,/// Load the list of plugins requested in the \c FrontendOptions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:46,Integrability,depend,depending,46,/// Return the appropriate PCHContainerWriter depending on the; /// current CodeGenOptions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:46,Integrability,depend,depending,46,/// Return the appropriate PCHContainerReader depending on the; /// current CodeGenOptions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:44,Usability,clear,clearOutputFiles,44,"/// @}; /// @name Output Files; /// @{; /// clearOutputFiles - Clear the output file list. The underlying output; /// streams must have been closed beforehand.; ///; /// \param EraseFiles - If true, attempt to erase the files from disk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:63,Usability,Clear,Clear,63,"/// @}; /// @name Output Files; /// @{; /// clearOutputFiles - Clear the output file list. The underlying output; /// streams must have been closed beforehand.; ///; /// \param EraseFiles - If true, attempt to erase the files from disk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:200,Integrability,rout,routine,200,"/// @}; /// @name Construction Utility Methods; /// @{; /// Create the diagnostics engine using the invocation's diagnostic options; /// and replace any existing one with it.; ///; /// Note that this routine also replaces the diagnostic client,; /// allocating one if one is not provided.; ///; /// \param Client If non-NULL, a diagnostic client that will be; /// attached to (and, then, owned by) the DiagnosticsEngine inside this AST; /// unit.; ///; /// \param ShouldOwnClient If Client is non-NULL, specifies whether; /// the diagnostic object should take ownership of the client.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:825,Availability,failure,failure,825,"/// Create a DiagnosticsEngine object with a the TextDiagnosticPrinter.; ///; /// If no diagnostic client is provided, this creates a; /// DiagnosticConsumer that is owned by the returned diagnostic; /// object, if using directly the caller is responsible for; /// releasing the returned DiagnosticsEngine's client eventually.; ///; /// \param Opts - The diagnostic options; note that the created text; /// diagnostic object contains a reference to these options.; ///; /// \param Client If non-NULL, a diagnostic client that will be; /// attached to (and, then, owned by) the returned DiagnosticsEngine; /// object.; ///; /// \param CodeGenOpts If non-NULL, the code gen options in use, which may be; /// used by some diagnostics printers (for logging purposes only).; ///; /// \return The new object on success, or null on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:745,Testability,log,logging,745,"/// Create a DiagnosticsEngine object with a the TextDiagnosticPrinter.; ///; /// If no diagnostic client is provided, this creates a; /// DiagnosticConsumer that is owned by the returned diagnostic; /// object, if using directly the caller is responsible for; /// releasing the returned DiagnosticsEngine's client eventually.; ///; /// \param Opts - The diagnostic options; note that the created text; /// diagnostic object contains a reference to these options.; ///; /// \param Client If non-NULL, a diagnostic client that will be; /// attached to (and, then, owned by) the returned DiagnosticsEngine; /// object.; ///; /// \param CodeGenOpts If non-NULL, the code gen options in use, which may be; /// used by some diagnostics printers (for logging purposes only).; ///; /// \return The new object on success, or null on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:128,Availability,failure,failure,128,"/// Create the file manager and replace any existing one with it.; ///; /// \return The new file manager on success, or null on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:112,Availability,failure,failure,112,"/// Create an external AST source to read a PCH file.; ///; /// \return - The new object on success, or null on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:406,Availability,error,error,406,"/// Create the default output file (from the invocation's options) and add it; /// to the list of tracked output files.; ///; /// The files created by this are usually removed on signal, and, depending; /// on FrontendOptions, may also use a temporary file (that is, the data is; /// written to a temporary file which will atomically replace the target; /// output on success).; ///; /// \return - Null on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:192,Integrability,depend,depending,192,"/// Create the default output file (from the invocation's options) and add it; /// to the list of tracked output files.; ///; /// The files created by this are usually removed on signal, and, depending; /// on FrontendOptions, may also use a temporary file (that is, the data is; /// written to a temporary file which will atomically replace the target; /// output on success).; ///; /// \return - Null on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:153,Availability,error,error,153,"/// Create a new output file, optionally deriving the output path name, and; /// add it to the list of tracked output files.; ///; /// \return - Null on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:675,Safety,safe,safe,675,"/// Create a new output file and add it to the list of tracked output files.; ///; /// If \p OutputPath is empty, then createOutputFile will derive an output; /// path location as \p BaseInput, with any suffix removed, and \p Extension; /// appended. If \p OutputPath is not stdout and \p UseTemporary; /// is true, createOutputFile will create a new temporary file that must be; /// renamed to \p OutputPath in the end.; ///; /// \param OutputPath - If given, the path to the output file.; /// \param Binary - The mode to open the file in.; /// \param RemoveFileOnSignal - Whether the file should be registered with; /// llvm::sys::RemoveFileOnSignal. Note that this is not safe for; /// multithreaded use, as the underlying signal mechanism is not reentrant; /// \param UseTemporary - Create a new temporary file that must be renamed to; /// OutputPath in the end.; /// \param CreateMissingDirectories - When \p UseTemporary is true, create; /// missing directories in the output path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:94,Performance,load,loadModule,94,"/// Find a module, potentially compiling it, before reading its AST. This is; /// the guts of loadModule.; ///; /// For prebuilt modules, the Module is not expected to exist in; /// HeaderSearch's ModuleMap. If a ModuleFile by that name is in the; /// ModuleManager, then it will be loaded and looked up.; ///; /// For implicit modules, the Module is expected to already be in the; /// ModuleMap. First attempt to load it from the given path on disk. If that; /// fails, defer to compileModuleAndReadAST, which will first build and then; /// load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:283,Performance,load,loaded,283,"/// Find a module, potentially compiling it, before reading its AST. This is; /// the guts of loadModule.; ///; /// For prebuilt modules, the Module is not expected to exist in; /// HeaderSearch's ModuleMap. If a ModuleFile by that name is in the; /// ModuleManager, then it will be loaded and looked up.; ///; /// For implicit modules, the Module is expected to already be in the; /// ModuleMap. First attempt to load it from the given path on disk. If that; /// fails, defer to compileModuleAndReadAST, which will first build and then; /// load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:414,Performance,load,load,414,"/// Find a module, potentially compiling it, before reading its AST. This is; /// the guts of loadModule.; ///; /// For prebuilt modules, the Module is not expected to exist in; /// HeaderSearch's ModuleMap. If a ModuleFile by that name is in the; /// ModuleManager, then it will be loaded and looked up.; ///; /// For implicit modules, the Module is expected to already be in the; /// ModuleMap. First attempt to load it from the given path on disk. If that; /// fails, defer to compileModuleAndReadAST, which will first build and then; /// load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:542,Performance,load,load,542,"/// Find a module, potentially compiling it, before reading its AST. This is; /// the guts of loadModule.; ///; /// For prebuilt modules, the Module is not expected to exist in; /// HeaderSearch's ModuleMap. If a ModuleFile by that name is in the; /// ModuleManager, then it will be loaded and looked up.; ///; /// For implicit modules, the Module is expected to already be in the; /// ModuleMap. First attempt to load it from the given path on disk. If that; /// fails, defer to compileModuleAndReadAST, which will first build and then; /// load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:163,Availability,error,errors,163,"/// Fill out Opts based on the options given in Args.; ///; /// Args must have been created from the OptTable returned by; /// createCC1OptTable().; ///; /// When errors are encountered, return false and, if Diags is non-null,; /// report the error(s).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:243,Availability,error,error,243,"/// Fill out Opts based on the options given in Args.; ///; /// Args must have been created from the OptTable returned by; /// createCC1OptTable().; ///; /// When errors are encountered, return false and, if Diags is non-null,; /// report the error(s).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:190,Availability,alive,alive,190,"/// The base class of CompilerInvocation. It keeps individual option objects; /// behind reference-counted pointers, which is useful for clients that want to; /// keep select option objects alive (even after CompilerInvocation gets; /// destroyed) without making a copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:24,Integrability,depend,dependency,24,/// Options controlling dependency output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:293,Energy Efficiency,allocate,allocate,293,"/// Generate cc1-compatible command line arguments from this instance.; ///; /// \param [out] Args - The generated arguments. Note that the caller is; /// responsible for inserting the path to the clang executable and ""-cc1"" if; /// desired.; /// \param SA - A function that given a Twine can allocate storage for a given; /// command line argument and return a pointer to the newly allocated string.; /// The returned pointer is what gets appended to Args.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:383,Energy Efficiency,allocate,allocated,383,"/// Generate cc1-compatible command line arguments from this instance.; ///; /// \param [out] Args - The generated arguments. Note that the caller is; /// responsible for inserting the path to the clang executable and ""-cc1"" if; /// desired.; /// \param SA - A function that given a Twine can allocate storage for a given; /// command line argument and return a pointer to the newly allocated string.; /// The returned pointer is what gets appended to Args.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:14,Energy Efficiency,allocate,allocate,14,// No need to allocate static string literals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:153,Energy Efficiency,efficient,efficient,153,"/// Generate cc1-compatible command line arguments from this instance,; /// wrapping the result as a std::vector<std::string>.; ///; /// This is a (less-efficient) wrapper over generateCC1CommandLine().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:76,Integrability,wrap,wrapping,76,"/// Generate cc1-compatible command line arguments from this instance,; /// wrapping the result as a std::vector<std::string>.; ///; /// This is a (less-efficient) wrapper over generateCC1CommandLine().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:164,Integrability,wrap,wrapper,164,"/// Generate cc1-compatible command line arguments from this instance,; /// wrapping the result as a std::vector<std::string>.; ///; /// This is a (less-efficient) wrapper over generateCC1CommandLine().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:133,Availability,error,error,133,"/// @}; /// Create a compiler invocation from a list of input options.; /// \returns true on success.; ///; /// \returns false if an error was encountered while parsing the arguments; /// and attempts to recover and continue parsing the rest of the arguments.; /// The recovery is best-effort and only guarantees that \p Res will end up in; /// one of the vaild-to-access (albeit arbitrary) states.; ///; /// \param [out] Res - The resulting invocation.; /// \param [in] CommandLineArgs - Array of argument strings, this must not; /// contain ""-cc1"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:204,Availability,recover,recover,204,"/// @}; /// Create a compiler invocation from a list of input options.; /// \returns true on success.; ///; /// \returns false if an error was encountered while parsing the arguments; /// and attempts to recover and continue parsing the rest of the arguments.; /// The recovery is best-effort and only guarantees that \p Res will end up in; /// one of the vaild-to-access (albeit arbitrary) states.; ///; /// \param [out] Res - The resulting invocation.; /// \param [in] CommandLineArgs - Array of argument strings, this must not; /// contain ""-cc1"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:269,Availability,recover,recovery,269,"/// @}; /// Create a compiler invocation from a list of input options.; /// \returns true on success.; ///; /// \returns false if an error was encountered while parsing the arguments; /// and attempts to recover and continue parsing the rest of the arguments.; /// The recovery is best-effort and only guarantees that \p Res will end up in; /// one of the vaild-to-access (albeit arbitrary) states.; ///; /// \param [out] Res - The resulting invocation.; /// \param [in] CommandLineArgs - Array of argument strings, this must not; /// contain ""-cc1"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:204,Safety,recover,recover,204,"/// @}; /// Create a compiler invocation from a list of input options.; /// \returns true on success.; ///; /// \returns false if an error was encountered while parsing the arguments; /// and attempts to recover and continue parsing the rest of the arguments.; /// The recovery is best-effort and only guarantees that \p Res will end up in; /// one of the vaild-to-access (albeit arbitrary) states.; ///; /// \param [out] Res - The resulting invocation.; /// \param [in] CommandLineArgs - Array of argument strings, this must not; /// contain ""-cc1"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:269,Safety,recover,recovery,269,"/// @}; /// Create a compiler invocation from a list of input options.; /// \returns true on success.; ///; /// \returns false if an error was encountered while parsing the arguments; /// and attempts to recover and continue parsing the rest of the arguments.; /// The recovery is best-effort and only guarantees that \p Res will end up in; /// one of the vaild-to-access (albeit arbitrary) states.; ///; /// \param [out] Res - The resulting invocation.; /// \param [in] CommandLineArgs - Array of argument strings, this must not; /// contain ""-cc1"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:365,Security,access,access,365,"/// @}; /// Create a compiler invocation from a list of input options.; /// \returns true on success.; ///; /// \returns false if an error was encountered while parsing the arguments; /// and attempts to recover and continue parsing the rest of the arguments.; /// The recovery is best-effort and only guarantees that \p Res will end up in; /// one of the vaild-to-access (albeit arbitrary) states.; ///; /// \param [out] Res - The resulting invocation.; /// \param [in] CommandLineArgs - Array of argument strings, this must not; /// contain ""-cc1"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:22,Security,hash,hash,22,/// Retrieve a module hash string that is suitable for uniquely; /// identifying the conditions under which the module was built.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:262,Availability,error,errors,262,"/// Check that \p Args can be parsed and re-serialized without change,; /// emiting diagnostics for any differences.; ///; /// This check is only suitable for command-lines that are expected to already; /// be canonical.; ///; /// \return false if there are any errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:58,Performance,optimiz,optimization,58,"/// Same as \c CompilerInvocation, but with copy-on-write optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:21,Modifiability,inherit,inherited,21,// Const getters are inherited from the base class.; /// Mutable getters.; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:9,Integrability,Depend,DependencyOutputOptions,9,"//===--- DependencyOutputOptions.h ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:4,Integrability,Depend,DependencyOutputFormat,4,/// DependencyOutputFormat - Format for the compiler dependency file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:53,Integrability,depend,dependency,53,/// DependencyOutputFormat - Format for the compiler dependency file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:37,Integrability,depend,dependency,37,/// ExtraDepKind - The kind of extra dependency file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:4,Integrability,Depend,DependencyOutputOptions,4,/// DependencyOutputOptions - Options for controlling the compiler dependency; /// file generation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:67,Integrability,depend,dependency,67,/// DependencyOutputOptions - Options for controlling the compiler dependency; /// file generation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:27,Integrability,depend,dependencies,27,///< Include system header dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:41,Integrability,depend,dependency,41,"///< Include phony targets for each; /// dependency, which can avoid some 'make'; /// problems.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:63,Safety,avoid,avoid,63,"///< Include phony targets for each; /// dependency, which can avoid some 'make'; /// problems.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:28,Integrability,depend,dependency,28,///< Add missing headers to dependency list,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:25,Integrability,depend,dependencies,25,///< Include module file dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:108,Performance,optimiz,optimization,108,"///< With ShowHeaderIncludes, show; /// also includes that were skipped; /// due to the ""include guard; /// optimization"" or #pragma once.; /// The format of header information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:23,Integrability,depend,dependency,23,/// The format for the dependency file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:22,Integrability,depend,dependency,22,/// The file to write dependency output to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:49,Integrability,depend,dependency,49,/// A list of names to use as the targets in the dependency file; this list; /// must contain at least one entry.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:20,Integrability,depend,dependencies,20,/// A list of extra dependencies (filename and kind) to be used for every; /// target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:48,Integrability,depend,dependencies,48,/// The file to write GraphViz-formatted header dependencies to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:33,Integrability,depend,dependencies,33,/// The directory to copy module dependencies to when collecting them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:63,Integrability,message,message,63,"/// Class to encapsulate the logic for formatting a diagnostic message.; ///; /// Actual ""printing"" logic is implemented by subclasses.; ///; /// This class provides an interface for building and emitting; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// A brief worklist:; /// FIXME: Sink the recursive printing of template instantiations into this; /// class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:169,Integrability,interface,interface,169,"/// Class to encapsulate the logic for formatting a diagnostic message.; ///; /// Actual ""printing"" logic is implemented by subclasses.; ///; /// This class provides an interface for building and emitting; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// A brief worklist:; /// FIXME: Sink the recursive printing of template instantiations into this; /// class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:29,Testability,log,logic,29,"/// Class to encapsulate the logic for formatting a diagnostic message.; ///; /// Actual ""printing"" logic is implemented by subclasses.; ///; /// This class provides an interface for building and emitting; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// A brief worklist:; /// FIXME: Sink the recursive printing of template instantiations into this; /// class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:100,Testability,log,logic,100,"/// Class to encapsulate the logic for formatting a diagnostic message.; ///; /// Actual ""printing"" logic is implemented by subclasses.; ///; /// This class provides an interface for building and emitting; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// A brief worklist:; /// FIXME: Sink the recursive printing of template instantiations into this; /// class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:106,Safety,detect,detect,106,/// The level of the last diagnostic emitted.; ///; /// The level of the last diagnostic emitted. Used to detect level changes; /// which change the amount of information displayed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:89,Integrability,message,messages,89,/// Emit a diagnostic.; ///; /// This is the primary entry point for emitting diagnostic messages.; /// It handles formatting and rendering the message as well as any ancillary; /// information needed based on macros whose expansions impact the; /// diagnostic.; ///; /// \param Loc The location for this caret.; /// \param Level The level of the diagnostic to be emitted.; /// \param Message The diagnostic message to emit.; /// \param Ranges The underlined ranges for this code snippet.; /// \param FixItHints The FixIt hints active for this diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:144,Integrability,message,message,144,/// Emit a diagnostic.; ///; /// This is the primary entry point for emitting diagnostic messages.; /// It handles formatting and rendering the message as well as any ancillary; /// information needed based on macros whose expansions impact the; /// diagnostic.; ///; /// \param Loc The location for this caret.; /// \param Level The level of the diagnostic to be emitted.; /// \param Message The diagnostic message to emit.; /// \param Ranges The underlined ranges for this code snippet.; /// \param FixItHints The FixIt hints active for this diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:385,Integrability,Message,Message,385,/// Emit a diagnostic.; ///; /// This is the primary entry point for emitting diagnostic messages.; /// It handles formatting and rendering the message as well as any ancillary; /// information needed based on macros whose expansions impact the; /// diagnostic.; ///; /// \param Loc The location for this caret.; /// \param Level The level of the diagnostic to be emitted.; /// \param Message The diagnostic message to emit.; /// \param Ranges The underlined ranges for this code snippet.; /// \param FixItHints The FixIt hints active for this diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:408,Integrability,message,message,408,/// Emit a diagnostic.; ///; /// This is the primary entry point for emitting diagnostic messages.; /// It handles formatting and rendering the message as well as any ancillary; /// information needed based on macros whose expansions impact the; /// diagnostic.; ///; /// \param Loc The location for this caret.; /// \param Level The level of the diagnostic to be emitted.; /// \param Message The diagnostic message to emit.; /// \param Ranges The underlined ranges for this code snippet.; /// \param FixItHints The FixIt hints active for this diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:51,Integrability,Interface,Interface,51,"//===-- FrontendAction.h - Generic Frontend Action Interface ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::FrontendAction interface and various convenience; /// abstract classes (clang::ASTFrontendAction, clang::PluginASTAction,; /// clang::PreprocessorFrontendAction, and clang::WrapperFrontendAction); /// derived from it.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:430,Integrability,interface,interface,430,"//===-- FrontendAction.h - Generic Frontend Action Interface ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::FrontendAction interface and various convenience; /// abstract classes (clang::ASTFrontendAction, clang::PluginASTAction,; /// clang::PreprocessorFrontendAction, and clang::WrapperFrontendAction); /// derived from it.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:588,Integrability,Wrap,WrapperFrontendAction,588,"//===-- FrontendAction.h - Generic Frontend Action Interface ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::FrontendAction interface and various convenience; /// abstract classes (clang::ASTFrontendAction, clang::PluginASTAction,; /// clang::PreprocessorFrontendAction, and clang::WrapperFrontendAction); /// derived from it.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:520,Modifiability,Plugin,PluginASTAction,520,"//===-- FrontendAction.h - Generic Frontend Action Interface ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::FrontendAction interface and various convenience; /// abstract classes (clang::ASTFrontendAction, clang::PluginASTAction,; /// clang::PreprocessorFrontendAction, and clang::WrapperFrontendAction); /// derived from it.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:49,Performance,perform,performed,49,/// Abstract base class for actions which can be performed by the frontend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:208,Deployability,configurat,configuration,208,"/// @name Implementation Action Interface; /// @{; /// Prepare to execute the action on the given CompilerInstance.; ///; /// This is called before executing the action on any inputs, and can modify; /// the configuration as needed (including adjusting the input list).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:32,Integrability,Interface,Interface,32,"/// @name Implementation Action Interface; /// @{; /// Prepare to execute the action on the given CompilerInstance.; ///; /// This is called before executing the action on any inputs, and can modify; /// the configuration as needed (including adjusting the input list).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:208,Modifiability,config,configuration,208,"/// @name Implementation Action Interface; /// @{; /// Prepare to execute the action on the given CompilerInstance.; ///; /// This is called before executing the action on any inputs, and can modify; /// the configuration as needed (including adjusting the input list).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:549,Availability,failure,failure,549,"/// Create the AST consumer object for this action, if supported.; ///; /// This routine is called as part of BeginSourceFile(), which will; /// fail if the AST consumer cannot be created. This will not be called if the; /// action has indicated that it only uses the preprocessor.; ///; /// \param CI - The current compiler instance, provided as a convenience, see; /// getCompilerInstance().; ///; /// \param InFile - The current input file, provided as a convenience, see; /// getCurrentFile().; ///; /// \return The new AST consumer, or null on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:81,Integrability,rout,routine,81,"/// Create the AST consumer object for this action, if supported.; ///; /// This routine is called as part of BeginSourceFile(), which will; /// fail if the AST consumer cannot be created. This will not be called if the; /// action has indicated that it only uses the preprocessor.; ///; /// \param CI - The current compiler instance, provided as a convenience, see; /// getCompilerInstance().; ///; /// \param InFile - The current input file, provided as a convenience, see; /// getCurrentFile().; ///; /// \return The new AST consumer, or null on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:224,Availability,failure,failure,224,"/// Callback before starting processing a single input, giving the; /// opportunity to modify the CompilerInvocation or do some other action; /// before BeginSourceFileAction is called.; ///; /// \return True on success; on failure BeginSourceFileAction(),; /// ExecuteAction() and EndSourceFileAction() will not be called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:94,Availability,failure,failure,94,/// Callback at the start of processing a single input.; ///; /// \return True on success; on failure ExecutionAction() and; /// EndSourceFileAction() will not be called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:168,Availability,error,error,168,"/// Callback at the end of processing a single input, to determine; /// if the output files should be erased or not.; ///; /// By default it returns true if a compiler error occurred.; /// This is guaranteed to only be called following a successful call to; /// BeginSourceFileAction (and BeginSourceFile).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:28,Security,Access,Access,28,/// @name Compiler Instance Access; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:32,Integrability,Interface,Interface,32,/// @}; /// @name Public Action Interface; /// @{; /// Prepare the action to execute on the given compiler instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:866,Availability,failure,failure,866,"/// Prepare the action for processing the input file \p Input.; ///; /// This is run after the options and frontend have been initialized,; /// but prior to executing any per-file processing.; ///; /// \param CI - The compiler instance this action is being run from. The; /// action may store and use this object up until the matching EndSourceFile; /// action.; ///; /// \param Input - The input filename and kind. Some input kinds are handled; /// specially, for example AST inputs, since the AST file itself contains; /// several objects which would normally be owned by the; /// CompilerInstance. When processing AST input files, these objects should; /// generally not be initialized in the CompilerInstance -- they will; /// automatically be shared with the AST file in between; /// BeginSourceFile() and EndSourceFile().; ///; /// \return True on success; on failure the compilation of this file should; /// be aborted and neither Execute() nor EndSourceFile() should be called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:918,Safety,abort,aborted,918,"/// Prepare the action for processing the input file \p Input.; ///; /// This is run after the options and frontend have been initialized,; /// but prior to executing any per-file processing.; ///; /// \param CI - The compiler instance this action is being run from. The; /// action may store and use this object up until the matching EndSourceFile; /// action.; ///; /// \param Input - The input filename and kind. Some input kinds are handled; /// specially, for example AST inputs, since the AST file itself contains; /// several objects which would normally be owned by the; /// CompilerInstance. When processing AST input files, these objects should; /// generally not be initialized in the CompilerInstance -- they will; /// automatically be shared with the AST file in between; /// BeginSourceFile() and EndSourceFile().; ///; /// \return True on success; on failure the compilation of this file should; /// be aborted and neither Execute() nor EndSourceFile() should be called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:4,Performance,Perform,Perform,4,"/// Perform any per-file post processing, deallocate per-file; /// objects, and run statistics and output file cleanup code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:32,Integrability,interface,interface,32,/// Implement the ExecuteAction interface by running Sema on; /// the already-initialized AST consumer.; ///; /// This will also take care of instantiating a code completion consumer if; /// the user requested it and the action supports it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:329,Availability,error,errors,329,"/// Parse the given plugin command line arguments.; ///; /// \param CI - The compiler instance, for use in reporting diagnostics.; /// \return True if the parsing succeeded; otherwise the plugin will be; /// destroyed and no action run. The plugin is responsible for using the; /// CompilerInstance's Diagnostic object to report errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:20,Modifiability,plugin,plugin,20,"/// Parse the given plugin command line arguments.; ///; /// \param CI - The compiler instance, for use in reporting diagnostics.; /// \return True if the parsing succeeded; otherwise the plugin will be; /// destroyed and no action run. The plugin is responsible for using the; /// CompilerInstance's Diagnostic object to report errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:188,Modifiability,plugin,plugin,188,"/// Parse the given plugin command line arguments.; ///; /// \param CI - The compiler instance, for use in reporting diagnostics.; /// \return True if the parsing succeeded; otherwise the plugin will be; /// destroyed and no action run. The plugin is responsible for using the; /// CompilerInstance's Diagnostic object to report errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:241,Modifiability,plugin,plugin,241,"/// Parse the given plugin command line arguments.; ///; /// \param CI - The compiler instance, for use in reporting diagnostics.; /// \return True if the parsing succeeded; otherwise the plugin will be; /// destroyed and no action run. The plugin is responsible for using the; /// CompilerInstance's Diagnostic object to report errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:33,Modifiability,plugin,plugin,33,/// Get the action type for this plugin; ///; /// \return The action type. By default we use CmdlineAfterMainAction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:51,Safety,abort,aborts,51,/// Provide a default implementation which returns aborts;; /// this method should never be called by FrontendAction clients.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:35,Integrability,wrap,wraps,35,/// A frontend action which simply wraps some other runtime-specified; /// frontend action.; ///; /// Deriving from this class allows an action to inject custom logic around; /// some existing action's behavior. It implements every virtual method in; /// the FrontendAction interface by forwarding to the wrapped action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:147,Integrability,inject,inject,147,/// A frontend action which simply wraps some other runtime-specified; /// frontend action.; ///; /// Deriving from this class allows an action to inject custom logic around; /// some existing action's behavior. It implements every virtual method in; /// the FrontendAction interface by forwarding to the wrapped action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:274,Integrability,interface,interface,274,/// A frontend action which simply wraps some other runtime-specified; /// frontend action.; ///; /// Deriving from this class allows an action to inject custom logic around; /// some existing action's behavior. It implements every virtual method in; /// the FrontendAction interface by forwarding to the wrapped action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:305,Integrability,wrap,wrapped,305,/// A frontend action which simply wraps some other runtime-specified; /// frontend action.; ///; /// Deriving from this class allows an action to inject custom logic around; /// some existing action's behavior. It implements every virtual method in; /// the FrontendAction interface by forwarding to the wrapped action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:147,Security,inject,inject,147,/// A frontend action which simply wraps some other runtime-specified; /// frontend action.; ///; /// Deriving from this class allows an action to inject custom logic around; /// some existing action's behavior. It implements every virtual method in; /// the FrontendAction interface by forwarding to the wrapped action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:161,Testability,log,logic,161,/// A frontend action which simply wraps some other runtime-specified; /// frontend action.; ///; /// Deriving from this class allows an action to inject custom logic around; /// some existing action's behavior. It implements every virtual method in; /// the FrontendAction interface by forwarding to the wrapped action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:28,Usability,simpl,simply,28,/// A frontend action which simply wraps some other runtime-specified; /// frontend action.; ///; /// Deriving from this class allows an action to inject custom logic around; /// some existing action's behavior. It implements every virtual method in; /// the FrontendAction interface by forwarding to the wrapped action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:16,Integrability,Wrap,WrapperFrontendAction,16,"/// Construct a WrapperFrontendAction from an existing action, taking; /// ownership of it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:49,Performance,load,loads,49,/// Preprocessor-based frontend action that also loads PCH files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:160,Availability,error,error,160,"/// Compute the AST consumer arguments that will be used to; /// create the PCHGenerator instance returned by CreateASTConsumer.; ///; /// \returns false if an error occurred, true otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:86,Availability,error,error,86,"/// Creates file to write the PCH into and returns a stream to write it; /// into. On error, returns null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:23,Energy Efficiency,adapt,adaptor,23,"/**; * Frontend action adaptor that merges ASTs together.; *; * This action takes an existing AST file and ""merges"" it into the AST; * context, producing a merged context. This action is an action; * adaptor, which forwards most of its calls to another action that; * will consume the merged context.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:200,Energy Efficiency,adapt,adaptor,200,"/**; * Frontend action adaptor that merges ASTs together.; *; * This action takes an existing AST file and ""merges"" it into the AST; * context, producing a merged context. This action is an action; * adaptor, which forwards most of its calls to another action that; * will consume the merged context.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:23,Modifiability,adapt,adaptor,23,"/**; * Frontend action adaptor that merges ASTs together.; *; * This action takes an existing AST file and ""merges"" it into the AST; * context, producing a merged context. This action is an action; * adaptor, which forwards most of its calls to another action that; * will consume the merged context.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:200,Modifiability,adapt,adaptor,200,"/**; * Frontend action adaptor that merges ASTs together.; *; * This action takes an existing AST file and ""merges"" it into the AST; * context, producing a merged context. This action is an action; * adaptor, which forwards most of its calls to another action that; * will consume the merged context.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:37,Energy Efficiency,adapt,adapts,37,/// The action that the merge action adapts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:37,Modifiability,adapt,adapts,37,/// The action that the merge action adapts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:22,Deployability,configurat,configuration,22,/// Dump the compiler configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:22,Modifiability,config,configuration,22,/// Dump the compiler configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:51,Integrability,interface,interface,51,/// Generate pre-compiled module from a C++ module interface file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:13,Integrability,Interface,Interface,13,/// Generate Interface Stub Files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:23,Testability,Stub,Stub,23,/// Generate Interface Stub Files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:4,Performance,Load,Load,4,/// Load and verify that a PCH file is usable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:39,Usability,usab,usable,39,/// Load and verify that a PCH file is usable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:14,Performance,perform,perform,14,/// Parse and perform semantic analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:10,Modifiability,plugin,plugin,10,"/// Run a plugin action, \see ActionName.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:12,Modifiability,Rewrite,Rewriter,12,/// ObjC->C Rewriter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:4,Modifiability,Rewrite,Rewriter,4,/// Rewriter playground,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:28,Integrability,depend,dependency,28,/// Print the output of the dependency directives source minimizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:18,Performance,perform,performance,18,/// Show frontend performance metrics and statistics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:44,Availability,error,errors,44,/// Apply fixes even if there are unfixable errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:13,Availability,error,errors,13,/// Emit ARC errors even if the migrator can fix them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:50,Availability,avail,available,50,/// Whether we can use the global module index if available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:19,Performance,perform,performing,19,/// Whether we are performing an implicit module build.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:55,Availability,error,errors,55,/// Output (and read) PCM files regardless of compiler errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:39,Integrability,protocol,protocols,39,/// Enable migration to add conforming protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:27,Performance,perform,perform,27,/// The frontend action to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:47,Modifiability,plugin,plugin,47,/// The name of the action to run when using a plugin action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:24,Modifiability,plugin,plugins,24,/// Args to pass to the plugins,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:16,Modifiability,plugin,plugin,16,/// The list of plugin actions to run in addition to the normal action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:16,Modifiability,plugin,plugins,16,/// The list of plugins to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:27,Performance,load,load,27,/// The list of plugins to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:36,Performance,load,load,36,/// The list of module map files to load before processing the input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:52,Performance,load,load,52,/// The list of additional prebuilt module files to load before; /// processing the input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendPluginRegistry.h:409,Integrability,Interface,Interface,409,"//===- FrontendPluginRegistry.h ---------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Pluggable Frontend Action Interface; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendPluginRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendPluginRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendPluginRegistry.h:17,Modifiability,plugin,plugin,17,/// The frontend plugin registry.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/FrontendPluginRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendPluginRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LayoutOverrideSource.h:132,Testability,test,testing,132,/// An external AST source that overrides the layout of; /// a specified set of record types.; ///; /// This class is used only for testing the ability of external AST sources; /// to override the layout of record types. Its input is the output format; /// of the command-line argument -fdump-record-layouts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/LayoutOverrideSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LayoutOverrideSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:9,Testability,Log,LogDiagnosticPrinter,9,"//===--- LogDiagnosticPrinter.h - Log Diagnostic Client ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:34,Testability,Log,Log,34,"//===--- LogDiagnosticPrinter.h - Log Diagnostic Client ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:16,Integrability,message,message,16,/// The primary message line of the diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:29,Availability,avail,available,29,"/// The source file name, if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:36,Availability,avail,available,36,"/// The source file line number, if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:38,Availability,avail,available,38,"/// The source file column number, if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:76,Availability,alive,alive,76,"// Conditional ownership (when StreamOwner is non-null, it's keeping OS; // alive). We might want to replace this with a wrapper for conditional; // ownership eventually - it seems to pop up often enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:121,Integrability,wrap,wrapper,121,"// Conditional ownership (when StreamOwner is non-null, it's keeping OS; // alive). We might want to replace this with a wrapper for conditional; // ownership eventually - it seems to pop up often enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/MultiplexConsumer.h:495,Integrability,message,messages,495,"//===-- MultiplexConsumer.h - AST Consumer for PCH Generation ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the MultiplexConsumer class, which can be used to; // multiplex ASTConsumer and SemaConsumer messages to many consumers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/MultiplexConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/MultiplexConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:97,Availability,error,error,97,"/// Try to build PrecompiledPreamble for \p Invocation. See; /// BuildPreambleError for possible error codes.; ///; /// \param Invocation Original CompilerInvocation with options to compile the; /// file.; ///; /// \param MainFileBuffer Buffer with the contents of the main file.; ///; /// \param Bounds Bounds of the preamble, result of calling; /// ComputePreambleBounds.; ///; /// \param Diagnostics Diagnostics engine to be used while building the; /// preamble.; ///; /// \param VFS An instance of vfs::FileSystem to be used for file; /// accesses.; ///; /// \param PCHContainerOps An instance of PCHContainerOperations.; ///; /// \param StoreInMemory Store PCH in memory. If false, PCH will be stored in; /// a temporary file.; ///; /// \param StoragePath The path to a directory, in which to create a temporary; /// file to store PCH in. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StoreInMemory is true.; ///; /// \param Callbacks A set of callbacks to be executed when building; /// the preamble.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:544,Security,access,accesses,544,"/// Try to build PrecompiledPreamble for \p Invocation. See; /// BuildPreambleError for possible error codes.; ///; /// \param Invocation Original CompilerInvocation with options to compile the; /// file.; ///; /// \param MainFileBuffer Buffer with the contents of the main file.; ///; /// \param Bounds Bounds of the preamble, result of calling; /// ComputePreambleBounds.; ///; /// \param Diagnostics Diagnostics engine to be used while building the; /// preamble.; ///; /// \param VFS An instance of vfs::FileSystem to be used for file; /// accesses.; ///; /// \param PCHContainerOps An instance of PCHContainerOperations.; ///; /// \param StoreInMemory Store PCH in memory. If false, PCH will be stored in; /// a temporary file.; ///; /// \param StoragePath The path to a directory, in which to create a temporary; /// file to store PCH in. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StoreInMemory is true.; ///; /// \param Callbacks A set of callbacks to be executed when building; /// the preamble.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:171,Testability,log,logging,171,"/// Returns the size, in bytes, that preamble takes on disk or in memory.; /// For on-disk preambles returns 0 if filesystem operations fail. Intended to; /// be used for logging and debugging purposes only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:116,Deployability,update,updates,116,"/// Changes options inside \p CI to use PCH from this preamble. Also remaps; /// main file to \p MainFileBuffer and updates \p VFS to ensure the preamble; /// is accessible.; /// Requires that CanReuse() is true.; /// For in-memory preambles, PrecompiledPreamble instance continues to own the; /// MemoryBuffer with the Preamble after this method returns. The caller is; /// responsible for making sure the PrecompiledPreamble instance outlives the; /// compiler run and the AST that will be using the PCH.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:162,Security,access,accessible,162,"/// Changes options inside \p CI to use PCH from this preamble. Also remaps; /// main file to \p MainFileBuffer and updates \p VFS to ensure the preamble; /// is accessible.; /// Requires that CanReuse() is true.; /// For in-memory preambles, PrecompiledPreamble instance continues to own the; /// MemoryBuffer with the Preamble after this method returns. The caller is; /// responsible for making sure the PrecompiledPreamble instance outlives the; /// compiler run and the AST that will be using the PCH.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:4,Modifiability,Config,Configure,4,"/// Configure \p CI to use this preamble.; /// Like AddImplicitPreamble, but doesn't assume CanReuse() is true.; /// If this preamble does not match the file, it may parse differently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:94,Security,access,accessible,94,"/// Sets up the PreprocessorOptions and changes VFS, so that PCH stored in \p; /// Storage is accessible to clang. This method is an implementation detail of; /// AddImplicitPreamble.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:166,Usability,simpl,simpler,166,"/// Called for each TopLevelDecl.; /// NOTE: To allow more flexibility a custom ASTConsumer could probably be; /// used instead, but having only this method allows a simpler API.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:12,Integrability,wrap,wrapper,12,/// Creates wrapper class for PPCallbacks so we can also process information; /// about includes that are inside of a preamble. Called after BeforeExecute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h:466,Availability,error,error,466,"//===-- SARIFDiagnosticPrinter.h - SARIF Diagnostic Client -------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a concrete diagnostic client, which prints the diagnostics to; // standard error in SARIF format.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h:26,Availability,error,error,26,/// A string to prefix to error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h:32,Integrability,message,messages,32,/// A string to prefix to error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SARIFDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticPrinter.h:256,Integrability,wrap,wrapper,256,"/// Returns a DiagnosticConsumer that serializes diagnostics to; /// a bitcode file.; ///; /// The created DiagnosticConsumer is designed for quick and lightweight; /// transfer of diagnostics to the enclosing build system (e.g., an IDE).; /// This allows wrapper tools for Clang to get diagnostics from Clang; /// (via libclang) without needing to parse Clang's command line output.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h:14,Availability,error,error,14,/// A generic error for subclass handlers that don't want or need to define; /// their own error_category.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h:141,Testability,log,logic,141,/// A base class that handles reading serialized diagnostics from a file.; ///; /// Subclasses should override the visit* methods with their logic for handling; /// the various constructs that are found in serialized diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:89,Integrability,message,message,89,"/// Class to encapsulate the logic for formatting and printing a textual; /// diagnostic message.; ///; /// This class provides an interface for building and emitting a textual; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// The purpose of this class is to isolate the implementation of printing; /// beautiful text diagnostics from any particular interfaces. The Clang; /// DiagnosticClient is implemented through this class as is diagnostic; /// printing coming out of libclang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:131,Integrability,interface,interface,131,"/// Class to encapsulate the logic for formatting and printing a textual; /// diagnostic message.; ///; /// This class provides an interface for building and emitting a textual; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// The purpose of this class is to isolate the implementation of printing; /// beautiful text diagnostics from any particular interfaces. The Clang; /// DiagnosticClient is implemented through this class as is diagnostic; /// printing coming out of libclang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:533,Integrability,interface,interfaces,533,"/// Class to encapsulate the logic for formatting and printing a textual; /// diagnostic message.; ///; /// This class provides an interface for building and emitting a textual; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// The purpose of this class is to isolate the implementation of printing; /// beautiful text diagnostics from any particular interfaces. The Clang; /// DiagnosticClient is implemented through this class as is diagnostic; /// printing coming out of libclang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:29,Testability,log,logic,29,"/// Class to encapsulate the logic for formatting and printing a textual; /// diagnostic message.; ///; /// This class provides an interface for building and emitting a textual; /// diagnostic, including all of the macro backtraces, caret diagnostics, FixIt; /// Hints, and code snippets. In the presence of macros this involves; /// a recursive process, synthesizing notes for each macro expansion.; ///; /// The purpose of this class is to isolate the implementation of printing; /// beautiful text diagnostics from any particular interfaces. The Clang; /// DiagnosticClient is implemented through this class as is diagnostic; /// printing coming out of libclang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:372,Testability,log,logic,372,"/// Print the diagonstic level to a raw_ostream.; ///; /// This is a static helper that handles colorizing the level and formatting; /// it into an arbitrary output stream. This is used internally by the; /// TextDiagnostic emission code, but it can also be used directly by; /// consumers that don't have a source manager or other state that the full; /// TextDiagnostic logic requires.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:30,Integrability,message,message,30,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:109,Integrability,wrap,wrapping,109,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:166,Integrability,message,message,166,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:386,Integrability,message,messages,386,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:426,Integrability,message,message,426,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:531,Integrability,Message,Message,531,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:719,Integrability,wrap,wrapping,719,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:754,Integrability,wrap,wrapping,754,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:812,Integrability,message,message,812,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticBuffer.h:450,Integrability,message,messages,450,"//===- TextDiagnosticBuffer.h - Buffer Text Diagnostics ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a concrete diagnostic client, which buffers the diagnostic messages.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h:466,Availability,error,error,466,"//===--- TextDiagnosticPrinter.h - Text Diagnostic Client -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a concrete diagnostic client, which prints the diagnostics to; // standard error.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h:26,Availability,error,error,26,/// A string to prefix to error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h:32,Integrability,message,messages,32,/// A string to prefix to error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:7,Integrability,interface,interface,7,/// An interface for collecting the dependencies of a compilation. Users should; /// use \c attachToPreprocessor and \c attachToASTReader to get all of the; /// dependencies.; /// FIXME: Migrate DependencyGraphGen to use this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:36,Integrability,depend,dependencies,36,/// An interface for collecting the dependencies of a compilation. Users should; /// use \c attachToPreprocessor and \c attachToASTReader to get all of the; /// dependencies.; /// FIXME: Migrate DependencyGraphGen to use this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:161,Integrability,depend,dependencies,161,/// An interface for collecting the dependencies of a compilation. Users should; /// use \c attachToPreprocessor and \c attachToASTReader to get all of the; /// dependencies.; /// FIXME: Migrate DependencyGraphGen to use this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:195,Integrability,Depend,DependencyGraphGen,195,/// An interface for collecting the dependencies of a compilation. Users should; /// use \c attachToPreprocessor and \c attachToASTReader to get all of the; /// dependencies.; /// FIXME: Migrate DependencyGraphGen to use this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:226,Integrability,interface,interface,226,/// An interface for collecting the dependencies of a compilation. Users should; /// use \c attachToPreprocessor and \c attachToASTReader to get all of the; /// dependencies.; /// FIXME: Migrate DependencyGraphGen to use this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:99,Integrability,depend,dependencies,99,/// Called when a new file is seen. Return true if \p Filename should be added; /// to the list of dependencies.; ///; /// The default implementation ignores <built-in> and system files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:10,Integrability,depend,dependency,10,/// Add a dependency \p Filename if it has not been seen before and; /// sawDependency() returns true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:57,Integrability,depend,dependencies,57,"/// Return true if the filename was added to the list of dependencies, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:13,Integrability,depend,dependency,13,"/// Builds a dependency file when attached to a Preprocessor (for includes) and; /// ASTReader (for module imports), and writes it out at the end of processing; /// a source file. Users should attach to the ast reader whenever a module is; /// loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:244,Performance,load,loaded,244,"/// Builds a dependency file when attached to a Preprocessor (for includes) and; /// ASTReader (for module imports), and writes it out at the end of processing; /// a source file. Users should attach to the ast reader whenever a module is; /// loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:17,Integrability,depend,dependencies,17,/// Collects the dependencies for imported modules into a directory. Users; /// should attach to the AST reader whenever a module is loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:133,Performance,load,loaded,133,/// Collects the dependencies for imported modules into a directory. Users; /// should attach to the AST reader whenever a module is loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:40,Integrability,depend,dependency,40,"/// AttachDependencyGraphGen - Create a dependency graph generator, and attach; /// it to the given preprocessor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:96,Testability,test,testing,96,"/// The ChainedIncludesSource class converts headers to chained PCHs in; /// memory, mainly for testing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:132,Performance,perform,perform,132,"/// Used e.g. to probe for system headers locations.; /// If not provided, the real filesystem is used.; /// FIXME: the driver does perform some non-virtualized IO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:89,Availability,error,errors,89,"/// Whether to attempt to produce a non-null (possibly incorrect) invocation; /// if any errors were encountered.; /// By default, always return null on errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:153,Availability,error,errors,153,"/// Whether to attempt to produce a non-null (possibly incorrect) invocation; /// if any errors were encountered.; /// By default, always return null on errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:449,Modifiability,config,configure,449,"/// Interpret clang arguments in preparation to parse a file.; ///; /// This simulates a number of steps Clang takes when its driver is invoked:; /// - choosing actions (e.g compile + link) to run; /// - probing the system for settings like standard library locations; /// - spawning a cc1 subprocess to compile code, with more explicit arguments; /// - in the cc1 process, assembling those arguments into a CompilerInvocation; /// which is used to configure the parser; ///; /// This simulation is lossy, e.g. in some situations one driver run would; /// result in multiple parses. (Multi-arch, CUDA, ...).; /// This function tries to select a reasonable invocation that tools should use.; ///; /// Args[0] should be the driver name, such as ""clang"" or ""/usr/bin/g++"".; /// Absolute path is preferred - this affects searching for system headers.; ///; /// May return nullptr if an invocation could not be determined.; /// See CreateInvocationOptions::ShouldRecoverOnErrors to try harder!",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h:246,Testability,test,tests,246,/// VerifyDiagnosticConsumer - Create a diagnostic client which will use; /// markers in the input source to check that all the emitted diagnostics match; /// those expected. See clang/docs/InternalsManual.rst for details about how to; /// write tests to verify diagnostics.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h:33,Security,validat,validation,33,// These facilities are used for validation in debug builds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h:63,Availability,error,errors,63,"/// Create a new verifying diagnostic client, which will issue errors to; /// the currently-attached diagnostic client when a diagnostic does not match; /// what is expected (as indicated in the source file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h:4,Deployability,Update,Update,4,/// Update lists of parsed and unparsed files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/FrontendTool/Utils.h:516,Integrability,depend,dependencies,516,"//===--- Utils.h - Misc utilities for the front-end -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header contains miscellaneous utilities for various front-end actions; // which were split from Frontend to minimise Frontend's dependencies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/FrontendTool/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/FrontendTool/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexDataConsumer.h:52,Safety,abort,abort,52,"/// \returns true to continue indexing, or false to abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/IndexDataConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexDataConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexDataConsumer.h:52,Safety,abort,abort,52,"/// \returns true to continue indexing, or false to abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/IndexDataConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexDataConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexDataConsumer.h:52,Safety,abort,abort,52,"/// \returns true to continue indexing, or false to abort.; ///; /// This will be called for each module reference in an import decl.; /// For ""@import MyMod.SubMod"", there will be a call for 'MyMod' with the; /// 'reference' role, and a call for 'SubMod' with the 'declaration' role.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/IndexDataConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexDataConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h:96,Availability,avail,available,96,// Whether to index macro definitions in the Preprocessor when preprocessor; // callback is not available (e.g. after parsing has finished). Note that; // macro references are not available in Preprocessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h:180,Availability,avail,available,180,// Whether to index macro definitions in the Preprocessor when preprocessor; // callback is not available (e.g. after parsing has finished). Note that; // macro references are not available in Preprocessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h:54,Performance,perform,performance,54,"// If set, skip indexing inside some declarations for performance.; // This prevents traversal, so skipping a struct means its declaration an; // members won't be indexed, but references elsewhere to that struct will be.; // Currently this is only checked for top-level declarations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexingOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexSymbol.h:24,Integrability,protocol,protocol,24,/// Symbol is part of a protocol interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/IndexSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexSymbol.h:33,Integrability,interface,interface,33,/// Symbol is part of a protocol interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/IndexSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:25,Integrability,Rout,Routines,25,"//===- USRGeneration.h - Routines for USR generation ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:56,Modifiability,variab,variable,56,/// Generate a USR fragment for an Objective-C instance variable. The; /// complete USR can be created by concatenating the USR for the; /// encompassing class with this USR fragment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:47,Integrability,protocol,protocol,47,/// Generate a USR fragment for an Objective-C protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:85,Availability,error,error,85,"/// Generate a USR for a macro, including the USR prefix.; ///; /// \returns true on error, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:58,Availability,error,error,58,"/// Generates a USR for a type.; ///; /// \return true on error, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:81,Availability,error,error,81,"/// Generate a USR for a module, including the USR prefix.; /// \returns true on error, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:96,Availability,error,error,96,"/// Generate a USR for a top-level module name, including the USR prefix.; /// \returns true on error, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:64,Availability,error,error,64,"/// Generate a USR fragment for a module.; /// \returns true on error, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:69,Availability,error,error,69,"/// Generate a USR fragment for a module name.; /// \returns true on error, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h:58,Security,expose,exposed,58,/// \returns file paths (no directories) backed by buffer exposed in; /// getPathsBuffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h:84,Security,expose,exposed,84,/// Stores path to \p FE if it hasn't been stored yet.; /// \returns index to array exposed by getPathsBuffer().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/CodeCompletion.h:407,Performance,perform,performs,407,"//===----- CodeCompletion.h - Code Completion for ClangRepl ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the classes which performs code completion at the REPL.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/CodeCompletion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/CodeCompletion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:421,Performance,perform,performs,421,"//===--- Interpreter.h - Incremental Compilation and Execution---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the component which performs incremental code; // compilation and execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:17,Modifiability,config,configured,17,/// Create a pre-configured \c CompilerInstance for incremental processing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:23,Integrability,interface,interfaces,23,/// Provides top-level interfaces for incremental compilation and execution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:109,Security,access,access,109,"// This member holds the last result of the value printing. It's a class; // member because we might want to access it after more inputs. If no value; // printing happens, it's in an invalid state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:4,Usability,Undo,Undo,4,/// Undo N previous incremental inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:58,Integrability,interface,interface,58,/// \returns the \c ExecutorAddr of a \c GlobalDecl. This interface uses; /// the CodeGenModule's internal mangling cache to avoid recomputing the; /// mangled name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:116,Performance,cache,cache,116,/// \returns the \c ExecutorAddr of a \c GlobalDecl. This interface uses; /// the CodeGenModule's internal mangling cache to avoid recomputing the; /// mangled name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:125,Safety,avoid,avoid,125,/// \returns the \c ExecutorAddr of a \c GlobalDecl. This interface uses; /// the CodeGenModule's internal mangling cache to avoid recomputing the; /// mangled name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h:516,Integrability,message,messager,516,"//===--- Value.h - Definition of interpreter value --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Value is a lightweight struct that is used for carrying execution results in; // clang-repl. It's a special runtime that acts like a messager between compiled; // code and interpreted code. This makes it possible to exchange interesting; // information between the compiled & interpreted world.; //; // A typical usage is like the below:; //; // Value V;; // Interp.ParseAndExecute(""int x = 42;"");; // Interp.ParseAndExecute(""x"", &V);; // V.getType(); // <-- Yields a clang::QualType.; // V.getInt(); // <-- Yields 42.; //; // The current design is still highly experimental and nobody should rely on the; // API being stable because we're hopefully going to make significant changes to; // it in the relatively near future. For example, Value also intends to be used; // as an exchange token for JIT support enabling remote execution on the embed; // devices where the JIT infrastructure cannot fit. To support that we will need; // to split the memory storage in a different place and perhaps add a resource; // header is similar to intrinsics headers which have stricter performance; // constraints.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h:1457,Performance,perform,performance,1457,"//===--- Value.h - Definition of interpreter value --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Value is a lightweight struct that is used for carrying execution results in; // clang-repl. It's a special runtime that acts like a messager between compiled; // code and interpreted code. This makes it possible to exchange interesting; // information between the compiled & interpreted world.; //; // A typical usage is like the below:; //; // Value V;; // Interp.ParseAndExecute(""int x = 42;"");; // Interp.ParseAndExecute(""x"", &V);; // V.getType(); // <-- Yields a clang::QualType.; // V.getInt(); // <-- Yields 42.; //; // The current design is still highly experimental and nobody should rely on the; // API being stable because we're hopefully going to make significant changes to; // it in the relatively near future. For example, Value also intends to be used; // as an exchange token for JIT support enabling remote execution on the embed; // devices where the JIT infrastructure cannot fit. To support that we will need; // to split the memory storage in a different place and perhaps add a resource; // header is similar to intrinsics headers which have stricter performance; // constraints.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h:277,Performance,perform,performance,277,"// NOTE: Since the REPL itself could also include this runtime, extreme caution; // should be taken when MAKING CHANGES to this file, especially when INCLUDE NEW; // HEADERS, like <string>, <memory> and etc. (That pulls a large number of; // tokens and will impact the runtime performance of the REPL)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h:289,Integrability,interface,interface,289,"// REPL_EXTERNAL_VISIBILITY are symbols that we need to be able to locate; // at runtime. On Windows, this requires them to be exported from any of the; // modules loaded at runtime. Marking them as dllexport achieves this; both; // for DLLs (that normally export symbols as part of their interface) and for; // EXEs (that normally don't export anything).; // For a build with libclang-cpp.dll, this doesn't make any difference - the; // functions would have been exported anyway. But for cases when these are; // statically linked into an EXE, it makes sure that they're exported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h:164,Performance,load,loaded,164,"// REPL_EXTERNAL_VISIBILITY are symbols that we need to be able to locate; // at runtime. On Windows, this requires them to be exported from any of the; // modules loaded at runtime. Marking them as dllexport achieves this; both; // for DLLs (that normally export symbols as part of their interface) and for; // EXEs (that normally don't export anything).; // For a build with libclang-cpp.dll, this doesn't make any difference - the; // functions would have been exported anyway. But for cases when these are; // statically linked into an EXE, it makes sure that they're exported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Interpreter/Value.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Value.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:427,Integrability,interface,interface,427,"//===--- CodeCompletionHandler.h - Preprocessor code completion -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the CodeCompletionHandler interface, which provides; // code-completion callbacks for the preprocessor.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:54,Performance,perform,performing,54,/// Callback handler that receives notifications when performing code; /// completion within the preprocessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:26,Performance,perform,performing,26,"/// Callback invoked when performing code completion for a preprocessor; /// directive.; ///; /// This callback will be invoked when the preprocessor processes a '#' at the; /// start of a line, followed by the code-completion token.; ///; /// \param InConditional Whether we're inside a preprocessor conditional; /// already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:26,Performance,perform,performing,26,/// Callback invoked when performing code completion within a block of; /// code that was excluded due to preprocessor conditionals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:26,Performance,perform,performing,26,"/// Callback invoked when performing code completion in a context; /// where the name of a macro is expected.; ///; /// \param IsDefinition Whether this is the definition of a macro, e.g.,; /// in a \#define.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:26,Performance,perform,performing,26,"/// Callback invoked when performing code completion in a preprocessor; /// expression, such as the condition of an \#if or \#elif directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:26,Performance,perform,performing,26,"/// Callback invoked when performing code completion inside a; /// function-like macro argument.; ///; /// There will be another callback invocation after the macro arguments are; /// parsed, so this callback should generally be used to note that the next; /// callback is invoked inside a macro argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:26,Performance,perform,performing,26,"/// Callback invoked when performing code completion inside the filename; /// part of an #include directive. (Also #import, #include_next, etc).; /// \p Dir is the directory relative to the include path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:149,Availability,error,error,149,"/// Callback invoked when performing code completion in a part of the; /// file where we expect natural language, e.g., a comment, string, or; /// \#error directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h:26,Performance,perform,performing,26,"/// Callback invoked when performing code completion in a part of the; /// file where we expect natural language, e.g., a comment, string, or; /// \#error directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:565,Availability,down,down,565,"//===- clang/Lex/DependencyDirectivesScanner.h ---------------------*- C++ -*-//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This is the interface for scanning header and source files to get the; /// minimum necessary preprocessor directives for evaluating includes. It; /// reduces the source down to #define, #include, #import, @import, and any; /// conditional preprocessor logic that contains one of those.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:546,Energy Efficiency,reduce,reduces,546,"//===- clang/Lex/DependencyDirectivesScanner.h ---------------------*- C++ -*-//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This is the interface for scanning header and source files to get the; /// minimum necessary preprocessor directives for evaluating includes. It; /// reduces the source down to #define, #include, #import, @import, and any; /// conditional preprocessor logic that contains one of those.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:17,Integrability,Depend,DependencyDirectivesScanner,17,"//===- clang/Lex/DependencyDirectivesScanner.h ---------------------*- C++ -*-//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This is the interface for scanning header and source files to get the; /// minimum necessary preprocessor directives for evaluating includes. It; /// reduces the source down to #define, #include, #import, @import, and any; /// conditional preprocessor logic that contains one of those.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:408,Integrability,interface,interface,408,"//===- clang/Lex/DependencyDirectivesScanner.h ---------------------*- C++ -*-//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This is the interface for scanning header and source files to get the; /// minimum necessary preprocessor directives for evaluating includes. It; /// reduces the source down to #define, #include, #import, @import, and any; /// conditional preprocessor logic that contains one of those.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:648,Testability,log,logic,648,"//===- clang/Lex/DependencyDirectivesScanner.h ---------------------*- C++ -*-//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This is the interface for scanning header and source files to get the; /// minimum necessary preprocessor directives for evaluating includes. It; /// reduces the source down to #define, #include, #import, @import, and any; /// conditional preprocessor logic that contains one of those.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:27,Integrability,depend,dependency,27,/// Token lexed as part of dependency directive scanning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:55,Integrability,depend,dependency,55,/// Represents a directive that's lexed as part of the dependency directives; /// scanning. It's used to track various preprocessor directives that could; /// potentially have an effect on the dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:193,Integrability,depend,dependencies,193,/// Represents a directive that's lexed as part of the dependency directives; /// scanning. It's used to track various preprocessor directives that could; /// potentially have an effect on the dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:330,Availability,error,error,330,"// end namespace dependency_directives_scan; /// Scan the input for the preprocessor directives that might have; /// an effect on the dependencies for a compilation unit.; ///; /// This function ignores all non-preprocessor code and anything that; /// can't affect what gets included.; ///; /// \returns false on success, true on error. If the diagnostic engine is not; /// null, an appropriate error is reported using the given input location; /// with the offset that corresponds to the \p Input buffer offset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:395,Availability,error,error,395,"// end namespace dependency_directives_scan; /// Scan the input for the preprocessor directives that might have; /// an effect on the dependencies for a compilation unit.; ///; /// This function ignores all non-preprocessor code and anything that; /// can't affect what gets included.; ///; /// \returns false on success, true on error. If the diagnostic engine is not; /// null, an appropriate error is reported using the given input location; /// with the offset that corresponds to the \p Input buffer offset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:134,Integrability,depend,dependencies,134,"// end namespace dependency_directives_scan; /// Scan the input for the preprocessor directives that might have; /// an effect on the dependencies for a compilation unit.; ///; /// This function ignores all non-preprocessor code and anything that; /// can't affect what gets included.; ///; /// \returns false on success, true on error. If the diagnostic engine is not; /// null, an appropriate error is reported using the given input location; /// with the offset that corresponds to the \p Input buffer offset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:33,Integrability,depend,dependency,33,"/// Print the previously scanned dependency directives as minimized source text.; ///; /// \param Source The original source text that the dependency directives were; /// scanned from.; /// \param Directives The previously scanned dependency; /// directives.; /// \param OS the stream to print the dependency directives on.; ///; /// This is used primarily for testing purposes, during dependency scanning the; /// \p Lexer uses the tokens directly, not their printed version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:139,Integrability,depend,dependency,139,"/// Print the previously scanned dependency directives as minimized source text.; ///; /// \param Source The original source text that the dependency directives were; /// scanned from.; /// \param Directives The previously scanned dependency; /// directives.; /// \param OS the stream to print the dependency directives on.; ///; /// This is used primarily for testing purposes, during dependency scanning the; /// \p Lexer uses the tokens directly, not their printed version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:231,Integrability,depend,dependency,231,"/// Print the previously scanned dependency directives as minimized source text.; ///; /// \param Source The original source text that the dependency directives were; /// scanned from.; /// \param Directives The previously scanned dependency; /// directives.; /// \param OS the stream to print the dependency directives on.; ///; /// This is used primarily for testing purposes, during dependency scanning the; /// \p Lexer uses the tokens directly, not their printed version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:298,Integrability,depend,dependency,298,"/// Print the previously scanned dependency directives as minimized source text.; ///; /// \param Source The original source text that the dependency directives were; /// scanned from.; /// \param Directives The previously scanned dependency; /// directives.; /// \param OS the stream to print the dependency directives on.; ///; /// This is used primarily for testing purposes, during dependency scanning the; /// \p Lexer uses the tokens directly, not their printed version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:386,Integrability,depend,dependency,386,"/// Print the previously scanned dependency directives as minimized source text.; ///; /// \param Source The original source text that the dependency directives were; /// scanned from.; /// \param Directives The previously scanned dependency; /// directives.; /// \param OS the stream to print the dependency directives on.; ///; /// This is used primarily for testing purposes, during dependency scanning the; /// \p Lexer uses the tokens directly, not their printed version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:361,Testability,test,testing,361,"/// Print the previously scanned dependency directives as minimized source text.; ///; /// \param Source The original source text that the dependency directives were; /// scanned from.; /// \param Directives The previously scanned dependency; /// directives.; /// \param OS the stream to print the dependency directives on.; ///; /// This is used primarily for testing purposes, during dependency scanning the; /// \p Lexer uses the tokens directly, not their printed version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DirectoryLookup.h:421,Integrability,interface,interface,421,"//===--- DirectoryLookup.h - Info for searching for headers -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DirectoryLookup interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DirectoryLookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DirectoryLookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DirectoryLookup.h:18,Performance,perform,performed,18,/// Whether we've performed an exhaustive search for module maps; /// within the subdirectories of this directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DirectoryLookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DirectoryLookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DirectoryLookup.h:724,Performance,perform,performed,724,"/// LookupFile - Lookup the specified file in this search path, returning it; /// if it exists or returning null if not.; ///; /// \param Filename The file to look up relative to the search paths.; ///; /// \param HS The header search instance to search with.; ///; /// \param IncludeLoc the source location of the #include or #import; /// directive.; ///; /// \param SearchPath If not NULL, will be set to the search path relative; /// to which the file was found.; ///; /// \param RelativePath If not NULL, will be set to the path relative to; /// SearchPath at which the file was found. This only differs from the; /// Filename for framework includes.; ///; /// \param RequestingModule The module in which the lookup was performed.; ///; /// \param SuggestedModule If non-null, and the file found is semantically; /// part of a known module, this will be set to the module that should; /// be imported instead of preprocessing/parsing the file found.; ///; /// \param [out] InUserSpecifiedSystemFramework If the file is found,; /// set to true if the file is located in a framework that has been; /// user-specified to be treated as a system framework.; ///; /// \param [out] IsFrameworkFound For a framework directory set to true if; /// specified '.framework' directory is found.; ///; /// \param [out] MappedName if this is a headermap which maps the filename to; /// a framework include (""Foo.h"" -> ""Foo/Foo.h""), set the new name to this; /// vector and point Filename to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/DirectoryLookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DirectoryLookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h:53,Integrability,Interface,Interface,53,"//===- ExternalPreprocessorSource.h - Abstract Macro Interface --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ExternalPreprocessorSource interface, which enables; // construction of macro definitions from some external source.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h:432,Integrability,interface,interface,432,"//===- ExternalPreprocessorSource.h - Abstract Macro Interface --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ExternalPreprocessorSource interface, which enables; // construction of macro definitions from some external source.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h:13,Integrability,interface,interface,13,/// Abstract interface for external sources of preprocessor; /// information.; ///; /// This abstract class allows an external sources (such as the \c ASTReader); /// to provide additional preprocessing information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h:4,Deployability,Update,Update,4,/// Update an out-of-date identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ExternalPreprocessorSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h:415,Integrability,interface,interface,415,"//===--- HeaderMap.h - A file that acts like dir of symlinks ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the HeaderMap interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h:49,Integrability,depend,depend,49,/// Implementation for \a HeaderMap that doesn't depend on \a FileManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h:222,Energy Efficiency,efficient,efficient,222,"/// This class represents an Apple concept known as a 'header map'. To the; /// \#include file resolution process, it basically acts like a directory of; /// symlinks to files. Its advantages are that it is dense and more efficient; /// to create and process than a directory of symlinks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h:21,Performance,load,load,21,"/// This attempts to load the specified file as a header map. If it doesn't; /// look like a HeaderMap, it gives up and returns null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMapTypes.h:31,Energy Efficiency,power,power,31,// Number of buckets (always a power of 2).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderMapTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMapTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:418,Integrability,interface,interface,418,"//===- HeaderSearch.h - Resolve Header File Locations -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the HeaderSearch interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:99,Performance,load,loaded,99,"/// Whether this structure is considered to already have been; /// ""resolved"", meaning that it was loaded from the external source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:168,Performance,load,loaded,168,/// The ID number of the controlling macro.; ///; /// This ID number will be non-zero when there is a controlling; /// macro whose IdentifierInfo may not yet have been loaded from; /// external storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:359,Performance,load,load,359,"/// If this file has a \#ifndef XXX (or equivalent) guard that; /// protects the entire contents of the file, this is the identifier; /// for the macro that controls whether or not it has any effect.; ///; /// Note: Most clients should use getControllingMacro() to access; /// the controlling macro of this header, since; /// getControllingMacro() is able to load a controlling macro from; /// external storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:265,Security,access,access,265,"/// If this file has a \#ifndef XXX (or equivalent) guard that; /// protects the entire contents of the file, this is the identifier; /// for the macro that controls whether or not it has any effect.; ///; /// Note: Most clients should use getControllingMacro() to access; /// the controlling macro of this header, since; /// getControllingMacro() is able to load a controlling macro from; /// external storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:62,Performance,cache,cache,62,/// This structure is used to record entries in our framework cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:53,Performance,cache,cached,53,/// The directory entry which should be used for the cached framework.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:163,Safety,avoid,avoid,163,"/// Maps HeaderMap keys to SearchDir indices. When HeaderMaps are used; /// heavily, SearchDirs can start with thousands of HeaderMaps, so this Index; /// lets us avoid scanning them all to find a match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:29,Performance,cache,cache,29,/// The hash used for module cache paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:8,Security,hash,hash,8,/// The hash used for module cache paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:27,Performance,cache,cache,27,/// The path to the module cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:31,Performance,perform,performed,31,/// Keeps track of each lookup performed by LookupFile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:43,Performance,cache,cached,43,// The requesting module for the lookup we cached.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:48,Performance,cache,cached,48,"/// Starting search directory iterator that the cached search was performed; /// from. If there is a hit and this value doesn't match the current query,; /// the cache has to be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:66,Performance,perform,performed,66,"/// Starting search directory iterator that the cached search was performed; /// from. If there is a hit and this value doesn't match the current query,; /// the cache has to be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:162,Performance,cache,cache,162,"/// Starting search directory iterator that the cached search was performed; /// from. If there is a hit and this value doesn't match the current query,; /// the cache has to be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:42,Performance,load,loaded,42,"/// Set of module map files we've already loaded, and a flag indicating; /// whether they were valid or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:4,Integrability,Interface,Interface,4,/// Interface for setting the file search paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:35,Performance,cache,cache,35,/// Set the hash to use for module cache paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:12,Security,hash,hash,12,/// Set the hash to use for module cache paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:31,Performance,cache,cache,31,/// Set the path to the module cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:24,Security,hash,hash,24,/// Retrieve the module hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:36,Performance,cache,cache,36,/// Retrieve the path to the module cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:87,Availability,failure,failure,87,"/// Given a ""foo"" or \<foo> reference, look up the indicated file,; /// return null on failure.; ///; /// \returns If successful, this returns 'UsedDir', the DirectoryLookup member; /// the file was found in, or null if not applicable.; ///; /// \param IncludeLoc Used for diagnostics if valid.; ///; /// \param isAngled indicates whether the file reference is a <> reference.; ///; /// \param CurDir If non-null, the file was found in the specified directory; /// search location. This is used to implement \#include_next.; ///; /// \param Includers Indicates where the \#including file(s) are, in case; /// relative searches are needed. In reverse order of inclusion.; ///; /// \param SearchPath If non-null, will be set to the search path relative; /// to which the file was found. If the include path is absolute, SearchPath; /// will be set to an empty string.; ///; /// \param RelativePath If non-null, will be set to the path relative to; /// SearchPath at which the file was found. This only differs from the; /// Filename for framework includes.; ///; /// \param SuggestedModule If non-null, and the file found is semantically; /// part of a known module, this will be set to the module that should; /// be imported instead of preprocessing/parsing the file found.; ///; /// \param IsMapped If non-null, and the search involved header maps, set to; /// true.; ///; /// \param IsFrameworkFound If non-null, will be set to true if a framework is; /// found in any of searched SearchDirs. Will be set to false if a framework; /// is found only through header maps. Doesn't guarantee the requested file is; /// found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:58,Performance,cache,cache,58,"/// Look up the specified framework name in our framework cache.; /// \returns The DirectoryEntry it is in if we know, null otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:106,Performance,optimiz,optimization,106,/// Mark the specified file as having a controlling macro.; ///; /// This is used by the multiple-include optimization to eliminate; /// no-op \#includes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:157,Integrability,rout,routine,157,"/// Determine whether this file is intended to be safe from; /// multiple inclusions, e.g., it has \#pragma once or a controlling; /// macro.; ///; /// This routine does not consider the effect of \#import",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:50,Safety,safe,safe,50,"/// Determine whether this file is intended to be safe from; /// multiple inclusions, e.g., it has \#pragma once or a controlling; /// macro.; ///; /// This routine does not consider the effect of \#import",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:29,Performance,cache,cached,29,"/// Retrieve the name of the cached module file that should be used; /// to load the given module.; ///; /// \param Module The module whose module file name will be returned.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:76,Performance,load,load,76,"/// Retrieve the name of the cached module file that should be used; /// to load the given module.; ///; /// \param Module The module whose module file name will be returned.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:78,Performance,load,load,78,"/// Retrieve the name of the prebuilt module file that should be used; /// to load a module with the given name.; ///; /// \param ModuleName The module whose module file name will be returned.; ///; /// \param FileMapOnly If true, then only look in the explicit module name; // to file name map and skip the directory search.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:78,Performance,load,load,78,"/// Retrieve the name of the prebuilt module file that should be used; /// to load the given module.; ///; /// \param Module The module whose module file name will be returned.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:37,Performance,cache,cached,37,"/// Retrieve the name of the (to-be-)cached module file that should; /// be used to load a module with the given name.; ///; /// \param ModuleName The module whose module file name will be returned.; ///; /// \param ModuleMapPath A path that when combined with \c ModuleName; /// uniquely identifies this module. See Module::ModuleMap.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:84,Performance,load,load,84,"/// Retrieve the name of the (to-be-)cached module file that should; /// be used to load a module with the given name.; ///; /// \param ModuleName The module whose module file name will be returned.; ///; /// \param ModuleMapPath A path that when combined with \c ModuleName; /// uniquely identifies this module. See Module::ModuleMap.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:710,Availability,error,error,710,"/// Read the contents of the given module map file.; ///; /// \param File The module map file.; /// \param IsSystem Whether this file is in a system header directory.; /// \param ID If the module map file is already mapped (perhaps as part of; /// processing a preprocessed module), the ID of the file.; /// \param Offset [inout] An offset within ID to start parsing. On exit,; /// filled by the end of the parsed contents (either EOF or the; /// location of an end-of-module-map pragma).; /// \param OriginalModuleMapFile The original path to the module map file,; /// used to resolve paths within the module (this is required when; /// building the module from preprocessed source).; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:4,Performance,Load,Load,4,"/// Load all known, top-level system modules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:37,Performance,cache,cached,37,"/// Retrieve the name of the (to-be-)cached module file that should; /// be used to load a module with the given name.; ///; /// \param ModuleName The module whose module file name will be returned.; ///; /// \param ModuleMapPath A path that when combined with \c ModuleName; /// uniquely identifies this module. See Module::ModuleMap.; ///; /// \param CachePath A path to the module cache.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:84,Performance,load,load,84,"/// Retrieve the name of the (to-be-)cached module file that should; /// be used to load a module with the given name.; ///; /// \param ModuleName The module whose module file name will be returned.; ///; /// \param ModuleMapPath A path that when combined with \c ModuleName; /// uniquely identifies this module. See Module::ModuleMap.; ///; /// \param CachePath A path to the module cache.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:353,Performance,Cache,CachePath,353,"/// Retrieve the name of the (to-be-)cached module file that should; /// be used to load a module with the given name.; ///; /// \param ModuleName The module whose module file name will be returned.; ///; /// \param ModuleMapPath A path that when combined with \c ModuleName; /// uniquely identifies this module. See Module::ModuleMap.; ///; /// \param CachePath A path to the module cache.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:384,Performance,cache,cache,384,"/// Retrieve the name of the (to-be-)cached module file that should; /// be used to load a module with the given name.; ///; /// \param ModuleName The module whose module file name will be returned.; ///; /// \param ModuleMapPath A path that when combined with \c ModuleName; /// uniquely identifies this module. See Module::ModuleMap.; ///; /// \param CachePath A path to the module cache.; ///; /// \returns The name of the module file that corresponds to this module,; /// or an empty string if this module does not correspond to any module file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:4,Performance,Load,Load,4,/// Load all of the module maps within the immediate subdirectories; /// of the given search directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:23,Usability,usab,usable,23,"/// Find and suggest a usable module for the given file.; ///; /// \return \c true if the file can be used, \c false if we are not permitted to; /// find this file due to requirements from \p RequestingModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:23,Usability,usab,usable,23,"/// Find and suggest a usable module for the given file, which is part of; /// the specified framework.; ///; /// \return \c true if the file can be used, \c false if we are not permitted to; /// find this file due to requirements from \p RequestingModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:4,Performance,Cache,Cache,4,/// Cache the result of a successful lookup at the given include location; /// using the search path at \c HitIt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:45,Performance,load,load,45,/// Describes what happened when we tried to load a module map file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:41,Performance,load,loaded,41,/// The module map file had already been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:28,Performance,load,loaded,28,/// The module map file was loaded by this invocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:11,Performance,load,load,11,/// Try to load the module map file in the given directory.; ///; /// \param DirName The name of the directory where we will look for a module; /// map file.; /// \param IsSystem Whether this is a system header directory.; /// \param IsFramework Whether this is a framework directory.; ///; /// \returns The result of attempting to load the module map file from the; /// named directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:332,Performance,load,load,332,/// Try to load the module map file in the given directory.; ///; /// \param DirName The name of the directory where we will look for a module; /// map file.; /// \param IsSystem Whether this is a system header directory.; /// \param IsFramework Whether this is a framework directory.; ///; /// \returns The result of attempting to load the module map file from the; /// named directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:11,Performance,load,load,11,/// Try to load the module map file in the given directory.; ///; /// \param Dir The directory where we will look for a module map file.; /// \param IsSystem Whether this is a system header directory.; /// \param IsFramework Whether this is a framework directory.; ///; /// \returns The result of attempting to load the module map file from the; /// named directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:311,Performance,load,load,311,/// Try to load the module map file in the given directory.; ///; /// \param Dir The directory where we will look for a module map file.; /// \param IsSystem Whether this is a system header directory.; /// \param IsFramework Whether this is a framework directory.; ///; /// \returns The result of attempting to load the module map file from the; /// named directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:44,Integrability,wrap,wrapped,44,"/// Like System, but headers are implicitly wrapped in extern ""C"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:38,Performance,cache,cache,38,/// The directory used for the module cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:28,Performance,load,load,28,/// The directories used to load prebuilt module files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:80,Performance,cache,cache,80,/// Whether we should disable the use of the hash string within the; /// module cache.; ///; /// Note: Only used for testing!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:45,Security,hash,hash,45,/// Whether we should disable the use of the hash string within the; /// module cache.; ///; /// Note: Only used for testing!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:117,Testability,test,testing,117,/// Whether we should disable the use of the hash string within the; /// module cache.; ///; /// Note: Only used for testing!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:198,Modifiability,rewrite,rewrite,198,/// Set the base path of a built module file to be the current working; /// directory. This is useful for sharing module files across machines; /// that build with different paths without having to rewrite all; /// modulemap files to have working directory relative paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:69,Performance,cache,cache,69,/// Also search for prebuilt implicit modules in the prebuilt module cache; /// path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:182,Performance,cache,cache,182,"/// The interval (in seconds) between pruning operations.; ///; /// This operation is expensive, because it requires Clang to walk through; /// the directory structure of the module cache, stat()'ing and removing; /// files.; ///; /// The default value is large, e.g., the operation runs once a week.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:149,Performance,cache,cache,149,"/// The time (in seconds) after which an unused module file will be; /// considered unused and will, therefore, be pruned.; ///; /// When the module cache is pruned, any module file that has not been; /// accessed in this many seconds will be removed. The default value is; /// large, e.g., a month, to avoid forcing infrequently-used modules to be; /// regenerated often.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:303,Safety,avoid,avoid,303,"/// The time (in seconds) after which an unused module file will be; /// considered unused and will, therefore, be pruned.; ///; /// When the module cache is pruned, any module file that has not been; /// accessed in this many seconds will be removed. The default value is; /// large, e.g., a month, to avoid forcing infrequently-used modules to be; /// regenerated often.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:205,Security,access,accessed,205,"/// The time (in seconds) after which an unused module file will be; /// considered unused and will, therefore, be pruned.; ///; /// When the module cache is pruned, any module file that has not been; /// accessed in this many seconds will be removed. The default value is; /// large, e.g., a month, to avoid forcing infrequently-used modules to be; /// regenerated often.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:93,Performance,optimiz,optimizations,93,/// The time in seconds when the build session started.; ///; /// This time is used by other optimizations in header search and module; /// loading.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:140,Performance,load,loading,140,/// The time in seconds when the build session started.; ///; /// This time is used by other optimizations in header search and module; /// loading.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:96,Security,hash,hash,96,/// The set of macro names that should be ignored for the purposes; /// of computing the module hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:60,Performance,load,loaded,60,/// Whether to validate system input files when a module is loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:15,Security,validat,validate,15,/// Whether to validate system input files when a module is loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:48,Security,hash,hashed,48,// Whether the content of input files should be hashed and used to; // validate consistency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:71,Security,validat,validate,71,// Whether the content of input files should be hashed and used to; // validate consistency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:112,Integrability,depend,dependency,112,/// Whether to entirely skip writing diagnostic options.; /// Primarily used to speed up deserialization during dependency scanning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:113,Integrability,depend,dependency,113,/// Whether to entirely skip writing header search paths.; /// Primarily used to speed up deserialization during dependency scanning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:120,Integrability,depend,dependency,120,/// Whether to entirely skip writing pragma diagnostic mappings.; /// Primarily used to speed up deserialization during dependency scanning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:82,Security,hash,hash,82,"/// Whether we should include all things that could impact the module in the; /// hash.; ///; /// This includes things like the full header search path, and enabled; /// diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:411,Integrability,interface,interface,411,"//===- Lexer.h - C Language Family Lexer ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Lexer interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:80,Availability,recover,recovering,80,/// ConflictMarkerKind - Kinds of conflict marker which the lexer might be; /// recovering from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:80,Safety,recover,recovering,80,/// ConflictMarkerKind - Kinds of conflict marker which the lexer might be; /// recovering from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:35,Integrability,interface,interface,35,"/// Lexer - This provides a simple interface that turns a text buffer into a; /// stream of tokens. This provides no support for file reading or buffering,; /// or buffering/seeking of tokens, only forward lexing is supported. It relies; /// on the specified Preprocessor object to handle preprocessor directives, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:28,Usability,simpl,simple,28,"/// Lexer - This provides a simple interface that turns a text buffer into a; /// stream of tokens. This provides no support for file reading or buffering,; /// or buffering/seeking of tokens, only forward lexing is supported. It relies; /// on the specified Preprocessor object to handle preprocessor directives, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:92,Deployability,configurat,configuration,92,//===--------------------------------------------------------------------===//; // Constant configuration values for this lexer.; // Start of the buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:92,Modifiability,config,configuration,92,//===--------------------------------------------------------------------===//; // Constant configuration values for this lexer.; // Start of the buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:98,Performance,perform,performance,98,"// LangOpts enabled by this language.; // Storing LangOptions as reference here is important from performance point; // of view. Lack of reference means that LangOptions copy constructor would be; // called by Lexer(..., const LangOptions &LangOpts,...). Given that local; // Lexer objects are created thousands times (in Lexer::getRawToken,; // Preprocessor::EnterSourceFile and other places) during single module; // processing in frontend it would make std::vector<std::string> copy; // constructors surprisingly hot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:147,Modifiability,Extend,ExtendedTokenMode,147,"//===--------------------------------------------------------------------===//; // Context-specific lexing flags set by the preprocessor.; //; /// ExtendedTokenMode - The lexer can optionally keep comments and whitespace; /// and return them as tokens. This is used for -C and -CC modes, and; /// whitespace preservation can be useful for some clients that want to lex; /// the file in raw mode and get every character from the file.; ///; /// When this is set to 2 it returns comments and whitespace. When set to 1; /// it returns comments, when it is set to 0 it returns normal tokens only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:116,Integrability,depend,dependency,116,"/// If this \p Lexer is \p isDependencyDirectivesLexer(), it represents the; /// next token to use from the current dependency directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:40,Integrability,depend,dependency,40,/// Called when the preprocessor is in 'dependency scanning lexing mode'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:40,Integrability,depend,dependency,40,/// Called when the preprocessor is in 'dependency scanning lexing mode' and; /// is skipping a conditional block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:38,Integrability,depend,dependency,38,/// True when the preprocessor is in 'dependency scanning lexing mode' and; /// created this \p Lexer for lexing a set of dependency directive tokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:122,Integrability,depend,dependency,122,/// True when the preprocessor is in 'dependency scanning lexing mode' and; /// created this \p Lexer for lexing a set of dependency directive tokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:95,Integrability,interface,interface,95,/// IndirectLex - An indirect call to 'Lex' that can be invoked via; /// the PreprocessorLexer interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:13,Modifiability,extend,extended,13,"/// Sets the extended token mode back to its initial value, according to the; /// language options and preprocessor. This controls whether the lexer; /// produces comment and whitespace tokens.; ///; /// This requires the lexer to have an associated preprocessor. A standalone; /// lexer has nothing to reset to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:163,Energy Efficiency,allocate,allocate,163,"/// getSpelling - This method is used to get the spelling of a token into a; /// preallocated buffer, instead of as an std::string. The caller is required; /// to allocate enough space for the token, which is guaranteed to be at least; /// Tok.getLength() bytes long. The length of the actual result is returned.; ///; /// Note that this method may do two possible things: it may either fill in; /// the buffer specified with characters, or it may *change the input pointer*; /// to point to a constant buffer with the data already in it (avoiding a; /// copy). The caller is not allowed to modify the returned buffer pointer; /// if an internal buffer is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:539,Safety,avoid,avoiding,539,"/// getSpelling - This method is used to get the spelling of a token into a; /// preallocated buffer, instead of as an std::string. The caller is required; /// to allocate enough space for the token, which is guaranteed to be at least; /// Tok.getLength() bytes long. The length of the actual result is returned.; ///; /// Note that this method may do two possible things: it may either fill in; /// the buffer specified with characters, or it may *change the input pointer*; /// to point to a constant buffer with the data already in it (avoiding a; /// copy). The caller is not allowed to modify the returned buffer pointer; /// if an internal buffer is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:81,Availability,failure,failure,81,"/// Relex the token at the specified location.; /// \returns true if there was a failure, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:109,Integrability,rout,routine,109,"/// Computes the source location just past the end of the; /// token at this source location.; ///; /// This routine can be used to produce a source location that; /// points just past the end of the token referenced by \p Loc, and; /// is generally used when a diagnostic needs to point just after a; /// token where it expected something different that it received. If; /// the returned source location would not be meaningful (e.g., if; /// it points into a macro), this routine returns an invalid; /// source location.; ///; /// \param Offset an offset from the end of the token, where the source; /// location should refer to. The default offset (0) produces a source; /// location pointing just past the end of the token; an offset of 1 produces; /// a source location pointing to the last character in the token, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:474,Integrability,rout,routine,474,"/// Computes the source location just past the end of the; /// token at this source location.; ///; /// This routine can be used to produce a source location that; /// points just past the end of the token referenced by \p Loc, and; /// is generally used when a diagnostic needs to point just after a; /// token where it expected something different that it received. If; /// the returned source location would not be meaningful (e.g., if; /// it points into a macro), this routine returns an invalid; /// source location.; ///; /// \param Offset an offset from the end of the token, where the source; /// location should refer to. The default offset (0) produces a source; /// location pointing just past the end of the token; an offset of 1 produces; /// a source location pointing to the last character in the token, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:172,Security,access,access,172,"/// Given a token range, produce a corresponding CharSourceRange that; /// is not a token range. This allows the source range to be used by; /// components that don't have access to the lexer and thus can't find the; /// end of the range for themselves.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:71,Integrability,rout,routine,71,"/// Retrieve the name of the immediate macro expansion.; ///; /// This routine starts from a source location, and finds the name of the macro; /// responsible for its immediate expansion. It looks through any intervening; /// macro argument expansions to compute this. It returns a StringRef which; /// refers to the SourceManager-owned buffer of the source where that macro; /// name is spelled. Thus, the result shouldn't out-live that SourceManager.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:71,Integrability,rout,routine,71,"/// Retrieve the name of the immediate macro expansion.; ///; /// This routine starts from a source location, and finds the name of the; /// macro responsible for its immediate expansion. It looks through any; /// intervening macro argument expansions to compute this. It returns a; /// StringRef which refers to the SourceManager-owned buffer of the source; /// where that macro name is spelled. Thus, the result shouldn't out-live; /// that SourceManager.; ///; /// This differs from Lexer::getImmediateMacroName in that any macro argument; /// location will result in the topmost function macro that accepted it.; /// e.g.; /// \code; /// MAC1( MAC2(foo) ); /// \endcode; /// for location of 'foo' token, this function will return ""MAC1"" while; /// Lexer::getImmediateMacroName will return ""MAC2"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:107,Integrability,interface,interfaces,107,//===--------------------------------------------------------------------===//; // Internal implementation interfaces.; /// LexTokenInternal - Internal interface to lex a preprocessing token. Called; /// by Lex.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:152,Integrability,interface,interface,152,//===--------------------------------------------------------------------===//; // Internal implementation interfaces.; /// LexTokenInternal - Internal interface to lex a preprocessing token. Called; /// by Lex.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:283,Deployability,update,updates,283,"/// FormTokenWithChars - When we lex a token, we have identified a span; /// starting at BufferPtr, going to TokEnd that forms the token. This method; /// takes that range and assigns it to the token as its location and size. In; /// addition, since tokens cannot overlap, this also updates BufferPtr to be; /// TokEnd.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:107,Integrability,interface,interfaces,107,"//===--------------------------------------------------------------------===//; // Lexer character reading interfaces.; // This lexer is built on two interfaces for reading characters, both of which; // automatically provide phase 1/2 translation. getAndAdvanceChar is used; // when we know that we will be reading a character from the input buffer and; // that this character will be part of the result token. This occurs in (f.e.); // string processing, because we know we need to read until we find the; // closing '""' character.; //; // The second interface is the combination of getCharAndSize with; // ConsumeChar. getCharAndSize reads a phase 1/2 translated character,; // returning it and its size. If the lexer decides that this character is; // part of the current token, it calls ConsumeChar on it. This two stage; // approach allows us to emit diagnostics for characters (e.g. warnings about; // trigraphs), knowing that they only are emitted if the character is; // consumed.; /// isObviouslySimpleCharacter - Return true if the specified character is; /// obviously the same in translation phase 1 and translation phase 3. This; /// can return false for characters that end up being the same, but it will; /// never return true for something that needs to be mapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:150,Integrability,interface,interfaces,150,"//===--------------------------------------------------------------------===//; // Lexer character reading interfaces.; // This lexer is built on two interfaces for reading characters, both of which; // automatically provide phase 1/2 translation. getAndAdvanceChar is used; // when we know that we will be reading a character from the input buffer and; // that this character will be part of the result token. This occurs in (f.e.); // string processing, because we know we need to read until we find the; // closing '""' character.; //; // The second interface is the combination of getCharAndSize with; // ConsumeChar. getCharAndSize reads a phase 1/2 translated character,; // returning it and its size. If the lexer decides that this character is; // part of the current token, it calls ConsumeChar on it. This two stage; // approach allows us to emit diagnostics for characters (e.g. warnings about; // trigraphs), knowing that they only are emitted if the character is; // consumed.; /// isObviouslySimpleCharacter - Return true if the specified character is; /// obviously the same in translation phase 1 and translation phase 3. This; /// can return false for characters that end up being the same, but it will; /// never return true for something that needs to be mapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:552,Integrability,interface,interface,552,"//===--------------------------------------------------------------------===//; // Lexer character reading interfaces.; // This lexer is built on two interfaces for reading characters, both of which; // automatically provide phase 1/2 translation. getAndAdvanceChar is used; // when we know that we will be reading a character from the input buffer and; // that this character will be part of the result token. This occurs in (f.e.); // string processing, because we know we need to read until we find the; // closing '""' character.; //; // The second interface is the combination of getCharAndSize with; // ConsumeChar. getCharAndSize reads a phase 1/2 translated character,; // returning it and its size. If the lexer decides that this character is; // part of the current token, it calls ConsumeChar on it. This two stage; // approach allows us to emit diagnostics for characters (e.g. warnings about; // trigraphs), knowing that they only are emitted if the character is; // consumed.; /// isObviouslySimpleCharacter - Return true if the specified character is; /// obviously the same in translation phase 1 and translation phase 3. This; /// can return false for characters that end up being the same, but it will; /// never return true for something that needs to be mapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:222,Deployability,update,updated,222,"/// Read a universal character name.; ///; /// \param StartPtr The position in the source buffer after the initial '\'.; /// If the UCN is syntactically well-formed (but not; /// necessarily valid), this parameter will be updated to; /// point to the character after the UCN.; /// \param SlashLoc The position in the source buffer of the '\'.; /// \param Result The token being formed. Pass \c nullptr to suppress; /// diagnostics and handle token formation in the caller.; ///; /// \return The Unicode codepoint specified by the UCN, or 0 if the UCN is; /// invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:189,Deployability,Update,Updated,189,"/// Try to consume a UCN as part of an identifier at the current; /// location.; /// \param CurPtr Initially points to the range of characters in the source; /// buffer containing the '\'. Updated to point past the end of; /// the UCN on success.; /// \param Size The number of characters occupied by the '\' (including; /// trigraphs and escaped newlines).; /// \param Result The token being produced. Marked as containing a UCN on; /// success.; /// \return \c true if a UCN was lexed and it produced an acceptable; /// identifier character, \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:162,Deployability,update,updated,162,"/// Try to consume an identifier character encoded in UTF-8.; /// \param CurPtr Points to the start of the (potential) UTF-8 code unit; /// sequence. On success, updated to point past the end of it.; /// \param Result The token being formed.; /// \return \c true if a UTF-8 sequence mapping to an acceptable identifier; /// character was lexed, \c false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h:474,Integrability,interface,interfaces,474,"//===--- LiteralSupport.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the NumericLiteralParser, CharLiteralParser, and; // StringLiteralParser interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h:32,Performance,perform,performs,32,"/// NumericLiteralParser - This performs strict semantic analysis of the content; /// of a ppnumber, classifying it as either integer, floating, or erroneous,; /// determines the radix of the value and can convert it to a useful value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h:24,Performance,Perform,Perform,24,/// CharLiteralParser - Perform interpretation and semantic analysis of a; /// character literal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h:68,Performance,perform,performs,68,/// StringLiteralParser - This decodes string escape characters and performs; /// wide string analysis and Translation Phase #6 (concatenation of string; /// literals) (C99 5.1.1.2p1).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h:316,Availability,error,errors,316,"/// getOffsetOfStringByte - This function returns the offset of the; /// specified byte of the string data represented by Token. This handles; /// advancing over escape sequences in the string.; ///; /// If the Diagnostics pointer is non-null, then this will do semantic; /// checking of the string literal and emit errors and warnings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/LiteralSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroArgs.h:415,Integrability,interface,interface,415,"//===--- MacroArgs.h - Formal argument info for Macros ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the MacroArgs interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MacroArgs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroArgs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroArgs.h:123,Energy Efficiency,allocate,allocated,123,"/// NumUnexpArgTokens - The number of raw, unexpanded tokens for the; /// arguments. All of the actual argument tokens are allocated immediately; /// after the MacroArgs object in memory. This is all of the arguments; /// concatenated together, with 'EOF' markers at the end of each argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MacroArgs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroArgs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroArgs.h:106,Safety,avoid,avoid,106,/// ArgCache - This is a linked list of MacroArgs objects that the; /// Preprocessor owns which we use to avoid thrashing malloc/free.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MacroArgs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroArgs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h:11,Usability,clear,clear,11,/// Set or clear the isBuiltinMacro flag.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h:36,Performance,load,loaded,36,/// True if the macro directive was loaded from a PCH file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h:43,Performance,load,loaded,43,/// Return true if the macro directive was loaded from a PCH file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:38,Integrability,Interface,Interface,38,"//===- ModuleLoader.h - Module Loader Interface -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ModuleLoader interface, which is responsible for; // loading named modules.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:418,Integrability,interface,interface,418,"//===- ModuleLoader.h - Module Loader Interface -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ModuleLoader interface, which is responsible for; // loading named modules.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:31,Performance,Load,Loader,31,"//===- ModuleLoader.h - Module Loader Interface -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ModuleLoader interface, which is responsible for; // loading named modules.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:458,Performance,load,loading,458,"//===- ModuleLoader.h - Module Loader Interface -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ModuleLoader interface, which is responsible for; // loading named modules.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:42,Performance,load,load,42,/// Describes the result of attempting to load a module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:36,Performance,load,load,36,// We either succeeded or failed to load the named module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:53,Deployability,configurat,configuration,53,// The module exists but cannot be imported due to a configuration mismatch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:53,Modifiability,config,configuration,53,// The module exists but cannot be imported due to a configuration mismatch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:63,Performance,load,loading,63,"/// Determines whether this is a normal return, whether or not loading the; /// module was successful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:51,Performance,load,load,51,"/// Determines whether the module, which failed to load, was; /// actually a submodule that we expected to see (based on implying the; /// submodule from header structure), but didn't materialize in the actual; /// module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:58,Deployability,configurat,configuration,58,/// Determines whether the module failed to load due to a configuration; /// mismatch with an explicitly-named .pcm file from the command line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:58,Modifiability,config,configuration,58,/// Determines whether the module failed to load due to a configuration; /// mismatch with an explicitly-named .pcm file from the command line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:44,Performance,load,load,44,/// Determines whether the module failed to load due to a configuration; /// mismatch with an explicitly-named .pcm file from the command line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:13,Integrability,interface,interface,13,"/// Abstract interface for a module loader.; ///; /// This abstract interface describes a module loader, which is responsible; /// for resolving a module name (e.g., ""std"") to an actual module file, and; /// then loading that module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:68,Integrability,interface,interface,68,"/// Abstract interface for a module loader.; ///; /// This abstract interface describes a module loader, which is responsible; /// for resolving a module name (e.g., ""std"") to an actual module file, and; /// then loading that module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:36,Performance,load,loader,36,"/// Abstract interface for a module loader.; ///; /// This abstract interface describes a module loader, which is responsible; /// for resolving a module name (e.g., ""std"") to an actual module file, and; /// then loading that module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:97,Performance,load,loader,97,"/// Abstract interface for a module loader.; ///; /// This abstract interface describes a module loader, which is responsible; /// for resolving a module name (e.g., ""std"") to an actual module file, and; /// then loading that module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:213,Performance,load,loading,213,"/// Abstract interface for a module loader.; ///; /// This abstract interface describes a module loader, which is responsible; /// for resolving a module name (e.g., ""std"") to an actual module file, and; /// then loading that module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:53,Integrability,rout,routine,53,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:15,Performance,load,load,15,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:73,Performance,load,load,73,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:150,Performance,cache,cache,150,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:208,Performance,load,loading,208,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:504,Performance,load,loaded,504,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:598,Performance,load,loaded,598,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:697,Performance,load,loaded,697,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:780,Performance,load,loaded,780,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:865,Performance,load,loaded,865,"/// Attempt to load the given module.; ///; /// This routine attempts to load the module described by the given; /// parameters. If there is a module cache, this may implicitly compile the; /// module before loading it.; ///; /// \param ImportLoc The location of the 'import' keyword.; ///; /// \param Path The identifiers (and their locations) of the module; /// ""path"", e.g., ""std.vector"" would be split into ""std"" and ""vector"".; ///; /// \param Visibility The visibility provided for the names in the loaded; /// module.; ///; /// \param IsInclusionDirective Indicates that this module is being loaded; /// implicitly, due to the presence of an inclusion directive. Otherwise,; /// it is being loaded due to an import declaration.; ///; /// \returns If successful, returns the loaded module. Otherwise, returns; /// NULL to indicate that the module could not be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:87,Performance,load,load,87,"/// Attempt to create the given module from the specified source buffer.; /// Does not load the module or make any submodule visible; for that, use; /// loadModule and makeModuleVisible.; ///; /// \param Loc The location at which to create the module.; /// \param ModuleName The name of the module to create.; /// \param Source The source of the module: a (preprocessed) module map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:153,Performance,load,loadModule,153,"/// Attempt to create the given module from the specified source buffer.; /// Does not load the module or make any submodule visible; for that, use; /// loadModule and makeModuleVisible.; ///; /// \param Loc The location at which to create the module.; /// \param ModuleName The name of the module to create.; /// \param Source The source of the module: a (preprocessed) module map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:321,Deployability,update,update,321,"/// Load, create, or return global module.; /// This function returns an existing global module index, if one; /// had already been loaded or created, or loads one if it; /// exists, or creates one if it doesn't exist.; /// Also, importantly, if the index doesn't cover all the modules; /// in the module map, it will be update to do so here, because; /// of its use in searching for needed module imports and; /// associated fixit messages.; /// \param TriggerLoc The location for what triggered the load.; /// \returns Returns null if load failed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:432,Integrability,message,messages,432,"/// Load, create, or return global module.; /// This function returns an existing global module index, if one; /// had already been loaded or created, or loads one if it; /// exists, or creates one if it doesn't exist.; /// Also, importantly, if the index doesn't cover all the modules; /// in the module map, it will be update to do so here, because; /// of its use in searching for needed module imports and; /// associated fixit messages.; /// \param TriggerLoc The location for what triggered the load.; /// \returns Returns null if load failed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:4,Performance,Load,Load,4,"/// Load, create, or return global module.; /// This function returns an existing global module index, if one; /// had already been loaded or created, or loads one if it; /// exists, or creates one if it doesn't exist.; /// Also, importantly, if the index doesn't cover all the modules; /// in the module map, it will be update to do so here, because; /// of its use in searching for needed module imports and; /// associated fixit messages.; /// \param TriggerLoc The location for what triggered the load.; /// \returns Returns null if load failed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:132,Performance,load,loaded,132,"/// Load, create, or return global module.; /// This function returns an existing global module index, if one; /// had already been loaded or created, or loads one if it; /// exists, or creates one if it doesn't exist.; /// Also, importantly, if the index doesn't cover all the modules; /// in the module map, it will be update to do so here, because; /// of its use in searching for needed module imports and; /// associated fixit messages.; /// \param TriggerLoc The location for what triggered the load.; /// \returns Returns null if load failed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:154,Performance,load,loads,154,"/// Load, create, or return global module.; /// This function returns an existing global module index, if one; /// had already been loaded or created, or loads one if it; /// exists, or creates one if it doesn't exist.; /// Also, importantly, if the index doesn't cover all the modules; /// in the module map, it will be update to do so here, because; /// of its use in searching for needed module imports and; /// associated fixit messages.; /// \param TriggerLoc The location for what triggered the load.; /// \returns Returns null if load failed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:501,Performance,load,load,501,"/// Load, create, or return global module.; /// This function returns an existing global module index, if one; /// had already been loaded or created, or loads one if it; /// exists, or creates one if it doesn't exist.; /// Also, importantly, if the index doesn't cover all the modules; /// in the module map, it will be update to do so here, because; /// of its use in searching for needed module imports and; /// associated fixit messages.; /// \param TriggerLoc The location for what triggered the load.; /// \returns Returns null if load failed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:537,Performance,load,load,537,"/// Load, create, or return global module.; /// This function returns an existing global module index, if one; /// had already been loaded or created, or loads one if it; /// exists, or creates one if it doesn't exist.; /// Also, importantly, if the index doesn't cover all the modules; /// in the module map, it will be update to do so here, because; /// of its use in searching for needed module imports and; /// associated fixit messages.; /// \param TriggerLoc The location for what triggered the load.; /// \returns Returns null if load failed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:156,Performance,load,load,156,/// Check global module index for missing imports.; /// \param Name The symbol name to look for.; /// \param TriggerLoc The location for what triggered the load.; /// \returns Returns true if any modules with that symbol found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:13,Performance,load,loader,13,/// A module loader that doesn't know how to create or load modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:55,Performance,load,load,55,/// A module loader that doesn't know how to create or load modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:415,Integrability,interface,interface,415,"//===- ModuleMap.h - Describe the layout of modules -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ModuleMap interface, which describes the layout of a; // module as it relates to headers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:85,Usability,simpl,simple,85,/// Language options used to parse the module map itself.; ///; /// These are always simple C language options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:117,Performance,load,loaded,117,"/// The module that the main source file is associated with (the module; /// named LangOpts::CurrentModule, if we've loaded it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:11,Performance,load,loading,11,"/// Module loading cache that includes submodules, indexed by IdentifierInfo.; /// nullptr is stored for modules that are known to fail to load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:19,Performance,cache,cache,19,"/// Module loading cache that includes submodules, indexed by IdentifierInfo.; /// nullptr is stored for modules that are known to fail to load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:139,Performance,load,load,139,"/// Module loading cache that includes submodules, indexed by IdentifierInfo.; /// nullptr is stored for modules that are known to fail to load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:91,Availability,avail,available,91,/// Make module to use export_as as the link dependency name if enough; /// information is available or add it to a pending list otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:45,Integrability,depend,dependency,45,/// Make module to use export_as as the link dependency name if enough; /// information is available or add it to a pending list otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:27,Availability,avail,available,27,/// Whether this header is available in the module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:27,Security,access,accessible,27,/// Whether this header is accessible from the specified module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:41,Testability,test,test,41,/// A generation counter that is used to test whether modules of the; /// same name may shadow or are illegal redefinitions.; ///; /// Modules from earlier scopes may shadow modules from later ones.; /// Modules from the same scope may not have the same name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:41,Deployability,configurat,configuration,41,/// Whether this is an exhaustive set of configuration macros.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:41,Modifiability,config,configuration,41,/// Whether this is an exhaustive set of configuration macros.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:264,Integrability,rout,routine,264,"/// Resolve the given export declaration into an actual export; /// declaration.; ///; /// \param Mod The module in which we're resolving the export declaration.; ///; /// \param Unresolved The export declaration to resolve.; ///; /// \param Complain Whether this routine should complain about unresolvable; /// exports.; ///; /// \returns The resolved export declaration, which will have a NULL pointer; /// if the export could not be resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:210,Integrability,rout,routine,210,"/// Resolve the given module id to an actual module.; ///; /// \param Id The module-id to resolve.; ///; /// \param Mod The module in which we're resolving the module-id.; ///; /// \param Complain Whether this routine should complain about unresolvable; /// module-ids.; ///; /// \returns The resolved module, or null if the module-id could not be; /// resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:160,Performance,load,loads,160,"/// Looks up the modules that \p File corresponds to.; ///; /// If \p File represents a builtin header within Clang's builtin include; /// directory, this also loads all of the module maps to see if it will get; /// associated with a specific module (e.g. in /usr/include).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:105,Performance,load,load,105,"/// Retrieve the module that owns the given header file, if any. Note that; /// this does not implicitly load module maps, except for builtin headers,; /// and does not consult the external source. (Those checks are the; /// responsibility of \ref HeaderSearch.); ///; /// \param File The header file that is likely to be included.; ///; /// \param AllowTextual If \c true and \p File is a textual header, return; /// its owning module. Otherwise, no KnownHeader will be returned if the; /// file is only known as a textual header.; ///; /// \returns The module KnownHeader, which provides the module that owns the; /// given header file. The KnownHeader is default constructed to indicate; /// that no module owns this header file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:105,Performance,load,load,105,"/// Retrieve all the modules that contain the given header file. Note that; /// this does not implicitly load module maps, except for builtin headers,; /// and does not consult the external source. (Those checks are the; /// responsibility of \ref HeaderSearch.); ///; /// Typically, \ref findModuleForHeader should be used instead, as it picks; /// the preferred module for the header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:183,Security,expose,exposed,183,"/// Resolve all lazy header directives for the specified file.; ///; /// This ensures that the HeaderFileInfo on HeaderSearch is up to date. This; /// is effectively internal, but is exposed so HeaderSearch can call it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:12,Availability,error,errors,12,"/// Reports errors if a module must not include a specific file.; ///; /// \param RequestingModule The module including a file.; ///; /// \param RequestingModuleIsModuleInterface \c true if the inclusion is in; /// the interface of RequestingModule, \c false if it's in the; /// implementation of RequestingModule. Value is ignored and; /// meaningless if RequestingModule is nullptr.; ///; /// \param FilenameLoc The location of the inclusion's filename.; ///; /// \param Filename The included filename as written.; ///; /// \param File The included file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:219,Integrability,interface,interface,219,"/// Reports errors if a module must not include a specific file.; ///; /// \param RequestingModule The module including a file.; ///; /// \param RequestingModuleIsModuleInterface \c true if the inclusion is in; /// the interface of RequestingModule, \c false if it's in the; /// implementation of RequestingModule. Value is ignored and; /// meaningless if RequestingModule is nullptr.; ///; /// \param FilenameLoc The location of the inclusion's filename.; ///; /// \param Filename The included filename as written.; ///; /// \param File The included file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:226,Performance,perform,perform,226,"/// Retrieve a module with the given name using lexical name lookup,; /// starting at the given context.; ///; /// \param Name The name of the module to look up.; ///; /// \param Context The module context, from which we will perform lexical; /// name lookup.; ///; /// \returns The named module, if known; otherwise, returns null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:139,Integrability,interface,interface,139,"/// Create a global module fragment for a C++ module unit.; ///; /// We model the global module fragment as a submodule of the module; /// interface unit. Unfortunately, we can't create the module interface; /// unit's Module until later, because we don't know what it will be called; /// usually. See C++20 [module.unit]/7.2 for the case we could know its; /// parent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:197,Integrability,interface,interface,197,"/// Create a global module fragment for a C++ module unit.; ///; /// We model the global module fragment as a submodule of the module; /// interface unit. Unfortunately, we can't create the module interface; /// unit's Module until later, because we don't know what it will be called; /// usually. See C++20 [module.unit]/7.2 for the case we could know its; /// parent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:53,Integrability,interface,interface,53,/// Create a global module fragment for a C++ module interface unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:41,Integrability,interface,interface,41,"/// Create a new module for a C++ module interface unit.; /// The module must not already exist, and will be configured for the current; /// compilation.; ///; /// Note that this also sets the current module to the newly-created module.; ///; /// \returns The newly-created module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:109,Modifiability,config,configured,109,"/// Create a new module for a C++ module interface unit.; /// The module must not already exist, and will be configured for the current; /// compilation.; ///; /// Note that this also sets the current module to the newly-created module.; ///; /// \returns The newly-created module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:71,Integrability,interface,interface,71,/// Create a new module for a C++ module implementation unit.; /// The interface module for this implementation (implicitly imported) must; /// exist and be loaded and present in the modules map.; ///; /// \returns The newly-created module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:157,Performance,load,loaded,157,/// Create a new module for a C++ module implementation unit.; /// The interface module for this implementation (implicitly imported) must; /// exist and be loaded and present in the modules map.; ///; /// \returns The newly-created module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:278,Modifiability,variab,variables,278,"/// Creates a new declaration scope for module names, allowing; /// previously defined modules to shadow definitions from the new scope.; ///; /// \note Module names from earlier scopes will shadow names from the new; /// scope, which is the opposite of how shadowing works for variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:159,Integrability,depend,depend,159,"/// Get the module map file that (along with the module name) uniquely; /// identifies this module.; ///; /// The particular module that \c Name refers to may depend on how the module; /// was found in header search. However, the combination of \c Name and; /// this module map will be globally unique for top-level modules. In the case; /// of inferred modules, returns the module map that allowed the inference; /// (e.g. contained 'module *'). Otherwise, returns; /// getContainingModuleMapFile().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:262,Availability,error,error,262,"/// Canonicalize \p Path in a manner suitable for a module map file. In; /// particular, this canonicalizes the parent directory separately from the; /// filename so that it does not affect header resolution relative to the; /// modulemap.; ///; /// \returns an error code if any filesystem operations failed. In this case; /// \p Path is not modified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:187,Availability,failure,failures,187,"/// Resolve all of the unresolved exports in the given module.; ///; /// \param Mod The module whose exports should be resolved.; ///; /// \param Complain Whether to emit diagnostics for failures.; ///; /// \returns true if any errors were encountered while resolving exports,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:228,Availability,error,errors,228,"/// Resolve all of the unresolved exports in the given module.; ///; /// \param Mod The module whose exports should be resolved.; ///; /// \param Complain Whether to emit diagnostics for failures.; ///; /// \returns true if any errors were encountered while resolving exports,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:181,Availability,failure,failures,181,"/// Resolve all of the unresolved uses in the given module.; ///; /// \param Mod The module whose uses should be resolved.; ///; /// \param Complain Whether to emit diagnostics for failures.; ///; /// \returns true if any errors were encountered while resolving uses,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:222,Availability,error,errors,222,"/// Resolve all of the unresolved uses in the given module.; ///; /// \param Mod The module whose uses should be resolved.; ///; /// \param Complain Whether to emit diagnostics for failures.; ///; /// \returns true if any errors were encountered while resolving uses,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:191,Availability,failure,failures,191,"/// Resolve all of the unresolved conflicts in the given module.; ///; /// \param Mod The module whose conflicts should be resolved.; ///; /// \param Complain Whether to emit diagnostics for failures.; ///; /// \returns true if any errors were encountered while resolving conflicts,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:232,Availability,error,errors,232,"/// Resolve all of the unresolved conflicts in the given module.; ///; /// \param Mod The module whose conflicts should be resolved.; ///; /// \param Complain Whether to emit diagnostics for failures.; ///; /// \returns true if any errors were encountered while resolving conflicts,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:778,Availability,error,error,778,"/// Parse the given module map file, and record any modules we; /// encounter.; ///; /// \param File The file to be parsed.; ///; /// \param IsSystem Whether this module map file is in a system header; /// directory, and therefore should be considered a system module.; ///; /// \param HomeDir The directory in which relative paths within this module; /// map file will be resolved.; ///; /// \param ID The FileID of the file to process, if we've already entered it.; ///; /// \param Offset [inout] On input the offset at which to start parsing. On; /// output, the offset at which the module map terminated.; ///; /// \param ExternModuleLoc The location of the ""extern module"" declaration; /// that caused us to load this module map file, if any.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:713,Performance,load,load,713,"/// Parse the given module map file, and record any modules we; /// encounter.; ///; /// \param File The file to be parsed.; ///; /// \param IsSystem Whether this module map file is in a system header; /// directory, and therefore should be considered a system module.; ///; /// \param HomeDir The directory in which relative paths within this module; /// map file will be resolved.; ///; /// \param ID The FileID of the file to process, if we've already entered it.; ///; /// \param Offset [inout] On input the offset at which to start parsing. On; /// output, the offset at which the module map terminated.; ///; /// \param ExternModuleLoc The location of the ""extern module"" declaration; /// that caused us to load this module map file, if any.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:4,Performance,Cache,Cache,4,/// Cache a module load. M might be nullptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:19,Performance,load,load,19,/// Cache a module load. M might be nullptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:13,Performance,cache,cached,13,/// Return a cached module load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:27,Performance,load,load,27,/// Return a cached module load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:427,Integrability,interface,interface,427,"//===--- MultipleIncludeOpt.h - Header Multiple-Include Optzn ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the MultipleIncludeOpt interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:121,Performance,optimiz,optimization,121,"/// Implements the simple state machine that the Lexer class uses to; /// detect files subject to the 'multiple-include' optimization.; ///; /// The public methods in this class are triggered by various; /// events that occur when a file is lexed, and after the entire file is lexed,; /// information about which macro (if any) controls the header is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:74,Safety,detect,detect,74,"/// Implements the simple state machine that the Lexer class uses to; /// detect files subject to the 'multiple-include' optimization.; ///; /// The public methods in this class are triggered by various; /// events that occur when a file is lexed, and after the entire file is lexed,; /// information about which macro (if any) controls the header is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:19,Usability,simpl,simple,19,"/// Implements the simple state machine that the Lexer class uses to; /// detect files subject to the 'multiple-include' optimization.; ///; /// The public methods in this class are triggered by various; /// events that occur when a file is lexed, and after the entire file is lexed,; /// information about which macro (if any) controls the header is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:337,Safety,detect,detected,337,"/// ReadAnyTokens - This is set to false when a file is first opened and true; /// any time a token is returned to the client or a (non-multiple-include); /// directive is parsed. When the final \#endif is parsed this is reset back; /// to false, that way any tokens before the first \#ifdef or after the last; /// \#endif can be easily detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:155,Safety,detect,detection,155,/// ImmediatelyAfterTopLevelIfndef - This is true when the only tokens; /// processed in the file so far is an #ifndef and an identifier. Used in; /// the detection of header guards in a file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:334,Safety,detect,detected,334,"/// ReadAnyTokens - This is set to false when a file is first opened and true; /// any time a token is returned to the client or a (non-multiple-include); /// directive is parsed. When the final #endif is parsed this is reset back; /// to false, that way any tokens before the first #ifdef or after the last; /// #endif can be easily detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:92,Performance,optimiz,optimization,92,/// Invalidate - Permanently mark this file as not being suitable for the; /// include-file optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:127,Safety,detect,detect,127,"// If we have a macro, that means the top of the file was ok. Set our state; // back to ""not having read any tokens"" so we can detect anything after the; // #endif.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:420,Integrability,interface,interface,420,"//===--- PPCallbacks.h - Callbacks for Preprocessor actions -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the PPCallbacks interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:9,Integrability,interface,interface,9,/// This interface provides a way to observe the actions of the; /// preprocessor as it does its thing.; ///; /// Clients can define their hooks here to implement preprocessor level tools.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:90,Performance,optimiz,optimization,90,"/// Callback invoked whenever a source file is skipped as the result; /// of header guard optimization.; ///; /// \param SkippedFile The file that is skipped instead of entering \#include; ///; /// \param FilenameTok The file name token in \#include ""FileName"" directive; /// or macro expanded file name token from \#include MACRO(PARAMS) directive.; /// Note that FilenameTok contains corresponding quotes/angles symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:220,Security,Hash,HashLoc,220,"/// Callback invoked whenever an inclusion directive of; /// any kind (\c \#include, \c \#import, etc.) has been processed, regardless; /// of whether the inclusion will actually result in an inclusion.; ///; /// \param HashLoc The location of the '#' that starts the inclusion; /// directive.; ///; /// \param IncludeTok The token that indicates the kind of inclusion; /// directive, e.g., 'include' or 'import'.; ///; /// \param FileName The name of the file being included, as written in the; /// source code.; ///; /// \param IsAngled Whether the file name was enclosed in angle brackets;; /// otherwise, it was enclosed in quotes.; ///; /// \param FilenameRange The character range of the quotes or angle brackets; /// for the written file name.; ///; /// \param File The actual file that may be included by this inclusion; /// directive.; ///; /// \param SearchPath Contains the search path which was used to find the file; /// in the file system. If the file was found via an absolute include path,; /// SearchPath will be empty. For framework includes, the SearchPath and; /// RelativePath will be split up. For example, if an include of ""Some/Some.h""; /// is found via the framework path; /// ""path/to/Frameworks/Some.framework/Headers/Some.h"", SearchPath will be; /// ""path/to/Frameworks/Some.framework/Headers"" and RelativePath will be; /// ""Some.h"".; ///; /// \param RelativePath The path relative to SearchPath, at which the include; /// file was found. This is equal to FileName except for framework includes.; ///; /// \param Imported The module, whenever an inclusion directive was; /// automatically turned into a module import or null otherwise.; ///; /// \param FileType The characteristic kind, indicates whether a file or; /// directory holds normal user code, system code, or system code which is; /// implicitly 'extern ""C""' in C++ mode.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:13,Integrability,message,message,13,/// \#pragma message has been invoked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:17,Availability,error,error,17,/// \#pragma GCC error has been invoked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:37,Integrability,message,message,37,/// Callback invoked when a \#pragma message directive is read.; /// \param Loc The location of the message directive.; /// \param Namespace The namespace of the message directive.; /// \param Kind The type of the message directive.; /// \param Str The text of the message directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:100,Integrability,message,message,100,/// Callback invoked when a \#pragma message directive is read.; /// \param Loc The location of the message directive.; /// \param Namespace The namespace of the message directive.; /// \param Kind The type of the message directive.; /// \param Str The text of the message directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:162,Integrability,message,message,162,/// Callback invoked when a \#pragma message directive is read.; /// \param Loc The location of the message directive.; /// \param Namespace The namespace of the message directive.; /// \param Kind The type of the message directive.; /// \param Str The text of the message directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:214,Integrability,message,message,214,/// Callback invoked when a \#pragma message directive is read.; /// \param Loc The location of the message directive.; /// \param Namespace The namespace of the message directive.; /// \param Kind The type of the message directive.; /// \param Str The text of the message directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:265,Integrability,message,message,265,/// Callback invoked when a \#pragma message directive is read.; /// \param Loc The location of the message directive.; /// \param Namespace The namespace of the message directive.; /// \param Kind The type of the message directive.; /// \param Str The text of the message directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:241,Deployability,release,released,241,"/// Hook called whenever a macro \#undef is seen.; /// \param MacroNameTok The active Token; /// \param MD A MacroDefinition for the named macro.; /// \param Undef New MacroDirective if the macro was defined, null otherwise.; ///; /// MD is released immediately following this callback.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:163,Testability,test,tested,163,/// Hook called whenever an \#if is seen.; /// \param Loc the source location of the directive.; /// \param ConditionRange The SourceRange of the expression being tested.; /// \param ConditionValue The evaluated value of the condition.; ///; // FIXME: better to pass in a list (or tree!) of Tokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:165,Testability,test,tested,165,/// Hook called whenever an \#elif is seen.; /// \param Loc the source location of the directive.; /// \param ConditionRange The SourceRange of the expression being tested.; /// \param ConditionValue The evaluated value of the condition.; /// \param IfLoc the source location of the \#if/\#ifdef/\#ifndef directive.; // FIXME: better to pass in a list (or tree!) of Tokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:155,Testability,test,tested,155,"/// Hook called whenever an \#ifdef is seen.; /// \param Loc the source location of the directive.; /// \param MacroNameTok Information on the token being tested.; /// \param MD The MacroDefinition if the name was a macro, null otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:165,Testability,test,tested,165,"/// Hook called whenever an \#elifdef branch is taken.; /// \param Loc the source location of the directive.; /// \param MacroNameTok Information on the token being tested.; /// \param MD The MacroDefinition if the name was a macro, null otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:171,Testability,test,tested,171,/// Hook called whenever an \#elifdef is skipped.; /// \param Loc the source location of the directive.; /// \param ConditionRange The SourceRange of the expression being tested.; /// \param IfLoc the source location of the \#if/\#ifdef/\#ifndef directive.; // FIXME: better to pass in a list (or tree!) of Tokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:156,Testability,test,tested,156,"/// Hook called whenever an \#ifndef is seen.; /// \param Loc the source location of the directive.; /// \param MacroNameTok Information on the token being tested.; /// \param MD The MacroDefiniton if the name was a macro, null otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:166,Testability,test,tested,166,"/// Hook called whenever an \#elifndef branch is taken.; /// \param Loc the source location of the directive.; /// \param MacroNameTok Information on the token being tested.; /// \param MD The MacroDefinition if the name was a macro, null otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:172,Testability,test,tested,172,/// Hook called whenever an \#elifndef is skipped.; /// \param Loc the source location of the directive.; /// \param ConditionRange The SourceRange of the expression being tested.; /// \param IfLoc the source location of the \#if/\#ifdef/\#ifndef directive.; // FIXME: better to pass in a list (or tree!) of Tokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:11,Integrability,wrap,wrapper,11,/// Simple wrapper class for chaining callbacks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:4,Usability,Simpl,Simple,4,/// Simple wrapper class for chaining callbacks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Pragma.h:435,Integrability,interface,interfaces,435,"//===- Pragma.h - Pragma registration and handling --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the PragmaHandler and PragmaTable interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Pragma.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Pragma.h:38,Integrability,interface,interface,38,"/// PragmaHandler - Instances of this interface defined to handle the various; /// pragmas that the language front-end uses. Each handler optionally has a; /// name (e.g. ""pack"") and the HandlePragma method is invoked when a pragma with; /// that identifier is found. If a handler does not match any of the declared; /// pragmas the handler with a null identifier is invoked, if it exists.; ///; /// Note that the PragmaNamespace class can be used to subdivide pragmas, e.g.; /// we treat ""\#pragma STDC"" and ""\#pragma GCC"" as namespaces that contain other; /// pragmas.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Pragma.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Pragma.h:258,Availability,failure,failure,258,"/// FindHandler - Check to see if there is already a handler for the; /// specified name. If not, return the handler for the null name if it; /// exists, otherwise return null. If IgnoreNull is true (the default) then; /// the null handler isn't returned on failure to match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Pragma.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:24,Energy Efficiency,Allocate,Allocates,24,// namespace clang; /// Allocates memory within a Clang preprocessing record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:17,Energy Efficiency,allocate,allocated,17,/// Frees memory allocated in a Clang preprocessing record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:34,Performance,load,load,34,/// Indicates a problem trying to load the preprocessed entity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:40,Performance,load,loading,40,/// Returns true if there was a problem loading the preprocessed; /// entity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:100,Availability,error,error,100,/// Read a preallocated preprocessed entity from the external source.; ///; /// \returns null if an error occurred that prevented the preprocessed; /// entity from being loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:170,Performance,load,loaded,170,/// Read a preallocated preprocessed entity from the external source.; ///; /// \returns null if an error occurred that prevented the preprocessed; /// entity from being loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:72,Performance,load,loaded,72,"/// The set of preprocessed entities in this record that have been; /// loaded from external sources.; ///; /// The entries in this vector are loaded lazily from the external source,; /// and are referenced by the iterator using negative indices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:143,Performance,load,loaded,143,"/// The set of preprocessed entities in this record that have been; /// loaded from external sources.; ///; /// The entries in this vector are loaded lazily from the external source,; /// and are referenced by the iterator using negative indices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:12,Performance,load,loaded,12,"/// Global (loaded or local) ID for a preprocessed entity.; /// Negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// Value -1 corresponds to element 0 in the loaded entities vector,; /// value -2 corresponds to element 1 in the loaded entities vector, etc.; /// Value 0 is an invalid value, the index to local entities is 1-based,; /// value 1 corresponds to element 0 in the local entities vector,; /// value 2 corresponds to element 1 in the local entities vector, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:128,Performance,load,loaded,128,"/// Global (loaded or local) ID for a preprocessed entity.; /// Negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// Value -1 corresponds to element 0 in the loaded entities vector,; /// value -2 corresponds to element 1 in the loaded entities vector, etc.; /// Value 0 is an invalid value, the index to local entities is 1-based,; /// value 1 corresponds to element 0 in the local entities vector,; /// value 2 corresponds to element 1 in the local entities vector, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:320,Performance,load,loaded,320,"/// Global (loaded or local) ID for a preprocessed entity.; /// Negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// Value -1 corresponds to element 0 in the loaded entities vector,; /// value -2 corresponds to element 1 in the loaded entities vector, etc.; /// Value 0 is an invalid value, the index to local entities is 1-based,; /// value 1 corresponds to element 0 in the local entities vector,; /// value 2 corresponds to element 1 in the local entities vector, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:390,Performance,load,loaded,390,"/// Global (loaded or local) ID for a preprocessed entity.; /// Negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// Value -1 corresponds to element 0 in the loaded entities vector,; /// value -2 corresponds to element 1 in the loaded entities vector, etc.; /// Value 0 is an invalid value, the index to local entities is 1-based,; /// value 1 corresponds to element 0 in the local entities vector,; /// value 2 corresponds to element 1 in the local entities vector, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:17,Performance,load,loaded,17,/// Retrieve the loaded preprocessed entity at the given index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:65,Performance,load,loaded,65,/// Determine the number of preprocessed entities that were; /// loaded (or can be loaded) from an external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:83,Performance,load,loaded,83,/// Determine the number of preprocessed entities that were; /// loaded (or can be loaded) from an external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate space for a new set of loaded preprocessed entities.; ///; /// \returns The index into the set of loaded preprocessed entities, which; /// corresponds to the first newly-allocated entity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:183,Energy Efficiency,allocate,allocated,183,"/// Allocate space for a new set of loaded preprocessed entities.; ///; /// \returns The index into the set of loaded preprocessed entities, which; /// corresponds to the first newly-allocated entity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:36,Performance,load,loaded,36,"/// Allocate space for a new set of loaded preprocessed entities.; ///; /// \returns The index into the set of loaded preprocessed entities, which; /// corresponds to the first newly-allocated entity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:111,Performance,load,loaded,111,"/// Allocate space for a new set of loaded preprocessed entities.; ///; /// \returns The index into the set of loaded preprocessed entities, which; /// corresponds to the first newly-allocated entity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate space for a new set of loaded preprocessed skipped; /// ranges.; ///; /// \returns The index into the set of loaded preprocessed ranges, which; /// corresponds to the first newly-allocated range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:192,Energy Efficiency,allocate,allocated,192,"/// Allocate space for a new set of loaded preprocessed skipped; /// ranges.; ///; /// \returns The index into the set of loaded preprocessed ranges, which; /// corresponds to the first newly-allocated range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:36,Performance,load,loaded,36,"/// Allocate space for a new set of loaded preprocessed skipped; /// ranges.; ///; /// \returns The index into the set of loaded preprocessed ranges, which; /// corresponds to the first newly-allocated range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:122,Performance,load,loaded,122,"/// Allocate space for a new set of loaded preprocessed skipped; /// ranges.; ///; /// \returns The index into the set of loaded preprocessed ranges, which; /// corresponds to the first newly-allocated range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:55,Performance,load,loaded,55,/// Ensures that all external skipped ranges have been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate memory in the preprocessing record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:725,Energy Efficiency,efficient,efficient,725,"/// Iteration over the preprocessed entities.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic; /// integer arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:785,Integrability,wrap,wrapping,785,"/// Iteration over the preprocessed entities.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic; /// integer arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:194,Performance,load,loaded,194,"/// Iteration over the preprocessed entities.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic; /// integer arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:514,Performance,load,loaded,514,"/// Iteration over the preprocessed entities.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic; /// integer arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:589,Performance,load,loaded,589,"/// Iteration over the preprocessed entities.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic; /// integer arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:664,Performance,load,loaded,664,"/// Iteration over the preprocessed entities.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic; /// integer arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:34,Performance,load,loaded,34,"/// Begin iterator for local, non-loaded, preprocessed entities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:32,Performance,load,loaded,32,"/// End iterator for local, non-loaded, preprocessed entities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:42,Performance,load,loaded,42,/// iterator range for the given range of loaded; /// preprocessed entities.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:138,Safety,avoid,avoid,138,/// Returns true if the preprocessed entity that \p PPEI iterator; /// points to is coming from the file \p FID.; ///; /// Can be used to avoid implicit deserializations of preallocated; /// preprocessed entities if we only care about entities of a specific file; /// and not from files \#included in the range given at; /// \see getPreprocessedEntitiesInRange.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:4,Performance,Cache,Cached,4,/// Cached result of the last \see getPreprocessedEntitiesInRange; /// query.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:427,Integrability,interface,interface,427,"//===- Preprocessor.h - C Language Family Preprocessor ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::Preprocessor interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:99,Usability,simpl,simple,99,/// Stores token information for comparing actual tokens with; /// predefined values. Only handles simple tokens and identifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:54,Energy Efficiency,efficient,efficiently,54,"/// Engages in a tight little dance with the lexer to efficiently; /// preprocess tokens.; ///; /// Lexers know only about tokens within a single source file, and don't; /// know anything about preprocessor-level issues like the \#include stack,; /// token expansion, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:59,Deployability,release,release,59,/// A BumpPtrAllocator object used to quickly allocate and release; /// objects internal to the Preprocessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:46,Energy Efficiency,allocate,allocate,46,/// A BumpPtrAllocator object used to quickly allocate and release; /// objects internal to the Preprocessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:28,Performance,load,loaded,28,/// Whether we have already loaded macros from the external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:26,Availability,down,down,26,/// True to avoid tearing down the lexer etc on EOF,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:12,Safety,avoid,avoid,12,/// True to avoid tearing down the lexer etc on EOF,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:24,Performance,perform,performing,24,"/// The file that we're performing code-completion for, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:587,Integrability,Interface,InterfaceCandidate,587,/// Track the status of the c++20 module decl.; ///; /// module-declaration:; /// 'export'[opt] 'module' module-name module-partition[opt]; /// attribute-specifier-seq[opt] ';'; ///; /// module-name:; /// module-name-qualifier[opt] identifier; ///; /// module-partition:; /// ':' module-name-qualifier[opt] identifier; ///; /// module-name-qualifier:; /// identifier '.'; /// module-name-qualifier identifier '.'; ///; /// Transition state:; ///; /// NotAModuleDecl --- export ---> FoundExport; /// NotAModuleDecl --- module ---> ImplementationCandidate; /// FoundExport --- module ---> InterfaceCandidate; /// ImplementationCandidate --- Identifier ---> ImplementationCandidate; /// ImplementationCandidate --- period ---> ImplementationCandidate; /// ImplementationCandidate --- colon ---> ImplementationCandidate; /// InterfaceCandidate --- Identifier ---> InterfaceCandidate; /// InterfaceCandidate --- period ---> InterfaceCandidate; /// InterfaceCandidate --- colon ---> InterfaceCandidate; /// ImplementationCandidate --- Semi ---> NamedModuleImplementation; /// NamedModuleInterface --- Semi ---> NamedModuleInterface; /// NamedModuleImplementation --- Anything ---> NamedModuleImplementation; /// NamedModuleInterface --- Anything ---> NamedModuleInterface; ///; /// FIXME: We haven't handle attribute-specifier-seq here. It may not be bad; /// soon since we don't support any module attributes yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:821,Integrability,Interface,InterfaceCandidate,821,/// Track the status of the c++20 module decl.; ///; /// module-declaration:; /// 'export'[opt] 'module' module-name module-partition[opt]; /// attribute-specifier-seq[opt] ';'; ///; /// module-name:; /// module-name-qualifier[opt] identifier; ///; /// module-partition:; /// ':' module-name-qualifier[opt] identifier; ///; /// module-name-qualifier:; /// identifier '.'; /// module-name-qualifier identifier '.'; ///; /// Transition state:; ///; /// NotAModuleDecl --- export ---> FoundExport; /// NotAModuleDecl --- module ---> ImplementationCandidate; /// FoundExport --- module ---> InterfaceCandidate; /// ImplementationCandidate --- Identifier ---> ImplementationCandidate; /// ImplementationCandidate --- period ---> ImplementationCandidate; /// ImplementationCandidate --- colon ---> ImplementationCandidate; /// InterfaceCandidate --- Identifier ---> InterfaceCandidate; /// InterfaceCandidate --- period ---> InterfaceCandidate; /// InterfaceCandidate --- colon ---> InterfaceCandidate; /// ImplementationCandidate --- Semi ---> NamedModuleImplementation; /// NamedModuleInterface --- Semi ---> NamedModuleInterface; /// NamedModuleImplementation --- Anything ---> NamedModuleImplementation; /// NamedModuleInterface --- Anything ---> NamedModuleInterface; ///; /// FIXME: We haven't handle attribute-specifier-seq here. It may not be bad; /// soon since we don't support any module attributes yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:860,Integrability,Interface,InterfaceCandidate,860,/// Track the status of the c++20 module decl.; ///; /// module-declaration:; /// 'export'[opt] 'module' module-name module-partition[opt]; /// attribute-specifier-seq[opt] ';'; ///; /// module-name:; /// module-name-qualifier[opt] identifier; ///; /// module-partition:; /// ':' module-name-qualifier[opt] identifier; ///; /// module-name-qualifier:; /// identifier '.'; /// module-name-qualifier identifier '.'; ///; /// Transition state:; ///; /// NotAModuleDecl --- export ---> FoundExport; /// NotAModuleDecl --- module ---> ImplementationCandidate; /// FoundExport --- module ---> InterfaceCandidate; /// ImplementationCandidate --- Identifier ---> ImplementationCandidate; /// ImplementationCandidate --- period ---> ImplementationCandidate; /// ImplementationCandidate --- colon ---> ImplementationCandidate; /// InterfaceCandidate --- Identifier ---> InterfaceCandidate; /// InterfaceCandidate --- period ---> InterfaceCandidate; /// InterfaceCandidate --- colon ---> InterfaceCandidate; /// ImplementationCandidate --- Semi ---> NamedModuleImplementation; /// NamedModuleInterface --- Semi ---> NamedModuleInterface; /// NamedModuleImplementation --- Anything ---> NamedModuleImplementation; /// NamedModuleInterface --- Anything ---> NamedModuleInterface; ///; /// FIXME: We haven't handle attribute-specifier-seq here. It may not be bad; /// soon since we don't support any module attributes yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:884,Integrability,Interface,InterfaceCandidate,884,/// Track the status of the c++20 module decl.; ///; /// module-declaration:; /// 'export'[opt] 'module' module-name module-partition[opt]; /// attribute-specifier-seq[opt] ';'; ///; /// module-name:; /// module-name-qualifier[opt] identifier; ///; /// module-partition:; /// ':' module-name-qualifier[opt] identifier; ///; /// module-name-qualifier:; /// identifier '.'; /// module-name-qualifier identifier '.'; ///; /// Transition state:; ///; /// NotAModuleDecl --- export ---> FoundExport; /// NotAModuleDecl --- module ---> ImplementationCandidate; /// FoundExport --- module ---> InterfaceCandidate; /// ImplementationCandidate --- Identifier ---> ImplementationCandidate; /// ImplementationCandidate --- period ---> ImplementationCandidate; /// ImplementationCandidate --- colon ---> ImplementationCandidate; /// InterfaceCandidate --- Identifier ---> InterfaceCandidate; /// InterfaceCandidate --- period ---> InterfaceCandidate; /// InterfaceCandidate --- colon ---> InterfaceCandidate; /// ImplementationCandidate --- Semi ---> NamedModuleImplementation; /// NamedModuleInterface --- Semi ---> NamedModuleInterface; /// NamedModuleImplementation --- Anything ---> NamedModuleImplementation; /// NamedModuleInterface --- Anything ---> NamedModuleInterface; ///; /// FIXME: We haven't handle attribute-specifier-seq here. It may not be bad; /// soon since we don't support any module attributes yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:919,Integrability,Interface,InterfaceCandidate,919,/// Track the status of the c++20 module decl.; ///; /// module-declaration:; /// 'export'[opt] 'module' module-name module-partition[opt]; /// attribute-specifier-seq[opt] ';'; ///; /// module-name:; /// module-name-qualifier[opt] identifier; ///; /// module-partition:; /// ':' module-name-qualifier[opt] identifier; ///; /// module-name-qualifier:; /// identifier '.'; /// module-name-qualifier identifier '.'; ///; /// Transition state:; ///; /// NotAModuleDecl --- export ---> FoundExport; /// NotAModuleDecl --- module ---> ImplementationCandidate; /// FoundExport --- module ---> InterfaceCandidate; /// ImplementationCandidate --- Identifier ---> ImplementationCandidate; /// ImplementationCandidate --- period ---> ImplementationCandidate; /// ImplementationCandidate --- colon ---> ImplementationCandidate; /// InterfaceCandidate --- Identifier ---> InterfaceCandidate; /// InterfaceCandidate --- period ---> InterfaceCandidate; /// InterfaceCandidate --- colon ---> InterfaceCandidate; /// ImplementationCandidate --- Semi ---> NamedModuleImplementation; /// NamedModuleInterface --- Semi ---> NamedModuleInterface; /// NamedModuleImplementation --- Anything ---> NamedModuleImplementation; /// NamedModuleInterface --- Anything ---> NamedModuleInterface; ///; /// FIXME: We haven't handle attribute-specifier-seq here. It may not be bad; /// soon since we don't support any module attributes yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:943,Integrability,Interface,InterfaceCandidate,943,/// Track the status of the c++20 module decl.; ///; /// module-declaration:; /// 'export'[opt] 'module' module-name module-partition[opt]; /// attribute-specifier-seq[opt] ';'; ///; /// module-name:; /// module-name-qualifier[opt] identifier; ///; /// module-partition:; /// ':' module-name-qualifier[opt] identifier; ///; /// module-name-qualifier:; /// identifier '.'; /// module-name-qualifier identifier '.'; ///; /// Transition state:; ///; /// NotAModuleDecl --- export ---> FoundExport; /// NotAModuleDecl --- module ---> ImplementationCandidate; /// FoundExport --- module ---> InterfaceCandidate; /// ImplementationCandidate --- Identifier ---> ImplementationCandidate; /// ImplementationCandidate --- period ---> ImplementationCandidate; /// ImplementationCandidate --- colon ---> ImplementationCandidate; /// InterfaceCandidate --- Identifier ---> InterfaceCandidate; /// InterfaceCandidate --- period ---> InterfaceCandidate; /// InterfaceCandidate --- colon ---> InterfaceCandidate; /// ImplementationCandidate --- Semi ---> NamedModuleImplementation; /// NamedModuleInterface --- Semi ---> NamedModuleInterface; /// NamedModuleImplementation --- Anything ---> NamedModuleImplementation; /// NamedModuleInterface --- Anything ---> NamedModuleInterface; ///; /// FIXME: We haven't handle attribute-specifier-seq here. It may not be bad; /// soon since we don't support any module attributes yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:977,Integrability,Interface,InterfaceCandidate,977,/// Track the status of the c++20 module decl.; ///; /// module-declaration:; /// 'export'[opt] 'module' module-name module-partition[opt]; /// attribute-specifier-seq[opt] ';'; ///; /// module-name:; /// module-name-qualifier[opt] identifier; ///; /// module-partition:; /// ':' module-name-qualifier[opt] identifier; ///; /// module-name-qualifier:; /// identifier '.'; /// module-name-qualifier identifier '.'; ///; /// Transition state:; ///; /// NotAModuleDecl --- export ---> FoundExport; /// NotAModuleDecl --- module ---> ImplementationCandidate; /// FoundExport --- module ---> InterfaceCandidate; /// ImplementationCandidate --- Identifier ---> ImplementationCandidate; /// ImplementationCandidate --- period ---> ImplementationCandidate; /// ImplementationCandidate --- colon ---> ImplementationCandidate; /// InterfaceCandidate --- Identifier ---> InterfaceCandidate; /// InterfaceCandidate --- period ---> InterfaceCandidate; /// InterfaceCandidate --- colon ---> InterfaceCandidate; /// ImplementationCandidate --- Semi ---> NamedModuleImplementation; /// NamedModuleInterface --- Semi ---> NamedModuleInterface; /// NamedModuleImplementation --- Anything ---> NamedModuleImplementation; /// NamedModuleInterface --- Anything ---> NamedModuleInterface; ///; /// FIXME: We haven't handle attribute-specifier-seq here. It may not be bad; /// soon since we don't support any module attributes yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:125,Performance,load,loaded,125,"/// Set only for preambles which end with an active; /// \#pragma clang assume_nonnull begin.; ///; /// When the preamble is loaded into the main file,; /// `PragmaAssumeNonNullLoc` will be set to this to; /// replay the unterminated assume_nonnull.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:235,Performance,load,loading,235,"/// The number of bytes that we will initially skip when entering the; /// main file, along with a flag that indicates whether skipping this number; /// of bytes will place the lexer at the start of a line.; ///; /// This is used when loading a precompiled preamble.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:22,Availability,error,error,22,/// Whether we hit an error due to reaching max allowed include depth. Allows; /// to avoid hitting the same error over and over again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:109,Availability,error,error,109,/// Whether we hit an error due to reaching max allowed include depth. Allows; /// to avoid hitting the same error over and over again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:86,Safety,avoid,avoid,86,/// Whether we hit an error due to reaching max allowed include depth. Allows; /// to avoid hitting the same error over and over again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:227,Safety,detect,detect,227,"/// The number of currently-active calls to Lex.; ///; /// Lex is reentrant, and asking for an (end-of-phase-4) token can often; /// require asking for multiple additional tokens. This counter makes it; /// possible for Lex to detect whether it's producing a token for the end; /// of phase 4 of translation or for some other situation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:43,Deployability,update,updated,43,/// The generation number at which we last updated ActiveModuleMacros.; /// \see Preprocessor::VisibleModules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:34,Integrability,message,message,34,/// This is a pair of an optional message and source location used for pragmas; /// that annotate macros like pragma clang restrict_expansion and pragma clang; /// deprecated. This pair stores the optional message and the location of the; /// annotation pragma for use producing diagnostics and notes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:206,Integrability,message,message,206,/// This is a pair of an optional message and source location used for pragmas; /// that annotate macros like pragma clang restrict_expansion and pragma clang; /// deprecated. This pair stores the optional message and the location of the; /// annotation pragma for use producing diagnostics and notes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:35,Performance,perform,performance,35,// Various statistics we track for performance analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:40,Energy Efficiency,reduce,reduce,40,/// \{; /// Cache of macro expanders to reduce malloc traffic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:12,Performance,Cache,Cache,12,/// \{; /// Cache of macro expanders to reduce malloc traffic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:163,Performance,cache,cache,163,/// \}; /// Keeps macro expanded tokens for TokenLexers.; //; /// Works like a stack; a TokenLexer adds the macro expanded tokens that is; /// going to lex in the cache and when it finishes the tokens are removed; /// from the end of the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:238,Performance,cache,cache,238,/// \}; /// Keeps macro expanded tokens for TokenLexers.; //; /// Works like a stack; a TokenLexer adds the macro expanded tokens that is; /// going to lex in the cache and when it finishes the tokens are removed; /// from the end of the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Performance,Cache,Cached,4,/// Cached tokens state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Performance,Cache,Cached,4,"/// Cached tokens are stored here when we do backtracking or; /// lookahead. They are ""lexed"" by the CachingLex() method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:24,Performance,cache,cached,24,"/// The position of the cached token that CachingLex() should; /// ""lex"" next.; ///; /// If it points beyond the CachedTokens vector, it means that a normal; /// Lex() should be invoked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:113,Performance,Cache,CachedTokens,113,"/// The position of the cached token that CachingLex() should; /// ""lex"" next.; ///; /// If it points beyond the CachedTokens vector, it means that a normal; /// Lex() should be invoked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:151,Performance,Cache,CachedLexPos,151,"/// Stack of backtrack positions, allowing nested backtracks.; ///; /// The EnableBacktrackAtThisPos() method pushes a position to; /// indicate where CachedLexPos should be set when the BackTrack() method is; /// invoked (at which point the last position is popped).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:186,Safety,avoid,avoid,186,/// Initialize the preprocessor to parse a model file; ///; /// To parse model files the preprocessor of the original source is reused to; /// preserver the identifier table. However to avoid some duplicate; /// information in the preprocessor some cleanup is needed before it is used; /// to parse model files. This method does that cleanup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:24,Performance,load,loader,24,/// Retrieve the module loader associated with this preprocessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:12,Security,Access,Accessors,12,/// \{; /// Accessors for preprocessor callbacks.; ///; /// Note that this class takes ownership of any PPCallbacks object given to; /// it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:34,Performance,load,loaded,34,/// Set a MacroDirective that was loaded from a PCH file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:91,Integrability,inject,injected,91,/// Set the predefines for this Preprocessor.; ///; /// These predefines are automatically injected when parsing the main file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:91,Security,inject,injected,91,/// Set the predefines for this Preprocessor.; ///; /// These predefines are automatically injected when parsing the main file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:178,Availability,error,error,178,"/// Remove the specific pragma handler from this preprocessor.; ///; /// If \p Namespace is non-null, then it should be the namespace that; /// \p Handler was added to. It is an error to remove a handler that; /// has not been registered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Deployability,Install,Install,4,/// Install empty handlers for all pragmas (making them ignored).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:61,Availability,error,error,61,/// Remove the specified comment handler.; ///; /// It is an error to remove a handler that has not been registered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Usability,Clear,Clear,4,/// Clear out the code completion handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:44,Safety,detect,detecting,44,/// Set the code completion token range for detecting replacement range later; /// on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:196,Availability,error,error,196,"/// Add a source file to the top of the include stack and; /// start lexing tokens from it instead of the current buffer.; ///; /// Emits a diagnostic, doesn't enter the file, and returns true on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:571,Energy Efficiency,allocate,allocated,571,"/// Add a ""macro"" context to the top of the include stack,; /// which will cause the lexer to start returning the specified tokens.; ///; /// If \p DisableMacroExpansion is true, tokens lexed from the token stream; /// will not be subject to further macro expansion. Otherwise, these tokens; /// will be re-macro-expanded when/if expansion is enabled.; ///; /// If \p OwnsTokens is false, this method assumes that the specified stream; /// of tokens has a permanent owner somewhere, so they do not need to be; /// copied. If it is true, it assumes the array of tokens is allocated with; /// \c new[] and the Preprocessor will delete[] it.; ///; /// If \p IsReinject the resulting tokens will have Token::IsReinjected flag; /// set, see the flag documentation for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:172,Availability,error,error,172,"/// Lex a string literal, which may be the concatenation of multiple; /// string literals and may even come from macro expansion.; /// \returns true on success, false if a error diagnostic has been generated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:13,Usability,simpl,simple,13,/// Parses a simple integer literal to get its numeric value. Floating; /// point literals and user defined literals are rejected. Used primarily to; /// handle pragmas that accept integer arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:48,Performance,cache,cached,48,"/// When backtracking is enabled and tokens are cached,; /// this allows to revert a specific number of tokens.; ///; /// Note that the number of tokens being reverted should be up to the last; /// backtrack position, not more.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:130,Performance,cache,cached,130,"/// We notify the Preprocessor that if it is caching tokens (because; /// backtrack is enabled) it should replace the most recent cached tokens; /// with the given annotation token. This function has no effect if; /// backtracking is not enabled.; ///; /// Note that the use of this function is just for optimization, so that the; /// cached tokens doesn't get re-parsed and re-resolved after a backtrack is; /// invoked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:304,Performance,optimiz,optimization,304,"/// We notify the Preprocessor that if it is caching tokens (because; /// backtrack is enabled) it should replace the most recent cached tokens; /// with the given annotation token. This function has no effect if; /// backtracking is not enabled.; ///; /// Note that the use of this function is just for optimization, so that the; /// cached tokens doesn't get re-parsed and re-resolved after a backtrack is; /// invoked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:335,Performance,cache,cached,335,"/// We notify the Preprocessor that if it is caching tokens (because; /// backtrack is enabled) it should replace the most recent cached tokens; /// with the given annotation token. This function has no effect if; /// backtracking is not enabled.; ///; /// Note that the use of this function is just for optimization, so that the; /// cached tokens doesn't get re-parsed and re-resolved after a backtrack is; /// invoked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:33,Performance,cache,cached,33,"/// Get the location of the last cached token, suitable for setting the end; /// location of an annotation token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:46,Performance,Cache,CachedLexPos,46,/// Whether \p Tok is the most recent token (`CachedLexPos - 1`) in; /// CachedTokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:73,Performance,Cache,CachedTokens,73,/// Whether \p Tok is the most recent token (`CachedLexPos - 1`) in; /// CachedTokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:205,Deployability,update,updated,205,/// Replace token in `CachedLexPos - 1` in CachedTokens by the tokens; /// in \p NewToks.; ///; /// Useful when a token needs to be split in smaller ones and CachedTokens; /// most recent token must to be updated to reflect that.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:22,Performance,Cache,CachedLexPos,22,/// Replace token in `CachedLexPos - 1` in CachedTokens by the tokens; /// in \p NewToks.; ///; /// Useful when a token needs to be split in smaller ones and CachedTokens; /// most recent token must to be updated to reflect that.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:43,Performance,Cache,CachedTokens,43,/// Replace token in `CachedLexPos - 1` in CachedTokens by the tokens; /// in \p NewToks.; ///; /// Useful when a token needs to be split in smaller ones and CachedTokens; /// most recent token must to be updated to reflect that.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:158,Performance,Cache,CachedTokens,158,/// Replace token in `CachedLexPos - 1` in CachedTokens by the tokens; /// in \p NewToks.; ///; /// Useful when a token needs to be split in smaller ones and CachedTokens; /// most recent token must to be updated to reflect that.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:97,Integrability,rout,routine,97,"/// Replace the last token with an annotation token.; ///; /// Like AnnotateCachedTokens(), this routine replaces an; /// already-parsed (and resolved) token with an annotation; /// token. However, this routine only replaces the last token with; /// the annotation token; it does not affect any other cached; /// tokens. This function has no effect if backtracking is not; /// enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:203,Integrability,rout,routine,203,"/// Replace the last token with an annotation token.; ///; /// Like AnnotateCachedTokens(), this routine replaces an; /// already-parsed (and resolved) token with an annotation; /// token. However, this routine only replaces the last token with; /// the annotation token; it does not affect any other cached; /// tokens. This function has no effect if backtracking is not; /// enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:301,Performance,cache,cached,301,"/// Replace the last token with an annotation token.; ///; /// Like AnnotateCachedTokens(), this routine replaces an; /// already-parsed (and resolved) token with an annotation; /// token. However, this routine only replaces the last token with; /// the annotation token; it does not affect any other cached; /// tokens. This function has no effect if backtracking is not; /// enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Deployability,Update,Update,4,"/// Update the current token to represent the provided; /// identifier, in order to cache an action performed by typo correction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:84,Performance,cache,cache,84,"/// Update the current token to represent the provided; /// identifier, in order to cache an action performed by typo correction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:100,Performance,perform,performed,100,"/// Update the current token to represent the provided; /// identifier, in order to cache an action performed by typo correction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:528,Availability,error,error,528,"/// Specify the point at which code-completion will be performed.; ///; /// \param File the file in which code completion should occur. If; /// this file is included multiple times, code-completion will; /// perform completion the first time it is included. If NULL, this; /// function clears out the code-completion point.; ///; /// \param Line the line at which code completion should occur; /// (1-based).; ///; /// \param Column the column at which code completion should occur; /// (1-based).; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:55,Performance,perform,performed,55,"/// Specify the point at which code-completion will be performed.; ///; /// \param File the file in which code completion should occur. If; /// this file is included multiple times, code-completion will; /// perform completion the first time it is included. If NULL, this; /// function clears out the code-completion point.; ///; /// \param Line the line at which code completion should occur; /// (1-based).; ///; /// \param Column the column at which code completion should occur; /// (1-based).; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:208,Performance,perform,perform,208,"/// Specify the point at which code-completion will be performed.; ///; /// \param File the file in which code completion should occur. If; /// this file is included multiple times, code-completion will; /// perform completion the first time it is included. If NULL, this; /// function clears out the code-completion point.; ///; /// \param Line the line at which code completion should occur; /// (1-based).; ///; /// \param Column the column at which code completion should occur; /// (1-based).; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:286,Usability,clear,clears,286,"/// Specify the point at which code-completion will be performed.; ///; /// \param File the file in which code completion should occur. If; /// this file is included multiple times, code-completion will; /// perform completion the first time it is included. If NULL, this; /// function clears out the code-completion point.; ///; /// \param Line the line at which code completion should occur; /// (1-based).; ///; /// \param Column the column at which code completion should occur; /// (1-based).; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:24,Performance,perform,performing,24,/// Determine if we are performing code completion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:110,Availability,down,down,110,"/// Return the 'spelling' of the token at the given; /// location; does not go up to the spelling location or down to the; /// expansion location.; ///; /// \param buffer A buffer which will be used only if the token requires; /// ""cleaning"", e.g. if it contains trigraphs or escaped newlines; /// \param invalid If non-null, will be set \c true if an error occurs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:352,Availability,error,error,352,"/// Return the 'spelling' of the token at the given; /// location; does not go up to the spelling location or down to the; /// expansion location.; ///; /// \param buffer A buffer which will be used only if the token requires; /// ""cleaning"", e.g. if it contains trigraphs or escaped newlines; /// \param invalid If non-null, will be set \c true if an error occurs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:381,Availability,error,error,381,"/// Return the 'spelling' of the Tok token.; ///; /// The spelling of a token is the characters used to represent the token in; /// the source file after trigraph expansion and escaped-newline folding. In; /// particular, this wants to get the true, uncanonicalized, spelling of; /// things like digraphs, UCNs, etc.; ///; /// \param Invalid If non-null, will be set \c true if an error occurs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:131,Energy Efficiency,allocate,allocate,131,"/// Get the spelling of a token into a preallocated buffer, instead; /// of as an std::string.; ///; /// The caller is required to allocate enough space for the token, which is; /// guaranteed to be at least Tok.getLength() bytes long. The length of the; /// actual result is returned.; ///; /// Note that this method may do two possible things: it may either fill in; /// the buffer specified with characters, or it may *change the input pointer*; /// to point to a constant buffer with the data already in it (avoiding a; /// copy). The caller is not allowed to modify the returned buffer pointer; /// if an internal buffer is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:512,Safety,avoid,avoiding,512,"/// Get the spelling of a token into a preallocated buffer, instead; /// of as an std::string.; ///; /// The caller is required to allocate enough space for the token, which is; /// guaranteed to be at least Tok.getLength() bytes long. The length of the; /// actual result is returned.; ///; /// Note that this method may do two possible things: it may either fill in; /// the buffer specified with characters, or it may *change the input pointer*; /// to point to a constant buffer with the data already in it (avoiding a; /// copy). The caller is not allowed to modify the returned buffer pointer; /// if an internal buffer is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:154,Safety,avoid,avoided,154,/// Get the spelling of a token into a SmallVector.; ///; /// Note that the returned StringRef may not point to the; /// supplied buffer if a copy can be avoided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:81,Availability,failure,failure,81,"/// Relex the token at the specified location.; /// \returns true if there was a failure, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:71,Integrability,rout,routine,71,"/// Retrieve the name of the immediate macro expansion.; ///; /// This routine starts from a source location, and finds the name of the; /// macro responsible for its immediate expansion. It looks through any; /// intervening macro argument expansions to compute this. It returns a; /// StringRef that refers to the SourceManager-owned buffer of the source; /// where that macro name is spelled. Thus, the result shouldn't out-live; /// the SourceManager.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:109,Integrability,rout,routine,109,"/// Computes the source location just past the end of the; /// token at this source location.; ///; /// This routine can be used to produce a source location that; /// points just past the end of the token referenced by \p Loc, and; /// is generally used when a diagnostic needs to point just after a; /// token where it expected something different that it received. If; /// the returned source location would not be meaningful (e.g., if; /// it points into a macro), this routine returns an invalid; /// source location.; ///; /// \param Offset an offset from the end of the token, where the source; /// location should refer to. The default offset (0) produces a source; /// location pointing just past the end of the token; an offset of 1 produces; /// a source location pointing to the last character in the token, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:474,Integrability,rout,routine,474,"/// Computes the source location just past the end of the; /// token at this source location.; ///; /// This routine can be used to produce a source location that; /// points just past the end of the token referenced by \p Loc, and; /// is generally used when a diagnostic needs to point just after a; /// token where it expected something different that it received. If; /// the returned source location would not be meaningful (e.g., if; /// it points into a macro), this routine returns an invalid; /// source location.; ///; /// \param Offset an offset from the end of the token, where the source; /// location should refer to. The default offset (0) produces a source; /// location pointing just past the end of the token; an offset of 1 produces; /// a source location pointing to the last character in the token, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:73,Performance,perform,performed,73,"/// Increment the counters for the number of token paste operations; /// performed.; ///; /// If fast was specified, this is a 'fast paste' case we handled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:289,Deployability,install,install,289,"//===--------------------------------------------------------------------===//; // Preprocessor callback methods. These are invoked by a lexer as various; // directives and events are found.; /// Given a tok::raw_identifier token, look up the; /// identifier information for the token and install it into the token,; /// updating the token kind accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:86,Security,access,accessed,86,"/// Specifies the reason for poisoning an identifier.; ///; /// If that identifier is accessed while poisoned, then this reason will be; /// used instead of the default ""poisoned"" diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:36,Integrability,interface,interface,36,/// If we are proprocessing a named interface unit.; /// Note that a module implementation partition is not considered as an; /// named interface unit here although it is importable; /// to ease the parsing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:136,Integrability,interface,interface,136,/// If we are proprocessing a named interface unit.; /// Note that a module implementation partition is not considered as an; /// named interface unit here although it is importable; /// to ease the parsing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a new MacroInfo object with the provided SourceLocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:101,Availability,failure,failure,101,"/// Given a ""foo"" or \<foo> reference, look up the indicated file.; ///; /// Returns std::nullopt on failure. \p isAngled indicates whether the file; /// reference is for system \#include's or not (i.e. using <> instead of """").",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Deployability,Update,Update,4,/// Update the set of active module macros and ambiguity flag for a module; /// macro name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:12,Security,validat,validate,12,"/// Lex and validate a macro name, which occurs after a; /// \#define or \#undef.; ///; /// \param MacroNameTok Token that represents the name defined or undefined.; /// \param IsDefineUndef Kind if preprocessor directive.; /// \param ShadowFlag Points to flag that is set if macro name shadows; /// a keyword.; ///; /// This emits a diagnostic, sets the token kind to eod,; /// and discards the rest of the macro line if the macro name is invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:164,Performance,perform,performs,164,"/// ReadOptionalMacroParameterListAndBody - This consumes all (i.e. the; /// entire line) of the macro's tokens and adds them to MacroInfo, and while; /// doing so performs certain validity checks including (but not limited to):; /// - # (stringization) is followed by a macro parameter; /// \param MacroNameTok - Token that represents the macro name; /// \param ImmediatelyAfterHeaderGuard - Macro follows an #ifdef header guard; ///; /// Either returns a pointer to a MacroInfo object OR emits a diagnostic and; /// returns a nullptr if an invalid sequence of tokens is encountered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:241,Availability,error,error,241,"/// The ( starting an argument list of a macro definition has just been read.; /// Lex the rest of the parameters and the closing ), updating \p MI with; /// what we learn and saving in \p LastTok the last token read.; /// Return true if an error occurs parsing the arg list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:166,Usability,learn,learn,166,"/// The ( starting an argument list of a macro definition has just been read.; /// Lex the rest of the parameters and the closing ), updating \p MI with; /// what we learn and saving in \p LastTok the last token read.; /// Return true if an error occurs parsing the arg list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Deployability,Install,Install,4,/// Install the standard preprocessor pragmas:; /// \#pragma GCC poison/system_header/dependency and \#pragma once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:86,Integrability,depend,dependency,86,/// Install the standard preprocessor pragmas:; /// \#pragma GCC poison/system_header/dependency and \#pragma once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Performance,Cache,Cache,4,/// Cache macro expanded tokens for TokenLexers.; //; /// Works like a stack; a TokenLexer adds the macro expanded tokens that is; /// going to lex in the cache and when it finishes the tokens are removed; /// from the end of the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:155,Performance,cache,cache,155,/// Cache macro expanded tokens for TokenLexers.; //; /// Works like a stack; a TokenLexer adds the macro expanded tokens that is; /// going to lex in the cache and when it finishes the tokens are removed; /// from the end of the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:230,Performance,cache,cache,230,/// Cache macro expanded tokens for TokenLexers.; //; /// Works like a stack; a TokenLexer adds the macro expanded tokens that is; /// going to lex in the cache and when it finishes the tokens are removed; /// from the end of the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:144,Availability,error,error,144,"/// After reading ""MACRO("", this method is invoked to read all of the formal; /// arguments specified for the macro invocation. Returns null on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:35,Availability,avail,available,35,"/// Check that the given module is available, producing a diagnostic if not.; /// \return \c true if the check failed (because the module is not available).; /// \c false if the module appears to be usable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:145,Availability,avail,available,145,"/// Check that the given module is available, producing a diagnostic if not.; /// \return \c true if the check failed (because the module is not available).; /// \c false if the module appears to be usable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:199,Usability,usab,usable,199,"/// Check that the given module is available, producing a diagnostic if not.; /// \return \c true if the check failed (because the module is not available).; /// \c false if the module appears to be usable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:20,Testability,test,testing,20,"// Module inclusion testing.; /// Find the module that owns the source or header file that; /// \p Loc points to. If the location is in a file that was included; /// into a module, or is outside any module, returns nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:432,Availability,error,error,432,"/// We want to produce a diagnostic at location IncLoc concerning an; /// unreachable effect at location MLoc (eg, where a desired entity was; /// declared or defined). Determine whether the right way to make MLoc; /// reachable is by #include, and if so, what header should be included.; ///; /// This is not necessarily fast, and might load unexpected module maps, so; /// should only be called by code that intends to produce an error.; ///; /// \param IncLoc The location at which the missing effect was detected.; /// \param MLoc A location within an unimported module at which the desired; /// effect occurred.; /// \return A file that can be #included to provide the desired effect. Null; /// if no such file could be determined or if a #include is not; /// appropriate (eg, if a module should be imported instead).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:338,Performance,load,load,338,"/// We want to produce a diagnostic at location IncLoc concerning an; /// unreachable effect at location MLoc (eg, where a desired entity was; /// declared or defined). Determine whether the right way to make MLoc; /// reachable is by #include, and if so, what header should be included.; ///; /// This is not necessarily fast, and might load unexpected module maps, so; /// should only be called by code that intends to produce an error.; ///; /// \param IncLoc The location at which the missing effect was detected.; /// \param MLoc A location within an unimported module at which the desired; /// effect occurred.; /// \return A file that can be #included to provide the desired effect. Null; /// if no such file could be determined or if a #include is not; /// appropriate (eg, if a module should be imported instead).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:508,Safety,detect,detected,508,"/// We want to produce a diagnostic at location IncLoc concerning an; /// unreachable effect at location MLoc (eg, where a desired entity was; /// declared or defined). Determine whether the right way to make MLoc; /// reachable is by #include, and if so, what header should be included.; ///; /// This is not necessarily fast, and might load unexpected module maps, so; /// should only be called by code that intends to produce an error.; ///; /// \param IncLoc The location at which the missing effect was detected.; /// \param MLoc A location within an unimported module at which the desired; /// effect occurred.; /// \return A file that can be #included to provide the desired effect. Null; /// if no such file could be determined or if a #include is not; /// appropriate (eg, if a module should be imported instead).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:21,Deployability,update,update,21,"/// A macro is used, update information about macros that need unused; /// warnings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:41,Modifiability,plugin,plugins,41,/// Registry of pragma handlers added by plugins,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h:425,Integrability,interface,interface,425,"//===- PreprocessorLexer.h - C Language Family Lexer ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the PreprocessorLexer interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h:513,Integrability,message,messages,513,"/// True if in raw mode.; ///; /// Raw mode disables interpretation of tokens and is a far faster mode to; /// lex in than non-raw-mode. This flag:; /// 1. If EOF of the current lexer is found, the include stack isn't popped.; /// 2. Identifier information is not looked up for identifier tokens. As an; /// effect of this, implicit macro expansion is naturally disabled.; /// 3. ""#"" tokens at the start of a line are treated as normal tokens, not; /// implicitly transformed by the lexer.; /// 4. All diagnostic messages are disabled.; /// 5. No callbacks are made into the preprocessor.; ///; /// Note that in raw mode that the PP pointer may be null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h:46,Integrability,wrap,wrapping,46,/// A state machine that detects the \#ifndef-wrapping a file; /// idiom for the multiple-include optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h:98,Performance,optimiz,optimization,98,/// A state machine that detects the \#ifndef-wrapping a file; /// idiom for the multiple-include optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h:25,Safety,detect,detects,25,/// A state machine that detects the \#ifndef-wrapping a file; /// idiom for the multiple-include optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:45,Performance,perform,performed,45,/// Whether to disable the normal validation performed on precompiled; /// headers and module files when they are loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:114,Performance,load,loaded,114,/// Whether to disable the normal validation performed on precompiled; /// headers and module files when they are loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:34,Security,validat,validation,34,/// Whether to disable the normal validation performed on precompiled; /// headers and module files when they are loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:4,Performance,Perform,Perform,4,"/// Perform validation, don't disable it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:12,Security,validat,validation,12,"/// Perform validation, don't disable it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:67,Integrability,depend,depends,67,/// Disable validation for a precompiled header and the modules it depends on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:12,Security,validat,validation,12,/// Disable validation for a precompiled header and the modules it depends on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:12,Security,validat,validation,12,/// Disable validation for module files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:12,Security,validat,validation,12,/// Disable validation for all kinds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:4,Performance,Perform,Perform,4,/// Perform extra checks when loading PCM files for mutable file systems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:30,Performance,load,loading,30,/// Perform extra checks when loading PCM files for mutable file systems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:53,Performance,perform,performed,53,/// Whether to disable most of the normal validation performed on; /// precompiled headers and module files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:42,Security,validat,validation,42,/// Whether to disable most of the normal validation performed on; /// precompiled headers and module files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:35,Availability,error,errors,35,"/// When true, a PCH with compiler errors will not be rejected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:34,Performance,cache,cache,34,"/// When true, a PCH with modules cache path different to the current; /// compilation will not be rejected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:58,Testability,test,testing,58,"/// Dump declarations that are deserialized from PCH, for testing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:97,Availability,error,error,97,"/// This is a set of names for decls that we do not want to be; /// deserialized, and we emit an error if they are; for testing purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:120,Testability,test,testing,120,"/// This is a set of names for decls that we do not want to be; /// deserialized, and we emit an error if they are; for testing purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:118,Performance,perform,performance,118,/// Whether to write comment locations into the PCH when building it.; /// Reading the comments from the PCH can be a performance hit even if the; /// clients don't use them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:443,Availability,error,error,443,/// Function for getting the dependency preprocessor directives of a file.; ///; /// These are directives derived from a special form of lexing where the; /// source input is scanned for the preprocessor directives that might have an; /// effect on the dependencies for a compilation unit.; ///; /// Enables a client to cache the directives for a file and provide them; /// across multiple compiler invocations.; /// FIXME: Allow returning an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:29,Integrability,depend,dependency,29,/// Function for getting the dependency preprocessor directives of a file.; ///; /// These are directives derived from a special form of lexing where the; /// source input is scanned for the preprocessor directives that might have an; /// effect on the dependencies for a compilation unit.; ///; /// Enables a client to cache the directives for a file and provide them; /// across multiple compiler invocations.; /// FIXME: Allow returning an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:253,Integrability,depend,dependencies,253,/// Function for getting the dependency preprocessor directives of a file.; ///; /// These are directives derived from a special form of lexing where the; /// source input is scanned for the preprocessor directives that might have an; /// effect on the dependencies for a compilation unit.; ///; /// Enables a client to cache the directives for a file and provide them; /// across multiple compiler invocations.; /// FIXME: Allow returning an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:320,Performance,cache,cache,320,/// Function for getting the dependency preprocessor directives of a file.; ///; /// These are directives derived from a special form of lexing where the; /// source input is scanned for the preprocessor directives that might have an; /// effect on the dependencies for a compilation unit.; ///; /// Enables a client to cache the directives for a file and provide them; /// across multiple compiler invocations.; /// FIXME: Allow returning an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:68,Testability,test,testing,68,/// Prevents intended crashes when using #pragma clang __debug. For testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h:419,Integrability,interface,interface,419,"//===--- ScratchBuffer.h - Scratch space for forming tokens -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ScratchBuffer interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h:48,Integrability,interface,interface,48,"/// ScratchBuffer - This class exposes a simple interface for the dynamic; /// construction of tokens. This is used for builtin macros (e.g. __LINE__) as; /// well as token pasting, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h:31,Security,expose,exposes,31,"/// ScratchBuffer - This class exposes a simple interface for the dynamic; /// construction of tokens. This is used for builtin macros (e.g. __LINE__) as; /// well as token pasting, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h:41,Usability,simpl,simple,41,"/// ScratchBuffer - This class exposes a simple interface for the dynamic; /// construction of tokens. This is used for builtin macros (e.g. __LINE__) as; /// well as token pasting, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h:25,Integrability,interface,interface,25,"//===--- Token.h - Token interface ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Token interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Token.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h:411,Integrability,interface,interface,411,"//===--- Token.h - Token interface ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Token interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Token.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h:110,Energy Efficiency,efficient,efficient,110,"/// Token - This structure provides full information about a lexed token.; /// It is not intended to be space efficient, it is intended to return as much; /// information as possible about each returned token. This is expected to be; /// compressed into a smaller form if memory footprint is important.; ///; /// The parser can create a special ""annotation token"" representing a stream of; /// tokens that were parsed and semantically resolved, e.g.: ""foo::MyClass<int>""; /// can be represented by a single typename annotation token that carries; /// information about the SourceRange of the tokens and the type object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Token.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h:155,Integrability,rout,routine,155,"// Conceptually these next two fields could be in a union. However, this; // causes gcc 4.2 to pessimize LexTokenInternal, a very performance critical; // routine. Keeping as separate members with casts until a more beautiful fix; // presents itself.; /// UintData - This holds either the length of the token text, when; /// a normal token, or the end of the SourceRange when an annotation; /// token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Token.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h:130,Performance,perform,performance,130,"// Conceptually these next two fields could be in a union. However, this; // causes gcc 4.2 to pessimize LexTokenInternal, a very performance critical; // routine. Keeping as separate members with casts until a more beautiful fix; // presents itself.; /// UintData - This holds either the length of the token text, when; /// a normal token, or the end of the SourceRange when an annotation; /// token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Token.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h:69,Integrability,depend,depends,69,"/// PtrData - This is a union of four different pointer types, which depends; /// on what type of token this is:; /// Identifiers, keywords, etc:; /// This is an IdentifierInfo*, which contains the uniqued identifier; /// spelling.; /// Literals: isLiteral() returns true.; /// This is a pointer to the start of the token in a text buffer, which; /// may be dirty (have trigraphs / escaped newlines).; /// Annotations (resolved type names, C++ scopes, etc): isAnnotation().; /// This is a pointer to sema-specific data for the annotation token.; /// Eof:; // This is a pointer to a Decl.; /// Other:; /// This is null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Token.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h:23,Usability,clear,cleared,23,/// Reset all flags to cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/Token.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:52,Safety,Avoid,Avoidance,52,"//===--- TokenConcatenation.h - Token Concatenation Avoidance ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TokenConcatenation class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:72,Safety,safe,safe,72,"/// TokenConcatenation class, which answers the question of; /// ""Is it safe to emit two tokens without a whitespace between them, or; /// would that cause implicit concatenation of the tokens?""; ///; /// For example, it emitting two identifiers ""foo"" and ""bar"" next to each; /// other would cause the lexer to produce one ""foobar"" token. Emitting ""1""; /// and "")"" next to each other is safe.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:387,Safety,safe,safe,387,"/// TokenConcatenation class, which answers the question of; /// ""Is it safe to emit two tokens without a whitespace between them, or; /// would that cause implicit concatenation of the tokens?""; ///; /// For example, it emitting two identifiers ""foo"" and ""bar"" next to each; /// other would cause the lexer to produce one ""foobar"" token. Emitting ""1""; /// and "")"" next to each other is safe.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:39,Safety,avoid,avoid,39,"/// By default, a token never needs to avoid concatenation. Most tokens; /// (e.g. ',', ')', etc) don't cause a problem when concatenated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:27,Safety,Avoid,AvoidConcat,27,"/// aci_custom_firstchar - AvoidConcat contains custom code to handle this; /// token's requirements, and it needs to know the first character of the; /// token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:17,Safety,Avoid,AvoidConcat,17,"/// aci_custom - AvoidConcat contains custom code to handle this token's; /// requirements, but it doesn't need to know the first character of the; /// token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:44,Safety,safe,safely,44,"/// aci_avoid_equal - Many tokens cannot be safely followed by an '='; /// character. For example, ""<<"" turns into ""<<="" when followed by an =.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:96,Safety,avoid,avoiding,96,/// TokenInfo - This array contains information for each token on what; /// action to take when avoiding concatenation of tokens in the AvoidConcat; /// method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:136,Safety,Avoid,AvoidConcat,136,/// TokenInfo - This array contains information for each token on what; /// action to take when avoiding concatenation of tokens in the AvoidConcat; /// method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:416,Integrability,interface,interface,416,"//===- TokenLexer.h - Lex from a token buffer -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TokenLexer interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:488,Deployability,update,update,488,"/// This is the pointer to an array of tokens that the macro is; /// defined to, with arguments expanded for function-like macros. If this is; /// a token stream, these are the tokens we are returning. This points into; /// the macro definition we are lexing from, a cache buffer that is owned by; /// the preprocessor, or some other buffer that we may or may not own; /// (depending on OwnsTokens).; /// Note that if it points into Preprocessor's cache buffer, the Preprocessor; /// may update the pointer as needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:374,Integrability,depend,depending,374,"/// This is the pointer to an array of tokens that the macro is; /// defined to, with arguments expanded for function-like macros. If this is; /// a token stream, these are the tokens we are returning. This points into; /// the macro definition we are lexing from, a cache buffer that is owned by; /// the preprocessor, or some other buffer that we may or may not own; /// (depending on OwnsTokens).; /// Note that if it points into Preprocessor's cache buffer, the Preprocessor; /// may update the pointer as needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:267,Performance,cache,cache,267,"/// This is the pointer to an array of tokens that the macro is; /// defined to, with arguments expanded for function-like macros. If this is; /// a token stream, these are the tokens we are returning. This points into; /// the macro definition we are lexing from, a cache buffer that is owned by; /// the preprocessor, or some other buffer that we may or may not own; /// (depending on OwnsTokens).; /// Note that if it points into Preprocessor's cache buffer, the Preprocessor; /// may update the pointer as needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:448,Performance,cache,cache,448,"/// This is the pointer to an array of tokens that the macro is; /// defined to, with arguments expanded for function-like macros. If this is; /// a token stream, these are the tokens we are returning. This points into; /// the macro definition we are lexing from, a cache buffer that is owned by; /// the preprocessor, or some other buffer that we may or may not own; /// (depending on OwnsTokens).; /// Note that if it points into Preprocessor's cache buffer, the Preprocessor; /// may update the pointer as needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:36,Energy Efficiency,allocate,allocated,36,"/// This is true if this TokenLexer allocated the Tokens; /// array, and thus needs to free it when destroyed. For simple object-like; /// macros (for example) we just point into the token buffer of the macro; /// definition, we don't make a copy of it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:115,Usability,simpl,simple,115,"/// This is true if this TokenLexer allocated the Tokens; /// array, and thus needs to free it when destroyed. For simple object-like; /// macros (for example) we just point into the token buffer of the macro; /// definition, we don't make a copy of it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:322,Performance,perform,performs,322,"/// Concatenates the next (sub-)sequence of \p Tokens separated by '##'; /// starting with LHSTok - stopping when we encounter a token that is neither; /// '##' nor preceded by '##'. Places the result back into \p LHSTok and sets; /// \p CurIdx to point to the token following the last one that was pasted.; ///; /// Also performs the MSVC extension wide-literal token pasting involved with:; /// \code L #macro-arg. \endcode; ///; /// \param[in,out] LHSTok - Contains the token to the left of '##' in \p; /// Tokens upon entry and will contain the resulting concatenated Token upon; /// exit.; ///; /// \param[in] TokenStream - The stream of Tokens we are lexing from.; ///; /// \param[in,out] CurIdx - Upon entry, \pTokens[\pCurIdx] must equal '##'; /// (with the exception of the MSVC extension mentioned above). Upon exit, it; /// is set to the index of the token following the last token that was; /// concatenated together.; ///; /// \returns If this returns true, the caller should immediately return the; /// token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:28,Deployability,update,updates,28,/// Creates SLocEntries and updates the locations of macro argument; /// tokens to their new expanded locations.; ///; /// \param ArgIdSpellLoc the location of the macro argument id inside the; /// macro definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h:359,Performance,cache,cached,359,"/// An RAII class that tracks when the Preprocessor starts and stops lexing; /// the definition of a (ISO C/C++) variadic macro. As an example, this is; /// useful for unpoisoning and repoisoning certain identifiers (such as; /// __VA_ARGS__) that are only allowed in this context. Also, being a friend; /// of the Preprocessor class allows it to access PP's cached identifiers; /// directly (as opposed to performing a lookup each time).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h:407,Performance,perform,performing,407,"/// An RAII class that tracks when the Preprocessor starts and stops lexing; /// the definition of a (ISO C/C++) variadic macro. As an example, this is; /// useful for unpoisoning and repoisoning certain identifiers (such as; /// __VA_ARGS__) that are only allowed in this context. Also, being a friend; /// of the Preprocessor class allows it to access PP's cached identifiers; /// directly (as opposed to performing a lookup each time).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h:347,Security,access,access,347,"/// An RAII class that tracks when the Preprocessor starts and stops lexing; /// the definition of a (ISO C/C++) variadic macro. As an example, this is; /// useful for unpoisoning and repoisoning certain identifiers (such as; /// __VA_ARGS__) that are only allowed in this context. Also, being a friend; /// of the Preprocessor class allows it to access PP's cached identifiers; /// directly (as opposed to performing a lookup each time).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h:140,Availability,error,error,140,"/// Client code should call this function as soon as the Preprocessor has; /// either completed lexing the macro's definition tokens, or an error; /// occurred and the context is being exited. This function is idempotent; /// (might be explicitly called, and then reinvoked via the destructor).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/LoopHint.h:9,Performance,optimiz,optimization,9,/// Loop optimization hint for loop and unroll pragmas.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/LoopHint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/LoopHint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:412,Integrability,interface,interface,412,"//===--- Parser.h - C Language Parser ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Parser interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:33,Energy Efficiency,reduce,reduce,33,/// ScopeCache - Cache scopes to reduce malloc traffic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:17,Performance,Cache,Cache,17,/// ScopeCache - Cache scopes to reduce malloc traffic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:43,Performance,cache,cached,43,"/// Ident_vector, Ident_bool, Ident_Bool - cached IdentifierInfos for ""vector""; /// and ""bool"" fast comparison. Only present if AltiVec or ZVector are; /// enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:18,Performance,cache,cached,18,"/// Ident_pixel - cached IdentifierInfos for ""pixel"" fast comparison.; /// Only present if AltiVec enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:20,Integrability,message,message,20,"/// Identifier for ""message"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:63,Availability,recover,recover,63,"/// ColonIsSacred - When this is false, we aggressively try to recover from; /// code like ""foo : bar"" as if it were a typo for ""foo :: bar"". This is not; /// safe in case statements and a few other things. This is managed by the; /// ColonProtectionRAIIObject RAII object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:63,Safety,recover,recover,63,"/// ColonIsSacred - When this is false, we aggressively try to recover from; /// code like ""foo : bar"" as if it were a typo for ""foo :: bar"". This is not; /// safe in case statements and a few other things. This is managed by the; /// ColonProtectionRAIIObject RAII object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:159,Safety,safe,safe,159,"/// ColonIsSacred - When this is false, we aggressively try to recover from; /// code like ""foo : bar"" as if it were a typo for ""foo :: bar"". This is not; /// safe in case statements and a few other things. This is managed by the; /// ColonProtectionRAIIObject RAII object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:53,Integrability,message,message,53,"/// When true, we are directly inside an Objective-C message; /// send expression.; ///; /// This is managed by the \c InMessageExpressionRAIIObject class, and; /// should not be set directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:271,Integrability,depend,dependent,271,"/// Tracker for '<' tokens that might have been intended to be treated as an; /// angle bracket instead of a less-than comparison.; ///; /// This happens when the user intends to form a template-id, but typoes the; /// template-name or forgets a 'template' keyword for a dependent template; /// name.; ///; /// We track these locations from the point where we see a '<' with a; /// name-like expression on its left until we see a '>' or '>>' that might; /// match it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:10,Integrability,depend,dependent,10,/// A non-dependent name that is a potential typo for a template name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:6,Integrability,depend,dependent,6,/// A dependent name that might instantiate to a template-name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:193,Availability,error,error,193,"/// ConsumeAnyToken - Dispatch to the right Consume* method based on the; /// current token type. This should only be used in cases where the type of; /// the token really isn't known, e.g. in error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:199,Availability,recover,recovery,199,"/// ConsumeAnyToken - Dispatch to the right Consume* method based on the; /// current token type. This should only be used in cases where the type of; /// the token really isn't known, e.g. in error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:199,Safety,recover,recovery,199,"/// ConsumeAnyToken - Dispatch to the right Consume* method based on the; /// current token type. This should only be used in cases where the type of; /// the token really isn't known, e.g. in error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:111,Energy Efficiency,consumption,consumption,111,//===--------------------------------------------------------------------===//; // Low-Level token peeking and consumption methods.; //; /// isTokenParen - Return true if the cur token is '(' or ')'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:57,Energy Efficiency,consumption,consumption,57,/// isTokenSpecial - True if this token requires special consumption methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:62,Integrability,rout,routine,62,"/// Consume the current code-completion token.; ///; /// This routine can be called to consume the code-completion token and; /// continue processing in special cases where \c cutOffParsing() isn't; /// desired, such as token caching or completion with lookahead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:41,Availability,error,error,41,/// Annotation has failed and emitted an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:176,Energy Efficiency,consumption,consumption,176,"/// TentativeParsingAction - An object that is used as a kind of ""tentative; /// parsing transaction"". It gets instantiated to mark the token position and; /// after the token consumption is done, Commit() or Revert() is called to; /// either ""commit the consumed tokens"" or revert to the previously marked; /// token position. Example:; ///; /// TentativeParsingAction TPA(*this);; /// ConsumeToken();; /// ....; /// TPA.Revert();; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:203,Availability,error,error,203,"/// ExpectAndConsume - The parser expects that 'ExpectedTok' is next in the; /// input. If so, it is consumed and false is returned.; ///; /// If a trivial punctuator misspelling is encountered, a FixIt error; /// diagnostic is issued and false is returned after recovery.; ///; /// If the input is malformed, this emits the specified diagnostic and true is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:263,Availability,recover,recovery,263,"/// ExpectAndConsume - The parser expects that 'ExpectedTok' is next in the; /// input. If so, it is consumed and false is returned.; ///; /// If a trivial punctuator misspelling is encountered, a FixIt error; /// diagnostic is issued and false is returned after recovery.; ///; /// If the input is malformed, this emits the specified diagnostic and true is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:263,Safety,recover,recovery,263,"/// ExpectAndConsume - The parser expects that 'ExpectedTok' is next in the; /// input. If so, it is consumed and false is returned.; ///; /// If a trivial punctuator misspelling is encountered, a FixIt error; /// diagnostic is issued and false is returned after recovery.; ///; /// If the input is malformed, this emits the specified diagnostic and true is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:83,Availability,error,error,83,/// Return false if the next token is an identifier. An 'expected identifier'; /// error is emitted otherwise.; ///; /// The parser tries to recover from the error by checking if the next token; /// is a C++ keyword when parsing Objective-C++. Return false if the recovery; /// was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:141,Availability,recover,recover,141,/// Return false if the next token is an identifier. An 'expected identifier'; /// error is emitted otherwise.; ///; /// The parser tries to recover from the error by checking if the next token; /// is a C++ keyword when parsing Objective-C++. Return false if the recovery; /// was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:158,Availability,error,error,158,/// Return false if the next token is an identifier. An 'expected identifier'; /// error is emitted otherwise.; ///; /// The parser tries to recover from the error by checking if the next token; /// is a C++ keyword when parsing Objective-C++. Return false if the recovery; /// was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:264,Availability,recover,recovery,264,/// Return false if the next token is an identifier. An 'expected identifier'; /// error is emitted otherwise.; ///; /// The parser tries to recover from the error by checking if the next token; /// is a C++ keyword when parsing Objective-C++. Return false if the recovery; /// was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:141,Safety,recover,recover,141,/// Return false if the next token is an identifier. An 'expected identifier'; /// error is emitted otherwise.; ///; /// The parser tries to recover from the error by checking if the next token; /// is a C++ keyword when parsing Objective-C++. Return false if the recovery; /// was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:264,Safety,recover,recovery,264,/// Return false if the next token is an identifier. An 'expected identifier'; /// error is emitted otherwise.; ///; /// The parser tries to recover from the error by checking if the next token; /// is a C++ keyword when parsing Objective-C++. Return false if the recovery; /// was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:107,Availability,Error,Error,107,//===--------------------------------------------------------------------===//; // Diagnostic Emission and Error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:113,Availability,recover,recovery,113,//===--------------------------------------------------------------------===//; // Diagnostic Emission and Error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:113,Safety,recover,recovery,113,//===--------------------------------------------------------------------===//; // Diagnostic Emission and Error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:109,Usability,simpl,simple-declaration,109,/// SkipMalformedDecl - Read tokens until we get to some likely good stopping; /// point for skipping past a simple-declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:92,Modifiability,variab,variables,92,/// Contains the lexed tokens of an attribute with arguments that; /// may reference member variables and so need to be parsed at the; /// end of the class declaration after parsing all other member; /// member declarations.; /// FIXME: Perhaps we should change the name of LateParsedDeclaration to; /// LateParsedTokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:88,Modifiability,variab,variables,88,/// Contains the lexed tokens of a pragma with arguments that; /// may reference member variables and so need to be parsed at the; /// end of the class declaration after parsing all other member; /// member declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:4,Performance,Cache,CachedTokens,4,"/// CachedTokens - The sequence of tokens that comprises the initializer,; /// including any leading '='.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:63,Usability,simpl,simple-asm,63,// EndLoc is filled with the location of the last token of the simple-asm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:149,Integrability,protocol,protocol,149,"/// Parse the first angle-bracket-delimited clause for an; /// Objective-C object or object pointer type, which may be either; /// type arguments or protocol qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:47,Integrability,protocol,protocol,47,"/// Parse either Objective-C type arguments or protocol qualifiers; if the; /// former, also parse protocol qualifiers afterward.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:99,Integrability,protocol,protocol,99,"/// Parse either Objective-C type arguments or protocol qualifiers; if the; /// former, also parse protocol qualifiers afterward.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:12,Integrability,protocol,protocol,12,"/// Parse a protocol qualifier type such as '<NSCopying>', which is; /// an anachronistic way of writing 'id<NSCopying>'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:41,Integrability,protocol,protocol,41,"/// Parse Objective-C type arguments and protocol qualifiers, extending the; /// current type with the parsed result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:62,Modifiability,extend,extending,62,"/// Parse Objective-C type arguments and protocol qualifiers, extending the; /// current type with the parsed result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:34,Usability,simpl,simple,34,"/// ParseSimpleExpressionList - A simple comma-separated list of expressions,; /// used for misc language extensions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:38,Integrability,message,message,38,"/// This is definitely an Objective-C message send expression, rather than; /// a lambda-introducer, attribute-specifier, or array designator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:48,Usability,Simpl,Simple,48,/// ParseCXXSimpleTypeSpecifier - [C++ 7.1.5.2] Simple type specifiers.; /// This should only be called when the current token is known to be part of; /// simple-type-specifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:155,Usability,simpl,simple-type-specifier,155,/// ParseCXXSimpleTypeSpecifier - [C++ 7.1.5.2] Simple type specifiers.; /// This should only be called when the current token is known to be part of; /// simple-type-specifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:25,Integrability,depend,dependent,25,"/// Parse the block as a dependent block, which may be used in; /// some template instantiations but not others.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:89,Availability,error,error,89,"/// The grammar doesn't allow a defining-type-specifier here, but we permit; /// one for error recovery purposes. Sema will reject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:95,Availability,recover,recovery,95,"/// The grammar doesn't allow a defining-type-specifier here, but we permit; /// one for error recovery purposes. Sema will reject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:95,Safety,recover,recovery,95,"/// The grammar doesn't allow a defining-type-specifier here, but we permit; /// one for error recovery purposes. Sema will reject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:38,Performance,perform,perform,38,/// Is this a context in which we can perform class template argument; /// deduction?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:81,Integrability,message,message,81,/// Determine whether we are currently at the start of an Objective-C; /// class message that appears to be missing the open bracket '['.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:337,Testability,log,logic,337,"/// Checks whether the current tokens form a type-id or an expression for the; /// purposes of use as the initial operand to a generic selection expression.; /// This requires special handling in C++ because it accepts either a type or; /// an expression, and we need to disambiguate which is which. However, we; /// cannot use the same logic as we've used for sizeof expressions, because; /// that logic relies on the operator only accepting a single argument,; /// whereas _Generic accepts a list of arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:399,Testability,log,logic,399,"/// Checks whether the current tokens form a type-id or an expression for the; /// purposes of use as the initial operand to a generic selection expression.; /// This requires special handling in C++ because it accepts either a type or; /// an expression, and we need to disambiguate which is which. However, we; /// cannot use the same logic as we've used for sizeof expressions, because; /// that logic relies on the operator only accepting a single argument,; /// whereas _Generic accepts a list of arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:187,Availability,error,error,187,"/// isCXXSimpleDeclaration - C++-specialized function that disambiguates; /// between a simple-declaration or an expression-statement.; /// If during the disambiguation process a parsing error is encountered,; /// the function returns true to let the declaration parsing code handle it.; /// Returns false if the statement is disambiguated as expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:88,Usability,simpl,simple-declaration,88,"/// isCXXSimpleDeclaration - C++-specialized function that disambiguates; /// between a simple-declaration or an expression-statement.; /// If during the disambiguation process a parsing error is encountered,; /// the function returns true to let the declaration parsing code handle it.; /// Returns false if the statement is disambiguated as expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:404,Availability,error,error,404,"/// isCXXFunctionDeclarator - Disambiguates between a function declarator or; /// a constructor-style initializer, when parsing declaration statements.; /// Returns true for function declarator and false for constructor-style; /// initializer. Sets 'IsAmbiguous' to true to indicate that this declaration; /// might be a constructor-style initializer.; /// If during the disambiguation process a parsing error is encountered,; /// the function returns true to let the declaration parsing code handle it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:24,Usability,simpl,simple-declaration,24,///< Disambiguated as a simple-declaration init-statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:167,Integrability,depend,depending,167,/// Disambiguates between the different kinds of things that can happen; /// after 'if (' or 'switch ('. This could be one of two different kinds of; /// declaration (depending on whether there is a ';' later) or an expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:233,Availability,Error,Error,233,"/// isCXXDeclarationSpecifier - Returns TPResult::True if it is a; /// declaration specifier, TPResult::False if it is not,; /// TPResult::Ambiguous if it could be either a decl-specifier or a; /// function-style cast, and TPResult::Error if a parsing error was; /// encountered. If it could be a braced C++11 function-style cast, returns; /// BracedCastResult.; /// Doesn't consume tokens.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:252,Availability,error,error,252,"/// isCXXDeclarationSpecifier - Returns TPResult::True if it is a; /// declaration specifier, TPResult::False if it is not,; /// TPResult::Ambiguous if it could be either a decl-specifier or a; /// function-style cast, and TPResult::Error if a parsing error was; /// encountered. If it could be a braced C++11 function-style cast, returns; /// BracedCastResult.; /// Doesn't consume tokens.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:72,Availability,error,error,72,"// ""Tentative parsing"" functions, used for disambiguation. If a parsing error; // is encountered they will return TPResult::Error.; // Returning TPResult::True/False indicates that the ambiguity was; // resolved and tentative parsing may stop. TPResult::Ambiguous indicates; // that more tentative parsing is necessary for disambiguation.; // They all consume tokens, so backtracking should be used after calling them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:124,Availability,Error,Error,124,"// ""Tentative parsing"" functions, used for disambiguation. If a parsing error; // is encountered they will return TPResult::Error.; // Returning TPResult::True/False indicates that the ambiguity was; // resolved and tentative parsing may stop. TPResult::Ambiguous indicates; // that more tentative parsing is necessary for disambiguation.; // They all consume tokens, so backtracking should be used after calling them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:86,Security,validat,validation,86,/// Try to skip a possibly empty sequence of 'attribute-specifier's without; /// full validation of the syntactic structure of attributes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:98,Availability,error,error,98,/// Parse a `match` clause for an '#pragma omp declare variant'. Return true; /// if there was an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:72,Availability,error,error,72,"/// Check the \p FoundKind against the \p ExpectedKind, if not issue an error; /// that the ""end"" matching the ""begin"" directive of kind \p BeginKind was not; /// found. Finally, if the expected kind was found or if \p SkipUntilOpenMPEnd; /// is set, skip ahead using the helper `skipUntilPragmaOpenMPEnd`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:11,Modifiability,variab,variable,11,/// Parses variable declaration in 'omp declare mapper' directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:26,Modifiability,variab,variables,26,"/// Parses simple list of variables.; ///; /// \param Kind Kind of the directive.; /// \param Callback Callback function to be called for the list elements.; /// \param AllowScopeSpecifier true, if the variables can have fully; /// qualified names.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:202,Modifiability,variab,variables,202,"/// Parses simple list of variables.; ///; /// \param Kind Kind of the directive.; /// \param Callback Callback function to be called for the list elements.; /// \param AllowScopeSpecifier true, if the variables can have fully; /// qualified names.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:11,Usability,simpl,simple,11,"/// Parses simple list of variables.; ///; /// \param Kind Kind of the directive.; /// \param Callback Callback function to be called for the list elements.; /// \param AllowScopeSpecifier true, if the variables can have fully; /// qualified names.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:11,Usability,simpl,simple,11,/// Parses simple clause of a kind \a Kind.; ///; /// \param Kind Kind of current clause.; /// \param ParseOnly true to skip the clause's semantic actions and return; /// nullptr.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:35,Modifiability,variab,variables,35,/// Parses clause with the list of variables of a kind \a Kind.; ///; /// \param Kind Kind of current clause.; /// \param ParseOnly true to skip the clause's semantic actions and return; /// nullptr.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:34,Modifiability,variab,variable,34,/// Parses clause with an interop variable of kind \a Kind.; ///; /// \param Kind Kind of current clause.; /// \param ParseOnly true to skip the clause's semantic actions and return; /// nullptr.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:11,Usability,simpl,simple,11,/// Parses simple expression in parens for single-expression clauses of OpenMP; /// constructs.; /// \param RLoc Returned location of right paren.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:15,Modifiability,variab,variable,15,/// Parses the variable list for the `cache` construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:38,Performance,cache,cache,38,/// Parses the variable list for the `cache` construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:20,Modifiability,variab,variable,20,/// Parses a single variable in a variable list for OpenACC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:34,Modifiability,variab,variable,34,/// Parses a single variable in a variable list for OpenACC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:15,Modifiability,variab,variable,15,"/// Parses the variable list for the variety of clauses that take a var-list,; /// including the optional Special Token listed for some,based on clause type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:164,Safety,safe,safely,164,"/// Parse the given string as a type.; ///; /// This is a dangerous utility function currently employed only by API notes.; /// It is not a general entry-point for safely parsing types from strings.; ///; /// \param TypeStr The string to be parsed as a type.; /// \param Context The name of the context in which this string is being; /// parsed, which will be used in diagnostics.; /// \param IncludeLoc The location at which this parse was triggered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:425,Usability,simpl,simple,425,"//===--- RAIIObjectsForParser.h - RAII helpers for the parser ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines and implements the some simple RAII objects that are used; // by the parser to manage bits in recursion.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:279,Availability,error,errors,279,"// TODO: move ParsingClassDefinition here.; // TODO: move TentativeParsingAction here.; /// A RAII object used to temporarily suppress access-like; /// checking. Access-like checks are those associated with; /// controlling the use of a declaration, like C++ access control; /// errors and deprecation warnings. They are contextually; /// dependent, in that they can only be resolved with full; /// information about what's being declared. They are also; /// suppressed in certain contexts, like the template arguments of; /// an explicit instantiation. However, those suppression contexts; /// cannot necessarily be fully determined in advance; for; /// example, something starting like this:; /// template <> class std::vector<A::PrivateType>; /// might be the entirety of an explicit instantiation:; /// template <> class std::vector<A::PrivateType>;; /// or just an elaborated type specifier:; /// template <> class std::vector<A::PrivateType> make_vector<>();; /// Therefore this class collects all the diagnostics and permits; /// them to be re-delayed in a new context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:339,Integrability,depend,dependent,339,"// TODO: move ParsingClassDefinition here.; // TODO: move TentativeParsingAction here.; /// A RAII object used to temporarily suppress access-like; /// checking. Access-like checks are those associated with; /// controlling the use of a declaration, like C++ access control; /// errors and deprecation warnings. They are contextually; /// dependent, in that they can only be resolved with full; /// information about what's being declared. They are also; /// suppressed in certain contexts, like the template arguments of; /// an explicit instantiation. However, those suppression contexts; /// cannot necessarily be fully determined in advance; for; /// example, something starting like this:; /// template <> class std::vector<A::PrivateType>; /// might be the entirety of an explicit instantiation:; /// template <> class std::vector<A::PrivateType>;; /// or just an elaborated type specifier:; /// template <> class std::vector<A::PrivateType> make_vector<>();; /// Therefore this class collects all the diagnostics and permits; /// them to be re-delayed in a new context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:135,Security,access,access-like,135,"// TODO: move ParsingClassDefinition here.; // TODO: move TentativeParsingAction here.; /// A RAII object used to temporarily suppress access-like; /// checking. Access-like checks are those associated with; /// controlling the use of a declaration, like C++ access control; /// errors and deprecation warnings. They are contextually; /// dependent, in that they can only be resolved with full; /// information about what's being declared. They are also; /// suppressed in certain contexts, like the template arguments of; /// an explicit instantiation. However, those suppression contexts; /// cannot necessarily be fully determined in advance; for; /// example, something starting like this:; /// template <> class std::vector<A::PrivateType>; /// might be the entirety of an explicit instantiation:; /// template <> class std::vector<A::PrivateType>;; /// or just an elaborated type specifier:; /// template <> class std::vector<A::PrivateType> make_vector<>();; /// Therefore this class collects all the diagnostics and permits; /// them to be re-delayed in a new context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:162,Security,Access,Access-like,162,"// TODO: move ParsingClassDefinition here.; // TODO: move TentativeParsingAction here.; /// A RAII object used to temporarily suppress access-like; /// checking. Access-like checks are those associated with; /// controlling the use of a declaration, like C++ access control; /// errors and deprecation warnings. They are contextually; /// dependent, in that they can only be resolved with full; /// information about what's being declared. They are also; /// suppressed in certain contexts, like the template arguments of; /// an explicit instantiation. However, those suppression contexts; /// cannot necessarily be fully determined in advance; for; /// example, something starting like this:; /// template <> class std::vector<A::PrivateType>; /// might be the entirety of an explicit instantiation:; /// template <> class std::vector<A::PrivateType>;; /// or just an elaborated type specifier:; /// template <> class std::vector<A::PrivateType> make_vector<>();; /// Therefore this class collects all the diagnostics and permits; /// them to be re-delayed in a new context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:259,Security,access,access,259,"// TODO: move ParsingClassDefinition here.; // TODO: move TentativeParsingAction here.; /// A RAII object used to temporarily suppress access-like; /// checking. Access-like checks are those associated with; /// controlling the use of a declaration, like C++ access control; /// errors and deprecation warnings. They are contextually; /// dependent, in that they can only be resolved with full; /// information about what's being declared. They are also; /// suppressed in certain contexts, like the template arguments of; /// an explicit instantiation. However, those suppression contexts; /// cannot necessarily be fully determined in advance; for; /// example, something starting like this:; /// template <> class std::vector<A::PrivateType>; /// might be the entirety of an explicit instantiation:; /// template <> class std::vector<A::PrivateType>;; /// or just an elaborated type specifier:; /// template <> class std::vector<A::PrivateType> make_vector<>();; /// Therefore this class collects all the diagnostics and permits; /// them to be re-delayed in a new context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:22,Security,access,access-like,22,/// Begin suppressing access-like checks,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:127,Modifiability,variab,variable,127,"/// RAII object used to inform the actions that we're; /// currently parsing a declaration. This is active when parsing a; /// variable's initializer, but not when parsing the body of a; /// class or function definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:194,Availability,error,error,194,"/// ColonProtectionRAIIObject - This sets the Parser::ColonIsSacred bool and; /// restores it when destroyed. This says that ""foo:"" should not be; /// considered a possible typo for ""foo::"" for error recovery purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:200,Availability,recover,recovery,200,"/// ColonProtectionRAIIObject - This sets the Parser::ColonIsSacred bool and; /// restores it when destroyed. This says that ""foo:"" should not be; /// considered a possible typo for ""foo::"" for error recovery purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:200,Safety,recover,recovery,200,"/// ColonProtectionRAIIObject - This sets the Parser::ColonIsSacred bool and; /// restores it when destroyed. This says that ""foo:"" should not be; /// considered a possible typo for ""foo::"" for error recovery purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:139,Availability,error,error,139,"/// RAII object that makes sure paren/bracket/brace count is correct; /// after declaration/statement parsing, even when there's a parsing error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h:32,Modifiability,Rewrite,Rewrite,32,"//===- DeltaTree.h - B-Tree for Rewrite Delta tracking ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DeltaTree class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h:132,Energy Efficiency,efficient,efficient,132,"/// DeltaTree - a multiway search tree (BTree) structure with some fancy; /// features. B-Trees are generally more memory and cache efficient than; /// binary trees, because they store multiple keys/values in each node. This; /// implements a key/value mapping from index to delta, and allows fast lookup; /// on index. However, an added (important) bonus is that it can also; /// efficiently tell us the full accumulated delta for a specific file offset; /// as well, without traversing the whole tree.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h:381,Energy Efficiency,efficient,efficiently,381,"/// DeltaTree - a multiway search tree (BTree) structure with some fancy; /// features. B-Trees are generally more memory and cache efficient than; /// binary trees, because they store multiple keys/values in each node. This; /// implements a key/value mapping from index to delta, and allows fast lookup; /// on index. However, an added (important) bonus is that it can also; /// efficiently tell us the full accumulated delta for a specific file offset; /// as well, without traversing the whole tree.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h:126,Performance,cache,cache,126,"/// DeltaTree - a multiway search tree (BTree) structure with some fancy; /// features. B-Trees are generally more memory and cache efficient than; /// binary trees, because they store multiple keys/values in each node. This; /// implements a key/value mapping from index to delta, and allows fast lookup; /// on index. However, an added (important) bonus is that it can also; /// efficiently tell us the full accumulated delta for a specific file offset; /// as well, without traversing the whole tree.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/DeltaTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/HTMLRewrite.h:162,Modifiability,rewrite,rewrites,162,"/// EscapeText - HTMLized the provided string so that special characters; /// in 's' are not interpreted as HTML tags. Unlike the version of; /// EscapeText that rewrites a file, this version by default replaces tabs; /// with spaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/HTMLRewrite.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/HTMLRewrite.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:42,Integrability,interface,interface,42,"//===- RewriteBuffer.h - Buffer rewriting interface -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:7,Modifiability,Rewrite,RewriteBuffer,7,"//===- RewriteBuffer.h - Buffer rewriting interface -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:4,Modifiability,Rewrite,RewriteBuffer,4,"/// RewriteBuffer - As code is rewritten, SourceBuffer's from the original; /// input with modifications get a new RewriteBuffer associated with them. The; /// RewriteBuffer captures the modified text itself as well as information used; /// to map between SourceLocation's in the original input and offsets in the; /// RewriteBuffer. For example, if text is inserted into the buffer, any; /// locations after the insertion point have to be mapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:115,Modifiability,Rewrite,RewriteBuffer,115,"/// RewriteBuffer - As code is rewritten, SourceBuffer's from the original; /// input with modifications get a new RewriteBuffer associated with them. The; /// RewriteBuffer captures the modified text itself as well as information used; /// to map between SourceLocation's in the original input and offsets in the; /// RewriteBuffer. For example, if text is inserted into the buffer, any; /// locations after the insertion point have to be mapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:160,Modifiability,Rewrite,RewriteBuffer,160,"/// RewriteBuffer - As code is rewritten, SourceBuffer's from the original; /// input with modifications get a new RewriteBuffer associated with them. The; /// RewriteBuffer captures the modified text itself as well as information used; /// to map between SourceLocation's in the original input and offsets in the; /// RewriteBuffer. For example, if text is inserted into the buffer, any; /// locations after the insertion point have to be mapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:319,Modifiability,Rewrite,RewriteBuffer,319,"/// RewriteBuffer - As code is rewritten, SourceBuffer's from the original; /// input with modifications get a new RewriteBuffer associated with them. The; /// RewriteBuffer captures the modified text itself as well as information used; /// to map between SourceLocation's in the original input and offsets in the; /// RewriteBuffer. For example, if text is inserted into the buffer, any; /// locations after the insertion point have to be mapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:28,Modifiability,rewrite,rewrite,28,/// Initialize - Start this rewrite buffer out with a copy of the unmodified; /// input buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:246,Modifiability,Rewrite,Rewriter,246,/// Write to \p Stream the result of applying all changes to the; /// original buffer.; /// Note that it isn't safe to use this function to overwrite memory mapped; /// files in-place (PR17960). Consider using a higher-level utility such as; /// Rewriter::overwriteChangedFiles() instead.; ///; /// The original buffer is not actually changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:111,Safety,safe,safe,111,/// Write to \p Stream the result of applying all changes to the; /// original buffer.; /// Note that it isn't safe to use this function to overwrite memory mapped; /// files in-place (PR17960). Consider using a higher-level utility such as; /// Rewriter::overwriteChangedFiles() instead.; ///; /// The original buffer is not actually changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:84,Modifiability,Rewrite,RewriteBuffer,84,"/// getMappedOffset - Given an offset into the original SourceBuffer that this; /// RewriteBuffer is based on, map it into the offset space of the; /// RewriteBuffer. If AfterInserts is true and if the OrigOffset indicates a; /// position where text is inserted, the location returned will be after any; /// inserted text at the position.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:152,Modifiability,Rewrite,RewriteBuffer,152,"/// getMappedOffset - Given an offset into the original SourceBuffer that this; /// RewriteBuffer is based on, map it into the offset space of the; /// RewriteBuffer. If AfterInserts is true and if the OrigOffset indicates a; /// position where text is inserted, the location returned will be after any; /// inserted text at the position.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:35,Integrability,interface,interface,35,"//===- Rewriter.h - Code rewriting interface --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Rewriter class, which is used for code; // transformations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:7,Modifiability,Rewrite,Rewriter,7,"//===- Rewriter.h - Code rewriting interface --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Rewriter class, which is used for code; // transformations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:405,Modifiability,Rewrite,Rewriter,405,"//===- Rewriter.h - Code rewriting interface --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Rewriter class, which is used for code; // transformations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:32,Integrability,interface,interface,32,/// Rewriter - This is the main interface to the rewrite buffers. Its primary; /// job is to dispatch high-level requests to the low-level RewriteBuffers that; /// are involved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:4,Modifiability,Rewrite,Rewriter,4,/// Rewriter - This is the main interface to the rewrite buffers. Its primary; /// job is to dispatch high-level requests to the low-level RewriteBuffers that; /// are involved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:49,Modifiability,rewrite,rewrite,49,/// Rewriter - This is the main interface to the rewrite buffers. Its primary; /// job is to dispatch high-level requests to the low-level RewriteBuffers that; /// are involved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:139,Modifiability,Rewrite,RewriteBuffers,139,/// Rewriter - This is the main interface to the rewrite buffers. Its primary; /// job is to dispatch high-level requests to the low-level RewriteBuffers that; /// are involved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:159,Modifiability,rewrite,rewrite,159,"/// If true and removing some text leaves a blank line; /// also remove the empty line (false by default).; ///; /// FIXME: This sometimes corrupts the file's rewrite buffer due to; /// incorrect indexing in the implementation (see the FIXME in; /// clang::RewriteBuffer::RemoveText). Moreover, it's inefficient because; /// it must scan the buffer from the beginning to find the start of the; /// line. When feasible, it's better for the caller to check for a blank; /// line and then, if found, expand the removal range to include it.; /// Checking for a blank line is easy if, for example, the caller can; /// guarantee this is the first edit of a line. In that case, it can just; /// scan before and after the removal range until the next newline or; /// begin/end of the input.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:257,Modifiability,Rewrite,RewriteBuffer,257,"/// If true and removing some text leaves a blank line; /// also remove the empty line (false by default).; ///; /// FIXME: This sometimes corrupts the file's rewrite buffer due to; /// incorrect indexing in the implementation (see the FIXME in; /// clang::RewriteBuffer::RemoveText). Moreover, it's inefficient because; /// it must scan the buffer from the beginning to find the start of the; /// line. When feasible, it's better for the caller to check for a blank; /// line and then, if found, expand the removal range to include it.; /// Checking for a blank line is easy if, for example, the caller can; /// guarantee this is the first edit of a line. In that case, it can just; /// scan before and after the removal range until the next newline or; /// begin/end of the input.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:264,Energy Efficiency,efficient,efficient,264,"/// getRewrittenText - Return the rewritten form of the text in the specified; /// range. If the start or end of the range was unrewritable or if they are; /// in different buffers, this returns an empty string.; ///; /// Note that this method is not particularly efficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:264,Energy Efficiency,efficient,efficient,264,"/// getRewrittenText - Return the rewritten form of the text in the specified; /// range. If the start or end of the range was unrewritable or if they are; /// in different buffers, this returns an empty string.; ///; /// Note that this method is not particularly efficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:160,Energy Efficiency,efficient,efficient,160,"/// getEditBuffer - This is like getRewriteBufferFor, but always returns a; /// buffer, and allows you to write on it directly. This is useful if you; /// want efficient low-level access to apis for scribbling on one specific; /// FileID's buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:180,Security,access,access,180,"/// getEditBuffer - This is like getRewriteBufferFor, but always returns a; /// buffer, and allows you to write on it directly. This is useful if you; /// want efficient low-level access to apis for scribbling on one specific; /// FileID's buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:37,Modifiability,rewrite,rewrite,37,"/// getRewriteBufferFor - Return the rewrite buffer for the specified FileID.; /// If no modification has been made to it, return null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:18,Modifiability,rewrite,rewrite,18,// Iterators over rewrite buffers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:212,Availability,error,error,212,/// overwriteChangedFiles - Save all changed files to disk.; ///; /// Returns true if any files were not saved successfully.; /// Outputs diagnostics via the source manager's diagnostic engine; /// in case of an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:435,Energy Efficiency,power,powerful,435,"//===- RewriteRope.h - Rope specialized for rewriter ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the RewriteRope class, which is a powerful string class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:7,Modifiability,Rewrite,RewriteRope,7,"//===- RewriteRope.h - Rope specialized for rewriter ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the RewriteRope class, which is a powerful string class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:44,Modifiability,rewrite,rewriter,44,"//===- RewriteRope.h - Rope specialized for rewriter ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the RewriteRope class, which is a powerful string class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:405,Modifiability,Rewrite,RewriteRope,405,"//===- RewriteRope.h - Rope specialized for rewriter ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the RewriteRope class, which is a powerful string class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:229,Energy Efficiency,allocate,allocated,229,"//===--------------------------------------------------------------------===//; // RopeRefCountString Class; //===--------------------------------------------------------------------===//; /// RopeRefCountString - This struct is allocated with 'new char[]' from the; /// heap, and represents a reference counted chunk of string data. When its; /// ref count drops to zero, it is delete[]'d. This is primarily managed; /// through the RopePiece class below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:3,Modifiability,Variab,Variable,3,// Variable sized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:308,Energy Efficiency,efficient,efficiently,308,"//===--------------------------------------------------------------------===//; // RopePiece Class; //===--------------------------------------------------------------------===//; /// RopePiece - This class represents a view into a RopeRefCountString object.; /// This allows references to string data to be efficiently chopped up and; /// moved around without having to push around the string data itself.; ///; /// For example, we could have a 1M RopePiece and want to insert something; /// into the middle of it. To do this, we split it into two RopePiece objects; /// that both refer to the same underlying RopeRefCountString (just with; /// different offsets) which is a nice constant time operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:202,Energy Efficiency,power,powerful,202,"//===--------------------------------------------------------------------===//; // RewriteRope Class; //===--------------------------------------------------------------------===//; /// RewriteRope - A powerful string class. This class supports extremely; /// efficient insertions and deletions into the middle of it, even for; /// ridiculously long strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:260,Energy Efficiency,efficient,efficient,260,"//===--------------------------------------------------------------------===//; // RewriteRope Class; //===--------------------------------------------------------------------===//; /// RewriteRope - A powerful string class. This class supports extremely; /// efficient insertions and deletions into the middle of it, even for; /// ridiculously long strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:83,Modifiability,Rewrite,RewriteRope,83,"//===--------------------------------------------------------------------===//; // RewriteRope Class; //===--------------------------------------------------------------------===//; /// RewriteRope - A powerful string class. This class supports extremely; /// efficient insertions and deletions into the middle of it, even for; /// ridiculously long strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:186,Modifiability,Rewrite,RewriteRope,186,"//===--------------------------------------------------------------------===//; // RewriteRope Class; //===--------------------------------------------------------------------===//; /// RewriteRope - A powerful string class. This class supports extremely; /// efficient insertions and deletions into the middle of it, even for; /// ridiculously long strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:7,Energy Efficiency,allocate,allocate,7,/// We allocate space for string data out of a buffer of size AllocChunkSize.; /// This keeps track of how much space is left.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/TokenRewriter.h:37,Modifiability,Rewrite,Rewriter,37,"//===- TokenRewriter.h - Token-based Rewriter -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TokenRewriter class, which is used for code; // transformations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/TokenRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/TokenRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/TokenRewriter.h:48,Modifiability,Rewrite,Rewriter,48,/// AddToken - Add the specified token into the Rewriter before the other; /// position.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Core/TokenRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/TokenRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h:8,Modifiability,rewrite,rewriter,8,"// ObjC rewriter: attempts to rewrite ObjC constructs into pure C code.; // This is considered experimental, and only works with Apple's ObjC runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h:30,Modifiability,rewrite,rewrite,30,"// ObjC rewriter: attempts to rewrite ObjC constructs into pure C code.; // This is considered experimental, and only works with Apple's ObjC runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h:53,Modifiability,rewrite,rewrites,53,/// CreateHTMLPrinter - Create an AST consumer which rewrites source code to; /// HTML with syntax highlighting suitable for viewing in a web-browser.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:411,Energy Efficiency,adapt,adaptor,411,"//===- FixItRewriter.h - Fix-It Rewriter Diagnostic Client ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a diagnostic client adaptor that performs rewrites as; // suggested by code modification hints attached to diagnostics. It; // then forwards any diagnostics to the adapted diagnostic client.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:555,Energy Efficiency,adapt,adapted,555,"//===- FixItRewriter.h - Fix-It Rewriter Diagnostic Client ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a diagnostic client adaptor that performs rewrites as; // suggested by code modification hints attached to diagnostics. It; // then forwards any diagnostics to the adapted diagnostic client.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:32,Modifiability,Rewrite,Rewriter,32,"//===- FixItRewriter.h - Fix-It Rewriter Diagnostic Client ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a diagnostic client adaptor that performs rewrites as; // suggested by code modification hints attached to diagnostics. It; // then forwards any diagnostics to the adapted diagnostic client.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:411,Modifiability,adapt,adaptor,411,"//===- FixItRewriter.h - Fix-It Rewriter Diagnostic Client ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a diagnostic client adaptor that performs rewrites as; // suggested by code modification hints attached to diagnostics. It; // then forwards any diagnostics to the adapted diagnostic client.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:433,Modifiability,rewrite,rewrites,433,"//===- FixItRewriter.h - Fix-It Rewriter Diagnostic Client ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a diagnostic client adaptor that performs rewrites as; // suggested by code modification hints attached to diagnostics. It; // then forwards any diagnostics to the adapted diagnostic client.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:555,Modifiability,adapt,adapted,555,"//===- FixItRewriter.h - Fix-It Rewriter Diagnostic Client ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a diagnostic client adaptor that performs rewrites as; // suggested by code modification hints attached to diagnostics. It; // then forwards any diagnostics to the adapted diagnostic client.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:424,Performance,perform,performs,424,"//===- FixItRewriter.h - Fix-It Rewriter Diagnostic Client ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a diagnostic client adaptor that performs rewrites as; // suggested by code modification hints attached to diagnostics. It; // then forwards any diagnostics to the adapted diagnostic client.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:28,Deployability,update,updated,28,/// True if files should be updated in place. RewriteFilename is only called; /// if this is false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:46,Modifiability,Rewrite,RewriteFilename,46,/// True if files should be updated in place. RewriteFilename is only called; /// if this is false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:48,Availability,error,errors,48,/// Whether to abort fixing a file when not all errors could be fixed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:15,Safety,abort,abort,15,/// Whether to abort fixing a file when not all errors could be fixed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:41,Availability,error,errors,41,/// Whether to only fix warnings and not errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:89,Availability,error,error,89,"/// If true, only pass the diagnostic to the actual diagnostic consumer; /// if it is an error or a fixit was applied as part of the diagnostic.; /// It basically silences warnings without accompanying fixits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:8,Modifiability,rewrite,rewriter,8,/// The rewriter used to perform the various code; /// modifications.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:25,Performance,perform,perform,25,/// The rewriter used to perform the various code; /// modifications.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:70,Availability,error,error,70,/// The diagnostic client that performs the actual formatting; /// of error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:76,Integrability,message,messages,76,/// The diagnostic client that performs the actual formatting; /// of error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:31,Performance,perform,performs,31,/// The diagnostic client that performs the actual formatting; /// of error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:27,Availability,failure,failures,27,/// The number of rewriter failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:18,Modifiability,rewrite,rewriter,18,/// The number of rewriter failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:28,Modifiability,rewrite,rewriter,28,/// Initialize a new fix-it rewriter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:23,Modifiability,rewrite,rewriter,23,/// Destroy the fix-it rewriter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:81,Availability,error,error,81,"/// Write a single modified source file.; ///; /// \returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:77,Availability,error,error,77,"/// Write the modified source files.; ///; /// \returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:98,Testability,log,log,98,"/// HandleDiagnostic - Handle this diagnostic, reporting it to the user or; /// capturing it to a log as needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:30,Energy Efficiency,adapt,adapted,30,/// Emit a diagnostic via the adapted diagnostic client.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:30,Modifiability,adapt,adapted,30,/// Emit a diagnostic via the adapted diagnostic client.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:9,Modifiability,Rewrite,Rewriters,9,"//===--- Rewriters.h - Rewriter implementations -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header contains miscellaneous utilities for various front-end actions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:23,Modifiability,Rewrite,Rewriter,23,"//===--- Rewriters.h - Rewriter implementations -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header contains miscellaneous utilities for various front-end actions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:4,Modifiability,Rewrite,RewriteMacrosInInput,4,/// RewriteMacrosInInput - Implement -rewrite-macros mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:38,Modifiability,rewrite,rewrite-macros,38,/// RewriteMacrosInInput - Implement -rewrite-macros mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:29,Testability,test,test,29,/// DoRewriteTest - A simple test for the TokenRewriter class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:22,Usability,simpl,simple,22,/// DoRewriteTest - A simple test for the TokenRewriter class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:4,Modifiability,Rewrite,RewriteIncludesInInput,4,/// RewriteIncludesInInput - Implement -frewrite-includes mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h:30,Modifiability,variab,variables,30,/// Total number of CFGs with variables analyzed for uninitialized; /// uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h:20,Modifiability,variab,variables,20,/// Total number of variables analyzed for uninitialized uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h:18,Modifiability,variab,variables,18,/// Max number of variables analyzed for uninitialized uses in a single; /// function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:48,Integrability,Interface,Interface,48,"//===- CodeCompleteConsumer.h - Code Completion Interface -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the CodeCompleteConsumer class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:30,Integrability,message,message,30,"/// The selector of the given message exactly matches the selector; /// of the current method, which might imply that some kind of delegation; /// is occurring.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:6,Usability,simpl,simplified,6,"/// A simplified classification of types used when determining; /// ""similar"" types for code completion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:18,Usability,simpl,simplified,18,/// Determine the simplified type class of the given canonical type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:51,Integrability,interface,interface,51,"/// Code completion occurred within an Objective-C interface,; /// protocol, or category interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:67,Integrability,protocol,protocol,67,"/// Code completion occurred within an Objective-C interface,; /// protocol, or category interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:89,Integrability,interface,interface,89,"/// Code completion occurred within an Objective-C interface,; /// protocol, or category interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:86,Integrability,interface,interface,86,"/// Code completion occurred within the instance variable list of; /// an Objective-C interface, implementation, or category implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:49,Modifiability,variab,variable,49,"/// Code completion occurred within the instance variable list of; /// an Objective-C interface, implementation, or category implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:50,Integrability,message,message,50,/// Code completion occurred where an Objective-C message receiver; /// is expected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:220,Availability,avail,available,220,/// Code completion occurred on the right-hand side of a member; /// access expression using the dot operator.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:69,Security,access,access,69,/// Code completion occurred on the right-hand side of a member; /// access expression using the dot operator.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:191,Security,access,accessed,191,/// Code completion occurred on the right-hand side of a member; /// access expression using the dot operator.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:222,Availability,avail,available,222,/// Code completion occurred on the right-hand side of a member; /// access expression using the arrow operator.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:69,Security,access,access,69,/// Code completion occurred on the right-hand side of a member; /// access expression using the arrow operator.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:193,Security,access,accessed,193,/// Code completion occurred on the right-hand side of a member; /// access expression using the arrow operator.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:212,Availability,avail,available,212,/// Code completion occurred on the right-hand side of an Objective-C; /// property access expression.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:84,Security,access,access,84,/// Code completion occurred on the right-hand side of an Objective-C; /// property access expression.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:183,Security,access,accessed,183,/// Code completion occurred on the right-hand side of an Objective-C; /// property access expression.; ///; /// The results of this completion are the members of the type being; /// accessed. The type itself is available via; /// \c CodeCompletionContext::getType().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:37,Integrability,protocol,protocol,37,/// Code completion occurred where a protocol name is expected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:83,Modifiability,variab,variable,83,"/// Code completion occurred where an existing name(such as type, function; /// or variable) is expected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:50,Integrability,message,message,50,/// Code completion where an Objective-C instance message is; /// expected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:47,Integrability,message,message,47,/// Code completion where an Objective-C class message is expected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:40,Availability,recover,recovering,40,"/// An unknown context, in which we are recovering from a parsing; /// error and don't know which completions we should give.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:71,Availability,error,error,71,"/// An unknown context, in which we are recovering from a parsing; /// error and don't know which completions we should give.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:40,Safety,recover,recovering,40,"/// An unknown context, in which we are recovering from a parsing; /// error and don't know which completions we should give.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:44,Security,access,access,44,/// The type of the base object in a member access expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:99,Modifiability,variab,variable,99,"/// Retrieve the type that this expression would prefer to have, e.g.,; /// if the expression is a variable initializer or a function argument, the; /// type of the corresponding variable or function parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:179,Modifiability,variab,variable,179,"/// Retrieve the type that this expression would prefer to have, e.g.,; /// if the expression is a variable initializer or a function argument, the; /// type of the corresponding variable or function parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:53,Security,access,access,53,/// Retrieve the type of the base object in a member-access; /// expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:64,Performance,perform,performed,64,"/// A ""string"" used to describe how code completion can; /// be performed for an entity.; ///; /// A code completion string typically shows how a particular entity can be; /// used. For example, the code completion string for a function would show; /// the syntax to call it, including the parentheses, placeholders for the; /// arguments, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:127,Integrability,message,message,127,"/// A piece of text that describes the parameter that corresponds; /// to the code-completion location within a function call, message send,; /// macro invocation, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:44,Integrability,depend,depending,44,"/// Vertical whitespace ('\\n' or '\\r\\n', depending on the; /// platform).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:8,Availability,avail,availability,8,/// The availability of this code-completion result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:17,Availability,avail,availability,17,/// Retrieve the availability of this code completion result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:20,Performance,cache,cached,20,/// Allocator for a cached set of global code completions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:81,Energy Efficiency,allocate,allocated,81,/// Retrieve the allocator into which the code completion; /// strings should be allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:79,Performance,perform,performed,79,/// Take the resulting completion string.; ///; /// This operation can only be performed once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:8,Availability,avail,availability,8,/// The availability of this result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:1459,Deployability,release,release,1459,"/// Fix-its that *must* be applied before inserting the text for the; /// corresponding completion.; ///; /// By default, CodeCompletionBuilder only returns completions with empty; /// fix-its. Extra completions with non-empty fix-its should be explicitly; /// requested by setting CompletionOptions::IncludeFixIts.; ///; /// For the clients to be able to compute position of the cursor after; /// applying fix-its, the following conditions are guaranteed to hold for; /// RemoveRange of the stored fix-its:; /// - Ranges in the fix-its are guaranteed to never contain the completion; /// point (or identifier under completion point, if any) inside them, except; /// at the start or at the end of the range.; /// - If a fix-it range starts or ends with completion point (or starts or; /// ends after the identifier under completion point), it will contain at; /// least one character. It allows to unambiguously recompute completion; /// point after applying the fix-it.; ///; /// The intuition is that provided fix-its change code around the identifier; /// we complete, but are not allowed to touch the identifier itself or the; /// completion point. One example of completions with corrections are the ones; /// replacing '.' with '->' and vice versa:; ///; /// std::unique_ptr<std::vector<int>> vec_ptr;; /// In 'vec_ptr.^', one of the completions is 'push_back', it requires; /// replacing '.' with '->'.; /// In 'vec_ptr->^', one of the completions is 'release', it requires; /// replacing '->' with '.'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:985,Usability,intuit,intuition,985,"/// Fix-its that *must* be applied before inserting the text for the; /// corresponding completion.; ///; /// By default, CodeCompletionBuilder only returns completions with empty; /// fix-its. Extra completions with non-empty fix-its should be explicitly; /// requested by setting CompletionOptions::IncludeFixIts.; ///; /// For the clients to be able to compute position of the cursor after; /// applying fix-its, the following conditions are guaranteed to hold for; /// RemoveRange of the stored fix-its:; /// - Ranges in the fix-its are guaranteed to never contain the completion; /// point (or identifier under completion point, if any) inside them, except; /// at the start or at the end of the range.; /// - If a fix-it range starts or ends with completion point (or starts or; /// ends after the identifier under completion point), it will contain at; /// least one character. It allows to unambiguously recompute completion; /// point after applying the fix-it.; ///; /// The intuition is that provided fix-its change code around the identifier; /// we complete, but are not allowed to touch the identifier itself or the; /// completion point. One example of completions with corrections are the ones; /// replacing '.' with '->' and vice versa:; ///; /// std::unique_ptr<std::vector<int>> vec_ptr;; /// In 'vec_ptr.^', one of the completions is 'push_back', it requires; /// replacing '.' with '->'.; /// In 'vec_ptr->^', one of the completions is 'release', it requires; /// replacing '->' with '.'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:14,Testability,assert,assert,14,// FIXME: Add assert to check FixIts range requirements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:230,Energy Efficiency,allocate,allocate,230,/// Create a new code-completion string that describes how to insert; /// this result into a program.; ///; /// \param S The semantic analysis that created the result.; ///; /// \param Allocator The allocator that will be used to allocate the; /// string itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:13,Integrability,interface,interface,13,/// Abstract interface for a consumer of code-completion; /// information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:34,Modifiability,variab,variable,34,"/// The ""candidate"" is actually a variable, expression, or block; /// for which we only have a function prototype.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:23,Modifiability,variab,variable,23,/// The candidate is a variable or expression of function type; /// for which we have the location of the prototype declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:37,Availability,avail,available,37,"/// The function overload candidate, available when; /// Kind == CK_Function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:46,Availability,avail,available,46,"/// The function template overload candidate, available when; /// Kind == CK_FunctionTemplate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:37,Availability,avail,available,37,"/// The template overload candidate, available when; /// Kind == CK_Template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:99,Security,access,access,99,"/// Whether to include completion items with small fix-its, e.g. change; /// '.' to '->' on member access, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:20,Performance,load,load,20,"/// Hint whether to load data from the external AST in order to provide; /// full results. If false, declarations from the preamble may be omitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:54,Energy Efficiency,allocate,allocate,54,//@}; /// Retrieve the allocator that will be used to allocate; /// code completion strings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:6,Usability,simpl,simple,6,/// A simple code-completion consumer that prints the results it; /// receives in a simple format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:84,Usability,simpl,simple,84,/// A simple code-completion consumer that prints the results it; /// receives in a simple format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteOptions.h:20,Performance,load,load,20,"/// Hint whether to load data from the external AST to provide full results.; /// If false, namespace-level declarations and macros from the preamble may be; /// omitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteOptions.h:94,Security,access,access,94,"/// Include results after corrections (small fix-its), e.g. change '.' to '->'; /// on member access, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Modifiability,Extend,Extend,4,"/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'type::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param TemplateKWLoc The location of the 'template' keyword, if present.; ///; /// \param TL The TypeLoc that describes the type preceding the '::'.; ///; /// \param ColonColonLoc The location of the trailing '::'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Modifiability,Extend,Extend,4,/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'identifier::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param Identifier The identifier.; ///; /// \param IdentifierLoc The location of the identifier.; ///; /// \param ColonColonLoc The location of the trailing '::'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Modifiability,Extend,Extend,4,/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'namespace::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param Namespace The namespace.; ///; /// \param NamespaceLoc The location of the namespace name.; ///; /// \param ColonColonLoc The location of the trailing '::'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Modifiability,Extend,Extend,4,/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'namespace-alias::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param Alias The namespace alias.; ///; /// \param AliasLoc The location of the namespace alias; /// name.; ///; /// \param ColonColonLoc The location of the trailing '::'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:109,Integrability,rout,routine,109,"/// Make a new nested-name-specifier from incomplete source-location; /// information.; ///; /// FIXME: This routine should be used very, very rarely, in cases where we; /// need to synthesize a nested-name-specifier. Most code should instead use; /// \c Adopt() with a proper \c NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:7,Availability,error,error,7,/// An error occurred during parsing of the scope specifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Usability,Clear,Clear,4,/// Clear out all of the type qualifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:100,Availability,error,error,100,"/// These methods set the specified attribute of the DeclSpec and; /// return false if there was no error. If an error occurs (for; /// example, if we tried to set ""auto"" on a spec with ""extern""; /// already set), they return true and set PrevSpec and DiagID; /// such that; /// Diag(Loc, DiagID) << PrevSpec;; /// will yield a useful result.; ///; /// TODO: use a more general approach that still allows these; /// diagnostics to be ignored when desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:113,Availability,error,error,113,"/// These methods set the specified attribute of the DeclSpec and; /// return false if there was no error. If an error occurs (for; /// example, if we tried to set ""auto"" on a spec with ""extern""; /// already set), they return true and set PrevSpec and DiagID; /// such that; /// Diag(Loc, DiagID) << PrevSpec;; /// will yield a useful result.; ///; /// TODO: use a more general approach that still allows these; /// diagnostics to be ignored when desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:214,Availability,error,error,214,"/// Finish - This does final analysis of the declspec, issuing diagnostics for; /// things like ""_Imaginary"" (lacking an FP type). After calling this method,; /// DeclSpec is guaranteed self-consistent, even if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:38,Safety,avoid,avoid,38,"// NOTE: VC++ treats enums as signed, avoid using ObjCPropertyAttribute::Kind",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:16,Usability,guid,guide,16,/// A deduction-guide name (a template-name),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Usability,Clear,Clear,4,"/// Clear out this unqualified-id, setting it to default (invalid); /// state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:88,Usability,guid,guide,88,/// Specify that this unqualified-id was parsed as a template-name for; /// a deduction-guide.; ///; /// \param Template The parsed template-name.; /// \param TemplateLoc The location of the parsed template-name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:49,Energy Efficiency,allocate,allocated,49,"/// ParamInfo - An array of paraminfo objects is allocated whenever a function; /// declarator is parsed. There are two interesting styles of parameters; /// here:; /// K&R-style identifier lists and parameter type lists. K&R-style identifier; /// lists will have information about the identifier, but no type information.; /// Parameter type lists will have type info (if the actions module provides; /// it), but may have null identifier info: e.g. for 'void foo(int X, int)'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:19,Performance,cache,cached,19,/// Pointer to the cached tokens for an exception-specification; /// that has not yet been parsed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:63,Availability,avail,available,63,"/// Pointer to a new[]'d array of declarations that need to be available; /// for lookup inside the function body, if one exists. Does not exist in; /// C++.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:101,Availability,error,error,101,/// Reset the parameter list to having zero parameters.; ///; /// This is used in various places for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:107,Availability,recover,recovery,107,/// Reset the parameter list to having zero parameters.; ///; /// This is used in various places for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:107,Safety,recover,recovery,107,/// Reset the parameter list to having zero parameters.; ///; /// This is used in various places for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:8,Security,access,access,8,/// The access writes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:37,Modifiability,variab,variable,37,// C++11 trailing-type-specifier for variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:88,Safety,avoid,avoid,88,/// InlineParams - This is a local array used for the first function decl; /// chunk to avoid going to the heap for the common case when we have one; /// function chunk in the declarator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:325,Availability,error,error,325,"/// getMutableDeclSpec - Return a non-const version of the DeclSpec. This; /// should be used with extreme care: declspecs can often be shared between; /// multiple declarators, so mutating the DeclSpec affects all of the; /// Declarators. This should only be done when the declspec is known to not; /// be shared or when in error recovery etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:331,Availability,recover,recovery,331,"/// getMutableDeclSpec - Return a non-const version of the DeclSpec. This; /// should be used with extreme care: declspecs can often be shared between; /// multiple declarators, so mutating the DeclSpec affects all of the; /// Declarators. This should only be done when the declspec is known to not; /// be shared or when in error recovery etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:331,Safety,recover,recovery,331,"/// getMutableDeclSpec - Return a non-const version of the DeclSpec. This; /// should be used with extreme care: declspecs can often be shared between; /// multiple declarators, so mutating the DeclSpec affects all of the; /// Declarators. This should only be done when the declspec is known to not; /// be shared or when in error recovery etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Modifiability,Extend,ExtendWithDeclSpec,4,"/// ExtendWithDeclSpec - Extend the declarator source range to include the; /// given declspec, unless its location is invalid. Adopts the range start if; /// the current range start is invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:25,Modifiability,Extend,Extend,25,"/// ExtendWithDeclSpec - Extend the declarator source range to include the; /// given declspec, unless its location is invalid. Adopts the range start if; /// the current range start is invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:19,Usability,clear,clear,19,"// FIXME: It's not clear that the proposal meant to allow file-scope; // structured bindings, but it does.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:123,Performance,perform,perform,123,"// This may not be followed by a direct initializer, but it can't be a; // function declaration either, and we'd prefer to perform a tentative; // parse in order to produce the right diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:85,Security,access,accessible,85,"/// hasName - Whether this declarator has a name, which might be an; /// identifier (accessible via getIdentifier()) or some kind of; /// special C++ name (constructor, destructor, etc.), or a structured; /// binding (which is not exactly a name, but occupies the same position).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:55,Modifiability,extend,extend,55,"/// AddTypeInfo - Add a chunk to this declarator. Also extend the range to; /// EndLoc, which should be the last token of the chunk.; /// This function takes attrs by R-Value reference because it takes ownership; /// of those attributes from the parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:55,Modifiability,extend,extend,55,"/// AddTypeInfo - Add a chunk to this declarator. Also extend the range to; /// EndLoc, which should be the last token of the chunk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:277,Integrability,rout,routine,277,"/// Determine whether the declaration that will be produced from; /// this declaration will be a function.; ///; /// A declaration can declare a function even if the declarator itself; /// isn't a function declarator, if the type specifier refers to a function; /// type. This routine checks for both cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:343,Modifiability,extend,extends,343,"/// takeAttributes - Takes attributes from the given parsed-attributes; /// set and add them to this declarator.; ///; /// These examples both add 3 attributes to ""var"":; /// short int var __attribute__((aligned(16),common,deprecated));; /// short int x, __attribute__((aligned(16)) var; /// __attribute__((common,deprecated));; ///; /// Also extends the range of the declarator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:456,Security,Access,AccessedEntity,456,"//===- DelayedDiagnostic.h - Delayed declarator diagnostics -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the classes clang::DelayedDiagnostic and; /// clang::AccessedEntity.; ///; /// DelayedDiangostic is used to record diagnostics that are being; /// conditionally produced during declarator parsing. Certain kinds of; /// diagnostics -- notably deprecation and access control -- are suppressed; /// based on semantic properties of the parsed declaration that aren't known; /// until it is fully parsed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:661,Security,access,access,661,"//===- DelayedDiagnostic.h - Delayed declarator diagnostics -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the classes clang::DelayedDiagnostic and; /// clang::AccessedEntity.; ///; /// DelayedDiangostic is used to record diagnostics that are being; /// conditionally produced during declarator parsing. Certain kinds of; /// diagnostics -- notably deprecation and access control -- are suppressed; /// based on semantic properties of the parsed declaration that aren't known; /// until it is fully parsed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:24,Security,access,accessed,24,"/// A declaration being accessed, together with information about how; /// it was accessed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:82,Security,access,accessed,82,"/// A declaration being accessed, together with information about how; /// it was accessed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:51,Security,access,accessing,51,"/// Retrieves the base object type, important when accessing; /// an instance member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:28,Performance,perform,performed,28,"/// Sets a diagnostic to be performed. The diagnostic is given; /// four (additional) arguments:; /// %0 - 0 if the entity was private, 1 if protected; /// %1 - the DeclarationName of the entity; /// %2 - the TypeDecl type of the naming class; /// %3 - the TypeDecl type of the declaring class",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:17,Integrability,message,message,17,/// A diagnostic message which has been conditionally emitted pending; /// the complete parsing of the current declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:4,Security,Access,Access,4,/// Access control.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Designator.h:401,Integrability,interface,interfaces,401,"//===--- Designator.h - Initialization Designator ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces used to represent designators (a la; // C99 designated initializers) during parsing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Designator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Designator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/EnterExpressionEvaluationContext.h:42,Performance,perform,performed,42,"// In C++11 onwards, narrowing checks are performed on the contents of; // braced-init-lists, even when they occur within unevaluated operands.; // Therefore we still need to instantiate constexpr functions used in such; // a context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/EnterExpressionEvaluationContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/EnterExpressionEvaluationContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:46,Integrability,Interface,Interface,46,"//===--- ExternalSemaSource.h - External Sema Interface ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ExternalSemaSource interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:424,Integrability,interface,interface,424,"//===--- ExternalSemaSource.h - External Sema Interface ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ExternalSemaSource interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:6,Usability,simpl,simple,6,/// A simple structure that captures a vtable use for the purposes of; /// the \c ExternalSemaSource.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:16,Integrability,interface,interface,16,/// An abstract interface that should be implemented by; /// external AST sources that also provide information for semantic; /// analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:77,Performance,perform,perform,77,/// Initialize the semantic source with the Sema instance; /// being used to perform semantic analysis on the abstract syntax; /// tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:56,Availability,avail,available,56,/// Inform the semantic consumer that Sema is no longer available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:4,Performance,Load,Load,4,/// Load the contents of the global method pool for a given; /// selector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:4,Performance,Load,Load,4,/// Load the contents of the global method pool for a given; /// selector if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:4,Performance,Load,Load,4,"/// Load the set of namespaces that are known to the external source,; /// which will be used during typo correction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:54,Modifiability,variab,variables,54,"/// Load the set of used but not defined functions or variables with; /// internal linkage, or used but not defined internal functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:4,Performance,Load,Load,4,"/// Load the set of used but not defined functions or variables with; /// internal linkage, or used but not defined internal functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:133,Availability,recover,recovered,133,"/// Do last resort, unqualified lookup on a LookupResult that; /// Sema cannot find.; ///; /// \param R a LookupResult that is being recovered.; ///; /// \param S the Scope of the identifier occurrence.; ///; /// \return true to tell Sema to recover using the LookupResult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:242,Availability,recover,recover,242,"/// Do last resort, unqualified lookup on a LookupResult that; /// Sema cannot find.; ///; /// \param R a LookupResult that is being recovered.; ///; /// \param S the Scope of the identifier occurrence.; ///; /// \return true to tell Sema to recover using the LookupResult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:133,Safety,recover,recovered,133,"/// Do last resort, unqualified lookup on a LookupResult that; /// Sema cannot find.; ///; /// \param R a LookupResult that is being recovered.; ///; /// \param S the Scope of the identifier occurrence.; ///; /// \return true to tell Sema to recover using the LookupResult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:242,Safety,recover,recover,242,"/// Do last resort, unqualified lookup on a LookupResult that; /// Sema cannot find.; ///; /// \param R a LookupResult that is being recovered.; ///; /// \param S the Scope of the identifier occurrence.; ///; /// \return true to tell Sema to recover using the LookupResult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:222,Integrability,rout,routine,222,/// Read the set of tentative definitions known to the external Sema; /// source.; ///; /// The external source should append its own tentative definitions to the; /// given vector of tentative definitions. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:220,Integrability,rout,routine,220,"/// Read the set of unused file-scope declarations known to the; /// external Sema source.; ///; /// The external source should append its own unused, filed-scope to the; /// given vector of declarations. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:217,Integrability,rout,routine,217,/// Read the set of delegating constructors known to the; /// external Sema source.; ///; /// The external source should append its own delegating constructors to the; /// given vector of declarations. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:227,Integrability,rout,routine,227,/// Read the set of ext_vector type declarations known to the; /// external Sema source.; ///; /// The external source should append its own ext_vector type declarations to; /// the given vector of declarations. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:212,Integrability,rout,routine,212,/// Read the set of potentially unused typedefs known to the source.; ///; /// The external source should append its own potentially unused local; /// typedefs to the given vector of declarations. Note that this routine may; /// be invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:208,Integrability,rout,routine,208,/// Read the set of referenced selectors known to the; /// external Sema source.; ///; /// The external source should append its own referenced selectors to the; /// given vector of selectors. Note that this routine; /// may be invoked multiple times; the external source should take care not; /// to introduce the same selectors repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:211,Integrability,rout,routine,211,"/// Read the set of weak, undeclared identifiers known to the; /// external Sema source.; ///; /// The external source should append its own weak, undeclared identifiers to; /// the given vector. Note that this routine may be invoked multiple times;; /// the external source should take care not to introduce the same identifiers; /// repeatedly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:174,Integrability,rout,routine,174,/// Read the set of used vtables known to the external Sema source.; ///; /// The external source should append its own used vtables to the given; /// vector. Note that this routine may be invoked multiple times; the external; /// source should take care not to introduce the same vtables repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:199,Integrability,rout,routine,199,/// Read the set of pending instantiations known to the external; /// Sema source.; ///; /// The external source should append its own pending instantiations to the; /// given vector. Note that this routine may be invoked multiple times; the; /// external source should take care not to introduce the same instantiations; /// repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:185,Integrability,rout,routine,185,/// Read the set of late parsed template functions for this source.; ///; /// The external source should insert its own late parsed template functions; /// into the map. Note that this routine may be invoked multiple times; the; /// external source should take care not to introduce the same map entries; /// repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:212,Integrability,rout,routine,212,/// Read the set of decls to be checked for deferred diags.; ///; /// The external source should append its own potentially emitted function; /// and variable decls which may cause deferred diags. Note that this routine; /// may be invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:150,Modifiability,variab,variable,150,/// Read the set of decls to be checked for deferred diags.; ///; /// The external source should append its own potentially emitted function; /// and variable decls which may cause deferred diags. Note that this routine; /// may be invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:232,Availability,repair,repair,232,"/// \copydoc Sema::CorrectTypo; /// \note LookupKind must correspond to a valid Sema::LookupNameKind; ///; /// ExternalSemaSource::CorrectTypo is always given the first chance to; /// correct a typo (really, to offer suggestions to repair a failed lookup).; /// It will even be called when SpellChecking is turned off or after a; /// fatal error has already been detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:340,Availability,error,error,340,"/// \copydoc Sema::CorrectTypo; /// \note LookupKind must correspond to a valid Sema::LookupNameKind; ///; /// ExternalSemaSource::CorrectTypo is always given the first chance to; /// correct a typo (really, to offer suggestions to repair a failed lookup).; /// It will even be called when SpellChecking is turned off or after a; /// fatal error has already been detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:363,Safety,detect,detected,363,"/// \copydoc Sema::CorrectTypo; /// \note LookupKind must correspond to a valid Sema::LookupNameKind; ///; /// ExternalSemaSource::CorrectTypo is always given the first chance to; /// correct a typo (really, to offer suggestions to repair a failed lookup).; /// It will even be called when SpellChecking is turned off or after a; /// fatal error has already been detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/HLSLExternalSemaSource.h:428,Integrability,interface,interface,428,"//===--- HLSLExternalSemaSource.h - HLSL Sema Source ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the HLSLExternalSemaSource interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/HLSLExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/HLSLExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/HLSLExternalSemaSource.h:77,Performance,perform,perform,77,/// Initialize the semantic source with the Sema instance; /// being used to perform semantic analysis on the abstract syntax; /// tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/HLSLExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/HLSLExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/HLSLExternalSemaSource.h:56,Availability,avail,available,56,/// Inform the semantic consumer that Sema is no longer available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/HLSLExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/HLSLExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h:154,Energy Efficiency,efficient,efficient,154,/// IdentifierResolver - Keeps track of shadowed decls on enclosing; /// scopes. It manages the shadowing chains of declaration names and; /// implements efficient decl lookup based on a declaration name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h:128,Integrability,depend,depending,128,/// iterator - Iterate over the decls of a specified declaration name.; /// It will walk or not the parent declaration contexts depending on how; /// it was instantiated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h:91,Integrability,depend,depending,91,/// A IdDeclInfo::DeclsTy::iterator that walks or not the parent declaration; /// contexts depending on 'LookInParentCtx'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:38,Modifiability,variab,variable,38,/// The entity being initialized is a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:73,Energy Efficiency,allocate,allocated,73,/// The entity being initialized is an object (or array of; /// objects) allocated via new.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:67,Modifiability,variab,variable,67,/// The entity being initialized is the field that captures a; /// variable in a lambda.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:94,Security,audit,audited,94,/// The entity being initialized is a function parameter; function; /// is member of group of audited CF APIs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:179,Deployability,update,updated,179,"// Note: err_init_conversion_failed in DiagnosticSemaKinds.td uses this; // enum as an index for its first %select. When modifying this list,; // that diagnostic text needs to be updated as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:86,Performance,optimiz,optimization,86,/// Whether the entity being initialized may end up using the; /// named return value optimization (NRVO).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:124,Performance,perform,perform,124,"/// When Kind == EK_Member, whether this is an implicit member; /// initialization in a copy or move constructor. These can perform array; /// copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:20,Modifiability,variab,variable,20,/// The name of the variable being captured by an EK_LambdaCapture.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:87,Modifiability,variab,variable,87,"/// When Kind == EK_Variable, EK_Member, EK_Binding, or; /// EK_TemplateParameter, the variable, binding, or template parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:125,Modifiability,inherit,inherited,125,"/// When Kind == EK_Base, the base specifier that provides the; /// base class. The integer specifies whether the base is an inherited; /// virtual base.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:43,Modifiability,variab,variable,43,/// Create the initialization entity for a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:92,Performance,perform,performing,92,"/// Create the initialization entity for the result of a; /// function, throwing an object, performing an explicit cast, or; /// initializing a parameter for which there is no declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:43,Modifiability,variab,variable,43,/// Create the initialization entity for a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:51,Energy Efficiency,allocate,allocated,51,/// Create the initialization entity for an object allocated via new.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:17,Modifiability,variab,variable,17,"/// Retrieve the variable, parameter, or field being; /// initialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:77,Performance,optimiz,optimization,77,"/// Determine whether this initialization allows the named return; /// value optimization, which also applies to thrown objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:34,Modifiability,inherit,inherited,34,/// Return whether the base is an inherited virtual base.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:87,Modifiability,variab,variable,87,/// Determine the location of the capture when initializing; /// field from a captured variable in a lambda.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:64,Availability,error,error,64,"/// Dump a representation of the initialized entity to standard error,; /// for debugging purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:47,Performance,perform,performed,47,"/// Describes the kind of initialization being performed, along with; /// location information for tokens related to the initialization (equal sign,; /// parentheses).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:37,Performance,perform,performed,37,/// The kind of initialization being performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:37,Performance,perform,performed,37,/// The kind of initialization being performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:251,Performance,perform,performing,251,"/// Retrieve whether this initialization allows the use of explicit; /// conversion functions when binding a reference. If the reference is the; /// first parameter in a copy or move constructor, such conversions are; /// permitted even though we are performing copy-initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:42,Availability,failure,failure,42,/// A failed initialization sequence. The failure kind tells what; /// happened.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:6,Integrability,depend,dependent,6,"/// A dependent initialization, which could not be; /// type-checked due to the presence of dependent types or; /// dependently-typed expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:92,Integrability,depend,dependent,92,"/// A dependent initialization, which could not be; /// type-checked due to the presence of dependent types or; /// dependently-typed expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:116,Integrability,depend,dependently-typed,116,"/// A dependent initialization, which could not be; /// type-checked due to the presence of dependent types or; /// dependently-typed expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform a derived-to-base cast, producing an rvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform a derived-to-base cast, producing an xvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform a derived-to-base cast, producing an lvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform a user-defined conversion, either via a conversion; /// function or via a constructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform a qualification conversion, producing a prvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform a qualification conversion, producing an xvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform a qualification conversion, producing an lvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform a function reference conversion, see [dcl.init.ref]p4.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,/// Perform a conversion adding _Atomic to a type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,/// Perform an implicit conversion sequence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,/// Perform an implicit conversion sequence without narrowing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,/// Perform list-initialization without a constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,/// Perform initialization via a constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform initialization via a constructor, taking arguments from; /// a single InitListExpr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,/// Perform initialization via a constructor taking a single; /// std::initializer_list argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:66,Integrability,wrap,wrapping,66,"/// When Kind = SK_RewrapInitList, the syntactic form of the; /// wrapping list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Modifiability,Variab,Variable-length,4,/// Variable-length array must not have an initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:38,Availability,failure,failure,38,/// The incomplete type that caused a failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:11,Performance,perform,perform,11,"/// Try to perform initialization of the given entity, creating a; /// record of the steps required to perform the initialization.; ///; /// The generated initialization sequence will either contain enough; /// information to diagnose; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization.; ///; /// \param TopLevelOfInitList true if we are initializing from an expression; /// at the top level inside an initializer list. This disallows; /// narrowing conversions in C++11 onwards.; /// \param TreatUnavailableAsInvalid true if we want to treat unavailable; /// as invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:103,Performance,perform,perform,103,"/// Try to perform initialization of the given entity, creating a; /// record of the steps required to perform the initialization.; ///; /// The generated initialization sequence will either contain enough; /// information to diagnose; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization.; ///; /// \param TopLevelOfInitList true if we are initializing from an expression; /// at the top level inside an initializer list. This disallows; /// narrowing conversions in C++11 onwards.; /// \param TreatUnavailableAsInvalid true if we want to treat unavailable; /// as invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:393,Performance,perform,performed,393,"/// Try to perform initialization of the given entity, creating a; /// record of the steps required to perform the initialization.; ///; /// The generated initialization sequence will either contain enough; /// information to diagnose; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization.; ///; /// \param TopLevelOfInitList true if we are initializing from an expression; /// at the top level inside an initializer list. This disallows; /// narrowing conversions in C++11 onwards.; /// \param TreatUnavailableAsInvalid true if we want to treat unavailable; /// as invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:394,Integrability,rout,routine,394,"/// Perform the actual initialization of the given entity based on; /// the computed initialization sequence.; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization, ownership of; /// which is transferred into the routine.; ///; /// \param ResultType if non-NULL, will be set to the type of the; /// initialized object, which is the type of the declaration in most; /// cases. However, when the initialized object is a variable of; /// incomplete array type and the initializer is an initializer; /// list, this type will be set to the completed array type.; ///; /// \returns an expression that performs the actual object initialization, if; /// the initialization is well-formed. Otherwise, emits diagnostics; /// and returns an invalid expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:599,Modifiability,variab,variable,599,"/// Perform the actual initialization of the given entity based on; /// the computed initialization sequence.; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization, ownership of; /// which is transferred into the routine.; ///; /// \param ResultType if non-NULL, will be set to the type of the; /// initialized object, which is the type of the declaration in most; /// cases. However, when the initialized object is a variable of; /// incomplete array type and the initializer is an initializer; /// list, this type will be set to the completed array type.; ///; /// \returns an expression that performs the actual object initialization, if; /// the initialization is well-formed. Otherwise, emits diagnostics; /// and returns an invalid expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:4,Performance,Perform,Perform,4,"/// Perform the actual initialization of the given entity based on; /// the computed initialization sequence.; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization, ownership of; /// which is transferred into the routine.; ///; /// \param ResultType if non-NULL, will be set to the type of the; /// initialized object, which is the type of the declaration in most; /// cases. However, when the initialized object is a variable of; /// incomplete array type and the initializer is an initializer; /// list, this type will be set to the completed array type.; ///; /// \returns an expression that performs the actual object initialization, if; /// the initialization is well-formed. Otherwise, emits diagnostics; /// and returns an invalid expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:268,Performance,perform,performed,268,"/// Perform the actual initialization of the given entity based on; /// the computed initialization sequence.; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization, ownership of; /// which is transferred into the routine.; ///; /// \param ResultType if non-NULL, will be set to the type of the; /// initialized object, which is the type of the declaration in most; /// cases. However, when the initialized object is a variable of; /// incomplete array type and the initializer is an initializer; /// list, this type will be set to the completed array type.; ///; /// \returns an expression that performs the actual object initialization, if; /// the initialization is well-formed. Otherwise, emits diagnostics; /// and returns an invalid expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:776,Performance,perform,performs,776,"/// Perform the actual initialization of the given entity based on; /// the computed initialization sequence.; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization, ownership of; /// which is transferred into the routine.; ///; /// \param ResultType if non-NULL, will be set to the type of the; /// initialized object, which is the type of the declaration in most; /// cases. However, when the initialized object is a variable of; /// incomplete array type and the initializer is an initializer; /// list, this type will be set to the completed array type.; ///; /// \returns an expression that performs the actual object initialization, if; /// the initialization is well-formed. Otherwise, emits diagnostics; /// and returns an invalid expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:46,Performance,perform,performs,46,"/// Add a new step in the initialization that performs a derived-to-; /// base cast.; ///; /// \param BaseType the base type to which we will be casting.; ///; /// \param Category Indicates whether the result will be treated as an; /// rvalue, an xvalue, or an lvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:158,Modifiability,extend,extending,158,/// Add a new step binding a reference to an object.; ///; /// \param BindingTemporary True if we are binding a reference to a temporary; /// object (thereby extending its lifetime); false if we are binding to an; /// lvalue or an lvalue treated as an rvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:24,Performance,perform,performs,24,/// Add a new step that performs a qualification conversion to the; /// given type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:24,Performance,perform,performs,24,/// Add a new step that performs a function reference conversion to the; /// given type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:24,Performance,perform,performs,24,/// Add a new step that performs conversion from non-atomic to atomic; /// type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:53,Usability,clear,clear,53,"/// Add a C assignment step.; //; // FIXME: It isn't clear whether this should ever be needed;; // ideally, we would handle everything needed in C in the common; // path. However, that isn't the case yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:75,Availability,error,error,75,"/// Dump a representation of this initialization sequence to; /// standard error, for debugging purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:92,Integrability,depend,dependent,92,"/// No entity found met the criteria within the current; /// instantiation,, but there were dependent base classes of the; /// current instantiation that could not be searched.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:111,Integrability,depend,dependent,111,/// Name lookup found an unresolvable value declaration; /// and cannot yet complete. This only happens in C++ dependent; /// contexts with dependent using declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:140,Integrability,depend,dependent,140,/// Name lookup found an unresolvable value declaration; /// and cannot yet complete. This only happens in C++ dependent; /// contexts with dependent using declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:304,Availability,error,error,304,"/// Name lookup results in an ambiguity because multiple; /// entities that meet the lookup criteria were found in; /// subobjects of different types. For example:; /// @code; /// struct A { void f(int); }; /// struct B { void f(double); }; /// struct C : A, B { };; /// void test(C c) {; /// c.f(0); // error: A::f and B::f come from subobjects of different; /// // types. overload resolution is not performed.; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:401,Performance,perform,performed,401,"/// Name lookup results in an ambiguity because multiple; /// entities that meet the lookup criteria were found in; /// subobjects of different types. For example:; /// @code; /// struct A { void f(int); }; /// struct B { void f(double); }; /// struct C : A, B { };; /// void test(C c) {; /// c.f(0); // error: A::f and B::f come from subobjects of different; /// // types. overload resolution is not performed.; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:276,Testability,test,test,276,"/// Name lookup results in an ambiguity because multiple; /// entities that meet the lookup criteria were found in; /// subobjects of different types. For example:; /// @code; /// struct A { void f(int); }; /// struct B { void f(double); }; /// struct C : A, B { };; /// void test(C c) {; /// c.f(0); // error: A::f and B::f come from subobjects of different; /// // types. overload resolution is not performed.; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:332,Availability,error,error,332,"/// Name lookup results in an ambiguity because multiple; /// nonstatic entities that meet the lookup criteria were found; /// in different subobjects of the same type. For example:; /// @code; /// struct A { int x; };; /// struct B : A { };; /// struct C : A { };; /// struct D : B, C { };; /// int test(D d) {; /// return d.x; // error: 'x' is found in two A subobjects (of B and C); /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:300,Testability,test,test,300,"/// Name lookup results in an ambiguity because multiple; /// nonstatic entities that meet the lookup criteria were found; /// in different subobjects of the same type. For example:; /// @code; /// struct A { int x; };; /// struct B : A { };; /// struct C : A { };; /// struct D : B, C { };; /// int test(D d) {; /// return d.x; // error: 'x' is found in two A subobjects (of B and C); /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:295,Availability,error,error,295,/// Name lookup results in an ambiguity because multiple definitions; /// of entity that meet the lookup criteria were found in different; /// declaration contexts.; /// @code; /// namespace A {; /// int i;; /// namespace B { int i; }; /// int test() {; /// using namespace B;; /// return i; // error 'i' is found in namespace A and A::B; /// }; /// }; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:244,Testability,test,test,244,/// Name lookup results in an ambiguity because multiple definitions; /// of entity that meet the lookup criteria were found in different; /// declaration contexts.; /// @code; /// namespace A {; /// int i;; /// namespace B { int i; }; /// int test() {; /// using namespace B;; /// return i; // error 'i' is found in namespace A and A::B; /// }; /// }; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:74,Modifiability,variab,variables,74,/// Name lookup results in an ambiguity because multiple placeholder; /// variables were found in the same scope.; /// @code; /// void f() {; /// int _ = 0;; /// int _ = 0;; /// return _; // ambiguous use of placeholder variable; /// }; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:220,Modifiability,variab,variable,220,/// Name lookup results in an ambiguity because multiple placeholder; /// variables were found in the same scope.; /// @code; /// void f() {; /// int _ = 0;; /// int _ = 0;; /// return _; // ambiguous use of placeholder variable; /// }; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:347,Availability,error,error,347,/// Name lookup results in an ambiguity because an entity with a; /// tag name was hidden by an entity with an ordinary name from; /// a different context.; /// @code; /// namespace A { struct Foo {}; }; /// namespace B { void Foo(); }; /// namespace C {; /// using namespace A;; /// using namespace B;; /// }; /// void test() {; /// C::Foo(); // error: tag 'A::Foo' is hidden by an object in a; /// // different namespace; /// }; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:320,Testability,test,test,320,/// Name lookup results in an ambiguity because an entity with a; /// tag name was hidden by an entity with an ordinary name from; /// a different context.; /// @code; /// namespace A { struct Foo {}; }; /// namespace B { void Foo(); }; /// namespace C {; /// using namespace A;; /// using namespace B;; /// }; /// void test() {; /// C::Foo(); // error: tag 'A::Foo' is hidden by an object in a; /// // different namespace; /// }; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:31,Performance,perform,perform,31,/// Gets the kind of lookup to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:68,Availability,recover,recovery,68,"/// Specify whether hidden declarations are visible, e.g.,; /// for recovery reasons.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:68,Safety,recover,recovery,68,"/// Specify whether hidden declarations are visible, e.g.,; /// for recovery reasons.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:81,Integrability,inject,injected-class-names,81,"/// Sets whether this is a template-name lookup. For template-name lookups,; /// injected-class-names are treated as naming a template rather than a; /// template specialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:81,Security,inject,injected-class-names,81,"/// Sets whether this is a template-name lookup. For template-name lookups,; /// injected-class-names are treated as naming a template rather than a; /// template specialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:108,Safety,safe,safe,108,"/// Determines if this names a single result which is not an; /// unresolved value using decl. If so, it is safe to call; /// getFoundDecl().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:37,Availability,mask,mask,37,/// Returns the identifier namespace mask for this lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:45,Performance,perform,performing,45,/// Returns whether these results arose from performing a; /// lookup into a class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:820,Integrability,rout,routines,820,"/// Returns the 'naming class' for this lookup, i.e. the; /// class which was looked into to find these results.; ///; /// C++0x [class.access.base]p5:; /// The access to a member is affected by the class in which the; /// member is named. This naming class is the class in which the; /// member name was looked up and found. [Note: this class can be; /// explicit, e.g., when a qualified-id is used, or implicit,; /// e.g., when a class member access operator (5.2.5) is used; /// (including cases where an implicit ""this->"" is added). If both; /// a class member access operator and a qualified-id are used to; /// name the member (as in p->T::m), the class naming the member; /// is the class named by the nested-name-specifier of the; /// qualified-id (that is, T). -- end note ]; ///; /// This is set by the lookup routines when they find results in a class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:136,Security,access,access,136,"/// Returns the 'naming class' for this lookup, i.e. the; /// class which was looked into to find these results.; ///; /// C++0x [class.access.base]p5:; /// The access to a member is affected by the class in which the; /// member is named. This naming class is the class in which the; /// member name was looked up and found. [Note: this class can be; /// explicit, e.g., when a qualified-id is used, or implicit,; /// e.g., when a class member access operator (5.2.5) is used; /// (including cases where an implicit ""this->"" is added). If both; /// a class member access operator and a qualified-id are used to; /// name the member (as in p->T::m), the class naming the member; /// is the class named by the nested-name-specifier of the; /// qualified-id (that is, T). -- end note ]; ///; /// This is set by the lookup routines when they find results in a class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:161,Security,access,access,161,"/// Returns the 'naming class' for this lookup, i.e. the; /// class which was looked into to find these results.; ///; /// C++0x [class.access.base]p5:; /// The access to a member is affected by the class in which the; /// member is named. This naming class is the class in which the; /// member name was looked up and found. [Note: this class can be; /// explicit, e.g., when a qualified-id is used, or implicit,; /// e.g., when a class member access operator (5.2.5) is used; /// (including cases where an implicit ""this->"" is added). If both; /// a class member access operator and a qualified-id are used to; /// name the member (as in p->T::m), the class naming the member; /// is the class named by the nested-name-specifier of the; /// qualified-id (that is, T). -- end note ]; ///; /// This is set by the lookup routines when they find results in a class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:445,Security,access,access,445,"/// Returns the 'naming class' for this lookup, i.e. the; /// class which was looked into to find these results.; ///; /// C++0x [class.access.base]p5:; /// The access to a member is affected by the class in which the; /// member is named. This naming class is the class in which the; /// member name was looked up and found. [Note: this class can be; /// explicit, e.g., when a qualified-id is used, or implicit,; /// e.g., when a class member access operator (5.2.5) is used; /// (including cases where an implicit ""this->"" is added). If both; /// a class member access operator and a qualified-id are used to; /// name the member (as in p->T::m), the class naming the member; /// is the class named by the nested-name-specifier of the; /// qualified-id (that is, T). -- end note ]; ///; /// This is set by the lookup routines when they find results in a class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:565,Security,access,access,565,"/// Returns the 'naming class' for this lookup, i.e. the; /// class which was looked into to find these results.; ///; /// C++0x [class.access.base]p5:; /// The access to a member is affected by the class in which the; /// member is named. This naming class is the class in which the; /// member name was looked up and found. [Note: this class can be; /// explicit, e.g., when a qualified-id is used, or implicit,; /// e.g., when a class member access operator (5.2.5) is used; /// (including cases where an implicit ""this->"" is added). If both; /// a class member access operator and a qualified-id are used to; /// name the member (as in p->T::m), the class naming the member; /// is the class named by the nested-name-specifier of the; /// qualified-id (that is, T). -- end note ]; ///; /// This is set by the lookup routines when they find results in a class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:56,Security,access,access,56,/// Add a declaration to these results with its natural access.; /// Does not test the acceptance criteria.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:78,Testability,test,test,78,/// Add a declaration to these results with its natural access.; /// Does not test the acceptance criteria.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:54,Security,access,access,54,/// Add a declaration to these results with the given access.; /// Does not test the acceptance criteria.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:76,Testability,test,test,76,/// Add a declaration to these results with the given access.; /// Does not test the acceptance criteria.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:80,Integrability,depend,dependent,80,/// Determine whether no result was found because we could not; /// search into dependent base classes of the current instantiation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:86,Integrability,depend,dependent,86,"/// Note that while no result was found in the current instantiation,; /// there were dependent base classes that could not be searched.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:55,Performance,perform,performing,55,/// Note that we found and ignored a declaration while performing; /// lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:84,Performance,perform,performed,84,/// Re-resolves the result kind of the lookup after a set of; /// removals has been performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:48,Testability,Assert,Asserts,48,/// Fetch the unique decl found by this lookup. Asserts; /// that one was found.; ///; /// This is intended for users who have examined the result kind; /// and are certain that there is only one result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:4,Usability,Clear,Clears,4,/// Clears out any current state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:4,Usability,Clear,Clears,4,/// Clears out any current state and re-initializes for a; /// different kind of lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:89,Security,access,access,89,/// Suppress the diagnostics that would normally fire because of this; /// lookup due to access control violations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:50,Security,access,access,50,/// Determines whether this lookup is suppressing access control diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:71,Security,access,access,71,"/// Replaces the current entry with the given one, preserving the; /// access bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:10,Modifiability,config,configure,10,// set by configure(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:46,Integrability,depend,dependent,46,/// A class for storing results from argument-dependent lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:55,Integrability,Interface,Interface,55,"//===--- MultiplexExternalSemaSource.h - External Sema Interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines ExternalSemaSource interface, dispatching to all clients; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:420,Integrability,interface,interface,420,"//===--- MultiplexExternalSemaSource.h - External Sema Interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines ExternalSemaSource interface, dispatching to all clients; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:16,Integrability,interface,interface,16,/// An abstract interface that should be implemented by; /// external AST sources that also provide information for semantic; /// analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:50,Modifiability,extend,extended,50,/// Complete the redeclaration chain if it's been extended since the; /// previous generation of the AST source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:114,Integrability,rout,routine,114,"/// Gives the external AST source an opportunity to complete an; /// incomplete Objective-C class.; ///; /// This routine will only be invoked if the ""externally completed"" bit is; /// set on the ObjCInterfaceDecl via the function; /// \c ObjCInterfaceDecl::setExternallyCompleted().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:4,Performance,Load,Loads,4,/// Loads comment ranges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:55,Integrability,rout,routine,55,"/// Perform layout on the given record.; ///; /// This routine allows the external AST source to provide an specific; /// layout for a record, overriding the layout that would normally be; /// constructed. It is intended for clients who receive specific layout; /// details rather than source code (such as LLDB). The client is expected; /// to fill in the field offsets, base offsets, virtual base offsets, and; /// complete object size.; ///; /// \param Record The record whose layout is being requested.; ///; /// \param Size The final size of the record, in bits.; ///; /// \param Alignment The final alignment of the record, in bits.; ///; /// \param FieldOffsets The offset of each of the fields within the record,; /// expressed in bits. All of the fields must be provided with offsets.; ///; /// \param BaseOffsets The offset of each of the direct, non-virtual base; /// classes. If any bases are not given offsets, the bases will be laid; /// out according to the ABI.; ///; /// \param VirtualBaseOffsets The offset of each of the virtual base classes; /// (either direct or not). If any bases are not given offsets, the bases will; /// be laid out according to the ABI.; ///; /// \returns true if the record layout was provided, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:4,Performance,Perform,Perform,4,"/// Perform layout on the given record.; ///; /// This routine allows the external AST source to provide an specific; /// layout for a record, overriding the layout that would normally be; /// constructed. It is intended for clients who receive specific layout; /// details rather than source code (such as LLDB). The client is expected; /// to fill in the field offsets, base offsets, virtual base offsets, and; /// complete object size.; ///; /// \param Record The record whose layout is being requested.; ///; /// \param Size The final size of the record, in bits.; ///; /// \param Alignment The final alignment of the record, in bits.; ///; /// \param FieldOffsets The offset of each of the fields within the record,; /// expressed in bits. All of the fields must be provided with offsets.; ///; /// \param BaseOffsets The offset of each of the direct, non-virtual base; /// classes. If any bases are not given offsets, the bases will be laid; /// out according to the ABI.; ///; /// \param VirtualBaseOffsets The offset of each of the virtual base classes; /// (either direct or not). If any bases are not given offsets, the bases will; /// be laid out according to the ABI.; ///; /// \returns true if the record layout was provided, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:65,Availability,down,down,65,"/// Return the amount of memory used by memory buffers, breaking down; /// by heap-backed versus mmap'ed memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:261,Performance,perform,perform,261,//===--------------------------------------------------------------------===//; // ExternalSemaSource.; //===--------------------------------------------------------------------===//; /// Initialize the semantic source with the Sema instance; /// being used to perform semantic analysis on the abstract syntax; /// tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:56,Availability,avail,available,56,/// Inform the semantic consumer that Sema is no longer available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:4,Performance,Load,Load,4,/// Load the contents of the global method pool for a given; /// selector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:4,Performance,Load,Load,4,/// Load the contents of the global method pool for a given; /// selector if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:4,Performance,Load,Load,4,"/// Load the set of namespaces that are known to the external source,; /// which will be used during typo correction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:54,Modifiability,variab,variables,54,"/// Load the set of used but not defined functions or variables with; /// internal linkage, or used but not defined inline functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:4,Performance,Load,Load,4,"/// Load the set of used but not defined functions or variables with; /// internal linkage, or used but not defined inline functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:133,Availability,recover,recovered,133,"/// Do last resort, unqualified lookup on a LookupResult that; /// Sema cannot find.; ///; /// \param R a LookupResult that is being recovered.; ///; /// \param S the Scope of the identifier occurrence.; ///; /// \return true to tell Sema to recover using the LookupResult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:242,Availability,recover,recover,242,"/// Do last resort, unqualified lookup on a LookupResult that; /// Sema cannot find.; ///; /// \param R a LookupResult that is being recovered.; ///; /// \param S the Scope of the identifier occurrence.; ///; /// \return true to tell Sema to recover using the LookupResult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:133,Safety,recover,recovered,133,"/// Do last resort, unqualified lookup on a LookupResult that; /// Sema cannot find.; ///; /// \param R a LookupResult that is being recovered.; ///; /// \param S the Scope of the identifier occurrence.; ///; /// \return true to tell Sema to recover using the LookupResult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:242,Safety,recover,recover,242,"/// Do last resort, unqualified lookup on a LookupResult that; /// Sema cannot find.; ///; /// \param R a LookupResult that is being recovered.; ///; /// \param S the Scope of the identifier occurrence.; ///; /// \return true to tell Sema to recover using the LookupResult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:222,Integrability,rout,routine,222,/// Read the set of tentative definitions known to the external Sema; /// source.; ///; /// The external source should append its own tentative definitions to the; /// given vector of tentative definitions. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:220,Integrability,rout,routine,220,"/// Read the set of unused file-scope declarations known to the; /// external Sema source.; ///; /// The external source should append its own unused, filed-scope to the; /// given vector of declarations. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:217,Integrability,rout,routine,217,/// Read the set of delegating constructors known to the; /// external Sema source.; ///; /// The external source should append its own delegating constructors to the; /// given vector of declarations. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:227,Integrability,rout,routine,227,/// Read the set of ext_vector type declarations known to the; /// external Sema source.; ///; /// The external source should append its own ext_vector type declarations to; /// the given vector of declarations. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:212,Integrability,rout,routine,212,/// Read the set of potentially unused typedefs known to the source.; ///; /// The external source should append its own potentially unused local; /// typedefs to the given vector of declarations. Note that this routine may; /// be invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:208,Integrability,rout,routine,208,/// Read the set of referenced selectors known to the; /// external Sema source.; ///; /// The external source should append its own referenced selectors to the; /// given vector of selectors. Note that this routine; /// may be invoked multiple times; the external source should take care not; /// to introduce the same selectors repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:211,Integrability,rout,routine,211,"/// Read the set of weak, undeclared identifiers known to the; /// external Sema source.; ///; /// The external source should append its own weak, undeclared identifiers to; /// the given vector. Note that this routine may be invoked multiple times;; /// the external source should take care not to introduce the same identifiers; /// repeatedly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:174,Integrability,rout,routine,174,/// Read the set of used vtables known to the external Sema source.; ///; /// The external source should append its own used vtables to the given; /// vector. Note that this routine may be invoked multiple times; the external; /// source should take care not to introduce the same vtables repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:199,Integrability,rout,routine,199,/// Read the set of pending instantiations known to the external; /// Sema source.; ///; /// The external source should append its own pending instantiations to the; /// given vector. Note that this routine may be invoked multiple times; the; /// external source should take care not to introduce the same instantiations; /// repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:185,Integrability,rout,routine,185,/// Read the set of late parsed template functions for this source.; ///; /// The external source should insert its own late parsed template functions; /// into the map. Note that this routine may be invoked multiple times; the; /// external source should take care not to introduce the same map entries; /// repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:212,Integrability,rout,routine,212,/// Read the set of decls to be checked for deferred diags.; ///; /// The external source should append its own potentially emitted function; /// and variable decls which may cause deferred diags. Note that this routine; /// may be invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:150,Modifiability,variab,variable,150,/// Read the set of decls to be checked for deferred diags.; ///; /// The external source should append its own potentially emitted function; /// and variable decls which may cause deferred diags. Note that this routine; /// may be invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:46,Performance,perform,performing,46,/// OverloadingResult - Capture the result of performing overload; /// resolution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:117,Modifiability,rewrite,rewrites,117,"/// The parameter ordering that will be used for the candidate. This is; /// used to represent C++20 binary operator rewrites that reverse the order; /// of the arguments. If the parameter ordering is Reversed, the Args list is; /// reversed (but obviously the ParamDecls for the function are not).; ///; /// After forming an OverloadCandidate with reversed parameters, the list; /// of conversions will (as always) be indexed by argument, so will be; /// in reverse parameter order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:17,Modifiability,rewrite,rewrite,17,/// The kinds of rewrite we perform on overload candidates. Note that the; /// values here are chosen to serve as both bitflags and as a rank (lower; /// values are preferred by overload resolution).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:28,Performance,perform,perform,28,/// The kinds of rewrite we perform on overload candidates. Note that the; /// values here are chosen to serve as both bitflags and as a rank (lower; /// values are preferred by overload resolution).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:21,Performance,queue,queue,21,/// Zero constant to queue,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:59,Performance,perform,performed,59,/// NarrowingKind - The kind of narrowing conversion being performed by a; /// standard conversion sequence according to C++11 [dcl.init.list]p7.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:62,Modifiability,variab,variable,62,"/// A narrowing conversion, because a non-constant-expression variable might; /// have got narrowed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:92,Integrability,depend,dependent,92,/// Cannot tell whether this is a narrowing conversion because the; /// expression is value-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:59,Performance,perform,perform,59,"/// CopyConstructor - The copy constructor that is used to perform; /// this conversion, when the conversion is actually just the; /// initialization of an object via copy constructor. Such; /// conversions are either identity conversions or derived-to-base; /// conversions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:343,Testability,test,test,343,"/// EllipsisConversion - When this is true, it means user-defined; /// conversion sequence starts with a ... (ellipsis) conversion, instead of; /// a standard conversion. In this case, 'Before' field must be ignored.; // FIXME. I much rather put this as the first field. But there seems to be; // a gcc code gen. bug which causes a crash in a test. Putting it here seems; // to work around the crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:48,Performance,perform,perform,48,/// ConversionFunction - The function that will perform the; /// user-defined conversion. Null if the conversion is an; /// aggregate initialization from an initializer list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:162,Integrability,rout,routine,162,"/// Return a ranking of the implicit conversion sequence; /// kind, where smaller ranks represent better conversion; /// sequences.; ///; /// In particular, this routine gives user-defined conversion; /// sequences and ambiguous conversion sequences the same rank,; /// per C++ [over.best.ics]p10.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:160,Testability,assert,assert,160,/// Determines whether this conversion sequence has been; /// initialized. Most operations should never need to query; /// uninitialized conversions and should assert as above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:134,Performance,perform,perform,134,// The result of a comparison between implicit conversion; // sequences. Use Sema::CompareImplicitConversionSequences to; // actually perform the comparison.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:73,Security,access,accessible,73,"/// (CUDA) This candidate was not viable because the callee; /// was not accessible from the caller's target (i.e. host->device,; /// global->host, device->host).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:9,Modifiability,inherit,inherited,9,/// This inherited constructor is not viable because it would slice the; /// argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:113,Security,access,access,113,"/// FoundDecl - The original declaration that was looked up /; /// invented / otherwise found, together with its access.; /// Might be a UsingShadowDecl or a FunctionTemplateDecl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:4,Availability,Failure,FailureKind,4,/// FailureKind - The reason why this candidate is not viable.; /// Actually an OverloadFailureKind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:86,Performance,perform,performing,86,"/// The number of call arguments that were explicitly provided,; /// to be used while performing partial ordering of function templates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:8,Modifiability,Rewrite,RewriteKind,8,/// Get RewriteKind value in OverloadCandidateRewriteKind type (This; /// function is to workaround the spurious GCC bitfield enum warning),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:31,Modifiability,rewrite,rewrites,31,/// Information about operator rewrites to consider when adding operator; /// functions to a candidate set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:43,Modifiability,rewrite,rewrite,43,/// Would use of this function result in a rewrite using a different; /// operator?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:26,Modifiability,rewrite,rewrite,26,/// Determine the kind of rewrite that should be performed for this; /// candidate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:49,Performance,perform,performed,49,/// Determine the kind of rewrite that should be performed for this; /// candidate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:88,Safety,avoid,avoid,88,// Allocator for ConversionSequenceLists. We store the first few of these; // inline to avoid allocation for small sets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:22,Energy Efficiency,allocate,allocates,22,"/// If we have space, allocates from inline storage. Otherwise, allocates; /// from the slab allocator.; /// FIXME: It would probably be nice to have a SmallBumpPtrAllocator; /// instead.; /// FIXME: Now that this only allocates ImplicitConversionSequences, do we; /// want to un-generalize this?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:64,Energy Efficiency,allocate,allocates,64,"/// If we have space, allocates from inline storage. Otherwise, allocates; /// from the slab allocator.; /// FIXME: It would probably be nice to have a SmallBumpPtrAllocator; /// instead.; /// FIXME: Now that this only allocates ImplicitConversionSequences, do we; /// want to un-generalize this?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:219,Energy Efficiency,allocate,allocates,219,"/// If we have space, allocates from inline storage. Otherwise, allocates; /// from the slab allocator.; /// FIXME: It would probably be nice to have a SmallBumpPtrAllocator; /// instead.; /// FIXME: Now that this only allocates ImplicitConversionSequences, do we; /// want to un-generalize this?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:8,Usability,simpl,simpler,8,// It's simpler if this doesn't need to consider alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:4,Usability,Clear,Clear,4,/// Clear out all of the candidates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate storage for conversion sequences for NumConversions; /// conversions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:41,Performance,perform,performed,41,"// For constructors, the access check is performed against the underlying; // declaration, not the found declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:25,Security,access,access,25,"// For constructors, the access check is performed against the underlying; // declaration, not the found declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper for void* pointer.; /// \tparam PtrTy Either a pointer type like 'T*' or a type that behaves like; /// a pointer.; ///; /// This is a very simple POD type that wraps a pointer that the Parser; /// doesn't know about but that Sema or another client does. The PtrTy; /// template argument is used to make sure that ""Decl"" pointers are not; /// compatible with ""Type"" pointers for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:172,Integrability,wrap,wraps,172,"/// Wrapper for void* pointer.; /// \tparam PtrTy Either a pointer type like 'T*' or a type that behaves like; /// a pointer.; ///; /// This is a very simple POD type that wraps a pointer that the Parser; /// doesn't know about but that Sema or another client does. The PtrTy; /// template argument is used to make sure that ""Decl"" pointers are not; /// compatible with ""Type"" pointers for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:151,Usability,simpl,simple,151,"/// Wrapper for void* pointer.; /// \tparam PtrTy Either a pointer type like 'T*' or a type that behaves like; /// a pointer.; ///; /// This is a very simple POD type that wraps a pointer that the Parser; /// doesn't know about but that Sema or another client does. The PtrTy; /// template argument is used to make sure that ""Decl"" pointers are not; /// compatible with ""Type"" pointers for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:56,Integrability,wrap,wrapper,56,/// Returns plain pointer to the entity pointed by this wrapper.; /// \tparam PointeeT Type of pointed entity.; ///; /// It is identical to getPtrAs<PointeeT*>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:295,Availability,error,error,295,"/// The result of parsing/analyzing an expression, statement etc.; ///; /// It may be:; /// - usable: a valid pointer to the result object; /// - unset (null but valid): for constructs that may legitimately be absent; /// (for example, the condition of a for loop); /// - invalid: indicating an error; /// (no detail is provided, usually the error has already been diagnosed)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:342,Availability,error,error,342,"/// The result of parsing/analyzing an expression, statement etc.; ///; /// It may be:; /// - usable: a valid pointer to the result object; /// - unset (null but valid): for constructs that may legitimately be absent; /// (for example, the condition of a for loop); /// - invalid: indicating an error; /// (no detail is provided, usually the error has already been diagnosed)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:94,Usability,usab,usable,94,"/// The result of parsing/analyzing an expression, statement etc.; ///; /// It may be:; /// - usable: a valid pointer to the result object; /// - unset (null but valid): for constructs that may legitimately be absent; /// (for example, the condition of a for loop); /// - invalid: indicating an error; /// (no detail is provided, usually the error has already been diagnosed)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:45,Availability,avail,availability,45,"/// Represents information about a change in availability for; /// an entity, which is part of the encoding of the 'availability'; /// attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:116,Availability,avail,availability,116,"/// Represents information about a change in availability for; /// an entity, which is part of the encoding of the 'availability'; /// attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:27,Availability,avail,availability,27,/// Determine whether this availability change is valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:38,Availability,Avail,Availability,38,/// Describes the trailing object for Availability attribute in ParsedAttr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:18,Integrability,Wrap,Wraps,18,// namespace; /// Wraps an identifier and optional source location for the identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:67,Availability,avail,availability,67,/// True if this has the extra information associated with an; /// availability attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:27,Performance,cache,cache,27,/// True if the processing cache is valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:6,Performance,cache,cached,6,/// A cached value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:57,Availability,avail,availability,57,/// The location of the 'unavailable' keyword in an; /// availability attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:20,Availability,avail,availability,20,/// Constructor for availability attributes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:149,Availability,avail,availability,149,"/// Type tag information is stored immediately following the arguments, if; /// any, at the end of the object. They are mutually exclusive with; /// availability slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:79,Availability,error,error,79,/// Check if the attribute has exactly as many args as Num. May output an; /// error. Returns false if a diagnostic is produced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:80,Availability,error,error,80,/// Check if the attribute has at least as many args as Num. May output an; /// error. Returns false if a diagnostic is produced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:79,Availability,error,error,79,/// Check if the attribute has at most as many args as Num. May output an; /// error. Returns false if a diagnostic is produced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:17,Testability,stub,stub,17,// This function stub exists for parity with the declaration checking code so; // that checkCommonAttributeFeatures() can work generically on declarations; // or statements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:155,Availability,toler,tolerably,155,"/// A factory, from which one makes pools, from which one creates; /// individual attributes which are deallocated with the pool.; ///; /// Note that it's tolerably cheap to create and destroy one of; /// these as long as you don't actually allocate anything in it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:241,Energy Efficiency,allocate,allocate,241,"/// A factory, from which one makes pools, from which one creates; /// individual attributes which are deallocated with the pool.; ///; /// Note that it's tolerably cheap to create and destroy one of; /// these as long as you don't actually allocate anything in it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:97,Availability,avail,availability,97,"/// The number of free lists we want to be sure to support; /// inline. This is just enough that availability attributes; /// don't surpass it. It's actually very unlikely we'll see an; /// attribute that needs more than that; on x86-64 you'd need 10; /// expression arguments, and on i386 you'd need 19.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:33,Integrability,interface,interface,33,// The following are the private interface used by AttributePool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate an attribute of the given size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:181,Energy Efficiency,allocate,allocated,181,"/// Reclaim all the attributes in the given pool chain, which is; /// non-empty. Note that the current implementation is safe; /// against reclaiming things which were not actually allocated; /// with the allocator, although of course it's important to make; /// sure that their allocator lives at least as long as this one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:121,Safety,safe,safe,121,"/// Reclaim all the attributes in the given pool chain, which is; /// non-empty. Note that the current implementation is safe; /// against reclaiming things which were not actually allocated; /// with the allocator, although of course it's important to make; /// sure that their allocator lives at least as long as this one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:8,Availability,avail,availability,8,/// Add availability attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedTemplate.h:256,Energy Efficiency,allocate,allocated,256,"/// Information about a template-id annotation; /// token.; ///; /// A template-id annotation token contains the template name,; /// template arguments, and the source locations for important; /// tokens. All of the information about template arguments is allocated; /// directly after this structure.; /// A template-id annotation token can also be generated by a type-constraint; /// construct with no explicit template arguments, e.g. ""template<C T>"" would; /// annotate C as a TemplateIdAnnotation with no template arguments (the angle; /// locations would be invalid in this case).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedTemplate.h:87,Availability,error,error,87,"/// The kind of template that Template refers to. If this is; /// TNK_Non_template, an error was encountered and diagnosed; /// when parsing or looking up the template name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedTemplate.h:15,Availability,error,error,15,"/// Whether an error was encountered in the template arguments.; /// If so, NumArgs and the trailing arguments are best-effort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ParsedTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:23,Integrability,interface,interface,23,"//===- Scope.h - Scope interface --------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Scope interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:411,Integrability,interface,interface,411,"//===- Scope.h - Scope interface --------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Scope interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:19,Modifiability,inherit,inheritance,19,/// We are between inheritance colon and the real class/struct definition; /// scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:41,Modifiability,variab,variable,41,"/// This is a scope in which a condition variable is currently being; /// parsed. If such a scope is a ContinueScope, it's invalid to jump to the; /// continue block from here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:84,Performance,concurren,concurrent,84,/// This is a scope of some OpenMP directive with; /// order clause which specifies concurrent,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:25,Availability,error,errors,25,/// Used to determine if errors occurred in this scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:28,Modifiability,variab,variable,28,/// A single NRVO candidate variable in this scope.; /// There are three possible values:; /// 1) pointer to VarDecl that denotes NRVO candidate itself.; /// 2) nullptr value means that NRVO is not allowed in this scope; /// (e.g. return a function parameter).; /// 3) std::nullopt value means that there is no NRVO candidate in this scope; /// (i.e. there are no return statements in this scope).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:149,Availability,avail,available,149,"/// Represents return slots for NRVO candidates in the current scope.; /// If a variable is present in this set, it means that a return slot is; /// available for this variable in the current scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:80,Modifiability,variab,variable,80,"/// Represents return slots for NRVO candidates in the current scope.; /// If a variable is present in this set, it means that a return slot is; /// available for this variable in the current scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:168,Modifiability,variab,variable,168,"/// Represents return slots for NRVO candidates in the current scope.; /// If a variable is present in this set, it means that a return slot is; /// available for this variable in the current scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:49,Modifiability,variab,variable,49,"// Set whether we're in the scope of a condition variable, where 'continue'; // is disallowed despite being a continue scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:40,Availability,error,errors,40,"/// Determine whether any unrecoverable errors have occurred within this; /// scope. Note that this may return false even if the scope contains invalid; /// declarations or statements, if the errors for those invalid constructs; /// were suppressed because some prior invalid construct was referenced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:192,Availability,error,errors,192,"/// Determine whether any unrecoverable errors have occurred within this; /// scope. Note that this may return false even if the scope contains invalid; /// declarations or statements, if the errors for those invalid constructs; /// were suppressed because some prior invalid construct was referenced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:45,Modifiability,inherit,inheritance,45,/// Determines whether this scope is between inheritance colon and the real; /// class/struct definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:97,Performance,concurren,concurrent,97,/// Determine whether this scope is some OpenMP directive with; /// order clause which specifies concurrent scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:71,Modifiability,variab,variables,71,/// Sets up the specified scope flags and adjusts the scope state; /// variables accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:25,Availability,error,errors,25,/// Used to determine if errors occurred in this function or block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:143,Performance,optimiz,optimization,143,"/// The list of return statements that occur within the function or; /// block, if there is any chance of applying the named return value; /// optimization, or if we need to infer a return type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:23,Modifiability,variab,variables,23,/// The set of __block variables that are introduced in this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:169,Security,access,accesses,169,"/// Represents a simple identification of a weak object.; ///; /// Part of the implementation of -Wrepeated-use-of-weak.; ///; /// This is used to determine if two weak accesses refer to the same object.; /// Here are some examples of how various accesses are ""profiled"":; ///; /// Access Expression | ""Base"" Decl | ""Property"" Decl; /// :---------------: | :-----------------: | :------------------------------:; /// self.property | self (VarDecl) | property (ObjCPropertyDecl); /// self.implicitProp | self (VarDecl) | -implicitProp (ObjCMethodDecl); /// self->ivar.prop | ivar (ObjCIvarDecl) | prop (ObjCPropertyDecl); /// cxxObj.obj.prop | obj (FieldDecl) | prop (ObjCPropertyDecl); /// [self foo].prop | 0 (unknown) | prop (ObjCPropertyDecl); /// self.prop1.prop2 | prop1 (ObjCPropertyDecl) | prop2 (ObjCPropertyDecl); /// MyClass.prop | MyClass (ObjCInterfaceDecl) | -prop (ObjCMethodDecl); /// MyClass.foo.prop | +foo (ObjCMethodDecl) | -prop (ObjCPropertyDecl); /// weakVar | 0 (known) | weakVar (VarDecl); /// self->weakIvar | self (VarDecl) | weakIvar (ObjCIvarDecl); ///; /// Objects are identified with only two Decls to make it reasonably fast to; /// compare them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:247,Security,access,accesses,247,"/// Represents a simple identification of a weak object.; ///; /// Part of the implementation of -Wrepeated-use-of-weak.; ///; /// This is used to determine if two weak accesses refer to the same object.; /// Here are some examples of how various accesses are ""profiled"":; ///; /// Access Expression | ""Base"" Decl | ""Property"" Decl; /// :---------------: | :-----------------: | :------------------------------:; /// self.property | self (VarDecl) | property (ObjCPropertyDecl); /// self.implicitProp | self (VarDecl) | -implicitProp (ObjCMethodDecl); /// self->ivar.prop | ivar (ObjCIvarDecl) | prop (ObjCPropertyDecl); /// cxxObj.obj.prop | obj (FieldDecl) | prop (ObjCPropertyDecl); /// [self foo].prop | 0 (unknown) | prop (ObjCPropertyDecl); /// self.prop1.prop2 | prop1 (ObjCPropertyDecl) | prop2 (ObjCPropertyDecl); /// MyClass.prop | MyClass (ObjCInterfaceDecl) | -prop (ObjCMethodDecl); /// MyClass.foo.prop | +foo (ObjCMethodDecl) | -prop (ObjCPropertyDecl); /// weakVar | 0 (known) | weakVar (VarDecl); /// self->weakIvar | self (VarDecl) | weakIvar (ObjCIvarDecl); ///; /// Objects are identified with only two Decls to make it reasonably fast to; /// compare them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:282,Security,Access,Access,282,"/// Represents a simple identification of a weak object.; ///; /// Part of the implementation of -Wrepeated-use-of-weak.; ///; /// This is used to determine if two weak accesses refer to the same object.; /// Here are some examples of how various accesses are ""profiled"":; ///; /// Access Expression | ""Base"" Decl | ""Property"" Decl; /// :---------------: | :-----------------: | :------------------------------:; /// self.property | self (VarDecl) | property (ObjCPropertyDecl); /// self.implicitProp | self (VarDecl) | -implicitProp (ObjCMethodDecl); /// self->ivar.prop | ivar (ObjCIvarDecl) | prop (ObjCPropertyDecl); /// cxxObj.obj.prop | obj (FieldDecl) | prop (ObjCPropertyDecl); /// [self foo].prop | 0 (unknown) | prop (ObjCPropertyDecl); /// self.prop1.prop2 | prop1 (ObjCPropertyDecl) | prop2 (ObjCPropertyDecl); /// MyClass.prop | MyClass (ObjCInterfaceDecl) | -prop (ObjCMethodDecl); /// MyClass.foo.prop | +foo (ObjCMethodDecl) | -prop (ObjCPropertyDecl); /// weakVar | 0 (known) | weakVar (VarDecl); /// self->weakIvar | self (VarDecl) | weakIvar (ObjCIvarDecl); ///; /// Objects are identified with only two Decls to make it reasonably fast to; /// compare them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:17,Usability,simpl,simple,17,"/// Represents a simple identification of a weak object.; ///; /// Part of the implementation of -Wrepeated-use-of-weak.; ///; /// This is used to determine if two weak accesses refer to the same object.; /// Here are some examples of how various accesses are ""profiled"":; ///; /// Access Expression | ""Base"" Decl | ""Property"" Decl; /// :---------------: | :-----------------: | :------------------------------:; /// self.property | self (VarDecl) | property (ObjCPropertyDecl); /// self.implicitProp | self (VarDecl) | -implicitProp (ObjCMethodDecl); /// self->ivar.prop | ivar (ObjCIvarDecl) | prop (ObjCPropertyDecl); /// cxxObj.obj.prop | obj (FieldDecl) | prop (ObjCPropertyDecl); /// [self foo].prop | 0 (unknown) | prop (ObjCPropertyDecl); /// self.prop1.prop2 | prop1 (ObjCPropertyDecl) | prop2 (ObjCPropertyDecl); /// MyClass.prop | MyClass (ObjCInterfaceDecl) | -prop (ObjCMethodDecl); /// MyClass.foo.prop | +foo (ObjCMethodDecl) | -prop (ObjCPropertyDecl); /// weakVar | 0 (known) | weakVar (VarDecl); /// self->weakIvar | self (VarDecl) | weakIvar (ObjCIvarDecl); ///; /// Objects are identified with only two Decls to make it reasonably fast to; /// compare them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:196,Security,access,accessed,196,"/// The ""property"" decl, as described in the class documentation.; ///; /// Note that this may not actually be an ObjCPropertyDecl, e.g. in the; /// case of ""implicit"" properties (regular methods accessed via dot syntax).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:107,Modifiability,variab,variable,107,"/// Returns true if the object base specifies a known object in memory,; /// rather than, say, an instance variable or property of another object.; ///; /// Note that this ignores the effects of aliasing; that is, \c foo.bar is; /// considered an exact profile if \c foo is a local variable, even if; /// another variable \c foo2 refers to the same object as \c foo.; ///; /// For increased precision, accesses with base variables that are; /// properties or ivars of 'self' (e.g. self.prop1.prop2) are considered to; /// be exact, though this is not true for arbitrary variables; /// (foo.prop1.prop2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:282,Modifiability,variab,variable,282,"/// Returns true if the object base specifies a known object in memory,; /// rather than, say, an instance variable or property of another object.; ///; /// Note that this ignores the effects of aliasing; that is, \c foo.bar is; /// considered an exact profile if \c foo is a local variable, even if; /// another variable \c foo2 refers to the same object as \c foo.; ///; /// For increased precision, accesses with base variables that are; /// properties or ivars of 'self' (e.g. self.prop1.prop2) are considered to; /// be exact, though this is not true for arbitrary variables; /// (foo.prop1.prop2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:313,Modifiability,variab,variable,313,"/// Returns true if the object base specifies a known object in memory,; /// rather than, say, an instance variable or property of another object.; ///; /// Note that this ignores the effects of aliasing; that is, \c foo.bar is; /// considered an exact profile if \c foo is a local variable, even if; /// another variable \c foo2 refers to the same object as \c foo.; ///; /// For increased precision, accesses with base variables that are; /// properties or ivars of 'self' (e.g. self.prop1.prop2) are considered to; /// be exact, though this is not true for arbitrary variables; /// (foo.prop1.prop2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:421,Modifiability,variab,variables,421,"/// Returns true if the object base specifies a known object in memory,; /// rather than, say, an instance variable or property of another object.; ///; /// Note that this ignores the effects of aliasing; that is, \c foo.bar is; /// considered an exact profile if \c foo is a local variable, even if; /// another variable \c foo2 refers to the same object as \c foo.; ///; /// For increased precision, accesses with base variables that are; /// properties or ivars of 'self' (e.g. self.prop1.prop2) are considered to; /// be exact, though this is not true for arbitrary variables; /// (foo.prop1.prop2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:570,Modifiability,variab,variables,570,"/// Returns true if the object base specifies a known object in memory,; /// rather than, say, an instance variable or property of another object.; ///; /// Note that this ignores the effects of aliasing; that is, \c foo.bar is; /// considered an exact profile if \c foo is a local variable, even if; /// another variable \c foo2 refers to the same object as \c foo.; ///; /// For increased precision, accesses with base variables that are; /// properties or ivars of 'self' (e.g. self.prop1.prop2) are considered to; /// be exact, though this is not true for arbitrary variables; /// (foo.prop1.prop2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:402,Security,access,accesses,402,"/// Returns true if the object base specifies a known object in memory,; /// rather than, say, an instance variable or property of another object.; ///; /// Note that this ignores the effects of aliasing; that is, \c foo.bar is; /// considered an exact profile if \c foo is a local variable, even if; /// another variable \c foo2 refers to the same object as \c foo.; ///; /// For increased precision, accesses with base variables that are; /// properties or ivars of 'self' (e.g. self.prop1.prop2) are considered to; /// be exact, though this is not true for arbitrary variables; /// (foo.prop1.prop2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:121,Safety,unsafe,unsafe,121,/// Represents a single use of a weak object.; ///; /// Stores both the expression and whether the access is potentially unsafe; /// (i.e. it could potentially be warned about).; ///; /// Part of the implementation of -Wrepeated-use-of-weak.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:99,Security,access,access,99,/// Represents a single use of a weak object.; ///; /// Stores both the expression and whether the access is potentially unsafe; /// (i.e. it could potentially be warned about).; ///; /// Part of the implementation of -Wrepeated-use-of-weak.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:39,Availability,error,error,39,"/// Determine whether an unrecoverable error has occurred within this; /// function. Note that this may return false even if the function body is; /// invalid, because the errors may be suppressed if they're caused by prior; /// invalid declarations.; ///; /// FIXME: Migrate the caller of this to use containsErrors() instead once; /// it's ready.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:172,Availability,error,errors,172,"/// Determine whether an unrecoverable error has occurred within this; /// function. Note that this may return false even if the function body is; /// invalid, because the errors may be suppressed if they're caused by prior; /// invalid declarations.; ///; /// FIXME: Migrate the caller of this to use containsErrors() instead once; /// it's ready.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:34,Security,access,accessed,34,/// Record that a weak object was accessed.; ///; /// Part of the implementation of -Wrepeated-use-of-weak.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:107,Modifiability,variab,variable,107,"/// Record that a given expression is a ""safe"" access of a weak object (e.g.; /// assigning it to a strong variable.); ///; /// Part of the implementation of -Wrepeated-use-of-weak.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:41,Safety,safe,safe,41,"/// Record that a given expression is a ""safe"" access of a weak object (e.g.; /// assigning it to a strong variable.); ///; /// Part of the implementation of -Wrepeated-use-of-weak.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:47,Security,access,access,47,"/// Record that a given expression is a ""safe"" access of a weak object (e.g.; /// assigning it to a strong variable.); ///; /// Part of the implementation of -Wrepeated-use-of-weak.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:17,Modifiability,variab,variable,17,// Add a __block variable introduced in this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:4,Usability,Clear,Clear,4,"/// Clear out the information in this function scope, making it; /// suitable for reuse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:80,Modifiability,variab,variables,80,"// There are three categories of capture: capturing 'this', capturing; // local variables, and C++1y initialized captures (which can have an; // arbitrary initializer, and don't really capture in the traditional; // sense at all).; //; // There are three ways to capture a local variable:; // - capture by copy in the C++11 sense,; // - capture by reference in the C++11 sense, and; // - __block capture.; // Lambdas explicitly specify capture by copy or capture by reference.; // For blocks, __block capture applies to variables with that annotation,; // variables of reference type are captured by reference, and other; // variables are captured by copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:279,Modifiability,variab,variable,279,"// There are three categories of capture: capturing 'this', capturing; // local variables, and C++1y initialized captures (which can have an; // arbitrary initializer, and don't really capture in the traditional; // sense at all).; //; // There are three ways to capture a local variable:; // - capture by copy in the C++11 sense,; // - capture by reference in the C++11 sense, and; // - __block capture.; // Lambdas explicitly specify capture by copy or capture by reference.; // For blocks, __block capture applies to variables with that annotation,; // variables of reference type are captured by reference, and other; // variables are captured by copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:520,Modifiability,variab,variables,520,"// There are three categories of capture: capturing 'this', capturing; // local variables, and C++1y initialized captures (which can have an; // arbitrary initializer, and don't really capture in the traditional; // sense at all).; //; // There are three ways to capture a local variable:; // - capture by copy in the C++11 sense,; // - capture by reference in the C++11 sense, and; // - __block capture.; // Lambdas explicitly specify capture by copy or capture by reference.; // For blocks, __block capture applies to variables with that annotation,; // variables of reference type are captured by reference, and other; // variables are captured by copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:556,Modifiability,variab,variables,556,"// There are three categories of capture: capturing 'this', capturing; // local variables, and C++1y initialized captures (which can have an; // arbitrary initializer, and don't really capture in the traditional; // sense at all).; //; // There are three ways to capture a local variable:; // - capture by copy in the C++11 sense,; // - capture by reference in the C++11 sense, and; // - __block capture.; // Lambdas explicitly specify capture by copy or capture by reference.; // For blocks, __block capture applies to variables with that annotation,; // variables of reference type are captured by reference, and other; // variables are captured by copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:625,Modifiability,variab,variables,625,"// There are three categories of capture: capturing 'this', capturing; // local variables, and C++1y initialized captures (which can have an; // arbitrary initializer, and don't really capture in the traditional; // sense at all).; //; // There are three ways to capture a local variable:; // - capture by copy in the C++11 sense,; // - capture by reference in the C++11 sense, and; // - __block capture.; // Lambdas explicitly specify capture by copy or capture by reference.; // For blocks, __block capture applies to variables with that annotation,; // variables of reference type are captured by reference, and other; // variables are captured by copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:28,Modifiability,variab,variable,28,"/// Otherwise, the captured variable (if any).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:40,Modifiability,variab,variable,40,/// Retrieve the location at which this variable was captured.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:35,Modifiability,variab,variables,35,/// CaptureMap - A map of captured variables to (index+1) into Captures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:32,Modifiability,variab,variable,32,/// Determine whether the given variable has been captured.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:32,Modifiability,variab,variable-array,32,/// Determine whether the given variable-array type has been captured.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:38,Modifiability,variab,variable,38,"/// Retrieve the capture of the given variable, if it has been; /// captured already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:107,Integrability,Depend,Dependent,107,"/// BlockType - The function type of the block, if one was given.; /// Its return type may be BuiltinType::Dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:44,Modifiability,variab,variables,44,/// The implicit parameter for the captured variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:148,Performance,cache,cache,148,"/// If this is a generic lambda, and the template parameter; /// list has been created (from the TemplateParams) then store; /// a reference to it (cache it to avoid reconstructing it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:160,Safety,avoid,avoid,160,"/// If this is a generic lambda, and the template parameter; /// list has been created (from the TemplateParams) then store; /// a reference to it (cache it to avoid reconstructing it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:17,Modifiability,variab,variable-referring-expressions,17,"/// Contains all variable-referring-expressions (i.e. DeclRefExprs; /// or MemberExprs) that refer to local variables in a generic lambda; /// or a lambda in a potentially-evaluated-if-used context.; ///; /// Potentially capturable variables of a nested lambda that might need; /// to be captured by the lambda are housed here.; /// This is specifically useful for generic lambdas or; /// lambdas within a potentially evaluated-if-used context.; /// If an enclosing variable is named in an expression of a lambda nested; /// within a generic lambda, we don't always know whether the variable; /// will truly be odr-used (i.e. need to be captured) by that nested lambda,; /// until its instantiation. But we still need to capture it in the; /// enclosing lambda if all intervening lambdas can capture the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:108,Modifiability,variab,variables,108,"/// Contains all variable-referring-expressions (i.e. DeclRefExprs; /// or MemberExprs) that refer to local variables in a generic lambda; /// or a lambda in a potentially-evaluated-if-used context.; ///; /// Potentially capturable variables of a nested lambda that might need; /// to be captured by the lambda are housed here.; /// This is specifically useful for generic lambdas or; /// lambdas within a potentially evaluated-if-used context.; /// If an enclosing variable is named in an expression of a lambda nested; /// within a generic lambda, we don't always know whether the variable; /// will truly be odr-used (i.e. need to be captured) by that nested lambda,; /// until its instantiation. But we still need to capture it in the; /// enclosing lambda if all intervening lambdas can capture the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:232,Modifiability,variab,variables,232,"/// Contains all variable-referring-expressions (i.e. DeclRefExprs; /// or MemberExprs) that refer to local variables in a generic lambda; /// or a lambda in a potentially-evaluated-if-used context.; ///; /// Potentially capturable variables of a nested lambda that might need; /// to be captured by the lambda are housed here.; /// This is specifically useful for generic lambdas or; /// lambdas within a potentially evaluated-if-used context.; /// If an enclosing variable is named in an expression of a lambda nested; /// within a generic lambda, we don't always know whether the variable; /// will truly be odr-used (i.e. need to be captured) by that nested lambda,; /// until its instantiation. But we still need to capture it in the; /// enclosing lambda if all intervening lambdas can capture the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:466,Modifiability,variab,variable,466,"/// Contains all variable-referring-expressions (i.e. DeclRefExprs; /// or MemberExprs) that refer to local variables in a generic lambda; /// or a lambda in a potentially-evaluated-if-used context.; ///; /// Potentially capturable variables of a nested lambda that might need; /// to be captured by the lambda are housed here.; /// This is specifically useful for generic lambdas or; /// lambdas within a potentially evaluated-if-used context.; /// If an enclosing variable is named in an expression of a lambda nested; /// within a generic lambda, we don't always know whether the variable; /// will truly be odr-used (i.e. need to be captured) by that nested lambda,; /// until its instantiation. But we still need to capture it in the; /// enclosing lambda if all intervening lambdas can capture the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:583,Modifiability,variab,variable,583,"/// Contains all variable-referring-expressions (i.e. DeclRefExprs; /// or MemberExprs) that refer to local variables in a generic lambda; /// or a lambda in a potentially-evaluated-if-used context.; ///; /// Potentially capturable variables of a nested lambda that might need; /// to be captured by the lambda are housed here.; /// This is specifically useful for generic lambdas or; /// lambdas within a potentially evaluated-if-used context.; /// If an enclosing variable is named in an expression of a lambda nested; /// within a generic lambda, we don't always know whether the variable; /// will truly be odr-used (i.e. need to be captured) by that nested lambda,; /// until its instantiation. But we still need to capture it in the; /// enclosing lambda if all intervening lambdas can capture the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:804,Modifiability,variab,variable,804,"/// Contains all variable-referring-expressions (i.e. DeclRefExprs; /// or MemberExprs) that refer to local variables in a generic lambda; /// or a lambda in a potentially-evaluated-if-used context.; ///; /// Potentially capturable variables of a nested lambda that might need; /// to be captured by the lambda are housed here.; /// This is specifically useful for generic lambdas or; /// lambdas within a potentially evaluated-if-used context.; /// If an enclosing variable is named in an expression of a lambda nested; /// within a generic lambda, we don't always know whether the variable; /// will truly be odr-used (i.e. need to be captured) by that nested lambda,; /// until its instantiation. But we still need to capture it in the; /// enclosing lambda if all intervening lambdas can capture the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:249,Integrability,depend,dependent,249,/// Contains all variable-referring-expressions that refer; /// to local variables that are usable as constant expressions and; /// do not involve an odr-use (they may still need to be captured; /// if the enclosing full-expression is instantiation dependent).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:17,Modifiability,variab,variable-referring-expressions,17,/// Contains all variable-referring-expressions that refer; /// to local variables that are usable as constant expressions and; /// do not involve an odr-use (they may still need to be captured; /// if the enclosing full-expression is instantiation dependent).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:73,Modifiability,variab,variables,73,/// Contains all variable-referring-expressions that refer; /// to local variables that are usable as constant expressions and; /// do not involve an odr-use (they may still need to be captured; /// if the enclosing full-expression is instantiation dependent).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:92,Usability,usab,usable,92,/// Contains all variable-referring-expressions that refer; /// to local variables that are usable as constant expressions and; /// do not involve an odr-use (they may still need to be captured; /// if the enclosing full-expression is instantiation dependent).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:24,Modifiability,variab,variables,24,/// Contains all of the variables defined in this lambda that shadow variables; /// that were defined in parent contexts. Used to avoid warnings when the; /// shadowed variables are uncaptured by this lambda.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:69,Modifiability,variab,variables,69,/// Contains all of the variables defined in this lambda that shadow variables; /// that were defined in parent contexts. Used to avoid warnings when the; /// shadowed variables are uncaptured by this lambda.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:168,Modifiability,variab,variables,168,/// Contains all of the variables defined in this lambda that shadow variables; /// that were defined in parent contexts. Used to avoid warnings when the; /// shadowed variables are uncaptured by this lambda.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:130,Safety,avoid,avoid,130,/// Contains all of the variables defined in this lambda that shadow variables; /// that were defined in parent contexts. Used to avoid warnings when the; /// shadowed variables are uncaptured by this lambda.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:223,Integrability,depend,depending,223,"/// Add a variable that might potentially be captured by the; /// lambda and therefore the enclosing lambdas.; ///; /// This is also used by enclosing lambda's to speculatively capture; /// variables that nested lambda's - depending on their enclosing; /// specialization - might need to capture.; /// Consider:; /// void f(int, int); <-- don't capture; /// void f(const int&, double); <-- capture; /// void foo() {; /// const int x = 10;; /// auto L = [=](auto a) { // capture 'x'; /// return [=](auto b) {; /// f(x, a); // we may or may not need to capture 'x'; /// };; /// };; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:10,Modifiability,variab,variable,10,"/// Add a variable that might potentially be captured by the; /// lambda and therefore the enclosing lambdas.; ///; /// This is also used by enclosing lambda's to speculatively capture; /// variables that nested lambda's - depending on their enclosing; /// specialization - might need to capture.; /// Consider:; /// void f(int, int); <-- don't capture; /// void f(const int&, double); <-- capture; /// void foo() {; /// const int x = 10;; /// auto L = [=](auto a) { // capture 'x'; /// return [=](auto b) {; /// f(x, a); // we may or may not need to capture 'x'; /// };; /// };; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:190,Modifiability,variab,variables,190,"/// Add a variable that might potentially be captured by the; /// lambda and therefore the enclosing lambdas.; ///; /// This is also used by enclosing lambda's to speculatively capture; /// variables that nested lambda's - depending on their enclosing; /// specialization - might need to capture.; /// Consider:; /// void f(int, int); <-- don't capture; /// void f(const int&, double); <-- capture; /// void foo() {; /// const int x = 10;; /// auto L = [=](auto a) { // capture 'x'; /// return [=](auto b) {; /// f(x, a); // we may or may not need to capture 'x'; /// };; /// };; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:199,Integrability,depend,dependent,199,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:901,Integrability,depend,dependent,901,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:1191,Integrability,depend,dependent,1191,"generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there are no guarantees as to which cases we'll manage to build; /// an lvalue-t",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:1312,Integrability,depend,dependent,1312,"cording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there are no guarantees as to which cases we'll manage to build; /// an lvalue-to-rvalue conversion in, when parsing a template -- some; /// seemingly harmless change elsewhere in Sema could cause us to start or stop; /// building such a node. So we need a rule that anyone can implement and get; /// exactly th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:11,Modifiability,variab,variable,11,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:98,Modifiability,variab,variable,98,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:239,Modifiability,variab,variable,239,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:332,Modifiability,variab,variables,332,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:452,Modifiability,variab,variables,452,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:547,Modifiability,variab,variable,547,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:1250,Modifiability,variab,variables,1250,"cording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there are no guarantees as to which cases we'll manage to build; /// an lvalue-to-rvalue conversion in, when parsing a template -- some; /// seemingly harmless change elsewhere in Sema could cause us to start or stop; /// building such a node. So we need a rule that anyone can implement and get; /// exactly th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:1447,Modifiability,variab,variable-referring-expression,1447,"rences to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there are no guarantees as to which cases we'll manage to build; /// an lvalue-to-rvalue conversion in, when parsing a template -- some; /// seemingly harmless change elsewhere in Sema could cause us to start or stop; /// building such a node. So we need a rule that anyone can implement and get; /// exactly the same result"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:1643,Modifiability,variab,variables,1643,"rences to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there are no guarantees as to which cases we'll manage to build; /// an lvalue-to-rvalue conversion in, when parsing a template -- some; /// seemingly harmless change elsewhere in Sema could cause us to start or stop; /// building such a node. So we need a rule that anyone can implement and get; /// exactly the same result"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:933,Safety,avoid,avoid,933,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:1224,Safety,avoid,avoid,1224,"cording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there are no guarantees as to which cases we'll manage to build; /// an lvalue-to-rvalue conversion in, when parsing a template -- some; /// seemingly harmless change elsewhere in Sema could cause us to start or stop; /// building such a node. So we need a rule that anyone can implement and get; /// exactly th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:559,Usability,usab,usable,559,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:423,Performance,perform,performs,423,"//===--- Sema.h - Semantic Analysis & AST Building --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Sema class, which performs semantic analysis and; // builds ASTs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:21,Performance,cache,cache,21,/// A single-element cache based on the file ID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:28,Performance,cache,cache,28,// Check the single-element cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:34,Performance,cache,cache,34,// It's not in the single-element cache; flush the cache if we have one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:51,Performance,cache,cache,51,// It's not in the single-element cache; flush the cache if we have one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:28,Performance,cache,cache,28,// Pull this entry into the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:144,Deployability,update,update,144,"/// Tracks expected type during expression parsing, for use in code completion.; /// The type is tied to a particular token, all functions that update or consume; /// the type take a start location of the token they are looking at as a; /// parameter. This avoids updating the type on hot paths in the parser.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:257,Safety,avoid,avoids,257,"/// Tracks expected type during expression parsing, for use in code completion.; /// The type is tied to a particular token, all functions that update or consume; /// the type take a start location of the token they are looking at as a; /// parameter. This avoids updating the type on hot paths in the parser.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:347,Availability,alive,alive,347,"/// Computing a type for the function argument may require running; /// overloading, so we postpone its computation until it is actually needed.; ///; /// Clients should be very careful when using this function, as it stores a; /// function_ref, clients should make sure all calls to get() with the same; /// location happen while function_ref is alive.; ///; /// The callback should also emit signature help as a side-effect, but only; /// if the completion point has been reached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:46,Safety,safe,safe,46,// See comment in below overload for why it's safe to compute the linkage; // of the new declaration here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:347,Performance,load,load,347,"/// The maximum alignment, same as in llvm::Value. We duplicate them here; /// because that allows us not to duplicate the constants in clang code,; /// which we must to since we can't directly use the llvm constants.; /// The value is verified against llvm here: lib/CodeGen/CGDecl.cpp; ///; /// This is the greatest alignment value supported by load, store, and alloca; /// instructions, and global values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:3,Availability,Mask,Masks,3,// Masks to encode and decode an AlignPackInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:53,Usability,clear,clear,53,// Saves the current floating-point pragma stack and clear it in this Sema.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:93,Performance,perform,performed,93,// RAII object to push / pop sentinel slots for all MS #pragma stacks.; // Actions should be performed only if we enter / exit a C++ method body.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:58,Performance,optimiz,optimize,58,"/// This represents the last location of a ""#pragma clang optimize off""; /// directive if such a directive has not been closed by an ""on"" yet. If; /// optimizations are currently ""on"", this is set to an invalid location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:151,Performance,optimiz,optimizations,151,"/// This represents the last location of a ""#pragma clang optimize off""; /// directive if such a directive has not been closed by an ""on"" yet. If; /// optimizations are currently ""on"", this is set to an invalid location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:50,Performance,optimiz,optimize,50,"/// The ""on"" or ""off"" argument passed by \#pragma optimize, that denotes; /// whether the optimizations in the list passed to the pragma should be; /// turned off or on. This boolean is true by default because command line; /// options are honored when `#pragma optimize("""", on)`.; /// (i.e. `ModifyFnAttributeMSPragmaOptimze()` does nothing)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:90,Performance,optimiz,optimizations,90,"/// The ""on"" or ""off"" argument passed by \#pragma optimize, that denotes; /// whether the optimizations in the list passed to the pragma should be; /// turned off or on. This boolean is true by default because command line; /// options are honored when `#pragma optimize("""", on)`.; /// (i.e. `ModifyFnAttributeMSPragmaOptimze()` does nothing)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:262,Performance,optimiz,optimize,262,"/// The ""on"" or ""off"" argument passed by \#pragma optimize, that denotes; /// whether the optimizations in the list passed to the pragma should be; /// turned off or on. This boolean is true by default because command line; /// options are honored when `#pragma optimize("""", on)`.; /// (i.e. `ModifyFnAttributeMSPragmaOptimze()` does nothing)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:42,Availability,recover,recovery,42,"/// Flag indicating if Sema is building a recovery call expression.; ///; /// This flag is used to avoid building recovery call expressions; /// if Sema is already doing so, which would cause infinite recursions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:114,Availability,recover,recovery,114,"/// Flag indicating if Sema is building a recovery call expression.; ///; /// This flag is used to avoid building recovery call expressions; /// if Sema is already doing so, which would cause infinite recursions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:42,Safety,recover,recovery,42,"/// Flag indicating if Sema is building a recovery call expression.; ///; /// This flag is used to avoid building recovery call expressions; /// if Sema is already doing so, which would cause infinite recursions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:99,Safety,avoid,avoid,99,"/// Flag indicating if Sema is building a recovery call expression.; ///; /// This flag is used to avoid building recovery call expressions; /// if Sema is already doing so, which would cause infinite recursions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:114,Safety,recover,recovery,114,"/// Flag indicating if Sema is building a recovery call expression.; ///; /// This flag is used to avoid building recovery call expressions; /// if Sema is already doing so, which would cause infinite recursions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:89,Modifiability,variab,variable,89,"/// Store a set of either DeclRefExprs or MemberExprs that contain a reference; /// to a variable (constant) that may or may not be odr-used in this Expr, and; /// we won't know until all lvalue-to-rvalue and discarded value conversions; /// have been applied to all subexpressions of the enclosing full expression.; /// This is cleared at the end of each full expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:329,Usability,clear,cleared,329,"/// Store a set of either DeclRefExprs or MemberExprs that contain a reference; /// to a variable (constant) that may or may not be odr-used in this Expr, and; /// we won't know until all lvalue-to-rvalue and discarded value conversions; /// have been applied to all subexpressions of the enclosing full expression.; /// This is cleared at the end of each full expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:44,Modifiability,extend,extended,44,/// ExtVectorDecls - This is a list all the extended vector types. This allows; /// us to associate a raw vector type with one of the ext_vector type names.; /// This is only necessary for issuing pretty diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:81,Safety,detect,detection,81,"/// All the delegating constructors seen so far in the file, used for; /// cycle detection at the end of the TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:196,Availability,error,error,196,"/// All the function redeclarations seen during a class definition that had; /// their exception spec checks delayed, plus the prior declaration they; /// should be checked against. Except during error recovery, the new decl; /// should always be a friend declaration, as that's the only valid way to; /// redeclare a special member before its class is complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:202,Availability,recover,recovery,202,"/// All the function redeclarations seen during a class definition that had; /// their exception spec checks delayed, plus the prior declaration they; /// should be checked against. Except during error recovery, the new decl; /// should always be a friend declaration, as that's the only valid way to; /// redeclare a special member before its class is complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:202,Safety,recover,recovery,202,"/// All the function redeclarations seen during a class definition that had; /// their exception spec checks delayed, plus the prior declaration they; /// should be checked against. Except during error recovery, the new decl; /// should always be a friend declaration, as that's the only valid way to; /// redeclare a special member before its class is complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,Testability,log,logic,35,/// A class which encapsulates the logic for delaying diagnostics; /// during parsing and other processing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:23,Security,Access,Access,23,/// Enter a new scope. Access and deprecation diagnostics will be; /// collected in this pool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:114,Performance,perform,performed,114,"/// Leave a delayed-diagnostic state that was previously pushed.; /// Do not emit any of the diagnostics. This is performed as part; /// of the bookkeeping of popping a pool ""properly"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:28,Security,access,access,28,/// Enter a new scope where access and deprecation diagnostics are; /// not delayed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Usability,Undo,Undo,4,/// Undo a previous pushUndelayed().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Load,Load,4,/// Load weak undeclared identifiers from the external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:286,Modifiability,refactor,refactor,286,"/// WeakTopLevelDecl - Translation-unit scoped declarations generated by; /// \#pragma weak during processing of other Decls.; /// I couldn't figure out a clean way to generate these in-line, so; /// we store them here and handle separately -- which is a hack.; /// It would be best to refactor this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Cache,Caches,4,/// Caches identifiers/selectors for NSFoundation APIs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:250,Performance,perform,perform,250,"/// The current expression occurs within a braced-init-list within; /// an unevaluated operand. This is mostly like a regular unevaluated; /// context, except that we still instantiate constexpr functions that are; /// referenced here so that we can perform narrowing checks correctly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:42,Safety,avoid,avoid,42,// Set of failed immediate invocations to avoid double diagnosing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:123,Integrability,wrap,wrapper,123,/// SpecialMemberOverloadResult - The overloading result for a special member; /// function.; ///; /// This is basically a wrapper around PointerIntPair. The lowest bits of the; /// integer are used to determine whether overload resolution succeeded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:6,Performance,cache,cache,6,/// A cache of special member function overload resolution results; /// for C++ records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:25,Availability,avail,available,25,/// A cache of the flags available in enumerations with the flag_bits; /// attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:6,Performance,cache,cache,6,/// A cache of the flags available in enumerations with the flag_bits; /// attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:123,Performance,perform,perform,123,"/// The kind of translation unit we are processing.; ///; /// When we're processing a complete translation unit, Sema will perform; /// end-of-translation-unit semantic tasks (such as creating; /// initializers for tentative definitions in C) once parsing has; /// completed. Modules and precompiled headers perform different kinds of; /// checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:308,Performance,perform,perform,308,"/// The kind of translation unit we are processing.; ///; /// When we're processing a complete translation unit, Sema will perform; /// end-of-translation-unit semantic tasks (such as creating; /// initializers for tentative definitions in C) once parsing has; /// completed. Modules and precompiled headers perform different kinds of; /// checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:37,Modifiability,variab,variable,37,"/// Determine if VD, which must be a variable or function, is an external; /// symbol that nonetheless can't be referenced from outside this translation; /// unit because its type has no linkage and it's not extern ""C"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:25,Energy Efficiency,efficient,efficient,25,"/// Method Pool - allows efficient lookup when typechecking messages to ""id"".; /// We need to maintain a list, since selectors can have differing signatures; /// across classes. In Cocoa, this happens to be extremely uncommon (only 1%; /// of selectors are ""overloaded"").; /// At the head of the list it is recorded whether there were 0, 1, or >= 2; /// methods inside categories with a particular selector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:60,Integrability,message,messages,60,"/// Method Pool - allows efficient lookup when typechecking messages to ""id"".; /// We need to maintain a list, since selectors can have differing signatures; /// across classes. In Cocoa, this happens to be extremely uncommon (only 1%; /// of selectors are ""overloaded"").; /// At the head of the list it is recorded whether there were 0, 1, or >= 2; /// methods inside categories with a particular selector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:58,Modifiability,rewrite,rewrite,58,/// This is an operator!= that should be implemented as a rewrite in terms; /// of a == comparison.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:63,Modifiability,rewrite,rewrite,63,"/// This is an <, <=, >, or >= that should be implemented as a rewrite in; /// terms of a <=> comparison.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:201,Availability,error,error,201,"/// The function definitions which were renamed as part of typo-correction; /// to match their respective declarations. We want to keep track of them; /// to ensure that we don't emit a ""redefinition"" error if we encounter a; /// correctly named definition after the renamed definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Perform,Perform,4,/// Perform initialization that occurs after the parser has been; /// initialized but before it parses anything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:231,Modifiability,polymorphi,polymorphic,231,"/// This virtual key function only exists to limit the emission of debug info; /// describing the Sema class. GCC and Clang only emit debug info for a class; /// with a vtable when the vtable is emitted. Sema is final and not; /// polymorphic, but the debug info size savings are so significant that it is; /// worth adding a vtable just to take advantage of this optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:364,Performance,optimiz,optimization,364,"/// This virtual key function only exists to limit the emission of debug info; /// describing the Sema class. GCC and Clang only emit debug info for a class; /// with a vtable when the vtable is emitted. Sema is final and not; /// polymorphic, but the debug info size savings are so significant that it is; /// worth adding a vtable just to take advantage of this optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:147,Energy Efficiency,allocate,allocates,147,"/// Run some code with ""sufficient"" stack space. (Currently, at least 256K is; /// guaranteed). Produces a warning if we're low on stack space and allocates; /// more in that case. Use this in code that may recurse deeply (for example,; /// in template instantiation) to avoid stack overflow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:271,Safety,avoid,avoid,271,"/// Run some code with ""sufficient"" stack space. (Currently, at least 256K is; /// guaranteed). Produces a warning if we're low on stack space and allocates; /// more in that case. Use this in code that may recurse deeply (for example,; /// in template instantiation) to avoid stack overflow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:124,Integrability,wrap,wrapper,124,"/// Helper class that creates diagnostics with optional; /// template instantiation stacks.; ///; /// This class provides a wrapper around the basic DiagnosticBuilder; /// class that emits diagnostics. ImmediateDiagBuilder is; /// responsible for emitting the diagnostic (as DiagnosticBuilder; /// does) and, if the diagnostic comes from inside a template; /// instantiation, printing the template instantiation stack as; /// well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:53,Performance,perform,performs,53,"// This is a cunning lie. DiagnosticBuilder actually performs move; // construction in its copy constructor (but due to varied uses, it's not; // possible to conveniently express this as actual move construction). So; // the default copy ctor here is fine, because the base class disables the; // source anyway, so the user-defined ~ImmediateDiagBuilder is a safe no-op; // in that case anwyay.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:359,Safety,safe,safe,359,"// This is a cunning lie. DiagnosticBuilder actually performs move; // construction in its copy constructor (but due to varied uses, it's not; // possible to conveniently express this as actual move construction). So; // the default copy ctor here is fine, because the base class disables the; // source anyway, so the user-defined ~ImmediateDiagBuilder is a safe no-op; // in that case anwyay.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:52,Usability,clear,clear,52,"// Otherwise, we need to emit the diagnostic. First clear the diagnostic; // builder itself so it won't emit the diagnostic in its own destructor.; //; // This seems wasteful, in that as written the DiagnosticBuilder dtor will; // do its own needless checks to see if the diagnostic needs to be; // emitted. However, because we take care to ensure that the builder; // objects never escape, a sufficiently smart compiler will be able to; // eliminate that code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:56,Safety,avoid,avoid,56,// It is necessary to limit this to rvalue reference to avoid calling this; // function with a bitfield lvalue argument since non-const reference to; // bitfield is not allowed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:37,Availability,error,errors,37,"/// A generic diagnostic builder for errors which may or may not be deferred.; ///; /// In CUDA, there exist constructs (e.g. variable-length arrays, try/catch); /// which are not allowed to appear inside __device__ functions and are; /// allowed to appear in __host__ __device__ functions only if the host+device; /// function is never codegen'ed.; ///; /// To handle this, we use the notion of ""deferred diagnostics"", where we; /// attach a diagnostic to a FunctionDecl that's emitted iff it's codegen'ed.; ///; /// This class lets you emit either a regular diagnostic, a deferred; /// diagnostic, or no diagnostic at all, according to an argument you pass to; /// its constructor, thus simplifying the process of creating these ""maybe; /// deferred"" diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:126,Modifiability,variab,variable-length,126,"/// A generic diagnostic builder for errors which may or may not be deferred.; ///; /// In CUDA, there exist constructs (e.g. variable-length arrays, try/catch); /// which are not allowed to appear inside __device__ functions and are; /// allowed to appear in __host__ __device__ functions only if the host+device; /// function is never codegen'ed.; ///; /// To handle this, we use the notion of ""deferred diagnostics"", where we; /// attach a diagnostic to a FunctionDecl that's emitted iff it's codegen'ed.; ///; /// This class lets you emit either a regular diagnostic, a deferred; /// diagnostic, or no diagnostic at all, according to an argument you pass to; /// its constructor, thus simplifying the process of creating these ""maybe; /// deferred"" diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:689,Usability,simpl,simplifying,689,"/// A generic diagnostic builder for errors which may or may not be deferred.; ///; /// In CUDA, there exist constructs (e.g. variable-length arrays, try/catch); /// which are not allowed to appear inside __device__ functions and are; /// allowed to appear in __host__ __device__ functions only if the host+device; /// function is never codegen'ed.; ///; /// To handle this, we use the notion of ""deferred diagnostics"", where we; /// attach a diagnostic to a FunctionDecl that's emitted iff it's codegen'ed.; ///; /// This class lets you emit either a regular diagnostic, a deferred; /// diagnostic, or no diagnostic at all, according to an argument you pass to; /// its constructor, thus simplifying the process of creating these ""maybe; /// deferred"" diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:63,Availability,error,error,63,"/// Emit the diagnostic immediately, and, if it's a warning or error, also; /// emit a call stack showing how this function can be reached by an a; /// priori known-emitted function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:59,Availability,error,error,59,"/// Convertible to bool: True if we immediately emitted an error, false if; /// we didn't emit an error or we created a deferred error.; ///; /// Example usage:; ///; /// if (SemaDiagnosticBuilder(...) << foo << bar); /// return ExprError();; ///; /// But see CUDADiagIfDeviceCode() and CUDADiagIfHostCode() -- you probably; /// want to use these instead of creating a SemaDiagnosticBuilder yourself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:98,Availability,error,error,98,"/// Convertible to bool: True if we immediately emitted an error, false if; /// we didn't emit an error or we created a deferred error.; ///; /// Example usage:; ///; /// if (SemaDiagnosticBuilder(...) << foo << bar); /// return ExprError();; ///; /// But see CUDADiagIfDeviceCode() and CUDADiagIfHostCode() -- you probably; /// want to use these instead of creating a SemaDiagnosticBuilder yourself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:129,Availability,error,error,129,"/// Convertible to bool: True if we immediately emitted an error, false if; /// we didn't emit an error or we created a deferred error.; ///; /// Example usage:; ///; /// if (SemaDiagnosticBuilder(...) << foo << bar); /// return ExprError();; ///; /// But see CUDADiagIfDeviceCode() and CUDADiagIfHostCode() -- you probably; /// want to use these instead of creating a SemaDiagnosticBuilder yourself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:56,Safety,avoid,avoid,56,// It is necessary to limit this to rvalue reference to avoid calling this; // function with a bitfield lvalue argument since non-const reference to; // bitfield is not allowed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:16,Availability,error,error,16,/// Is the last error level diagnostic immediate. This is used to determined; /// whether the next info diagnostic should be immediate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:25,Availability,error,error,25,/// Whether uncompilable error has occurred. This includes error happens; /// in deferred diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:59,Availability,error,error,59,/// Whether uncompilable error has occurred. This includes error happens; /// in deferred diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:24,Performance,load,loader,24,/// Retrieve the module loader associated with the preprocessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:16,Modifiability,variab,variable,16,/// Function or variable declarations to be checked for whether the deferred; /// diagnostics should be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:58,Availability,alive,alive,58,/// Custom deleter to allow FunctionScopeInfos to be kept alive for a short; /// time after they've been popped.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:86,Availability,avail,availability,86,"/// Retrieve the current function, if any, that should be analyzed for; /// potential availability violations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:28,Security,access,access,28,/// WeakTopLevelDeclDecls - access to \#pragma weak-generated Decls,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1084,Availability,error,errors,1084,"/// Build a function type.; ///; /// This routine checks the function type according to C++ rules and; /// under the assumption that the result type and parameter types have; /// just been instantiated from a template. It therefore duplicates; /// some of the behavior of GetTypeForDeclarator, but in a much; /// simpler form that is only suitable for this narrow use case.; ///; /// \param T The return type of the function.; ///; /// \param ParamTypes The parameter types of the function. This array; /// will be modified to account for adjustments to the types of the; /// function parameters.; ///; /// \param Loc The location of the entity whose type involves this; /// function type or, if there is no such entity, the location of the; /// type that will have function type.; ///; /// \param Entity The name of the entity that involves the function; /// type, if known.; ///; /// \param EPI Extra information about the function type. Usually this will; /// be taken from an existing function with the same prototype.; ///; /// \returns A suitable function type, if there are no errors. The; /// unqualified type will always be a FunctionProtoType.; /// Otherwise, returns a NULL type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:42,Integrability,rout,routine,42,"/// Build a function type.; ///; /// This routine checks the function type according to C++ rules and; /// under the assumption that the result type and parameter types have; /// just been instantiated from a template. It therefore duplicates; /// some of the behavior of GetTypeForDeclarator, but in a much; /// simpler form that is only suitable for this narrow use case.; ///; /// \param T The return type of the function.; ///; /// \param ParamTypes The parameter types of the function. This array; /// will be modified to account for adjustments to the types of the; /// function parameters.; ///; /// \param Loc The location of the entity whose type involves this; /// function type or, if there is no such entity, the location of the; /// type that will have function type.; ///; /// \param Entity The name of the entity that involves the function; /// type, if known.; ///; /// \param EPI Extra information about the function type. Usually this will; /// be taken from an existing function with the same prototype.; ///; /// \returns A suitable function type, if there are no errors. The; /// unqualified type will always be a FunctionProtoType.; /// Otherwise, returns a NULL type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:313,Usability,simpl,simpler,313,"/// Build a function type.; ///; /// This routine checks the function type according to C++ rules and; /// under the assumption that the result type and parameter types have; /// just been instantiated from a template. It therefore duplicates; /// some of the behavior of GetTypeForDeclarator, but in a much; /// simpler form that is only suitable for this narrow use case.; ///; /// \param T The return type of the function.; ///; /// \param ParamTypes The parameter types of the function. This array; /// will be modified to account for adjustments to the types of the; /// function parameters.; ///; /// \param Loc The location of the entity whose type involves this; /// function type or, if there is no such entity, the location of the; /// type that will have function type.; ///; /// \param Entity The name of the entity that involves the function; /// type, if known.; ///; /// \param EPI Extra information about the function type. Usually this will; /// be taken from an existing function with the same prototype.; ///; /// \returns A suitable function type, if there are no errors. The; /// unqualified type will always be a FunctionProtoType.; /// Otherwise, returns a NULL type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:91,Integrability,message,message,91,/// The parser has parsed the context-sensitive type 'instancetype'; /// in an Objective-C message declaration. Return the appropriate type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:217,Security,access,accessed,217,"/// Methods for marking which expressions involve dereferencing a pointer; /// marked with the 'noderef' attribute. Expressions are checked bottom up as; /// they are parsed, meaning that a noderef pointer may not be accessed. For; /// example, in `&*p` where `p` is a noderef pointer, we will first parse the; /// `*p`, but need to check that `address of` is called on it. This requires; /// keeping a container of all pending expressions and checking if the address; /// of them are eventually taken.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:11,Integrability,interface,interface,11,"/// For an interface unit, this is the implicitly imported interface unit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:59,Integrability,interface,interface,59,"/// For an interface unit, this is the implicitly imported interface unit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Cache,Cache,4,/// Cache for module units which is usable for current module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:36,Usability,usab,usable,36,/// Cache for module units which is usable for current module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Performance,load,loading,8,"// When loading a non-modular PCH files, this is used to restore module; // visibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:114,Security,expose,expose,114,"/// Determine if \p D has a visible definition. If not, suggest a declaration; /// that should be made visible to expose the definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:118,Security,expose,expose,118,"/// Determine if \p D has a reachable definition. If not, suggest a; /// declaration that should be made reachable to expose the definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:127,Availability,error,error,127,"/// Determine if \p A and \p B are equivalent internal linkage declarations; /// from different modules, and thus an ambiguity error can be downgraded to; /// an extension warning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:140,Availability,down,downgraded,140,"/// Determine if \p A and \p B are equivalent internal linkage declarations; /// from different modules, and thus an ambiguity error can be downgraded to; /// an extension warning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:108,Integrability,depend,dependent,108,"/// Attempt to behave like MSVC in situations where lookup of an unqualified; /// type name has failed in a dependent context. In these situations, we; /// automatically form a DependentTypeName that will retry lookup in a related; /// scope during instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:177,Integrability,Depend,DependentTypeName,177,"/// Attempt to behave like MSVC in situations where lookup of an unqualified; /// type name has failed in a dependent context. In these situations, we; /// automatically form a DependentTypeName that will retry lookup in a related; /// scope during instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:59,Performance,perform,performed,59,/// Describes the result of the name lookup and resolution performed; /// by \c ClassifyName().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:30,Availability,error,error,30,/// Classification failed; an error has been produced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,Integrability,depend,dependent,35,/// The name denotes a member of a dependent type that could not be; /// resolved. ActOnNameClassifiedAsDependentNonType should be called to; /// convert the result to an expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,Modifiability,variab,variable,33,/// The name was classified as a variable template name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:610,Deployability,update,updated,610,"/// Perform name lookup on the given name, classifying it based on; /// the results of name lookup and the following token.; ///; /// This routine is used by the parser to resolve identifiers and help direct; /// parsing. When the identifier cannot be found, this routine will attempt; /// to correct the typo and classify based on the resulting name.; ///; /// \param S The scope in which we're performing name lookup.; ///; /// \param SS The nested-name-specifier that precedes the name.; ///; /// \param Name The identifier. If typo correction finds an alternative name,; /// this pointer parameter will be updated accordingly.; ///; /// \param NameLoc The location of the identifier.; ///; /// \param NextToken The token following the identifier. Used to help; /// disambiguate the name.; ///; /// \param CCC The correction callback, if typo correction is desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:139,Integrability,rout,routine,139,"/// Perform name lookup on the given name, classifying it based on; /// the results of name lookup and the following token.; ///; /// This routine is used by the parser to resolve identifiers and help direct; /// parsing. When the identifier cannot be found, this routine will attempt; /// to correct the typo and classify based on the resulting name.; ///; /// \param S The scope in which we're performing name lookup.; ///; /// \param SS The nested-name-specifier that precedes the name.; ///; /// \param Name The identifier. If typo correction finds an alternative name,; /// this pointer parameter will be updated accordingly.; ///; /// \param NameLoc The location of the identifier.; ///; /// \param NextToken The token following the identifier. Used to help; /// disambiguate the name.; ///; /// \param CCC The correction callback, if typo correction is desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:264,Integrability,rout,routine,264,"/// Perform name lookup on the given name, classifying it based on; /// the results of name lookup and the following token.; ///; /// This routine is used by the parser to resolve identifiers and help direct; /// parsing. When the identifier cannot be found, this routine will attempt; /// to correct the typo and classify based on the resulting name.; ///; /// \param S The scope in which we're performing name lookup.; ///; /// \param SS The nested-name-specifier that precedes the name.; ///; /// \param Name The identifier. If typo correction finds an alternative name,; /// this pointer parameter will be updated accordingly.; ///; /// \param NameLoc The location of the identifier.; ///; /// \param NextToken The token following the identifier. Used to help; /// disambiguate the name.; ///; /// \param CCC The correction callback, if typo correction is desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Perform,Perform,4,"/// Perform name lookup on the given name, classifying it based on; /// the results of name lookup and the following token.; ///; /// This routine is used by the parser to resolve identifiers and help direct; /// parsing. When the identifier cannot be found, this routine will attempt; /// to correct the typo and classify based on the resulting name.; ///; /// \param S The scope in which we're performing name lookup.; ///; /// \param SS The nested-name-specifier that precedes the name.; ///; /// \param Name The identifier. If typo correction finds an alternative name,; /// this pointer parameter will be updated accordingly.; ///; /// \param NameLoc The location of the identifier.; ///; /// \param NextToken The token following the identifier. Used to help; /// disambiguate the name.; ///; /// \param CCC The correction callback, if typo correction is desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:396,Performance,perform,performing,396,"/// Perform name lookup on the given name, classifying it based on; /// the results of name lookup and the following token.; ///; /// This routine is used by the parser to resolve identifiers and help direct; /// parsing. When the identifier cannot be found, this routine will attempt; /// to correct the typo and classify based on the resulting name.; ///; /// \param S The scope in which we're performing name lookup.; ///; /// \param SS The nested-name-specifier that precedes the name.; ///; /// \param Name The identifier. If typo correction finds an alternative name,; /// this pointer parameter will be updated accordingly.; ///; /// \param NameLoc The location of the identifier.; ///; /// \param NextToken The token following the identifier. Used to help; /// disambiguate the name.; ///; /// \param CCC The correction callback, if typo correction is desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:78,Integrability,depend,dependent,78,/// Act on the result of classifying a name as an undeclared member of a; /// dependent base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:23,Modifiability,variab,variable,23,// Returns true if the variable declaration is a redeclaration,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:3,Modifiability,Variab,Variable,3,// Variable with automatic storage duration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:156,Availability,error,error,156,"/// An enumeration to represent the transition of states in parsing module; /// fragments and imports. If we are not parsing a C++20 TU, or we find; /// an error in state transition, the state is set to NotACXX20Module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:94,Integrability,interface,interface,94,/// The parser has processed a module-declaration that begins the definition; /// of a module interface or implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:378,Security,access,access,378,"/// The parser has processed a module import declaration.; ///; /// \param StartLoc The location of the first token in the declaration. This; /// could be the location of an '@', 'export', or 'import'.; /// \param ExportLoc The location of the 'export' keyword, if any.; /// \param ImportLoc The location of the 'import' keyword.; /// \param Path The module toplevel name as an access path.; /// \param IsPartition If the name is for a partition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:89,Availability,error,error,89,"/// Create an implicit import of the given module at the given; /// source location, for error recovery, if possible.; ///; /// This routine is typically used when an entity found by name lookup; /// is actually hidden within a module that we know about but the user; /// has forgotten to import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:95,Availability,recover,recovery,95,"/// Create an implicit import of the given module at the given; /// source location, for error recovery, if possible.; ///; /// This routine is typically used when an entity found by name lookup; /// is actually hidden within a module that we know about but the user; /// has forgotten to import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:133,Integrability,rout,routine,133,"/// Create an implicit import of the given module at the given; /// source location, for error recovery, if possible.; ///; /// This routine is typically used when an entity found by name lookup; /// is actually hidden within a module that we know about but the user; /// has forgotten to import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:95,Safety,recover,recovery,95,"/// Create an implicit import of the given module at the given; /// source location, for error recovery, if possible.; ///; /// This routine is typically used when an entity found by name lookup; /// is actually hidden within a module that we know about but the user; /// has forgotten to import.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:102,Integrability,message,message,102,"// Parsing a type within macro ""offsetof"", defined in __buitin_offsetof; // To improve our diagnostic message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:53,Integrability,interface,interface,53,// This is used for both record definitions and ObjC interface declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:139,Availability,error,error,139,"/// Perform ODR-like check for C/ObjC when merging tag types from modules.; /// Differently from C++, actually parse the body and reject / error out; /// in case of a structural mismatch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Perform,Perform,4,"/// Perform ODR-like check for C/ObjC when merging tag types from modules.; /// Differently from C++, actually parse the body and reject / error out; /// in case of a structural mismatch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:14,Security,hash,hashes,14,"/// Check ODR hashes for C/ObjC when merging types from modules.; /// Differently from C++, actually parse the body and reject in case; /// of a mismatch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:75,Availability,error,error,75,/// ActOnTagDefinitionError - Invoked when there was an unrecoverable; /// error parsing the definition of a tag.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:47,Availability,avail,availability,47,"/// Describes the kind of merge to perform for availability; /// attributes (including ""deprecated"", ""unavailable"", and ""availability"").",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:121,Availability,avail,availability,121,"/// Describes the kind of merge to perform for availability; /// attributes (including ""deprecated"", ""unavailable"", and ""availability"").",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,Performance,perform,perform,35,"/// Describes the kind of merge to perform for availability; /// attributes (including ""deprecated"", ""unavailable"", and ""availability"").",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:16,Availability,avail,availability,16,/// Don't merge availability attributes at all.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:10,Availability,avail,availability,10,"/// Merge availability attributes for a redeclaration, which requires; /// an exact match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:10,Availability,avail,availability,10,"/// Merge availability attributes for an override, which requires; /// an exact match or a weakening of constraints.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:10,Availability,avail,availability,10,/// Merge availability attributes for an implementation of; /// a protocol requirement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:66,Integrability,protocol,protocol,66,/// Merge availability attributes for an implementation of; /// a protocol requirement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:10,Availability,avail,availability,10,/// Merge availability attributes for an implementation of; /// an optional protocol requirement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:76,Integrability,protocol,protocol,76,/// Merge availability attributes for an implementation of; /// an optional protocol requirement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:47,Availability,avail,availability,47,"/// Describes the kind of priority given to an availability attribute.; ///; /// The sum of priorities deteremines the final priority of the attribute.; /// The final priority determines how the attribute will be merged.; /// An attribute with a lower priority will always remove higher priority; /// attributes for the specified platform when it is being applied. An; /// attribute with a higher priority will not be applied if the declaration; /// already has an availability attribute with a lower priority for the; /// specified platform. The final prirority values are not expected to match; /// the values in this enumeration, but instead should be treated as a plain; /// integer value. This enumeration just names the priority weights that are; /// used to calculate that final vaue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:465,Availability,avail,availability,465,"/// Describes the kind of priority given to an availability attribute.; ///; /// The sum of priorities deteremines the final priority of the attribute.; /// The final priority determines how the attribute will be merged.; /// An attribute with a lower priority will always remove higher priority; /// attributes for the specified platform when it is being applied. An; /// attribute with a higher priority will not be applied if the declaration; /// already has an availability attribute with a lower priority for the; /// specified platform. The final prirority values are not expected to match; /// the values in this enumeration, but instead should be treated as a plain; /// integer value. This enumeration just names the priority weights that are; /// used to calculate that final vaue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Availability,avail,availability,8,/// The availability attribute was specified explicitly next to the; /// declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Availability,avail,availability,8,/// The availability attribute was applied using '#pragma clang attribute'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Availability,avail,availability,8,/// The availability attribute for a specific platform was inferred from; /// an availability attribute for another platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:81,Availability,avail,availability,81,/// The availability attribute for a specific platform was inferred from; /// an availability attribute for another platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:48,Integrability,depend,depends,48,"// Calculates whether the expression Constraint depends on an enclosing; // template, for the purposes of [temp.friend] p9.; // TemplateDepth is the 'depth' of the friend function, which is used to; // compare whether a declaration reference is referring to a containing; // template, or just the current friend function. A 'lower' TemplateDepth in; // the AST refers to a 'containing' template. As the constraint is; // uninstantiated, this is relative to the 'top' of the TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:42,Integrability,depend,depends,42,// Calculates whether the friend function depends on an enclosing template for; // the purposes of [temp.friend] p9.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:120,Performance,perform,perform,120,"/// Check that the lifetime of the initializer (and its subobjects) is; /// sufficient for initializing the entity, and perform lifetime extension; /// (when permitted) if not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:45,Integrability,message,message,45,///< Call to size() in a static assert; ///< message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:32,Testability,assert,assert,32,///< Call to size() in a static assert; ///< message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:45,Integrability,message,message,45,///< Call to data() in a static assert; ///< message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:32,Testability,assert,assert,32,///< Call to data() in a static assert; ///< message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:32,Performance,perform,perform,32,/// Abstract base class used to perform a contextual implicit; /// conversion from an expression to any type passing a filter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Perform,Perform,4,/// Perform a contextual implicit conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:102,Testability,log,logic,102,"// Note that LK_String is intentionally after the other literals, as; // this is used for diagnostics logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:290,Availability,error,errors,290,"/// Emit diagnostics for the diagnose_if attributes on Function, ignoring any; /// non-ArgDependent DiagnoseIfAttrs.; ///; /// Argument-dependent diagnose_if attributes should be checked each time a; /// function is used as a direct callee of a function call.; ///; /// Returns true if any errors were emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:136,Integrability,depend,dependent,136,"/// Emit diagnostics for the diagnose_if attributes on Function, ignoring any; /// non-ArgDependent DiagnoseIfAttrs.; ///; /// Argument-dependent diagnose_if attributes should be checked each time a; /// function is used as a direct callee of a function call.; ///; /// Returns true if any errors were emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:248,Availability,error,errors,248,"/// Emit diagnostics for the diagnose_if attributes on Function, ignoring any; /// ArgDependent DiagnoseIfAttrs.; ///; /// Argument-independent diagnose_if attributes should be checked on every use; /// of a function.; ///; /// Returns true if any errors were emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:104,Availability,failure,failure,104,/// CheckCallReturnType - Checks that a call expression's return type is; /// complete. Returns true on failure. The location passed in is the location; /// that best represents the call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:38,Integrability,rout,routines,38,"/// \name Name lookup; ///; /// These routines provide name lookup that is used during semantic; /// analysis to resolve the various kinds of names (identifiers,; /// overloaded operator names, constructor names, etc.) into zero or; /// more declarations within a particular scope. The major entry; /// points are LookupName, which performs unqualified name lookup,; /// and LookupQualifiedName, which performs qualified name lookup.; ///; /// All name lookup is performed based on some specific criteria,; /// which specify what names will be visible to name lookup and how; /// far name lookup should work. These criteria are important both; /// for capturing language semantics (certain lookups will ignore; /// certain names, for example) and for performance, since name; /// lookup is often a bottleneck in the compilation of C++. Name; /// lookup criteria is specified via the LookupCriteria enumeration.; ///; /// The results of name lookup can vary based on the kind of name; /// lookup performed, the current language, and the translation; /// unit. In C, for example, name lookup will either return nothing; /// (no entity found) or a single declaration. In C++, name lookup; /// can additionally refer to a set of overloaded functions or; /// result in an ambiguity. All of the possible results of name; /// lookup are captured by the LookupResult class, which provides; /// the ability to distinguish among them.; //@{; /// Describes the kind of name lookup to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:332,Performance,perform,performs,332,"/// \name Name lookup; ///; /// These routines provide name lookup that is used during semantic; /// analysis to resolve the various kinds of names (identifiers,; /// overloaded operator names, constructor names, etc.) into zero or; /// more declarations within a particular scope. The major entry; /// points are LookupName, which performs unqualified name lookup,; /// and LookupQualifiedName, which performs qualified name lookup.; ///; /// All name lookup is performed based on some specific criteria,; /// which specify what names will be visible to name lookup and how; /// far name lookup should work. These criteria are important both; /// for capturing language semantics (certain lookups will ignore; /// certain names, for example) and for performance, since name; /// lookup is often a bottleneck in the compilation of C++. Name; /// lookup criteria is specified via the LookupCriteria enumeration.; ///; /// The results of name lookup can vary based on the kind of name; /// lookup performed, the current language, and the translation; /// unit. In C, for example, name lookup will either return nothing; /// (no entity found) or a single declaration. In C++, name lookup; /// can additionally refer to a set of overloaded functions or; /// result in an ambiguity. All of the possible results of name; /// lookup are captured by the LookupResult class, which provides; /// the ability to distinguish among them.; //@{; /// Describes the kind of name lookup to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:402,Performance,perform,performs,402,"/// \name Name lookup; ///; /// These routines provide name lookup that is used during semantic; /// analysis to resolve the various kinds of names (identifiers,; /// overloaded operator names, constructor names, etc.) into zero or; /// more declarations within a particular scope. The major entry; /// points are LookupName, which performs unqualified name lookup,; /// and LookupQualifiedName, which performs qualified name lookup.; ///; /// All name lookup is performed based on some specific criteria,; /// which specify what names will be visible to name lookup and how; /// far name lookup should work. These criteria are important both; /// for capturing language semantics (certain lookups will ignore; /// certain names, for example) and for performance, since name; /// lookup is often a bottleneck in the compilation of C++. Name; /// lookup criteria is specified via the LookupCriteria enumeration.; ///; /// The results of name lookup can vary based on the kind of name; /// lookup performed, the current language, and the translation; /// unit. In C, for example, name lookup will either return nothing; /// (no entity found) or a single declaration. In C++, name lookup; /// can additionally refer to a set of overloaded functions or; /// result in an ambiguity. All of the possible results of name; /// lookup are captured by the LookupResult class, which provides; /// the ability to distinguish among them.; //@{; /// Describes the kind of name lookup to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:463,Performance,perform,performed,463,"/// \name Name lookup; ///; /// These routines provide name lookup that is used during semantic; /// analysis to resolve the various kinds of names (identifiers,; /// overloaded operator names, constructor names, etc.) into zero or; /// more declarations within a particular scope. The major entry; /// points are LookupName, which performs unqualified name lookup,; /// and LookupQualifiedName, which performs qualified name lookup.; ///; /// All name lookup is performed based on some specific criteria,; /// which specify what names will be visible to name lookup and how; /// far name lookup should work. These criteria are important both; /// for capturing language semantics (certain lookups will ignore; /// certain names, for example) and for performance, since name; /// lookup is often a bottleneck in the compilation of C++. Name; /// lookup criteria is specified via the LookupCriteria enumeration.; ///; /// The results of name lookup can vary based on the kind of name; /// lookup performed, the current language, and the translation; /// unit. In C, for example, name lookup will either return nothing; /// (no entity found) or a single declaration. In C++, name lookup; /// can additionally refer to a set of overloaded functions or; /// result in an ambiguity. All of the possible results of name; /// lookup are captured by the LookupResult class, which provides; /// the ability to distinguish among them.; //@{; /// Describes the kind of name lookup to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:751,Performance,perform,performance,751,"/// \name Name lookup; ///; /// These routines provide name lookup that is used during semantic; /// analysis to resolve the various kinds of names (identifiers,; /// overloaded operator names, constructor names, etc.) into zero or; /// more declarations within a particular scope. The major entry; /// points are LookupName, which performs unqualified name lookup,; /// and LookupQualifiedName, which performs qualified name lookup.; ///; /// All name lookup is performed based on some specific criteria,; /// which specify what names will be visible to name lookup and how; /// far name lookup should work. These criteria are important both; /// for capturing language semantics (certain lookups will ignore; /// certain names, for example) and for performance, since name; /// lookup is often a bottleneck in the compilation of C++. Name; /// lookup criteria is specified via the LookupCriteria enumeration.; ///; /// The results of name lookup can vary based on the kind of name; /// lookup performed, the current language, and the translation; /// unit. In C, for example, name lookup will either return nothing; /// (no entity found) or a single declaration. In C++, name lookup; /// can additionally refer to a set of overloaded functions or; /// result in an ambiguity. All of the possible results of name; /// lookup are captured by the LookupResult class, which provides; /// the ability to distinguish among them.; //@{; /// Describes the kind of name lookup to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:798,Performance,bottleneck,bottleneck,798,"/// \name Name lookup; ///; /// These routines provide name lookup that is used during semantic; /// analysis to resolve the various kinds of names (identifiers,; /// overloaded operator names, constructor names, etc.) into zero or; /// more declarations within a particular scope. The major entry; /// points are LookupName, which performs unqualified name lookup,; /// and LookupQualifiedName, which performs qualified name lookup.; ///; /// All name lookup is performed based on some specific criteria,; /// which specify what names will be visible to name lookup and how; /// far name lookup should work. These criteria are important both; /// for capturing language semantics (certain lookups will ignore; /// certain names, for example) and for performance, since name; /// lookup is often a bottleneck in the compilation of C++. Name; /// lookup criteria is specified via the LookupCriteria enumeration.; ///; /// The results of name lookup can vary based on the kind of name; /// lookup performed, the current language, and the translation; /// unit. In C, for example, name lookup will either return nothing; /// (no entity found) or a single declaration. In C++, name lookup; /// can additionally refer to a set of overloaded functions or; /// result in an ambiguity. All of the possible results of name; /// lookup are captured by the LookupResult class, which provides; /// the ability to distinguish among them.; //@{; /// Describes the kind of name lookup to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:995,Performance,perform,performed,995,"/// \name Name lookup; ///; /// These routines provide name lookup that is used during semantic; /// analysis to resolve the various kinds of names (identifiers,; /// overloaded operator names, constructor names, etc.) into zero or; /// more declarations within a particular scope. The major entry; /// points are LookupName, which performs unqualified name lookup,; /// and LookupQualifiedName, which performs qualified name lookup.; ///; /// All name lookup is performed based on some specific criteria,; /// which specify what names will be visible to name lookup and how; /// far name lookup should work. These criteria are important both; /// for capturing language semantics (certain lookups will ignore; /// certain names, for example) and for performance, since name; /// lookup is often a bottleneck in the compilation of C++. Name; /// lookup criteria is specified via the LookupCriteria enumeration.; ///; /// The results of name lookup can vary based on the kind of name; /// lookup performed, the current language, and the translation; /// unit. In C, for example, name lookup will either return nothing; /// (no entity found) or a single declaration. In C++, name lookup; /// can additionally refer to a set of overloaded functions or; /// result in an ambiguity. All of the possible results of name; /// lookup are captured by the LookupResult class, which provides; /// the ability to distinguish among them.; //@{; /// Describes the kind of name lookup to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1473,Performance,perform,perform,1473,"/// \name Name lookup; ///; /// These routines provide name lookup that is used during semantic; /// analysis to resolve the various kinds of names (identifiers,; /// overloaded operator names, constructor names, etc.) into zero or; /// more declarations within a particular scope. The major entry; /// points are LookupName, which performs unqualified name lookup,; /// and LookupQualifiedName, which performs qualified name lookup.; ///; /// All name lookup is performed based on some specific criteria,; /// which specify what names will be visible to name lookup and how; /// far name lookup should work. These criteria are important both; /// for capturing language semantics (certain lookups will ignore; /// certain names, for example) and for performance, since name; /// lookup is often a bottleneck in the compilation of C++. Name; /// lookup criteria is specified via the LookupCriteria enumeration.; ///; /// The results of name lookup can vary based on the kind of name; /// lookup performed, the current language, and the translation; /// unit. In C, for example, name lookup will either return nothing; /// (no entity found) or a single declaration. In C++, name lookup; /// can additionally refer to a set of overloaded functions or; /// result in an ambiguity. All of the possible results of name; /// lookup are captured by the LookupResult class, which provides; /// the ability to distinguish among them.; //@{; /// Describes the kind of name lookup to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:70,Modifiability,variab,variables,70,"/// Ordinary name lookup, which finds ordinary names (functions,; /// variables, typedefs, etc.) in C and most kinds of names; /// (functions, variables, members, types, etc.) in C++.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:143,Modifiability,variab,variables,143,"/// Ordinary name lookup, which finds ordinary names (functions,; /// variables, typedefs, etc.) in C and most kinds of names; /// (functions, variables, members, types, etc.) in C++.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,Integrability,protocol,protocol,39,/// Look up the name of an Objective-C protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:52,Performance,perform,performed,52,/// Specifies whether (or how) name lookup is being performed for a; /// redeclaration (vs. a reference).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:258,Safety,safe,safely,258,"// A declaration with an owning module for linkage can never link against; // anything that is not visible. We don't need to check linkage here; if; // the context has internal linkage, redeclaration lookup won't find things; // from other TUs, and we can't safely compute linkage yet in general.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:30,Availability,error,error,30,/// The lookup resulted in an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:146,Performance,load,loaded,146,"// The set of known/encountered (unique, canonicalized) NamespaceDecls.; //; // The boolean value will be true to indicate that the namespace was loaded; // from an AST/PCH file, or false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:28,Performance,load,loaded,28,/// Whether we have already loaded known namespaces from an extenal; /// source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Usability,Clear,Clears,4,/// Clears the state of the given TypoExpr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:29,Availability,error,error,29,// CorrectTypo used in a non error recovery situation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,Availability,recover,recovery,35,// CorrectTypo used in a non error recovery situation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,Safety,recover,recovery,35,// CorrectTypo used in a non error recovery situation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:30,Availability,error,error,30,// CorrectTypo used in normal error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:36,Availability,recover,recovery,36,// CorrectTypo used in normal error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:36,Safety,recover,recovery,36,// CorrectTypo used in normal error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:428,Availability,Recover,RecoverUncorrectedTypos,428,"/// Process any TypoExprs in the given Expr and its children,; /// generating diagnostics as appropriate and returning a new Expr if there; /// were typos that were all successfully corrected and ExprError if one or; /// more typos could not be corrected.; ///; /// \param E The Expr to check for TypoExprs.; ///; /// \param InitDecl A VarDecl to avoid because the Expr being corrected is its; /// initializer.; ///; /// \param RecoverUncorrectedTypos If true, when typo correction fails, it; /// will rebuild the given Expr with all TypoExprs degraded to RecoveryExprs.; ///; /// \param Filter A function applied to a newly rebuilt Expr to determine if; /// it is an acceptable/usable result from a single combination of typo; /// corrections. As long as the filter returns ExprError, different; /// combinations of corrections will be tried until all are exhausted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:544,Availability,degraded,degraded,544,"/// Process any TypoExprs in the given Expr and its children,; /// generating diagnostics as appropriate and returning a new Expr if there; /// were typos that were all successfully corrected and ExprError if one or; /// more typos could not be corrected.; ///; /// \param E The Expr to check for TypoExprs.; ///; /// \param InitDecl A VarDecl to avoid because the Expr being corrected is its; /// initializer.; ///; /// \param RecoverUncorrectedTypos If true, when typo correction fails, it; /// will rebuild the given Expr with all TypoExprs degraded to RecoveryExprs.; ///; /// \param Filter A function applied to a newly rebuilt Expr to determine if; /// it is an acceptable/usable result from a single combination of typo; /// corrections. As long as the filter returns ExprError, different; /// combinations of corrections will be tried until all are exhausted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:556,Availability,Recover,RecoveryExprs,556,"/// Process any TypoExprs in the given Expr and its children,; /// generating diagnostics as appropriate and returning a new Expr if there; /// were typos that were all successfully corrected and ExprError if one or; /// more typos could not be corrected.; ///; /// \param E The Expr to check for TypoExprs.; ///; /// \param InitDecl A VarDecl to avoid because the Expr being corrected is its; /// initializer.; ///; /// \param RecoverUncorrectedTypos If true, when typo correction fails, it; /// will rebuild the given Expr with all TypoExprs degraded to RecoveryExprs.; ///; /// \param Filter A function applied to a newly rebuilt Expr to determine if; /// it is an acceptable/usable result from a single combination of typo; /// corrections. As long as the filter returns ExprError, different; /// combinations of corrections will be tried until all are exhausted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:347,Safety,avoid,avoid,347,"/// Process any TypoExprs in the given Expr and its children,; /// generating diagnostics as appropriate and returning a new Expr if there; /// were typos that were all successfully corrected and ExprError if one or; /// more typos could not be corrected.; ///; /// \param E The Expr to check for TypoExprs.; ///; /// \param InitDecl A VarDecl to avoid because the Expr being corrected is its; /// initializer.; ///; /// \param RecoverUncorrectedTypos If true, when typo correction fails, it; /// will rebuild the given Expr with all TypoExprs degraded to RecoveryExprs.; ///; /// \param Filter A function applied to a newly rebuilt Expr to determine if; /// it is an acceptable/usable result from a single combination of typo; /// corrections. As long as the filter returns ExprError, different; /// combinations of corrections will be tried until all are exhausted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:428,Safety,Recover,RecoverUncorrectedTypos,428,"/// Process any TypoExprs in the given Expr and its children,; /// generating diagnostics as appropriate and returning a new Expr if there; /// were typos that were all successfully corrected and ExprError if one or; /// more typos could not be corrected.; ///; /// \param E The Expr to check for TypoExprs.; ///; /// \param InitDecl A VarDecl to avoid because the Expr being corrected is its; /// initializer.; ///; /// \param RecoverUncorrectedTypos If true, when typo correction fails, it; /// will rebuild the given Expr with all TypoExprs degraded to RecoveryExprs.; ///; /// \param Filter A function applied to a newly rebuilt Expr to determine if; /// it is an acceptable/usable result from a single combination of typo; /// corrections. As long as the filter returns ExprError, different; /// combinations of corrections will be tried until all are exhausted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:556,Safety,Recover,RecoveryExprs,556,"/// Process any TypoExprs in the given Expr and its children,; /// generating diagnostics as appropriate and returning a new Expr if there; /// were typos that were all successfully corrected and ExprError if one or; /// more typos could not be corrected.; ///; /// \param E The Expr to check for TypoExprs.; ///; /// \param InitDecl A VarDecl to avoid because the Expr being corrected is its; /// initializer.; ///; /// \param RecoverUncorrectedTypos If true, when typo correction fails, it; /// will rebuild the given Expr with all TypoExprs degraded to RecoveryExprs.; ///; /// \param Filter A function applied to a newly rebuilt Expr to determine if; /// it is an acceptable/usable result from a single combination of typo; /// corrections. As long as the filter returns ExprError, different; /// combinations of corrections will be tried until all are exhausted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:679,Usability,usab,usable,679,"/// Process any TypoExprs in the given Expr and its children,; /// generating diagnostics as appropriate and returning a new Expr if there; /// were typos that were all successfully corrected and ExprError if one or; /// more typos could not be corrected.; ///; /// \param E The Expr to check for TypoExprs.; ///; /// \param InitDecl A VarDecl to avoid because the Expr being corrected is its; /// initializer.; ///; /// \param RecoverUncorrectedTypos If true, when typo correction fails, it; /// will rebuild the given Expr with all TypoExprs degraded to RecoveryExprs.; ///; /// \param Filter A function applied to a newly rebuilt Expr to determine if; /// it is an acceptable/usable result from a single combination of typo; /// corrections. As long as the filter returns ExprError, different; /// combinations of corrections will be tried until all are exhausted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:32,Availability,Recover,RecoveryExpr,32,//@}; /// Attempts to produce a RecoveryExpr after some AST node cannot be created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:32,Safety,Recover,RecoveryExpr,32,//@}; /// Attempts to produce a RecoveryExpr after some AST node cannot be created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:26,Integrability,rout,routine,26,// Decl attributes - this routine is the top level dispatcher.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:10,Security,validat,validaty,10,"/// Check validaty of calling convention attribute \p attr. If \p FD; /// is not null pointer, use \p FD to determine the CUDA/HIP host/device; /// target. Otherwise, it is specified by \p CFT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:258,Deployability,update,updated,258,"/// Check whether a nullability type specifier can be added to the given; /// type through some means not written in source (e.g. API notes).; ///; /// \param Type The type to which the nullability specifier will be; /// added. On success, this type will be updated appropriately.; ///; /// \param Nullability The nullability specifier to add.; ///; /// \param DiagLoc The location to use for diagnostics.; ///; /// \param AllowArrayTypes Whether to accept nullability specifiers on an; /// array type (e.g., because it will decay to a pointer).; ///; /// \param OverrideExisting Whether to override an existing, locally-specified; /// nullability specifier rather than complaining about the conflict.; ///; /// \returns true if nullability cannot be applied, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,Integrability,rout,routine,33,/// WarnExactTypedMethods - This routine issues a warning if method; /// implementation declaration matches exactly that of its declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:36,Integrability,rout,routine,36,/// CheckImplementationIvars - This routine checks if the instance variables; /// listed in the implelementation match those listed in the interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:139,Integrability,interface,interface,139,/// CheckImplementationIvars - This routine checks if the instance variables; /// listed in the implelementation match those listed in the interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:67,Modifiability,variab,variables,67,/// CheckImplementationIvars - This routine checks if the instance variables; /// listed in the implelementation match those listed in the interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:45,Integrability,rout,routine,45,/// ImplMethodsVsClassMethods - This is main routine to warn if any method; /// remains unimplemented in the class or category \@implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:43,Integrability,rout,routine,43,/// DiagnoseUnimplementedProperties - This routine warns on those properties; /// which must be implemented by this implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,Integrability,rout,routine,39,/// DefaultSynthesizeProperties - This routine default synthesizes all; /// properties which must be synthesized in the class's \@implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:42,Integrability,rout,routine,42,/// IvarBacksCurrentMethodAccessor - This routine returns 'true' if 'IV' is; /// an ivar synthesized for 'Method' and 'Method' is a property accessor; /// declared in class 'IFace'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:141,Security,access,accessor,141,/// IvarBacksCurrentMethodAccessor - This routine returns 'true' if 'IV' is; /// an ivar synthesized for 'Method' and 'Method' is a property accessor; /// declared in class 'IFace'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:136,Security,access,accessor,136,/// DiagnoseUnusedBackingIvarInAccessor - Issue an 'unused' warning if ivar which; /// backs the property is not used in the property's accessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:128,Integrability,interface,interface,128,/// Called by ActOnProperty and HandlePropertyInClassExtension to; /// handle creating the ObjcPropertyDecl for a category or \@interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:43,Integrability,rout,routine,43,/// AtomicPropertySetterGetterRules - This routine enforces the rule (via; /// warning) when atomic property has one but not the other user-declared; /// setter or getter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:60,Integrability,interface,interface,60,/// MatchAllMethodDeclarations - Check methods declaraed in interface or; /// or protocol against those declared in their implementations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:81,Integrability,protocol,protocol,81,/// MatchAllMethodDeclarations - Check methods declaraed in interface or; /// or protocol against those declared in their implementations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:31,Availability,failure,failure,31,/// Record the typo correction failure and return an empty correction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:130,Energy Efficiency,efficient,efficiently,130,"/// AddInstanceMethodToGlobalPool - All instance methods in a translation; /// unit are added to a global pool. This allows us to efficiently associate; /// a selector with a method declaraation for purposes of typechecking; /// messages sent to ""id"" (where the class of the object is unknown).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:229,Integrability,message,messages,229,"/// AddInstanceMethodToGlobalPool - All instance methods in a translation; /// unit are added to a global pool. This allows us to efficiently associate; /// a selector with a method declaraation for purposes of typechecking; /// messages sent to ""id"" (where the class of the object is unknown).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:106,Security,access,access,106,// FIXME: No need to make the entire Sema class a friend when it's just; // Sema::MakeFullExpr that needs access to the constructor below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:21,Availability,recover,recovery,21,/// Instantiation or recovery rebuild of a for-range statement. Don't; /// attempt any typo-correction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:21,Safety,recover,recovery,21,/// Instantiation or recovery rebuild of a for-range statement. Don't; /// attempt any typo-correction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:62,Safety,Avoid,Avoid,62,/// Determining whether a for-range statement could be built. Avoid any; /// unnecessary or irreversible actions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:77,Modifiability,variab,variable,77,"/// If VD is set but not otherwise used, diagnose, for a parameter or a; /// variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:26,Availability,avail,availability,26,/// Issue any -Wunguarded-availability warnings in \c FD,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:2,Safety,Avoid,AvoidPartialAvailabilityChecks,2,/*AvoidPartialAvailabilityChecks=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:151,Modifiability,variab,variable,151,"// Functions for marking a declaration referenced. These functions also; // contain the relevant logic for marking if a reference to a function or; // variable is an odr-use (in the C++11 sense). There are separate variants; // for expressions referring to a decl; these exist because odr-use marking; // needs to be delayed for some constant variables when we build one of the; // named expressions.; //; // MightBeOdrUse indicates whether the use could possibly be an odr-use, and; // should usually be true. This only needs to be set to false if the lack of; // odr-use cannot be determined from the current context (for instance,; // because the name denotes a virtual function and was written without an; // explicit nested-name-specifier).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:343,Modifiability,variab,variables,343,"// Functions for marking a declaration referenced. These functions also; // contain the relevant logic for marking if a reference to a function or; // variable is an odr-use (in the C++11 sense). There are separate variants; // for expressions referring to a decl; these exist because odr-use marking; // needs to be delayed for some constant variables when we build one of the; // named expressions.; //; // MightBeOdrUse indicates whether the use could possibly be an odr-use, and; // should usually be true. This only needs to be set to false if the lack of; // odr-use cannot be determined from the current context (for instance,; // because the name denotes a virtual function and was written without an; // explicit nested-name-specifier).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:97,Testability,log,logic,97,"// Functions for marking a declaration referenced. These functions also; // contain the relevant logic for marking if a reference to a function or; // variable is an odr-use (in the C++11 sense). There are separate variants; // for expressions referring to a decl; these exist because odr-use marking; // needs to be delayed for some constant variables when we build one of the; // named expressions.; //; // MightBeOdrUse indicates whether the use could possibly be an odr-use, and; // should usually be true. This only needs to be set to false if the lack of; // odr-use cannot be determined from the current context (for instance,; // because the name denotes a virtual function and was written without an; // explicit nested-name-specifier).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:523,Availability,error,errors,523,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1414,Availability,error,error,1414,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:546,Integrability,rout,routine,546,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:29,Modifiability,variab,variable,29,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:64,Modifiability,variab,variable,64,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:667,Modifiability,variab,variable,667,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:788,Modifiability,variab,variable,788,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:856,Modifiability,variab,variable,856,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1021,Modifiability,variab,variable,1021,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1286,Modifiability,variab,variables,1286,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1440,Modifiability,variab,variable,1440,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:610,Performance,perform,performing,610,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:29,Modifiability,variab,variable,29,/// Try to capture the given variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:18,Modifiability,variab,variable,18,/// Checks if the variable must be captured.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:12,Modifiability,variab,variable,12,"/// Given a variable, determine the type that a reference to that; /// variable will have in the given scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:71,Modifiability,variab,variable,71,"/// Given a variable, determine the type that a reference to that; /// variable will have in the given scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:145,Integrability,depend,dependent,145,/// Mark all of the declarations referenced within a particular AST node as; /// referenced. Used when template instantiation instantiates a non-dependent; /// type -- entities referenced by the type are now referenced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:11,Availability,recover,recover,11,/// Try to recover by turning the given expression into a; /// call. Returns true if recovery was attempted or an error was; /// emitted; this may also leave the ExprResult invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:85,Availability,recover,recovery,85,/// Try to recover by turning the given expression into a; /// call. Returns true if recovery was attempted or an error was; /// emitted; this may also leave the ExprResult invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:114,Availability,error,error,114,/// Try to recover by turning the given expression into a; /// call. Returns true if recovery was attempted or an error was; /// emitted; this may also leave the ExprResult invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:11,Safety,recover,recover,11,/// Try to recover by turning the given expression into a; /// call. Returns true if recovery was attempted or an error was; /// emitted; this may also leave the ExprResult invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:85,Safety,recover,recovery,85,/// Try to recover by turning the given expression into a; /// call. Returns true if recovery was attempted or an error was; /// emitted; this may also leave the ExprResult invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:136,Integrability,interface,interface,136,"/// ControllingExprOrType is either an opaque pointer coming out of a; /// ParsedType or an Expr *. FIXME: it'd be better to split this interface; /// into two so we don't take a void *, but that's awkward because one of; /// the operands is either a ParsedType or an Expr *, which doesn't lend; /// itself to generic code very well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:110,Integrability,interface,interface,110,"/// ControllingExprOrType is either a TypeSourceInfo * or an Expr *. FIXME:; /// it'd be better to split this interface into two so we don't take a; /// void *, but see the FIXME on ActOnGenericSelectionExpr as to why that; /// isn't a trivial change.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:237,Availability,error,error,237,"// This struct is for use by ActOnMemberAccess to allow; // BuildMemberReferenceExpr to be able to reinvoke ActOnMemberAccess after; // changing the access operator from a '.' to a '->' (to see if that is the; // change needed to fix an error about an unknown member, e.g. when the class; // defines a custom operator->).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:149,Security,access,access,149,"// This struct is for use by ActOnMemberAccess to allow; // BuildMemberReferenceExpr to be able to reinvoke ActOnMemberAccess after; // changing the access operator from a '.' to a '->' (to see if that is the; // change needed to fix an error about an unknown member, e.g. when the class; // defines a custom operator->).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:18,Integrability,depend,dependent,18,"/// The name is a dependent name, so the results will differ; /// from one instantiation to the next.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:7,Availability,error,error,7,/// An error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:37,Availability,error,error,37,"/// ActOnBlockError - If there is an error parsing a block, this callback; /// is invoked to pop the information about the block from the action impl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:5,Performance,cache,cache,5,// A cache representing if we've fully checked the various comparison category; // types stored in ASTContext. The bit-index corresponds to the integer value; // of a ComparisonCategoryType enumerator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:291,Availability,error,error,291,"/// Lookup the specified comparison category types in the standard; /// library, an check the VarDecls possibly returned by the operator<=>; /// builtins for that type.; ///; /// \return The type of the comparison category type corresponding to the; /// specified Kind, or a null type if an error occurs",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Testability,Test,Tests,4,"/// Tests whether Ty is an instance of std::initializer_list and, if; /// it is and Element is not NULL, assigns the element type to Element.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:100,Availability,error,error,100,"/// Looks for the std::initializer_list template and instantiates it; /// with Element, or emits an error if it's not found.; ///; /// \returns The instantiated template, or null on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:182,Availability,error,error,182,"/// Looks for the std::initializer_list template and instantiates it; /// with Element, or emits an error if it's not found.; ///; /// \returns The instantiated template, or null on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:95,Modifiability,inherit,inherited,95,/// Build a CXXConstructExpr whose constructor has already been resolved if; /// it denotes an inherited constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:93,Availability,error,error,93,/// Instantiate or parse a C++ default argument expression as necessary.; /// Return true on error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:87,Modifiability,variab,variable,87,/// FinalizeVarWithDestructor - Prepare for calling destructor on the; /// constructed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Deployability,Integrat,Integrate,4,/// Integrate another called method into the collected data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Integrability,Integrat,Integrate,4,/// Integrate another called method into the collected data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Deployability,Integrat,Integrate,4,/// Integrate an invoked expression into the collected data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Integrability,Integrat,Integrate,4,/// Integrate an invoked expression into the collected data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Deployability,Integrat,Integrate,4,/// Integrate an invoked statement into the collected data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Integrability,Integrat,Integrate,4,/// Integrate an invoked statement into the collected data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:48,Deployability,update,update,48,/// Check the given exception-specification and update the; /// exception specification information with the results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:25,Modifiability,inherit,inheriting,25,/// Define the specified inheriting constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:164,Availability,error,error,164,/// Check whether 'this' shows up in the type of a static member; /// function after the (naturally empty) cv-qualifier-seq would be.; ///; /// \returns true if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:124,Availability,error,error,124,/// Check whether 'this' shows up in the attributes of the given; /// static member function.; ///; /// \returns true if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:166,Usability,simpl,simply,166,"/// MaybeBindToTemporary - If the passed in expression has a record type with; /// a non-trivial destructor, this will return CXXBindTemporaryExpr. Otherwise; /// it simply returns the passed in expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Integrability,Wrap,Wrap,4,/// Wrap the expression in a ConstantExpr if it is a potential immediate; /// invocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:220,Availability,error,error,220,"// Checks if the -faltivec-src-compat=gcc option is specified.; // If so, AltiVecVector, AltiVecBool and AltiVecPixel types are; // treated the same way as they are when trying to initialize; // these vectors on gcc (an error is emitted).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:46,Availability,avail,available,46,"/// Make sure the value of 'this' is actually available in the current; /// context, if it is a potentially evaluated context.; ///; /// \param Loc The location at which the capture of 'this' occurs.; ///; /// \param Explicit Whether 'this' is explicitly captured in a lambda; /// capture list.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// 'this' that may or may not be used in certain specializations of; /// a nested generic lambda (depending on whether the name resolves to; /// a non-static member function or a static function).; /// \return returns 'true' if failed, 'false' if success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:624,Integrability,depend,depending,624,"/// Make sure the value of 'this' is actually available in the current; /// context, if it is a potentially evaluated context.; ///; /// \param Loc The location at which the capture of 'this' occurs.; ///; /// \param Explicit Whether 'this' is explicitly captured in a lambda; /// capture list.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// 'this' that may or may not be used in certain specializations of; /// a nested generic lambda (depending on whether the name resolves to; /// a non-static member function or a static function).; /// \return returns 'true' if failed, 'false' if success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:64,Energy Efficiency,allocate,allocated,64,/// Only look for allocation functions in the scope of the; /// allocated class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:88,Energy Efficiency,allocate,allocated,88,/// Look for allocation functions in both the global scope; /// and in the scope of the allocated class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:270,Availability,error,error,270,"/// The parser has parsed a global nested-name-specifier '::'.; ///; /// \param CCLoc The location of the '::'.; ///; /// \param SS The nested-name-specifier, which will be updated in-place; /// to reflect the parsed nested-name-specifier.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:173,Deployability,update,updated,173,"/// The parser has parsed a global nested-name-specifier '::'.; ///; /// \param CCLoc The location of the '::'.; ///; /// \param SS The nested-name-specifier, which will be updated in-place; /// to reflect the parsed nested-name-specifier.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:341,Availability,error,error,341,"/// The parser has parsed a '__super' nested-name-specifier.; ///; /// \param SuperLoc The location of the '__super' keyword.; ///; /// \param ColonColonLoc The location of the '::'.; ///; /// \param SS The nested-name-specifier, which will be updated in-place; /// to reflect the parsed nested-name-specifier.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:244,Deployability,update,updated,244,"/// The parser has parsed a '__super' nested-name-specifier.; ///; /// \param SuperLoc The location of the '__super' keyword.; ///; /// \param ColonColonLoc The location of the '::'.; ///; /// \param SS The nested-name-specifier, which will be updated in-place; /// to reflect the parsed nested-name-specifier.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:84,Security,access,access,84,"/// The type of the object, if we're parsing nested-name-specifier in; /// a member access expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:921,Availability,error,error,921,"/// The parser has parsed a nested-name-specifier 'identifier::'.; ///; /// \param S The scope in which this nested-name-specifier occurs.; ///; /// \param IdInfo Parser information about an identifier in the; /// nested-name-spec.; ///; /// \param EnteringContext Whether we're entering the context nominated by; /// this nested-name-specifier.; ///; /// \param SS The nested-name-specifier, which is both an input; /// parameter (the nested-name-specifier before this type) and an; /// output parameter (containing the full nested-name-specifier,; /// including this new type).; ///; /// \param IsCorrectedToColon If not null, suggestions to replace '::' -> ':'; /// are allowed. The bool value pointed by this parameter is set to 'true'; /// if the identifier is treated as if it was followed by ':', not '::'.; ///; /// \param OnlyNamespace If true, only considers namespaces in lookup.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:972,Availability,error,error,972,"/// The parser has parsed a nested-name-specifier; /// 'template[opt] template-name < template-args >::'.; ///; /// \param S The scope in which this nested-name-specifier occurs.; ///; /// \param SS The nested-name-specifier, which is both an input; /// parameter (the nested-name-specifier before this type) and an; /// output parameter (containing the full nested-name-specifier,; /// including this new type).; ///; /// \param TemplateKWLoc the location of the 'template' keyword, if any.; /// \param TemplateName the template name.; /// \param TemplateNameLoc The location of the template name.; /// \param LAngleLoc The location of the opening angle bracket ('<').; /// \param TemplateArgs The template arguments.; /// \param RAngleLoc The location of the closing angle bracket ('>').; /// \param CCLoc The location of the '::'.; ///; /// \param EnteringContext Whether we're entering the context of the; /// nested-name-specifier.; ///; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:362,Deployability,update,updated,362,"/// Given an annotation pointer for a nested-name-specifier, restore; /// the nested-name-specifier structure.; ///; /// \param Annotation The annotation pointer, produced by; /// \c SaveNestedNameSpecifierAnnotation().; ///; /// \param AnnotationRange The source range corresponding to the annotation.; ///; /// \param SS The nested-name-specifier that will be updated with the contents; /// of the annotation pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Perform,Perform,4,/// Perform initialization analysis of the init-capture and perform; /// any implicit conversions such as an lvalue-to-rvalue conversion if; /// not being used to initialize a reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:60,Performance,perform,perform,60,/// Perform initialization analysis of the init-capture and perform; /// any implicit conversions such as an lvalue-to-rvalue conversion if; /// not being used to initialize a reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:19,Modifiability,variab,variable,19,"/// Create a dummy variable within the declcontext of the lambda's; /// call operator, for name lookup purposes for a lambda init capture.; ///; /// CodeGen handles emission of lambda captures, ignoring these dummy; /// variables appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:220,Modifiability,variab,variables,220,"/// Create a dummy variable within the declcontext of the lambda's; /// call operator, for name lookup purposes for a lambda init capture.; ///; /// CodeGen handles emission of lambda captures, ignoring these dummy; /// variables appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:38,Availability,error,error,38,"/// ActOnLambdaError - If there is an error parsing a lambda, this callback; /// is invoked to pop the information about the lambda.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:41,Modifiability,variab,variable,41,/// Does copying/destroying the captured variable have side effects?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:104,Integrability,rout,routine,104,"/// Define the ""body"" of the conversion from a lambda object to a; /// function pointer.; ///; /// This routine doesn't actually define a sensible body; rather, it fills; /// in the initialization expression needed to copy the lambda object into; /// the block, and IR generation actually generates the real body of the; /// block pointer conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:101,Integrability,rout,routine,101,"/// Define the ""body"" of the conversion from a lambda object to a; /// block pointer.; ///; /// This routine doesn't actually define a sensible body; rather, it fills; /// in the initialization expression needed to copy the lambda object into; /// the block, and IR generation actually generates the real body of the; /// block pointer conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:190,Availability,failure,failure,190,"/// Check whether the given expression is a valid constraint expression.; /// A diagnostic is emitted if it is not, false is returned, and; /// PossibleNonPrimary will be set to true if the failure might be due to a; /// non-primary expression being used as an atomic constraint.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Cache,Caches,4,/// Caches pairs of template-like decls whose associated constraints were; /// checked for subsumption and whether or not the first's constraints did in; /// fact subsume the second's.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:116,Availability,error,error,116,"/// Caches the normalized associated constraints of declarations (concepts or; /// constrained declarations). If an error occurred while normalizing the; /// associated constraints of the template or concept, nullptr will be cached; /// here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Cache,Caches,4,"/// Caches the normalized associated constraints of declarations (concepts or; /// constrained declarations). If an error occurred while normalizing the; /// associated constraints of the template or concept, nullptr will be cached; /// here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:225,Performance,cache,cached,225,"/// Caches the normalized associated constraints of declarations (concepts or; /// constrained declarations). If an error occurred while normalizing the; /// associated constraints of the template or concept, nullptr will be cached; /// here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:37,Modifiability,variab,variables,37,/// Introduce the instantiated local variables into the local; /// instantiation scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:202,Modifiability,config,configured,202,"/// Used during constraint checking, sets up the constraint template argument; /// lists, and calls SetupConstraintScope to set up the; /// LocalInstantiationScope to have the proper set of ParVarDecls configured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:217,Availability,error,error,217,"/// \brief Check whether the given declaration's associated constraints are; /// at least as constrained than another declaration's according to the; /// partial ordering of constraints.; ///; /// \param Result If no error occurred, receives the result of true if D1 is; /// at least constrained than D2, and false otherwise.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:356,Availability,error,error,356,"/// \brief Check whether the given declaration's associated constraints are; /// at least as constrained than another declaration's according to the; /// partial ordering of constraints.; ///; /// \param Result If no error occurred, receives the result of true if D1 is; /// at least constrained than D2, and false otherwise.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:780,Availability,error,error,780,"/// \brief Check whether the given list of constraint expressions are; /// satisfied (as if in a 'conjunction') given template arguments.; /// \param Template the template-like entity that triggered the constraints; /// check (either a concept or a constrained entity).; /// \param ConstraintExprs a list of constraint expressions, treated as if; /// they were 'AND'ed together.; /// \param TemplateArgLists the list of template arguments to substitute into; /// the constraint expression.; /// \param TemplateIDRange The source range of the template id that; /// caused the constraints check.; /// \param Satisfaction if true is returned, will contain details of the; /// satisfaction, with enough information to diagnose an unsatisfied; /// expression.; /// \returns true if an error occurred and satisfaction could not be checked,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1233,Availability,error,error,1233,"/// \brief Check whether the given list of constraint expressions are; /// satisfied (as if in a 'conjunction') given template arguments.; /// Additionally, takes an empty list of Expressions which is populated with; /// the instantiated versions of the ConstraintExprs.; /// \param Template the template-like entity that triggered the constraints; /// check (either a concept or a constrained entity).; /// \param ConstraintExprs a list of constraint expressions, treated as if; /// they were 'AND'ed together.; /// \param ConvertedConstraints a out parameter that will get populated with; /// the instantiated version of the ConstraintExprs if we successfully checked; /// satisfaction.; /// \param TemplateArgList the multi-level list of template arguments to; /// substitute into the constraint expression. This should be relative to the; /// top-level (hence multi-level), since we need to instantiate fully at the; /// time of checking.; /// \param TemplateIDRange The source range of the template id that; /// caused the constraints check.; /// \param Satisfaction if true is returned, will contain details of the; /// satisfaction, with enough information to diagnose an unsatisfied; /// expression.; /// \returns true if an error occurred and satisfaction could not be checked,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:221,Availability,error,error,221,"/// \brief Check whether the given non-dependent constraint expression is; /// satisfied. Returns false and updates Satisfaction with the satisfaction; /// verdict if successful, emits a diagnostic and returns true if an error; /// occurred and satisfaction could not be determined.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:313,Availability,error,error,313,"/// \brief Check whether the given non-dependent constraint expression is; /// satisfied. Returns false and updates Satisfaction with the satisfaction; /// verdict if successful, emits a diagnostic and returns true if an error; /// occurred and satisfaction could not be determined.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:108,Deployability,update,updates,108,"/// \brief Check whether the given non-dependent constraint expression is; /// satisfied. Returns false and updates Satisfaction with the satisfaction; /// verdict if successful, emits a diagnostic and returns true if an error; /// occurred and satisfaction could not be determined.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,Integrability,depend,dependent,39,"/// \brief Check whether the given non-dependent constraint expression is; /// satisfied. Returns false and updates Satisfaction with the satisfaction; /// verdict if successful, emits a diagnostic and returns true if an error; /// occurred and satisfaction could not be determined.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:232,Availability,error,error,232,"/// Check whether the given function decl's trailing requires clause is; /// satisfied, if any. Returns false and updates Satisfaction with the; /// satisfaction verdict if successful, emits a diagnostic and returns true if; /// an error occurred and satisfaction could not be determined.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:319,Availability,error,error,319,"/// Check whether the given function decl's trailing requires clause is; /// satisfied, if any. Returns false and updates Satisfaction with the; /// satisfaction verdict if successful, emits a diagnostic and returns true if; /// an error occurred and satisfaction could not be determined.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:114,Deployability,update,updates,114,"/// Check whether the given function decl's trailing requires clause is; /// satisfied, if any. Returns false and updates Satisfaction with the; /// satisfaction verdict if successful, emits a diagnostic and returns true if; /// an error occurred and satisfaction could not be determined.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:198,Availability,error,error,198,/// \brief Emit diagnostics explaining why a constraint expression was deemed; /// unsatisfied.; /// \param First whether this is the first time an unsatisfied constraint is; /// diagnosed for this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:199,Integrability,depend,depending,199,"/// BuildObjCBoxedExpr - builds an ObjCBoxedExpr AST node for the; /// '@' prefixed parenthesized expression. The type of the expression will; /// either be ""NSNumber *"", ""NSString *"" or ""NSValue *"" depending on the type; /// of ValueType, which is allowed to be a built-in numeric type, ""char *"",; /// ""const char *"" or C structure with attribute 'objc_boxable'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,Integrability,protocol,protocol,40,/// ParseObjCProtocolExpression - Build protocol expression for \@protocol,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:66,Integrability,protocol,protocol,66,/// ParseObjCProtocolExpression - Build protocol expression for \@protocol,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:337,Performance,perform,performed,337,"/// Do semantic checks to allow the complete destructor variant to be emitted; /// when the destructor is defined in another translation unit. In the Itanium; /// C++ ABI, destructor variants are emitted together. In the MS C++ ABI, they; /// can be emitted in separate TUs. To emit the complete variant, run a subset; /// of the checks performed when emitting a regular destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Load,Load,4,/// Load any externally-stored vtable uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:87,Security,Access,Access,87,//===--------------------------------------------------------------------===//; // C++ Access Control; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:69,Availability,failure,failures,69,"/// When true, access checking violations are treated as SFINAE; /// failures rather than hard errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:95,Availability,error,errors,95,"/// When true, access checking violations are treated as SFINAE; /// failures rather than hard errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:15,Security,access,access,15,"/// When true, access checking violations are treated as SFINAE; /// failures rather than hard errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:143,Deployability,update,updates,143,"/// Try to resolve an undeclared template name as a type template.; ///; /// Sets II to the identifier corresponding to the template name, and updates; /// Name to a corresponding (typo-corrected) type template name and TNK to; /// the corresponding kind, if possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:90,Usability,guid,guide,90,/// Determine whether a particular identifier might be the name in a C++1z; /// deduction-guide declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:162,Integrability,depend,dependent,162,"/// Get the specialization of the given variable template corresponding to; /// the specified argument list, or a null-but-valid result if the arguments; /// are dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,Modifiability,variab,variable,40,"/// Get the specialization of the given variable template corresponding to; /// the specified argument list, or a null-but-valid result if the arguments; /// are dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:178,Integrability,depend,dependent,178,"/// Form a reference to the specialization of the given variable template; /// corresponding to the specified argument list, or a null-but-valid result; /// if the arguments are dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:56,Modifiability,variab,variable,56,"/// Form a reference to the specialization of the given variable template; /// corresponding to the specified argument list, or a null-but-valid result; /// if the arguments are dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1089,Availability,error,error,1089,"/// Check that the given template arguments can be provided to; /// the given template, converting the arguments along the way.; ///; /// \param Template The template to which the template arguments are being; /// provided.; ///; /// \param TemplateLoc The location of the template name in the source.; ///; /// \param TemplateArgs The list of template arguments. If the template is; /// a template template parameter, this function may extend the set of; /// template arguments to also include substituted, defaulted template; /// arguments.; ///; /// \param PartialTemplateArgs True if the list of template arguments is; /// intentionally partial, e.g., because we're checking just the initial; /// set of template arguments.; ///; /// \param Converted Will receive the converted, canonicalized template; /// arguments.; ///; /// \param UpdateArgsWithConversions If \c true, update \p TemplateArgs to; /// contain the converted forms of the template arguments as written.; /// Otherwise, \p TemplateArgs will not be modified.; ///; /// \param ConstraintsNotSatisfied If provided, and an error occurred, will; /// receive true if the cause for the error is the associated constraints of; /// the template not being satisfied by the template arguments.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1149,Availability,error,error,1149,"/// Check that the given template arguments can be provided to; /// the given template, converting the arguments along the way.; ///; /// \param Template The template to which the template arguments are being; /// provided.; ///; /// \param TemplateLoc The location of the template name in the source.; ///; /// \param TemplateArgs The list of template arguments. If the template is; /// a template template parameter, this function may extend the set of; /// template arguments to also include substituted, defaulted template; /// arguments.; ///; /// \param PartialTemplateArgs True if the list of template arguments is; /// intentionally partial, e.g., because we're checking just the initial; /// set of template arguments.; ///; /// \param Converted Will receive the converted, canonicalized template; /// arguments.; ///; /// \param UpdateArgsWithConversions If \c true, update \p TemplateArgs to; /// contain the converted forms of the template arguments as written.; /// Otherwise, \p TemplateArgs will not be modified.; ///; /// \param ConstraintsNotSatisfied If provided, and an error occurred, will; /// receive true if the cause for the error is the associated constraints of; /// the template not being satisfied by the template arguments.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1283,Availability,error,error,1283,"/// Check that the given template arguments can be provided to; /// the given template, converting the arguments along the way.; ///; /// \param Template The template to which the template arguments are being; /// provided.; ///; /// \param TemplateLoc The location of the template name in the source.; ///; /// \param TemplateArgs The list of template arguments. If the template is; /// a template template parameter, this function may extend the set of; /// template arguments to also include substituted, defaulted template; /// arguments.; ///; /// \param PartialTemplateArgs True if the list of template arguments is; /// intentionally partial, e.g., because we're checking just the initial; /// set of template arguments.; ///; /// \param Converted Will receive the converted, canonicalized template; /// arguments.; ///; /// \param UpdateArgsWithConversions If \c true, update \p TemplateArgs to; /// contain the converted forms of the template arguments as written.; /// Otherwise, \p TemplateArgs will not be modified.; ///; /// \param ConstraintsNotSatisfied If provided, and an error occurred, will; /// receive true if the cause for the error is the associated constraints of; /// the template not being satisfied by the template arguments.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:839,Deployability,Update,UpdateArgsWithConversions,839,"/// Check that the given template arguments can be provided to; /// the given template, converting the arguments along the way.; ///; /// \param Template The template to which the template arguments are being; /// provided.; ///; /// \param TemplateLoc The location of the template name in the source.; ///; /// \param TemplateArgs The list of template arguments. If the template is; /// a template template parameter, this function may extend the set of; /// template arguments to also include substituted, defaulted template; /// arguments.; ///; /// \param PartialTemplateArgs True if the list of template arguments is; /// intentionally partial, e.g., because we're checking just the initial; /// set of template arguments.; ///; /// \param Converted Will receive the converted, canonicalized template; /// arguments.; ///; /// \param UpdateArgsWithConversions If \c true, update \p TemplateArgs to; /// contain the converted forms of the template arguments as written.; /// Otherwise, \p TemplateArgs will not be modified.; ///; /// \param ConstraintsNotSatisfied If provided, and an error occurred, will; /// receive true if the cause for the error is the associated constraints of; /// the template not being satisfied by the template arguments.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:877,Deployability,update,update,877,"/// Check that the given template arguments can be provided to; /// the given template, converting the arguments along the way.; ///; /// \param Template The template to which the template arguments are being; /// provided.; ///; /// \param TemplateLoc The location of the template name in the source.; ///; /// \param TemplateArgs The list of template arguments. If the template is; /// a template template parameter, this function may extend the set of; /// template arguments to also include substituted, defaulted template; /// arguments.; ///; /// \param PartialTemplateArgs True if the list of template arguments is; /// intentionally partial, e.g., because we're checking just the initial; /// set of template arguments.; ///; /// \param Converted Will receive the converted, canonicalized template; /// arguments.; ///; /// \param UpdateArgsWithConversions If \c true, update \p TemplateArgs to; /// contain the converted forms of the template arguments as written.; /// Otherwise, \p TemplateArgs will not be modified.; ///; /// \param ConstraintsNotSatisfied If provided, and an error occurred, will; /// receive true if the cause for the error is the associated constraints of; /// the template not being satisfied by the template arguments.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:437,Modifiability,extend,extend,437,"/// Check that the given template arguments can be provided to; /// the given template, converting the arguments along the way.; ///; /// \param Template The template to which the template arguments are being; /// provided.; ///; /// \param TemplateLoc The location of the template name in the source.; ///; /// \param TemplateArgs The list of template arguments. If the template is; /// a template template parameter, this function may extend the set of; /// template arguments to also include substituted, defaulted template; /// arguments.; ///; /// \param PartialTemplateArgs True if the list of template arguments is; /// intentionally partial, e.g., because we're checking just the initial; /// set of template arguments.; ///; /// \param Converted Will receive the converted, canonicalized template; /// arguments.; ///; /// \param UpdateArgsWithConversions If \c true, update \p TemplateArgs to; /// contain the converted forms of the template arguments as written.; /// Otherwise, \p TemplateArgs will not be modified.; ///; /// \param ConstraintsNotSatisfied If provided, and an error occurred, will; /// receive true if the cause for the error is the associated constraints of; /// the template not being satisfied by the template arguments.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:315,Availability,error,error,315,//===--------------------------------------------------------------------===//; // C++ Variadic Templates (C++0x [temp.variadic]); //===--------------------------------------------------------------------===//; /// Determine whether an unexpanded parameter pack might be permitted in this; /// location. Useful for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:321,Availability,recover,recovery,321,//===--------------------------------------------------------------------===//; // C++ Variadic Templates (C++0x [temp.variadic]); //===--------------------------------------------------------------------===//; /// Determine whether an unexpanded parameter pack might be permitted in this; /// location. Useful for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:321,Safety,recover,recovery,321,//===--------------------------------------------------------------------===//; // C++ Variadic Templates (C++0x [temp.variadic]); //===--------------------------------------------------------------------===//; /// Determine whether an unexpanded parameter pack might be permitted in this; /// location. Useful for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:31,Testability,assert,assertion,31,/// The expression in a static assertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:306,Availability,error,error,306,"/// Diagnose unexpanded parameter packs.; ///; /// \param Loc The location at which we should emit the diagnostic.; ///; /// \param UPPC The context in which we are diagnosing unexpanded; /// parameter packs.; ///; /// \param Unexpanded the set of unexpanded parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:79,Availability,error,error,79,"/// If the given type contains an unexpanded parameter pack,; /// diagnose the error.; ///; /// \param Loc The source location where a diagnostc should be emitted.; ///; /// \param T The type that is being checked for unexpanded parameter; /// packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:281,Availability,error,error,281,"/// If the given type contains an unexpanded parameter pack,; /// diagnose the error.; ///; /// \param Loc The source location where a diagnostc should be emitted.; ///; /// \param T The type that is being checked for unexpanded parameter; /// packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:85,Availability,error,error,85,"/// If the given expression contains an unexpanded parameter; /// pack, diagnose the error.; ///; /// \param E The expression that is being checked for unexpanded; /// parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:215,Availability,error,error,215,"/// If the given expression contains an unexpanded parameter; /// pack, diagnose the error.; ///; /// \param E The expression that is being checked for unexpanded; /// parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:124,Availability,error,error,124,"/// If the given requirees-expression contains an unexpanded reference to one; /// of its own parameter packs, diagnose the error.; ///; /// \param RE The requiress-expression that is being checked for unexpanded; /// parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:265,Availability,error,error,265,"/// If the given requirees-expression contains an unexpanded reference to one; /// of its own parameter packs, diagnose the error.; ///; /// \param RE The requiress-expression that is being checked for unexpanded; /// parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:96,Availability,error,error,96,"/// If the given nested-name-specifier contains an unexpanded; /// parameter pack, diagnose the error.; ///; /// \param SS The nested-name-specifier that is being checked for; /// unexpanded parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:238,Availability,error,error,238,"/// If the given nested-name-specifier contains an unexpanded; /// parameter pack, diagnose the error.; ///; /// \param SS The nested-name-specifier that is being checked for; /// unexpanded parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:79,Availability,error,error,79,"/// If the given name contains an unexpanded parameter pack,; /// diagnose the error.; ///; /// \param NameInfo The name (with source location information) that; /// is being checked for unexpanded parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:245,Availability,error,error,245,"/// If the given name contains an unexpanded parameter pack,; /// diagnose the error.; ///; /// \param NameInfo The name (with source location information) that; /// is being checked for unexpanded parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:88,Availability,error,error,88,"/// If the given template name contains an unexpanded parameter pack,; /// diagnose the error.; ///; /// \param Loc The location of the template name.; ///; /// \param Template The template name that is being checked for unexpanded; /// parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:284,Availability,error,error,284,"/// If the given template name contains an unexpanded parameter pack,; /// diagnose the error.; ///; /// \param Loc The location of the template name.; ///; /// \param Template The template name that is being checked for unexpanded; /// parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:92,Availability,error,error,92,"/// If the given template argument contains an unexpanded parameter; /// pack, diagnose the error.; ///; /// \param Arg The template argument that is being checked for unexpanded; /// parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:231,Availability,error,error,231,"/// If the given template argument contains an unexpanded parameter; /// pack, diagnose the error.; ///; /// \param Arg The template argument that is being checked for unexpanded; /// parameter packs.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:1440,Availability,error,error,1440,"/// Determine whether we could expand a pack expansion with the; /// given set of parameter packs into separate arguments by repeatedly; /// transforming the pattern.; ///; /// \param EllipsisLoc The location of the ellipsis that identifies the; /// pack expansion.; ///; /// \param PatternRange The source range that covers the entire pattern of; /// the pack expansion.; ///; /// \param Unexpanded The set of unexpanded parameter packs within the; /// pattern.; ///; /// \param ShouldExpand Will be set to \c true if the transformer should; /// expand the corresponding pack expansions into separate arguments. When; /// set, \c NumExpansions must also be set.; ///; /// \param RetainExpansion Whether the caller should add an unexpanded; /// pack expansion after all of the expanded arguments. This is used; /// when extending explicitly-specified template argument packs per; /// C++0x [temp.arg.explicit]p9.; ///; /// \param NumExpansions The number of separate arguments that will be in; /// the expanded form of the corresponding pack expansion. This is both an; /// input and an output parameter, which can be set by the caller if the; /// number of expansions is known a priori (e.g., due to a prior substitution); /// and will be set by the callee when the number of expansions is known.; /// The callee must set this value when \c ShouldExpand is \c true; it may; /// set this value in other cases.; ///; /// \returns true if an error occurred (e.g., because the parameter packs; /// are to be instantiated with arguments of different lengths), false; /// otherwise. If false, \c ShouldExpand (and possibly \c NumExpansions); /// must be set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:820,Modifiability,extend,extending,820,"/// Determine whether we could expand a pack expansion with the; /// given set of parameter packs into separate arguments by repeatedly; /// transforming the pattern.; ///; /// \param EllipsisLoc The location of the ellipsis that identifies the; /// pack expansion.; ///; /// \param PatternRange The source range that covers the entire pattern of; /// the pack expansion.; ///; /// \param Unexpanded The set of unexpanded parameter packs within the; /// pattern.; ///; /// \param ShouldExpand Will be set to \c true if the transformer should; /// expand the corresponding pack expansions into separate arguments. When; /// set, \c NumExpansions must also be set.; ///; /// \param RetainExpansion Whether the caller should add an unexpanded; /// pack expansion after all of the expanded arguments. This is used; /// when extending explicitly-specified template argument packs per; /// C++0x [temp.arg.explicit]p9.; ///; /// \param NumExpansions The number of separate arguments that will be in; /// the expanded form of the corresponding pack expansion. This is both an; /// input and an output parameter, which can be set by the caller if the; /// number of expansions is known a priori (e.g., due to a prior substitution); /// and will be set by the callee when the number of expansions is known.; /// The callee must set this value when \c ShouldExpand is \c true; it may; /// set this value in other cases.; ///; /// \returns true if an error occurred (e.g., because the parameter packs; /// are to be instantiated with arguments of different lengths), false; /// otherwise. If false, \c ShouldExpand (and possibly \c NumExpansions); /// must be set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:92,Integrability,rout,routine,92,/// Determine the number of arguments in the given pack expansion; /// type.; ///; /// This routine assumes that the number of arguments in the expansion is; /// consistent across all of the unexpanded parameter packs in its pattern.; ///; /// Returns an empty Optional if the type can't be expanded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:104,Integrability,rout,routine,104,"/// Determine whether the given declarator contains any unexpanded; /// parameter packs.; ///; /// This routine is used by the parser to disambiguate function declarators; /// with an ellipsis prior to the ')', e.g.,; ///; /// \code; /// void f(T...);; /// \endcode; ///; /// To determine whether we have an (unnamed) function parameter pack or; /// a variadic function.; ///; /// \returns true if the declarator contains any unexpanded parameter packs,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:315,Safety,avoid,avoid,315,"/// Given a template argument that contains an unexpanded parameter pack, but; /// which has already been substituted, attempt to determine the number of; /// elements that will be produced once this argument is fully-expanded.; ///; /// This is intended for use when transforming 'sizeof...(Arg)' in order to; /// avoid actually expanding the pack where possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:501,Availability,failure,failure,501,"/// Describes the result of template argument deduction.; ///; /// The TemplateDeductionResult enumeration describes the result of; /// template argument deduction, as returned from; /// DeduceTemplateArguments(). The separate TemplateDeductionInfo; /// structure provides additional information about the results of; /// template argument deduction, e.g., the deduced template argument; /// list (if successful) or the specific template parameters or; /// deduced arguments that were involved in the failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:77,Availability,error,error,77,/// Substitution of the deduced template argument values; /// resulted in an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:53,Integrability,depend,dependent,53,"/// After substituting deduced template arguments, a dependent; /// parameter type did not match the corresponding argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:72,Integrability,depend,dependent,72,"/// After substituting deduced template arguments, an element of; /// a dependent parameter type did not match the corresponding element; /// of the corresponding argument (when deducing from an initializer list).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:9,Performance,perform,performing,9,"/// When performing template argument deduction for a function; /// template, there were too many call arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:9,Performance,perform,performing,9,"/// When performing template argument deduction for a function; /// template, there were too few call arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:17,Integrability,depend,dependent,17,/// Checking non-dependent argument conversions failed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:9,Availability,error,error,9,/// Some error which was already diagnosed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:44,Performance,perform,performed,44,/// brief A function argument from which we performed template argument; // deduction for a call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:41,Integrability,Depend,Dependent,41,// Substitute auto in TypeWithAuto for a Dependent auto type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:41,Integrability,Depend,Dependent,41,// Substitute auto in TypeWithAuto for a Dependent auto type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:31,Usability,guid,guides,31,/// Declare implicit deduction guides for a class template if we've; /// not already done so.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:46,Performance,perform,performing,46,/// The kind of template instantiation we are performing,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:30,Usability,guid,guides,30,/// We are building deduction guides for a class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:66,Performance,perform,performing,66,"/// The template (or partial specialization) in which we are; /// performing the instantiation, for substitutions of prior template; /// arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:10,Integrability,Wrap,Wrap,10,"// FIXME: Wrap this union around more members, or perhaps store the; // kind-specific members in the RAII object owning the context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Integrability,depend,dependent,8,/// Non-dependent types used in templates that have already been instantiated; /// by some template instantiation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,Performance,perform,performing,33,/// Extra modules inspected when performing a lookup during a template; /// instantiation. Computed lazily.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Cache,Cache,4,/// Cache of additional modules that should be used for name lookup; /// within the current template instantiation. Computed lazily; use; /// getLookupModules() to get a complete set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:220,Modifiability,config,configurable,220,"/// The number of \p CodeSynthesisContexts that are not template; /// instantiations and, therefore, should not be counted as part of the; /// instantiation depth.; ///; /// When the instantiation depth reaches the user-configurable limit; /// \p LangOptions::InstantiationDepth we will abort instantiation.; // FIXME: Should we have a similar limit for other forms of synthesis?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:287,Safety,abort,abort,287,"/// The number of \p CodeSynthesisContexts that are not template; /// instantiations and, therefore, should not be counted as part of the; /// instantiation depth.; ///; /// When the instantiation depth reaches the user-configurable limit; /// \p LangOptions::InstantiationDepth we will abort instantiation.; // FIXME: Should we have a similar limit for other forms of synthesis?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:74,Availability,error,error,74,/// The depth of the context stack at the point when the most recent; /// error or warning was produced.; ///; /// This value is used to suppress printing of redundant context stacks; /// when there are multiple errors or warnings in the same instantiation.; // FIXME: Does this belong in Sema? It's tough to implement it anywhere else.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:158,Availability,redundant,redundant,158,/// The depth of the context stack at the point when the most recent; /// error or warning was produced.; ///; /// This value is used to suppress printing of redundant context stacks; /// when there are multiple errors or warnings in the same instantiation.; // FIXME: Does this belong in Sema? It's tough to implement it anywhere else.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:212,Availability,error,errors,212,/// The depth of the context stack at the point when the most recent; /// error or warning was produced.; ///; /// This value is used to suppress printing of redundant context stacks; /// when there are multiple errors or warnings in the same instantiation.; // FIXME: Does this belong in Sema? It's tough to implement it anywhere else.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:158,Safety,redund,redundant,158,/// The depth of the context stack at the point when the most recent; /// error or warning was produced.; ///; /// This value is used to suppress printing of redundant context stacks; /// when there are multiple errors or warnings in the same instantiation.; // FIXME: Does this belong in Sema? It's tough to implement it anywhere else.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:357,Availability,error,error,357,"/// A stack object to be created when performing template; /// instantiation.; ///; /// Construction of an object of type \c InstantiatingTemplate; /// pushes the current instantiation onto the stack of active; /// instantiations. If the size of this stack exceeds the maximum; /// number of recursive template instantiations, construction; /// produces an error and evaluates true.; ///; /// Destruction of this object will pop the named instantiation off; /// the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:38,Performance,perform,performing,38,"/// A stack object to be created when performing template; /// instantiation.; ///; /// Construction of an object of type \c InstantiatingTemplate; /// pushes the current instantiation onto the stack of active; /// instantiations. If the size of this stack exceeds the maximum; /// number of recursive template instantiations, construction; /// produces an error and evaluates true.; ///; /// Destruction of this object will pop the named instantiation off; /// the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:77,Modifiability,variab,variable,77,"/// Note that we are instantiating a class template,; /// function template, variable template, alias template,; /// or a member thereof.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:85,Modifiability,variab,variable,85,/// Note that we are instantiating as part of template; /// argument deduction for a variable template partial; /// specialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:47,Usability,guid,guides,47,/// \brief Note that we are building deduction guides.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,Performance,perform,performing,39,/// Determine whether we are currently performing template instantiation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:95,Availability,failure,failures,95,"/// Determines whether we are currently in a context where; /// template argument substitution failures are not considered; /// errors.; ///; /// \returns An empty \c Optional if we're not in a SFINAE context.; /// Otherwise, contains a pointer that, if non-NULL, contains the nearest; /// template-deduction context object, which can be used to capture; /// diagnostics that will be suppressed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:128,Availability,error,errors,128,"/// Determines whether we are currently in a context where; /// template argument substitution failures are not considered; /// errors.; ///; /// \returns An empty \c Optional if we're not in a SFINAE context.; /// Otherwise, contains a pointer that, if non-NULL, contains the nearest; /// template-deduction context object, which can be used to capture; /// diagnostics that will be suppressed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:69,Availability,error,errors,69,/// RAII class used to determine whether SFINAE has; /// trapped any errors that occur during template argument; /// deduction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,Availability,error,errors,33,/// Determine whether any SFINAE errors have been trapped.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:44,Performance,perform,performing,44,"/// RAII class used to indicate that we are performing provisional; /// semantic analysis to determine the validity of a construct, so; /// typo-correction and diagnostics in the immediate context (not within; /// implicitly-instantiated templates) should be suppressed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:61,Modifiability,variab,variables,61,/// The current instantiation scope used to store local; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:6,Performance,cache,cache,6,"/// A cache containing identifiers for which typo correction failed and; /// their locations, so that repeated attempts to correct an identifier in a; /// given location are ignored if typo correction already failed for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:22,Performance,perform,performing,22,/// Worker object for performing CFG-based warnings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Performance,queue,queue,8,/// The queue of implicit template instantiations that are required; /// but have not yet been performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:95,Performance,perform,performed,95,/// The queue of implicit template instantiations that are required; /// but have not yet been performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Queue,Queue,4,/// Queue of implicit template instantiations that cannot be performed; /// eagerly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:61,Performance,perform,performed,61,/// Queue of implicit template instantiations that cannot be performed; /// eagerly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:358,Modifiability,variab,variables,358,"/// The queue of implicit template instantiations that are required; /// and must be performed within the current local scope.; ///; /// This queue is only used for member functions of local classes in; /// templates, which must be instantiated in the same scope as their; /// enclosing function, so that they can reference function-local; /// types, static variables, enumerators, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Performance,queue,queue,8,"/// The queue of implicit template instantiations that are required; /// and must be performed within the current local scope.; ///; /// This queue is only used for member functions of local classes in; /// templates, which must be instantiated in the same scope as their; /// enclosing function, so that they can reference function-local; /// types, static variables, enumerators, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:85,Performance,perform,performed,85,"/// The queue of implicit template instantiations that are required; /// and must be performed within the current local scope.; ///; /// This queue is only used for member functions of local classes in; /// templates, which must be instantiated in the same scope as their; /// enclosing function, so that they can reference function-local; /// types, static variables, enumerators, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:142,Performance,queue,queue,142,"/// The queue of implicit template instantiations that are required; /// and must be performed within the current local scope.; ///; /// This queue is only used for member functions of local classes in; /// templates, which must be instantiated in the same scope as their; /// enclosing function, so that they can reference function-local; /// types, static variables, enumerators, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:473,Availability,error,error,473,"/// Substitute the given template arguments into a list of; /// expressions, expanding pack expansions if required.; ///; /// \param Exprs The list of expressions to substitute into.; ///; /// \param IsCall Whether this is some form of call, in which case; /// default arguments will be dropped.; ///; /// \param TemplateArgs The set of template arguments to substitute.; ///; /// \param Outputs Will receive all of the substituted arguments.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:100,Integrability,protocol,protocol,100,"/// Given a list of identifiers (and their locations), resolve the; /// names to either Objective-C protocol qualifiers or type; /// arguments, as appropriate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Integrability,protocol,protocol-qualified,27,/// Build a an Objective-C protocol-qualified 'id' type where no; /// base type was specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:31,Integrability,protocol,protocol-qualified,31,/// Build a specialized and/or protocol-qualified Objective-C type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:26,Integrability,message,message,26,/// Describes the kind of message expression indicated by a message; /// send that starts with an identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:60,Integrability,message,message,60,/// Describes the kind of message expression indicated by a message; /// send that starts with an identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Integrability,message,message,8,/// The message is sent to 'super'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Integrability,message,message,8,/// The message is an instance message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:31,Integrability,message,message,31,/// The message is an instance message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,Integrability,message,message,8,"/// The message is a class message, and the identifier is a type; /// name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Integrability,message,message,27,"/// The message is a class message, and the identifier is a type; /// name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:134,Modifiability,inherit,inherited,134,"/// Check whether the given new method is a valid override of the; /// given overridden method, and set any properties that should be inherited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:25,Energy Efficiency,power,power,25,// #pragma options align=power,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:117,Integrability,contract,contract,117,"/// ActOnPragmaFPContract - Called on well formed; /// \#pragma {STDC,OPENCL} FP_CONTRACT and; /// \#pragma clang fp contract",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:41,Performance,optimiz,optimize,41,/// Called on well formed \#pragma clang optimize.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:12,Performance,optimiz,optimize,12,"/// #pragma optimize(""[optimization-list]"", on | off).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:23,Performance,optimiz,optimization-list,23,"/// #pragma optimize(""[optimization-list]"", on | off).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:62,Performance,optimiz,optimize,62,"/// Get the location for the currently active ""\#pragma clang optimize; /// off"". If this location is invalid, then the state of the pragma is ""on"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:68,Performance,optimiz,optimize,68,"/// Only called on function definitions; if there is a MSVC #pragma optimize; /// in scope, consider changing the function's attributes based on the; /// optimization list passed to the pragma.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:154,Performance,optimiz,optimization,154,"/// Only called on function definitions; if there is a MSVC #pragma optimize; /// in scope, consider changing the function's attributes based on the; /// optimization list passed to the pragma.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:100,Integrability,depend,dependent,100,/// ConstantFoldAttrArgs - Folds attribute arguments into ConstantExprs; /// (unless they are value dependent or type dependent). Returns false; /// and emits a diagnostic if one or more of the arguments could not be; /// folded into a constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:118,Integrability,depend,dependent,118,/// ConstantFoldAttrArgs - Folds attribute arguments into ConstantExprs; /// (unless they are value dependent or type dependent). Returns false; /// and emits a diagnostic if one or more of the arguments could not be; /// folded into a constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:22,Modifiability,variab,variables,22,/// Explicitly listed variables and functions in a 'to' or 'link' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:584,Availability,error,error,584,/// Analyzes and checks a loop nest for use by a loop transformation.; ///; /// \param Kind The loop transformation directive kind.; /// \param NumLoops How many nested loops the directive is expecting.; /// \param AStmt Associated statement of the transformation directive.; /// \param LoopHelpers [out] The loop analysis result.; /// \param Body [out] The body code nested in \p NumLoops loop.; /// \param OriginalInits [out] Collection of statements and declarations that; /// must have been executed/declared before entering the; /// loop.; ///; /// \return Whether there was any error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:66,Integrability,depend,depending,66,"/// OMPD_loop is mapped to OMPD_for, OMPD_distribute or OMPD_simd depending; /// on the parameter of the bind clause. In the methods for the; /// mapped directives, check the parameters of the lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Integrability,Depend,Depending,4,/// Depending on the bind clause of OMPD_loop map the directive to new; /// directives.; /// 1) loop bind(parallel) --> OMPD_for; /// 2) loop bind(teams) --> OMPD_distribute; /// 3) loop bind(thread) --> OMPD_simd; /// This is being handled in Sema instead of Codegen because of the need for; /// rigorous semantic checking in the new mapped directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:134,Availability,avail,available,134,"/// Given the potential call expression \p Call, determine if there is a; /// specialization via the OpenMP declare variant mechanism available. If; /// there is, return the specialized call expression, otherwise return the; /// original \p Call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:48,Modifiability,variab,variables,48,/// Function tries to capture lambda's captured variables in the OpenMP region; /// before the original lambda is captured.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:175,Performance,perform,performed,175,/// Return true if the provided declaration \a VD should be captured by; /// reference.; /// \param Level Relative level of nested OpenMP construct for that the check; /// is performed.; /// \param OpenMPCaptureLevel Capture level within an OpenMP construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Modifiability,variab,variable,27,"/// Check if the specified variable is used in one of the private; /// clauses (private, firstprivate, lastprivate, reduction etc.) in OpenMP; /// constructs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Modifiability,variab,variable,27,/// Check if the specified variable is used in 'private' clause.; /// \param Level Relative level of nested OpenMP construct for that the check; /// is performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:152,Performance,perform,performed,152,/// Check if the specified variable is used in 'private' clause.; /// \param Level Relative level of nested OpenMP construct for that the check; /// is performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Modifiability,variab,variable,27,/// Check if the specified variable is captured by 'target' directive.; /// \param Level Relative level of nested OpenMP construct for that the check; /// is performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:158,Performance,perform,performed,158,/// Check if the specified variable is captured by 'target' directive.; /// \param Level Relative level of nested OpenMP construct for that the check; /// is performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:34,Modifiability,variab,variable,34,/// Check if the specified global variable must be captured by outer capture; /// regions.; /// \param Level Relative level of nested OpenMP construct for that; /// the check is performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:178,Performance,perform,performed,178,/// Check if the specified global variable must be captured by outer capture; /// regions.; /// \param Level Relative level of nested OpenMP construct for that; /// the check is performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:94,Modifiability,variab,variable,94,"/// Check if the current region is an OpenMP loop region and if it is,; /// mark loop control variable, used in \p Init for loop initialization, as; /// private by default.; /// \param Init First part of the for loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,Energy Efficiency,allocate,allocate,39,/// Called on well-formed '#pragma omp allocate'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:78,Modifiability,variab,variable,78,/// Initialize declare reduction construct initializer.; /// \return omp_priv variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:10,Modifiability,variab,variable,10,/// Check variable declaration in 'omp declare mapper' construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:21,Modifiability,variab,variable,21,/// Build the mapper variable of '#pragma omp declare mapper'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:48,Modifiability,variab,variables,48,/// Adds OMPDeclareTargetDeclAttr to referenced variables in declare target; /// directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:49,Availability,mask,masked,49,/// Called on well-formed '\#pragma omp parallel masked' after; /// parsing of the associated statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,Availability,error,error,40,/// Called on well-formed '\#pragma omp error'.; /// Error direcitive is allowed in both declared and excutable contexts.; /// Adding InExContext to identify which context is called from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:53,Availability,Error,Error,53,/// Called on well-formed '\#pragma omp error'.; /// Error direcitive is allowed in both declared and excutable contexts.; /// Adding InExContext to identify which context is called from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,Availability,mask,masked,40,/// Called on well-formed '\#pragma omp masked taskloop' after parsing of the; /// associated statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,Availability,mask,masked,40,/// Called on well-formed '\#pragma omp masked taskloop simd' after parsing of; /// the associated statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:49,Availability,mask,masked,49,/// Called on well-formed '\#pragma omp parallel masked taskloop' after; /// parsing of the associated statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:49,Availability,mask,masked,49,/// Called on well-formed '\#pragma omp parallel masked taskloop simd' after; /// parsing of the associated statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:47,Deployability,update,update,47,/// Called on well-formed '\#pragma omp target update'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,Availability,mask,masked,40,/// Called on well-formed '\#pragma omp masked' after parsing of the; // /associated statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Safety,safe,safelen,27,/// Called on well-formed 'safelen' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Deployability,update,update,27,/// Called on well-formed 'update' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Energy Efficiency,schedul,schedule,27,/// Called on well-formed 'schedule' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Deployability,update,update,27,/// Called on well-formed 'update' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Deployability,release,release,27,/// Called on well-formed 'release' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Integrability,message,message,27,/// Called on well-formed 'message' clause.; /// passing string for message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:68,Integrability,message,message,68,/// Called on well-formed 'message' clause.; /// passing string for message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,Modifiability,variab,variables,39,/// Data used for processing a list of variables in OpenMP clauses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:42,Integrability,depend,depend,42,"///< Additional modifier for linear, map, depend or; ///< lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Energy Efficiency,allocate,allocate,27,/// Called on well-formed 'allocate' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Integrability,depend,depend,27,/// Called on well-formed 'depend' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,Performance,perform,performed,33,/// The kind of conversion being performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:95,Performance,perform,perform,95,"/// IgnoredValueConversions - Given that an expression's result is; /// syntactically ignored, perform any conversions that are; /// required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:74,Performance,perform,performed,74,/// CallExprUnaryConversions - a special case of an unary conversion; /// performed on a function designator of a call expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:109,Performance,perform,performs,109,// DefaultFunctionArrayLvalueConversion - converts functions and; // arrays to their respective pointers and performs the; // lvalue-to-rvalue conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:29,Performance,perform,performs,29,// DefaultLvalueConversion - performs lvalue-to-rvalue conversion on; // the operand. This function is a no-op if the operand has a function type; // or an array type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:126,Performance,perform,performed,126,"// DefaultArgumentPromotion (C99 6.5.2.2p6). Used for function calls that; // do not have a prototype. Integer promotions are performed on each; // argument, and arguments that have type float are promoted to double.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,Performance,perform,performing,27,/// Context in which we're performing a usual arithmetic conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:333,Availability,error,error,333,"// UsualArithmeticConversions - performs the UsualUnaryConversions on it's; // operands and then handles various conversions that are common to binary; // operators (C99 6.3.1.8). If both operands aren't arithmetic, this; // routine returns the first non-arithmetic type found. The client is; // responsible for emitting appropriate error diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:225,Integrability,rout,routine,225,"// UsualArithmeticConversions - performs the UsualUnaryConversions on it's; // operands and then handles various conversions that are common to binary; // operators (C99 6.3.1.8). If both operands aren't arithmetic, this; // routine returns the first non-arithmetic type found. The client is; // responsible for emitting appropriate error diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:32,Performance,perform,performs,32,"// UsualArithmeticConversions - performs the UsualUnaryConversions on it's; // operands and then handles various conversions that are common to binary; // operators (C99 6.3.1.8). If both operands aren't arithmetic, this; // routine returns the first non-arithmetic type found. The client is; // responsible for emitting appropriate error diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:165,Usability,simpl,simple,165,"/// AssignConvertType - All of the 'assignment' semantic checks return this; /// enum to indicate whether the assignment was allowed. These checks are; /// done for simple assignments, as well as initialization, return from; /// function, argument passing, etc. The query is phrased in terms of a; /// source and destination type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:216,Integrability,protocol,protocol,216,"/// IncompatibleObjCQualifiedId - The assignment is between a qualified; /// id type and something else (that is incompatible with it). For example,; /// ""id <XXX>"" = ""Foo *"", where ""Foo *"" doesn't implement the XXX protocol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:180,Availability,mask,mask,180,"/// IsValueInFlagEnum - Determine if a value is allowed as part of a flag; /// enum. If AllowMask is true, then we also allow the complement of a valid; /// value, to be used as a mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:94,Modifiability,variab,variable,94,"/// CheckAssignmentConstraints - Perform type checking for assignment,; /// argument passing, variable initialization, and function return values.; /// C99 6.5.16.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,Performance,Perform,Perform,33,"/// CheckAssignmentConstraints - Perform type checking for assignment,; /// argument passing, variable initialization, and function return values.; /// C99 6.5.16.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:698,Deployability,update,updated,698,"/// Check assignment constraints for an assignment of RHS to LHSType.; ///; /// \param LHSType The destination type for the assignment.; /// \param RHS The source expression for the assignment.; /// \param Diagnose If \c true, diagnostics may be produced when checking; /// for assignability. If a diagnostic is produced, \p RHS will be; /// set to ExprError(). Note that this function may still return; /// without producing a diagnostic, even for an invalid assignment.; /// \param DiagnoseCFAudited If \c true, the target is a function parameter; /// in an audited Core Foundation API and does not need to be checked; /// for ARC retain issues.; /// \param ConvertRHS If \c true, \p RHS will be updated to model the; /// conversions necessary to perform the assignment. If \c false,; /// \p Diagnose must also be \c false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:749,Performance,perform,perform,749,"/// Check assignment constraints for an assignment of RHS to LHSType.; ///; /// \param LHSType The destination type for the assignment.; /// \param RHS The source expression for the assignment.; /// \param Diagnose If \c true, diagnostics may be produced when checking; /// for assignability. If a diagnostic is produced, \p RHS will be; /// set to ExprError(). Note that this function may still return; /// without producing a diagnostic, even for an invalid assignment.; /// \param DiagnoseCFAudited If \c true, the target is a function parameter; /// in an audited Core Foundation API and does not need to be checked; /// for ARC retain issues.; /// \param ConvertRHS If \c true, \p RHS will be updated to model the; /// conversions necessary to perform the assignment. If \c false,; /// \p Diagnose must also be \c false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:560,Security,audit,audited,560,"/// Check assignment constraints for an assignment of RHS to LHSType.; ///; /// \param LHSType The destination type for the assignment.; /// \param RHS The source expression for the assignment.; /// \param Diagnose If \c true, diagnostics may be produced when checking; /// for assignability. If a diagnostic is produced, \p RHS will be; /// set to ExprError(). Note that this function may still return; /// without producing a diagnostic, even for an invalid assignment.; /// \param DiagnoseCFAudited If \c true, the target is a function parameter; /// in an audited Core Foundation API and does not need to be checked; /// for ARC retain issues.; /// \param ConvertRHS If \c true, \p RHS will be updated to model the; /// conversions necessary to perform the assignment. If \c false,; /// \p Diagnose must also be \c false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:112,Availability,error,error,112,"/// the following ""Check"" methods will return a valid/converted QualType; /// or a null QualType (indicating an error diagnostic was issued).; /// type checking binary operators (subroutines of CreateBuiltinBinOp).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:44,Usability,simpl,simple,44,"// CheckAssignmentOperands is used for both simple and compound assignment.; // For simple assignment, pass both expressions and a null converted type.; // For compound assignment, pass both expressions and the converted type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:84,Usability,simpl,simple,84,"// CheckAssignmentOperands is used for both simple and compound assignment.; // For simple assignment, pass both expressions and a null converted type.; // For compound assignment, pass both expressions and the converted type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:34,Performance,perform,performed,34,"/// The conversions that would be performed on an lvalue of type T2 when; /// binding a reference of type T1 to it, as determined when evaluating; /// whether T1 is reference-compatible with T2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:51,Modifiability,extend,extended,51,"// CheckExtVectorCast - check type constraints for extended vectors.; // Since vectors are an extension, there are no C standard reference for this.; // We allow casting between vectors and integer datatypes of the same size,; // or vectors and the element type of that vector.; // returns the cast expr",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:53,Integrability,message,message,53,/// checkRetainCycles - Check whether an Objective-C message send; /// might create an obvious retain cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:56,Integrability,message,message,56,/// CheckMessageArgumentTypes - Check types in an Obj-C message send.; /// \param Method - May be null.; /// \param [out] ReturnType - The return type of the send.; /// \return true iff there were any incompatible types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:30,Integrability,message,message,30,"/// Determine the result of a message send expression based on; /// the type of the receiver, the method expected to receive the message,; /// and the form of the message send.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:129,Integrability,message,message,129,"/// Determine the result of a message send expression based on; /// the type of the receiver, the method expected to receive the message,; /// and the form of the message send.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:163,Integrability,message,message,163,"/// Determine the result of a message send expression based on; /// the type of the receiver, the method expected to receive the message,; /// and the form of the message send.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,Integrability,message,message,39,"/// If the given expression involves a message send to a method; /// with a related result type, emit a note describing what happened.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:375,Availability,error,errors,375,"/// CheckBooleanCondition - Diagnose problems involving the use of; /// the given expression as a boolean condition (e.g. in an if; /// statement). Also performs the standard function and array; /// decays, possibly changing the input variable.; ///; /// \param Loc - A location associated with the condition, e.g. the; /// 'if' keyword.; /// \return true iff there were any errors",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:235,Modifiability,variab,variable,235,"/// CheckBooleanCondition - Diagnose problems involving the use of; /// the given expression as a boolean condition (e.g. in an if; /// statement). Also performs the standard function and array; /// decays, possibly changing the input variable.; ///; /// \param Loc - A location associated with the condition, e.g. the; /// 'if' keyword.; /// \return true iff there were any errors",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:153,Performance,perform,performs,153,"/// CheckBooleanCondition - Diagnose problems involving the use of; /// the given expression as a boolean condition (e.g. in an if; /// statement). Also performs the standard function and array; /// decays, possibly changing the input variable.; ///; /// \param Loc - A location associated with the condition, e.g. the; /// 'if' keyword.; /// \return true iff there were any errors",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Availability,Redundant,Redundant,4,/// Redundant parentheses over an equality comparison can indicate; /// that the user intended an assignment used as condition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Safety,Redund,Redundant,4,/// Redundant parentheses over an equality comparison can indicate; /// that the user intended an assignment used as condition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:91,Availability,error,error,91,/// Checks that the Objective-C declaration is declared in the global scope.; /// Emits an error and marks the declaration as invalid if it's not declared; /// in the global scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:195,Availability,error,error,195,"/// Decrements our count of the number of times we've seen a pragma forcing; /// functions to be __host__ __device__. Returns false if the count is 0; /// before incrementing, so you can emit an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:92,Security,hash,hashtable,92,"/// A pair of a canonical FunctionDecl and a SourceLocation. When used as the; /// key in a hashtable, both the FD and location are hashed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:132,Security,hash,hashed,132,"/// A pair of a canonical FunctionDecl and a SourceLocation. When used as the; /// key in a hashtable, both the FD and location are hashed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:136,Safety,avoid,avoid,136,"/// FunctionDecls and SourceLocations for which CheckCUDACall has emitted a; /// (maybe deferred) ""bad call"" diagnostic. We use this to avoid emitting the; /// same deferred diag twice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:576,Modifiability,Variab,Variable-length,576,"/// Creates a SemaDiagnosticBuilder that emits the diagnostic if the current; /// context is ""used as device code"".; ///; /// - If CurContext is a __host__ function, does not emit any diagnostics; /// unless \p EmitOnBothSides is true.; /// - If CurContext is a __device__ or __global__ function, emits the; /// diagnostics immediately.; /// - If CurContext is a __host__ __device__ function and we are compiling for; /// the device, creates a diagnostic which is emitted if and when we realize; /// that the function will be codegen'ed.; ///; /// Example usage:; ///; /// // Variable-length arrays are not allowed in CUDA device code.; /// if (CUDADiagIfDeviceCode(Loc, diag::err_cuda_vla) << CurrentCUDATarget()); /// return ExprError();; /// // Otherwise, continue parsing as normal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:513,Modifiability,Variab,Variable-length,513,"/// Creates a SemaDiagnosticBuilder that emits the diagnostic if the current; /// context is ""used as device code"".; ///; /// - If CurContext is a `declare target` function or it is known that the; /// function is emitted for the device, emits the diagnostics immediately.; /// - If CurContext is a non-`declare target` function and we are compiling; /// for the device, creates a diagnostic which is emitted if and when we; /// realize that the function will be codegen'ed.; ///; /// Example usage:; ///; /// // Variable-length arrays are not allowed in NVPTX device code.; /// if (diagIfOpenMPDeviceCode(Loc, diag::err_vla_unsupported)); /// return ExprError();; /// // Otherwise, continue parsing as normal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:368,Modifiability,Variab,Variable-length,368,"/// Creates a SemaDiagnosticBuilder that emits the diagnostic if the current; /// context is ""used as host code"".; ///; /// - If CurContext is a `declare target` function or it is known that the; /// function is emitted for the host, emits the diagnostics immediately.; /// - If CurContext is a non-host function, just ignore it.; ///; /// Example usage:; ///; /// // Variable-length arrays are not allowed in NVPTX device code.; /// if (diagIfOpenMPHostode(Loc, diag::err_vla_unsupported)); /// return ExprError();; /// // Otherwise, continue parsing as normal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:41,Modifiability,variab,variable,41,/// Emitted on device side with a shadow variable on host side,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:47,Modifiability,variab,variables,47,"/// Emitted as a unified address, e.g. managed variables",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,Modifiability,variab,variable,33,/// Determines whether the given variable is emitted on host or device side.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:34,Modifiability,variab,variable,34,/// Function called during global variable; /// initialization,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:76,Integrability,depend,depending,76,"/// May add implicit CUDAHostAttr and CUDADeviceAttr attributes to FD,; /// depending on FD and the current compilation settings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:55,Integrability,depend,depending,55,"/// May add implicit CUDAConstantAttr attribute to VD, depending on VD; /// and current compilation settings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:175,Availability,error,error,175,"/// Check whether we're allowed to call Callee from the current context.; ///; /// - If the call is never allowed in a semantically-correct program; /// (CFP_Never), emits an error and returns false.; ///; /// - If the call is allowed in semantically-correct programs, but only if; /// it's never codegen'ed (CFP_WrongSide), creates a deferred diagnostic to; /// be emitted if and when the caller is codegen'ed, and returns true.; ///; /// Will only create deferred diagnostics for a given SourceLocation once,; /// so you can safely call this multiple times without generating duplicate; /// deferred errors.; ///; /// - Otherwise, returns true without emitting any diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:602,Availability,error,errors,602,"/// Check whether we're allowed to call Callee from the current context.; ///; /// - If the call is never allowed in a semantically-correct program; /// (CFP_Never), emits an error and returns false.; ///; /// - If the call is allowed in semantically-correct programs, but only if; /// it's never codegen'ed (CFP_WrongSide), creates a deferred diagnostic to; /// be emitted if and when the caller is codegen'ed, and returns true.; ///; /// Will only create deferred diagnostics for a given SourceLocation once,; /// so you can safely call this multiple times without generating duplicate; /// deferred errors.; ///; /// - Otherwise, returns true without emitting any diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:527,Safety,safe,safely,527,"/// Check whether we're allowed to call Callee from the current context.; ///; /// - If the call is never allowed in a semantically-correct program; /// (CFP_Never), emits an error and returns false.; ///; /// - If the call is allowed in semantically-correct programs, but only if; /// it's never codegen'ed (CFP_WrongSide), creates a deferred diagnostic to; /// be emitted if and when the caller is codegen'ed, and returns true.; ///; /// Will only create deferred diagnostics for a given SourceLocation once,; /// so you can safely call this multiple times without generating duplicate; /// deferred errors.; ///; /// - Otherwise, returns true without emitting any diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:492,Availability,error,error,492,"/// Given a implicit special member, infer its CUDA target from the; /// calls it needs to make to underlying base/field special members.; /// \param ClassDecl the class for which the member is being created.; /// \param CSM the kind of special member.; /// \param MemberDecl the special member itself.; /// \param ConstRHS true if this is a copy operation with a const object on; /// its RHS.; /// \param Diagnose true if this call should emit diagnostics.; /// \return true if there was an error inferring.; /// The result of this call is implicit CUDA target attribute(s) attached to; /// the member declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:106,Usability,guid,guide,106,/// \return true if \p CD can be considered empty according to CUDA; /// (E.2.3.1 in CUDA 7.5 Programming guide).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:87,Availability,error,error,87,"// \brief Checks that initializers of \p Var satisfy CUDA restrictions. In; // case of error emits appropriate diagnostic and invalidates \p Var.; //; // \details CUDA allows only empty constructors as initializers for global; // variables (see E.2.3.1, CUDA 7.5). The same restriction also applies to all; // __shared__ variables whether they are local or not (they all are implicitly; // static in CUDA). One exception is that CUDA allows constant initializers; // for __constant__ and __device__ variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:230,Modifiability,variab,variables,230,"// \brief Checks that initializers of \p Var satisfy CUDA restrictions. In; // case of error emits appropriate diagnostic and invalidates \p Var.; //; // \details CUDA allows only empty constructors as initializers for global; // variables (see E.2.3.1, CUDA 7.5). The same restriction also applies to all; // __shared__ variables whether they are local or not (they all are implicitly; // static in CUDA). One exception is that CUDA allows constant initializers; // for __constant__ and __device__ variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:321,Modifiability,variab,variables,321,"// \brief Checks that initializers of \p Var satisfy CUDA restrictions. In; // case of error emits appropriate diagnostic and invalidates \p Var.; //; // \details CUDA allows only empty constructors as initializers for global; // variables (see E.2.3.1, CUDA 7.5). The same restriction also applies to all; // __shared__ variables whether they are local or not (they all are implicitly; // static in CUDA). One exception is that CUDA allows constant initializers; // for __constant__ and __device__ variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:499,Modifiability,variab,variables,499,"// \brief Checks that initializers of \p Var satisfy CUDA restrictions. In; // case of error emits appropriate diagnostic and invalidates \p Var.; //; // \details CUDA allows only empty constructors as initializers for global; // variables (see E.2.3.1, CUDA 7.5). The same restriction also applies to all; // __shared__ variables whether they are local or not (they all are implicitly; // static in CUDA). One exception is that CUDA allows constant initializers; // for __constant__ and __device__ variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,Deployability,configurat,configuration,35,"/// Returns the name of the launch configuration function. This is the name; /// of the function that will be called to configure kernel call, with the; /// parameters specified via <<<>>>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,Modifiability,config,configuration,35,"/// Returns the name of the launch configuration function. This is the name; /// of the function that will be called to configure kernel call, with the; /// parameters specified via <<<>>>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:120,Modifiability,config,configure,120,"/// Returns the name of the launch configuration function. This is the name; /// of the function that will be called to configure kernel call, with the; /// parameters specified via <<<>>>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:49,Integrability,interface,interface,49,"/// Code completion occurs within an Objective-C interface, protocol,; /// or category.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:60,Integrability,protocol,protocol,60,"/// Code completion occurs within an Objective-C interface, protocol,; /// or category.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:88,Integrability,interface,interface,88,"/// Code completion occurs within the list of instance variables; /// in an Objective-C interface, protocol, category, or implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:99,Integrability,protocol,protocol,99,"/// Code completion occurs within the list of instance variables; /// in an Objective-C interface, protocol, category, or implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:55,Modifiability,variab,variables,55,"/// Code completion occurs within the list of instance variables; /// in an Objective-C interface, protocol, category, or implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:67,Availability,recover,recovery,67,"/// Code completion occurs within the body of a function on a; /// recovery path, where we do not have a specific handle on our position; /// in the grammar.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:67,Safety,recover,recovery,67,"/// Code completion occurs within the body of a function on a; /// recovery path, where we do not have a specific handle on our position; /// in the grammar.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:374,Energy Efficiency,reduce,reduce,374,"/// Determines the preferred type of the current function argument, by; /// examining the signatures of all possible overloads.; /// Returns null if unknown or ambiguous, or if code completion is off.; ///; /// If the code completion point has been reached, also reports the function; /// signatures that were considered.; ///; /// FIXME: rename to GuessCallArgumentType to reduce confusion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Performance,Perform,Perform,4,/// Perform semantic checks on a completed expression. This will either; /// be a full-expression or a default argument expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:56,Integrability,rout,routine,56,"/// Retrieve the parser's current scope.; ///; /// This routine must only be used when it is certain that semantic analysis; /// and the parser are in precisely the same context, which is not the case; /// when, e.g., we are performing any kind of template instantiation.; /// Therefore, the only safe places to use this scope are in the parser; /// itself and in routines directly invoked from the parser and *never* from; /// template substitution or instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:364,Integrability,rout,routines,364,"/// Retrieve the parser's current scope.; ///; /// This routine must only be used when it is certain that semantic analysis; /// and the parser are in precisely the same context, which is not the case; /// when, e.g., we are performing any kind of template instantiation.; /// Therefore, the only safe places to use this scope are in the parser; /// itself and in routines directly invoked from the parser and *never* from; /// template substitution or instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:225,Performance,perform,performing,225,"/// Retrieve the parser's current scope.; ///; /// This routine must only be used when it is certain that semantic analysis; /// and the parser are in precisely the same context, which is not the case; /// when, e.g., we are performing any kind of template instantiation.; /// Therefore, the only safe places to use this scope are in the parser; /// itself and in routines directly invoked from the parser and *never* from; /// template substitution or instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:297,Safety,safe,safe,297,"/// Retrieve the parser's current scope.; ///; /// This routine must only be used when it is certain that semantic analysis; /// and the parser are in precisely the same context, which is not the case; /// when, e.g., we are performing any kind of template instantiation.; /// Therefore, the only safe places to use this scope are in the parser; /// itself and in routines directly invoked from the parser and *never* from; /// template substitution or instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:50,Integrability,interface,interface,50,// A category implicitly has the attribute of the interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:141,Integrability,depend,dependent,141,"/// Determine the number of levels of enclosing template parameters. This is; /// only usable while parsing. Note that this does not include dependent; /// contexts in which no template parameters have yet been declared, such as; /// in a terse function template or generic lambda before the first 'auto' is; /// encountered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:87,Usability,usab,usable,87,"/// Determine the number of levels of enclosing template parameters. This is; /// only usable while parsing. Note that this does not include dependent; /// contexts in which no template parameters have yet been declared, such as; /// in a terse function template or generic lambda before the first 'auto' is; /// encountered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:26,Security,access,accesses,26,/// Small set of gathered accesses to potentially misaligned members; /// due to the packed attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:42,Security,access,accesses,42,/// Diagnoses the current set of gathered accesses. This typically; /// happens at full expression level. The set is cleared after emitting the; /// diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:117,Usability,clear,cleared,117,/// Diagnoses the current set of gathered accesses. This typically; /// happens at full expression level. The set is cleared after emitting the; /// diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:275,Security,access,access,275,/// This function checks if the expression is in the sef of potentially; /// misaligned members and it is converted to some pointer type T with lower; /// or equal alignment requirements. If so it removes it. This is used when; /// we do not want to diagnose such misaligned access (e.g. in conversions to; /// void*).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:3,Security,Hash,Hash,3,// Hash a FunctionDeclAndLoc by looking at both its FunctionDecl and its; // SourceLocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h:35,Integrability,interface,interface,35,"//===--- SemaConsumer.h - Abstract interface for AST semantics --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the SemaConsumer class, a subclass of; // ASTConsumer that is used by AST clients that also require; // additional semantic analysis.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h:16,Integrability,interface,interface,16,/// An abstract interface that should be implemented by; /// clients that read ASTs and then require further semantic; /// analysis of the entities in those ASTs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h:79,Performance,perform,perform,79,/// Initialize the semantic consumer with the Sema instance; /// being used to perform semantic analysis on the abstract syntax; /// tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h:56,Availability,avail,available,56,/// Inform the semantic consumer that Sema is no longer available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h:4,Performance,Perform,Performs,4,/// Performs a simple check to see if From type can be converted to To type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h:15,Usability,simpl,simple,15,/// Performs a simple check to see if From type can be converted to To type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h:40,Integrability,Interface,Interfaces,40,"//===--- SemaInternal.h - Internal Sema Interfaces --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides common API and #includes for the internal; // implementation of Sema.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h:15,Security,Validat,ValidatedCorrections,15,// Arrange for ValidatedCorrections[0] to always be an empty correction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h:78,Performance,perform,performing,78,/// Set-up method to add to the consumer the set of namespaces to use; /// in performing corrections to nested name specifiers. This method also; /// implicitly adds all of the known classes in the current AST context to the; /// to the consumer for correcting nested name specifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h:154,Safety,detect,detect,154,"/// In the case of deeply invalid expressions, `getNextCorrection()` will; /// never be called since the transform never makes progress. If we don't; /// detect this we risk trying to correct typos forever.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h:169,Safety,risk,risk,169,"/// In the case of deeply invalid expressions, `getNextCorrection()` will; /// never be called since the transform never makes progress. If we don't; /// detect this we risk trying to correct typos forever.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h:161,Performance,perform,performed,161,"/// Find any visible decls for the given typo correction candidate.; /// If none are found, it to the set of candidates for which qualified lookups; /// will be performed to find possible nested name specifier changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h:4,Performance,Perform,Perform,4,/// Perform qualified lookups on the queued set of typo correction; /// candidates and add the nested name specifier changes to each candidate if; /// a lookup succeeds (at which point the candidate will be returned to the; /// main pool of potential corrections).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h:37,Performance,queue,queued,37,/// Perform qualified lookups on the queued set of typo correction; /// candidates and add the nested name specifier changes to each candidate if; /// a lookup succeeds (at which point the candidate will be returned to the; /// main pool of potential corrections).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaLambda.h:151,Modifiability,variab,variable,151,"/// Examines the FunctionScopeInfo stack to determine the nearest; /// enclosing lambda (to the current lambda) that is 'capture-capable' for; /// the variable referenced in the current lambda (i.e. \p VarToCapture).; /// If successful, returns the index into Sema's FunctionScopeInfo stack; /// of the capture-capable lambda's LambdaScopeInfo.; /// See Implementation for more detailed comments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/SemaLambda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaLambda.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:44,Performance,perform,performed,44,/// The kind of template substitution being performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:103,Modifiability,rewrite,rewrite,103,"/// We are substituting template parameters for (typically) other template; /// parameters in order to rewrite a declaration as a different declaration; /// (for example, when forming a deduction guide from a constructor).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:196,Usability,guid,guide,196,"/// We are substituting template parameters for (typically) other template; /// parameters in order to rewrite a declaration as a different declaration; /// (for example, when forming a deduction guide from a constructor).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:54,Performance,perform,performed,54,/// Determine the kind of template substitution being performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:4,Usability,Clear,Clear,4,/// Clear out a specific template argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:179,Safety,safe,safety,179,// This is lame but unavoidable in a world without forward; // declarations of enums. The alternatives are to either pollute; // Sema.h (by including this file) or sacrifice type safety (by; // making Sema.h declare things as enums).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:12,Energy Efficiency,allocate,allocated,12,"/// A stack-allocated class that identifies which local; /// variable declaration instantiations are present in this scope.; ///; /// A new instance of this class type will be created whenever we; /// instantiate a new function declaration, which will have its own; /// set of parameter declarations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:61,Modifiability,variab,variable,61,"/// A stack-allocated class that identifies which local; /// variable declaration instantiations are present in this scope.; ///; /// A new instance of this class type will be created whenever we; /// instantiate a new function declaration, which will have its own; /// set of parameter declarations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:47,Performance,perform,performing,47,/// Reference to the semantic analysis that is performing; /// this template instantiation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:201,Modifiability,variab,variable,201,"/// A mapping from local declarations that occur; /// within a template to their instantiations.; ///; /// This mapping is used during instantiation to keep track of,; /// e.g., function parameter and variable declarations. For example,; /// given:; ///; /// \code; /// template<typename T> T add(T x, T y) { return x + y; }; /// \endcode; ///; /// when we instantiate add<int>, we will introduce a mapping from; /// the ParmVarDecl for 'x' that occurs in the template to the; /// instantiated ParmVarDecl for 'x'.; ///; /// For a parameter pack, the local instantiation scope may contain a; /// set of instantiated parameters. This is stored as a DeclArgumentPack; /// pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:36,Energy Efficiency,allocate,allocated,36,/// The set of argument packs we've allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:42,Modifiability,variab,variable,42,"/// The outer scope, which contains local variable; /// definitions from some other instantiation (that may not be; /// relevant to this particular scope).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:44,Availability,down,down,44,"/// Clone this scope, and all outer scopes, down to the given; /// outermost scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:51,Availability,down,down,51,"/// deletes the given scope, and all outer scopes, down to the; /// given outermost scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:48,Usability,simpl,simply,48,// Whether to evaluate the C++20 constraints or simply substitute into them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:26,Modifiability,variab,variable,26,/// A list of out-of-line variable template partial; /// specializations that will need to be instantiated after the; /// enclosing variable's instantiation is complete.; /// FIXME: Verify that this is needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:132,Modifiability,variab,variable,132,/// A list of out-of-line variable template partial; /// specializations that will need to be instantiated after the; /// enclosing variable's instantiation is complete.; /// FIXME: Verify that this is needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/Template.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:457,Integrability,rout,routines,457,"//===- TemplateDeduction.h - C++ template argument deduction ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides types used with Sema's template argument deduction; // routines.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:95,Availability,failure,failure,95,"/// Provides information about an attempted template argument; /// deduction, whose success or failure was described by a; /// TemplateDeductionResult value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:26,Availability,error,error,26,/// Have we suppressed an error during deduction?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:49,Performance,perform,performing,49,/// The template parameter depth for which we're performing deduction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:81,Performance,perform,performing,81,/// Warnings (and follow-on notes) that were suppressed due to; /// SFINAE while performing template argument deduction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:71,Performance,perform,performed,71,/// The depth of template parameters for which deduction is being; /// performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:27,Availability,avail,available,27,/// Is a SFINAE diagnostic available?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:47,Availability,failure,failure,47,/// Set the diagnostic which caused the SFINAE failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:71,Availability,failure,failure,71,"/// The template parameter to which a template argument; /// deduction failure refers.; ///; /// Depending on the result of template argument deduction, this; /// template parameter may have different meanings:; ///; /// TDK_Incomplete: this is the first template parameter whose; /// corresponding template argument was not deduced.; ///; /// TDK_IncompletePack: this is the expanded parameter pack for; /// which we deduced too few arguments.; ///; /// TDK_Inconsistent: this is the template parameter for which; /// two different template argument values were deduced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:97,Integrability,Depend,Depending,97,"/// The template parameter to which a template argument; /// deduction failure refers.; ///; /// Depending on the result of template argument deduction, this; /// template parameter may have different meanings:; ///; /// TDK_Incomplete: this is the first template parameter whose; /// corresponding template argument was not deduced.; ///; /// TDK_IncompletePack: this is the expanded parameter pack for; /// which we deduced too few arguments.; ///; /// TDK_Inconsistent: this is the template parameter for which; /// two different template argument values were deduced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:78,Availability,failure,failure,78,"/// The first template argument to which the template; /// argument deduction failure refers.; ///; /// Depending on the result of the template argument deduction,; /// this template argument may have different meanings:; ///; /// TDK_IncompletePack: this is the number of arguments we deduced; /// for the pack.; ///; /// TDK_Inconsistent: this argument is the first value deduced; /// for the corresponding template parameter.; ///; /// TDK_SubstitutionFailure: this argument is the template; /// argument we were instantiating when we encountered an error.; ///; /// TDK_DeducedMismatch: this is the parameter type, after substituting; /// deduced arguments.; ///; /// TDK_NonDeducedMismatch: this is the component of the 'parameter'; /// of the deduction, directly provided in the source code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:553,Availability,error,error,553,"/// The first template argument to which the template; /// argument deduction failure refers.; ///; /// Depending on the result of the template argument deduction,; /// this template argument may have different meanings:; ///; /// TDK_IncompletePack: this is the number of arguments we deduced; /// for the pack.; ///; /// TDK_Inconsistent: this argument is the first value deduced; /// for the corresponding template parameter.; ///; /// TDK_SubstitutionFailure: this argument is the template; /// argument we were instantiating when we encountered an error.; ///; /// TDK_DeducedMismatch: this is the parameter type, after substituting; /// deduced arguments.; ///; /// TDK_NonDeducedMismatch: this is the component of the 'parameter'; /// of the deduction, directly provided in the source code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:104,Integrability,Depend,Depending,104,"/// The first template argument to which the template; /// argument deduction failure refers.; ///; /// Depending on the result of the template argument deduction,; /// this template argument may have different meanings:; ///; /// TDK_IncompletePack: this is the number of arguments we deduced; /// for the pack.; ///; /// TDK_Inconsistent: this argument is the first value deduced; /// for the corresponding template parameter.; ///; /// TDK_SubstitutionFailure: this argument is the template; /// argument we were instantiating when we encountered an error.; ///; /// TDK_DeducedMismatch: this is the parameter type, after substituting; /// deduced arguments.; ///; /// TDK_NonDeducedMismatch: this is the component of the 'parameter'; /// of the deduction, directly provided in the source code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:79,Availability,failure,failure,79,"/// The second template argument to which the template; /// argument deduction failure refers.; ///; /// TDK_Inconsistent: this argument is the second value deduced; /// for the corresponding template parameter.; ///; /// TDK_DeducedMismatch: this is the (adjusted) call argument type.; ///; /// TDK_NonDeducedMismatch: this is the mismatching component of the; /// 'argument' of the deduction, from which we are deducing arguments.; ///; /// FIXME: Finish documenting this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:68,Availability,failure,failure,68,/// The index of the function argument that caused a deduction; /// failure.; ///; /// TDK_DeducedMismatch: this is the index of the argument that had a; /// different argument type from its substituted parameter type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:107,Testability,test,tests,107,/// \brief The constraint satisfaction details resulting from the associated; /// constraints satisfaction tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:72,Availability,failure,failure,72,/// Opaque pointer containing additional data about; /// this deduction failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:56,Availability,failure,failure,56,"/// Retrieve the diagnostic which caused this deduction failure,; /// if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:51,Availability,failure,failure,51,"/// Retrieve the template parameter this deduction failure; /// refers to, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:76,Availability,failure,failure,76,"/// Retrieve the template argument list associated with this; /// deduction failure, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:54,Availability,failure,failure,54,"/// Return the first template argument this deduction failure; /// refers to, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:55,Availability,failure,failure,55,"/// Return the second template argument this deduction failure; /// refers to, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:67,Availability,failure,failure,67,"/// Return the index of the call argument that this deduction; /// failure refers to, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:51,Availability,failure,failure,51,/// Free any memory associated with this deduction failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:128,Availability,failure,failure,128,"/// TemplateSpecCandidate - This is a generalization of OverloadCandidate; /// which keeps track of template argument deduction failure info, when; /// handling explicit specializations (and instantiations) of templates; /// beyond function overloading.; /// For now, assume that the candidates are non-matching specializations.; /// TODO: In the future, we may need to unify/generalize this with; /// OverloadCandidate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:58,Security,access,access,58,"/// The declaration that was looked up, together with its access.; /// Might be a UsingShadowDecl, but usually a FunctionTemplateDecl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:43,Availability,failure,failure,43,/// Diagnose a template argument deduction failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:97,Availability,error,error,97,// Stores whether we're taking the address of these candidates. This helps us; // produce better error messages when dealing with the pass_object_size; // attribute on parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:103,Integrability,message,messages,103,// Stores whether we're taking the address of these candidates. This helps us; // produce better error messages when dealing with the pass_object_size; // attribute on parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:4,Usability,Clear,Clear,4,/// Clear out all of the candidates.; /// TODO: This may be unnecessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Usability,Simpl,Simple,4,/// Simple class containing the result of Sema::CorrectTypo,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:114,Availability,down,down,114,"/// Gets the ""edit distance"" of the typo correction from the typo.; /// If Normalized is true, scale the distance down by the CharDistanceWeight; /// to return the edit distance in terms of single-character edits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Usability,Clear,Clears,4,/// Clears the list of NamedDecls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Usability,Clear,Clears,4,/// Clears the list of NamedDecls before adding the new one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Usability,Clear,Clears,4,/// Clears the list of NamedDecls and adds the given set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:164,Security,validat,validators,164,"/// Simple predicate used by the default RankCandidate to; /// determine whether to return an edit distance of 0 or InvalidDistance.; /// This can be overridden by validators that only need to determine if a; /// candidate is viable, without ranking potentially viable candidates.; /// Only ValidateCandidate or RankCandidate need to be overridden by a; /// callback wishing to check the viability of correction candidates.; /// The default predicate always returns true if the candidate is not a type; /// name or keyword, true for types if WantTypeSpecifiers is true, and true; /// for keywords if WantTypeSpecifiers, WantExpressionKeywords,; /// WantCXXNamedCasts, WantRemainingKeywords, or WantObjCSuper is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:291,Security,Validat,ValidateCandidate,291,"/// Simple predicate used by the default RankCandidate to; /// determine whether to return an edit distance of 0 or InvalidDistance.; /// This can be overridden by validators that only need to determine if a; /// candidate is viable, without ranking potentially viable candidates.; /// Only ValidateCandidate or RankCandidate need to be overridden by a; /// callback wishing to check the viability of correction candidates.; /// The default predicate always returns true if the candidate is not a type; /// name or keyword, true for types if WantTypeSpecifiers is true, and true; /// for keywords if WantTypeSpecifiers, WantExpressionKeywords,; /// WantCXXNamedCasts, WantRemainingKeywords, or WantObjCSuper is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Usability,Simpl,Simple,4,"/// Simple predicate used by the default RankCandidate to; /// determine whether to return an edit distance of 0 or InvalidDistance.; /// This can be overridden by validators that only need to determine if a; /// candidate is viable, without ranking potentially viable candidates.; /// Only ValidateCandidate or RankCandidate need to be overridden by a; /// callback wishing to check the viability of correction candidates.; /// The default predicate always returns true if the candidate is not a type; /// name or keyword, true for types if WantTypeSpecifiers is true, and true; /// for keywords if WantTypeSpecifiers, WantExpressionKeywords,; /// WantCXXNamedCasts, WantRemainingKeywords, or WantObjCSuper is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:368,Integrability,depend,depending,368,"/// Method used by Sema::CorrectTypo to assign an ""edit distance"" rank; /// to a candidate (where a lower value represents a better candidate), or; /// returning InvalidDistance if the candidate is not at all viable. For; /// validation callbacks that only need to determine if a candidate is viable,; /// the default RankCandidate returns either 0 or InvalidDistance depending; /// whether ValidateCandidate returns true or false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:226,Security,validat,validation,226,"/// Method used by Sema::CorrectTypo to assign an ""edit distance"" rank; /// to a candidate (where a lower value represents a better candidate), or; /// returning InvalidDistance if the candidate is not at all viable. For; /// validation callbacks that only need to determine if a candidate is viable,; /// the default RankCandidate returns either 0 or InvalidDistance depending; /// whether ValidateCandidate returns true or false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:391,Security,Validat,ValidateCandidate,391,"/// Method used by Sema::CorrectTypo to assign an ""edit distance"" rank; /// to a candidate (where a lower value represents a better candidate), or; /// returning InvalidDistance if the candidate is not at all viable. For; /// validation callbacks that only need to determine if a candidate is viable,; /// the default RankCandidate returns either 0 or InvalidDistance depending; /// whether ValidateCandidate returns true or false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:98,Energy Efficiency,allocate,allocated,98,/// Clone this CorrectionCandidateCallback. CorrectionCandidateCallbacks are; /// initially stack-allocated. However in case where delayed typo-correction; /// is done we need to move the callback to storage with a longer lifetime.; /// Every class deriving from CorrectionCandidateCallback must implement; /// this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:21,Integrability,depend,dependent,21,// Flags for context-dependent keywords. WantFunctionLikeCasts is only; // used/meaningful when WantCXXNamedCasts is false.; // TODO: Expand these to apply to non-keywords or possibly remove them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Usability,Simpl,Simple,4,/// Simple template class for restricting typo correction candidates; /// to ones having a single Decl* of the given type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:59,Safety,safe,safety,59,// FIXME: Turn these into classes so we can have some type safety when; // we go from local ID to global and vice-versa.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:110,Security,hash,hash,110,"/// A structure for putting ""fast""-unqualified QualTypes into a; /// DenseMap. This uses the standard pointer hash function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:104,Safety,avoid,avoid,104,/// Offset relative to the start of the DECLTYPES_BLOCK block. Keep; /// structure alignment 32-bit and avoid padding gap because undefined; /// value in the padding affects AST hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:178,Security,hash,hash,178,/// Offset relative to the start of the DECLTYPES_BLOCK block. Keep; /// structure alignment 32-bit and avoid padding gap because undefined; /// value in the padding affects AST hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:121,Performance,load,loading,121,"/// The control block, which contains all of the; /// information that needs to be validated prior to committing; /// to loading the AST file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:83,Security,validat,validated,83,"/// The control block, which contains all of the; /// information that needs to be validated prior to committing; /// to loading the AST file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:17,Deployability,configurat,configuration,17,"/// The block of configuration options, used to check that; /// a module is being used in a configuration compatible with the; /// configuration in which it was built.; ///; /// This block is part of the control block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:92,Deployability,configurat,configuration,92,"/// The block of configuration options, used to check that; /// a module is being used in a configuration compatible with the; /// configuration in which it was built.; ///; /// This block is part of the control block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:131,Deployability,configurat,configuration,131,"/// The block of configuration options, used to check that; /// a module is being used in a configuration compatible with the; /// configuration in which it was built.; ///; /// This block is part of the control block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:17,Modifiability,config,configuration,17,"/// The block of configuration options, used to check that; /// a module is being used in a configuration compatible with the; /// configuration in which it was built.; ///; /// This block is part of the control block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:92,Modifiability,config,configuration,92,"/// The block of configuration options, used to check that; /// a module is being used in a configuration compatible with the; /// configuration in which it was built.; ///; /// This block is part of the control block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:131,Modifiability,config,configuration,131,"/// The block of configuration options, used to check that; /// a module is being used in a configuration compatible with the; /// configuration in which it was built.; ///; /// This block is part of the control block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:32,Security,hash,hash,32,/// Record code for the content hash of the AST block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:24,Energy Efficiency,allocate,allocated,24,/// The first record ID allocated to the extensions themselves.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:27,Security,hash,hash,27,/// The input file content hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:425,Performance,load,loaded,425,"/// Record code for the identifier table.; ///; /// The identifier table is a simple blob that contains; /// NULL-terminated strings for all of the identifiers; /// referenced by the AST file. The IDENTIFIER_OFFSET table; /// contains the mapping from identifier IDs to the characters; /// in this blob. Note that the starting offsets of all of the; /// identifiers are odd, so that, when the identifier offset; /// table is loaded in, we can use the low bit to distinguish; /// between offsets (for unresolved identifier IDs) and; /// IdentifierInfo pointers (for already-resolved identifier; /// IDs).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:78,Usability,simpl,simple,78,"/// Record code for the identifier table.; ///; /// The identifier table is a simple blob that contains; /// NULL-terminated strings for all of the identifiers; /// referenced by the AST file. The IDENTIFIER_OFFSET table; /// contains the mapping from identifier IDs to the characters; /// in this blob. Note that the starting offsets of all of the; /// identifiers are odd, so that, when the identifier offset; /// table is loaded in, we can use the low bit to distinguish; /// between offsets (for unresolved identifier IDs) and; /// IdentifierInfo pointers (for already-resolved identifier; /// IDs).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:23,Deployability,update,update,23,/// Record code for an update to the TU's lexically contained; /// declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:77,Deployability,update,update,77,"// ID 27 used to be for a list of replacement decls.; /// Record code for an update to a decl context's lookup table.; ///; /// In practice, this should only be used for the TU and namespaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:122,Deployability,update,updates,122,/// Record for offsets of DECL_UPDATES records for declarations; /// that were modified after being deserialized and need updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:27,Deployability,update,update,27,// ID 30 used to be a decl update record. These are now in the DECLTYPES; // block.; // ID 31 used to be a list of offsets to DECL_CXX_BASE_SPECIFIERS records.; // ID 32 used to be the code for \#pragma diagnostic mappings.; /// Record code for special CUDA declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:66,Performance,load,loaded,66,"/// Record code for the remapping information used to relate; /// loaded modules to the various offsets and IDs(e.g., source location; /// offests, declaration and type IDs) that are used in that module to; /// refer to other modules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:53,Modifiability,variab,variables,53,/// Record code for undefined but used functions and variables that; /// need a definition in this TU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:29,Performance,optimiz,optimize,29,/// Record code for \#pragma optimize options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:16,Deployability,configurat,configuration,16,/// Specifies a configuration macro for this module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:16,Modifiability,config,configuration,16,/// Specifies a configuration macro for this module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:371,Integrability,depend,dependent,371,"/// \defgroup ASTAST AST file AST constants; ///; /// The constants in this group describe various components of the; /// abstract syntax tree within an AST file.; ///; /// @{; /// Predefined type IDs.; ///; /// These type IDs correspond to predefined types in the AST; /// context, such as built-in types (int) and special place-holder; /// types (the \<overload> and \<dependent> type markers). Such; /// types are never actually serialized, since they will be built; /// by the AST context when it is created.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:10,Energy Efficiency,Power,PowerPC,10,// \brief PowerPC MMA types with auto numeration,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:21,Integrability,Protocol,Protocol,21,/// The Objective-C 'Protocol' type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:14,Deployability,update,updates,14,/// Record of updates for a declaration that was modified after; /// being deserialized. This can occur within DECLTYPES_BLOCK_ID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:262,Performance,perform,performing,262,"/// A record that stores the set of declarations that are; /// visible from a given DeclContext.; ///; /// The record itself stores a set of mappings, each of which; /// associates a declaration name with one or more declaration; /// IDs. This data is used when performing qualified name lookup; /// into a DeclContext via DeclContext::lookup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:7,Security,Access,AccessSpecDecl,7,/// An AccessSpecDecl record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:6,Availability,Recover,RecoveryExpr,6,/// A RecoveryExpr record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:6,Safety,Recover,RecoveryExpr,6,/// A RecoveryExpr record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:3,Integrability,Depend,DependentScopeDeclRefExpr,3,// DependentScopeDeclRefExpr,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:57,Security,hash,hash,57,/// Compute a fingerprint of this key for use in on-disk hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:13,Integrability,interface,interface,13,"/// Abstract interface for callback invocations by the ASTReader.; ///; /// While reading an AST file, the ASTReader will call the methods of the; /// listener to pass on specific information. Some of the listener methods can; /// return true to indicate to the ASTReader that the information (and; /// consequently the AST file) is invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:203,Performance,load,loading,203,"/// Receives the preprocessor options.; ///; /// \param SuggestedPredefines Can be filled in with the set of predefines; /// that are suggested by the preprocessor options. Typically only used when; /// loading a precompiled header.; ///; /// \returns true to indicate the preprocessor options are invalid, or false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:37,Performance,load,loaded,37,/// This is called for each AST file loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:11,Integrability,wrap,wrapper,11,/// Simple wrapper class for chaining listeners.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Usability,Simpl,Simple,4,/// Simple wrapper class for chaining listeners.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:40,Security,validat,validate,40,/// ASTReaderListener implementation to validate the information of; /// the PCH file against an initialized Preprocessor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:222,Security,validat,validating,222,/// ASTReaderListenter implementation to set SuggestedPredefines of; /// ASTReader which is required to use a pch file. This is the replacement; /// of PCHValidator or SimplePCHValidator when using a pch file without; /// validating it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:168,Usability,Simpl,SimplePCHValidator,168,/// ASTReaderListenter implementation to set SuggestedPredefines of; /// ASTReader which is required to use a pch file. This is the replacement; /// of PCHValidator or SimplePCHValidator when using a pch file without; /// validating it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:16,Security,hash,hash,16,/// The on-disk hash table(s) used for DeclContext name lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:408,Security,access,access,408,"// namespace serialization; /// Reads an AST files chain containing the contents of a translation; /// unit.; ///; /// The ASTReader class reads bitstreams (produced by the ASTWriter; /// class) containing the serialized representation of a given; /// abstract syntax tree and its supporting data structures. An; /// instance of the ASTReader can be attached to an ASTContext object,; /// which will provide access to the contents of the AST files.; ///; /// The AST reader provides lazy de-serialization of declarations, as; /// required when traversing the AST. Only those AST nodes that are; /// actually required will be de-serialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:56,Availability,failure,failures,56,"/// The control block was read successfully. Aside from failures,; /// the AST file is safe to read into the current context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:87,Safety,safe,safe,87,"/// The control block was read successfully. Aside from failures,; /// the AST file is safe to read into the current context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:67,Deployability,configurat,configuration,67,/// The AST file was written with a different language/target; /// configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:67,Modifiability,config,configuration,67,/// The AST file was written with a different language/target; /// configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:21,Availability,error,errors,21,/// The AST file has errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:34,Performance,load,loading,34,/// The preprocessor that will be loading the source file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:55,Integrability,depend,dependencies,55,/// The module manager which manages modules and their dependencies,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:32,Performance,load,loaded,32,"/// The global module index, if loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:33,Performance,load,loaded,33,"/// Types that have already been loaded from the chain.; ///; /// When the pointer at index I is non-NULL, the type with; /// ID = (I + 1) << FastQual::Width has already been loaded",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:175,Performance,load,loaded,175,"/// Types that have already been loaded from the chain.; ///; /// When the pointer at index I is non-NULL, the type with; /// ID = (I + 1) << FastQual::Width has already been loaded",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:40,Performance,load,loaded,40,"/// Declarations that have already been loaded from the chain.; ///; /// When the pointer at index I is non-NULL, the declaration with ID; /// = I + 1 has already been loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:168,Performance,load,loaded,168,"/// Declarations that have already been loaded from the chain.; ///; /// When the pointer at index I is non-NULL, the declaration with ID; /// = I + 1 has already been loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:16,Deployability,update,updates,16,/// Declaration updates for already-loaded declarations that we need; /// to apply once we finish processing an import.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:36,Performance,load,loaded,36,/// Declaration updates for already-loaded declarations that we need; /// to apply once we finish processing an import.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:102,Performance,load,loaded,102,/// The DefinitionData pointers that we faked up for class definitions; /// that we needed but hadn't loaded yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:28,Deployability,update,updates,28,/// Exception specification updates that have been loaded but not yet; /// propagated across the relevant redeclaration chain. The map key is the; /// canonical declaration (used only for deduplication) and the value is a; /// declaration that has an exception specification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:51,Performance,load,loaded,51,/// Exception specification updates that have been loaded but not yet; /// propagated across the relevant redeclaration chain. The map key is the; /// canonical declaration (used only for deduplication) and the value is a; /// declaration that has an exception specification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:24,Deployability,update,updates,24,/// Deduced return type updates that have been loaded but not yet propagated; /// across the relevant redeclaration chain. The map key is the canonical; /// declaration and the value is the deduced return type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:47,Performance,load,loaded,47,/// Deduced return type updates that have been loaded but not yet propagated; /// across the relevant redeclaration chain. The map key is the canonical; /// declaration and the value is the deduced return type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:97,Modifiability,extend,extending,97,"/// Key used to identify LifetimeExtendedTemporaryDecl for merging,; /// containing the lifetime-extending declaration and the mangling number.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:153,Availability,avail,available,153,"// Updates for visible decls can occur for other contexts than just the; // TU, and when we read those update records, the actual context may not; // be available yet, so have this pending map using the ID as a key. It; // will be realized when the context is actually loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:3,Deployability,Update,Updates,3,"// Updates for visible decls can occur for other contexts than just the; // TU, and when we read those update records, the actual context may not; // be available yet, so have this pending map using the ID as a key. It; // will be realized when the context is actually loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:103,Deployability,update,update,103,"// Updates for visible decls can occur for other contexts than just the; // TU, and when we read those update records, the actual context may not; // be available yet, so have this pending map using the ID as a key. It; // will be realized when the context is actually loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:269,Performance,load,loaded,269,"// Updates for visible decls can occur for other contexts than just the; // TU, and when we read those update records, the actual context may not; // be available yet, so have this pending map using the ID as a key. It; // will be realized when the context is actually loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Deployability,Update,Updates,4,/// Updates to the visible declarations of declaration contexts that; /// haven't been loaded yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:87,Performance,load,loaded,87,/// Updates to the visible declarations of declaration contexts that; /// haven't been loaded yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:76,Performance,perform,performed,76,/// Definitions for which we have added merged definitions but not yet; /// performed deduplication.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:64,Performance,load,loaded,64,"/// A vector containing identifiers that have already been; /// loaded.; ///; /// If the pointer at index I is non-NULL, then it refers to the; /// IdentifierInfo for the identifier with ID=I+1 that has already; /// been loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:221,Performance,load,loaded,221,"/// A vector containing identifiers that have already been; /// loaded.; ///; /// If the pointer at index I is non-NULL, then it refers to the; /// IdentifierInfo for the identifier with ID=I+1 that has already; /// been loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:59,Performance,load,loaded,59,"/// A vector containing macros that have already been; /// loaded.; ///; /// If the pointer at index I is non-NULL, then it refers to the; /// MacroInfo for the identifier with ID=I+1 that has already; /// been loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:211,Performance,load,loaded,211,"/// A vector containing macros that have already been; /// loaded.; ///; /// If the pointer at index I is non-NULL, then it refers to the; /// MacroInfo for the identifier with ID=I+1 that has already; /// been loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:44,Performance,load,loaded,44,/// A set of #undef directives that we have loaded; used to; /// deduplicate the same #undef information coming from multiple module; /// files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:24,Performance,load,loaded,24,/// \Token literal data loaded and owned by us.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:58,Performance,load,loaded,58,/// A vector containing submodules that have already been loaded.; ///; /// This vector is indexed by the Submodule ID (-1). NULL submodule entries; /// indicate that the particular submodule ID has not yet been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:212,Performance,load,loaded,212,/// A vector containing submodules that have already been loaded.; ///; /// This vector is indexed by the Submodule ID (-1). NULL submodule entries; /// indicate that the particular submodule ID has not yet been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:57,Performance,load,loaded,57,/// A vector containing selectors that have already been loaded.; ///; /// This vector is indexed by the Selector ID (-1). NULL selector; /// entries indicate that the particular selector ID has not yet; /// been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:213,Performance,load,loaded,213,/// A vector containing selectors that have already been loaded.; ///; /// This vector is indexed by the Selector ID (-1). NULL selector; /// entries indicate that the particular selector ID has not yet; /// been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:46,Performance,load,loaded,46,/// The generation number of the last time we loaded data from the; /// global method pool for this selector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:84,Performance,load,load,84,/// Whether a selector is out of date. We mark a selector as out of date; /// if we load another module after the method pool entry was pulled in.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:224,Performance,load,loaded,224,"/// \name CodeGen-relevant special data; /// Fields containing data that is relevant to CodeGen.; //@{; /// The IDs of all declarations that fulfill the criteria of; /// ""interesting"" decls.; ///; /// This contains the data loaded from all EAGERLY_DESERIALIZED_DECLS blocks; /// in the chain. The referenced declarations are deserialized and passed to; /// the consumer eagerly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:124,Performance,perform,perform,124,/// A snapshot of the pending instantiations in the chain.; ///; /// This record tracks the instantiations that Sema has to perform at the; /// end of the TU. It consists of a pair of values for every pending; /// instantiation where the first value is the ID of the decl and the second; /// is the instantiation location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:175,Modifiability,variab,variable,175,"//@}; /// \name DiagnosticsEngine-relevant special data; /// Fields containing data that is used for generating diagnostics; //@{; /// A snapshot of Sema's unused file-scoped variable tracking, for; /// generating warnings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:21,Performance,optimiz,optimize,21,"/// The pragma clang optimize location (if the pragma state is ""off"").",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:50,Performance,load,loading,50,//@}; /// The system include root to be used when loading the; /// precompiled header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:45,Performance,perform,performed,45,/// Whether to disable the normal validation performed on precompiled; /// headers and module files when they are loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:114,Performance,load,loaded,114,/// Whether to disable the normal validation performed on precompiled; /// headers and module files when they are loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:34,Security,validat,validation,34,/// Whether to disable the normal validation performed on precompiled; /// headers and module files when they are loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:48,Availability,error,errors,48,/// Whether to accept an AST file with compiler errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:55,Deployability,configurat,configuration,55,/// Whether to accept an AST file that has a different configuration; /// from the current compiler instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:55,Modifiability,config,configuration,55,/// Whether to accept an AST file that has a different configuration; /// from the current compiler instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:12,Security,validat,validate,12,/// Whether validate system input files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:12,Security,validat,validate,12,/// Whether validate headers and module maps using hash based on contents.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:51,Security,hash,hash,51,/// Whether validate headers and module maps using hash based on contents.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:26,Performance,load,loading,26,/// Whether we have tried loading the global module index yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:39,Deployability,update,update,39,///Whether we are currently processing update records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:46,Performance,load,loaded,46,"/// Total size of modules, in bits, currently loaded",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:166,Safety,avoid,avoid,166,"/// Set true while we are in the process of passing deserialized; /// ""interesting"" decls to consumer inside FinishedDeserializing().; /// This is used as a guard to avoid recursively repeating the process of; /// passing decls to consumer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:86,Performance,load,loading,86,/// The set of identifiers that were read while the AST reader was; /// (recursively) loading declarations.; ///; /// The declarations on the identifier chain for these identifiers will be; /// loaded once the recursive loading has completed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:194,Performance,load,loaded,194,/// The set of identifiers that were read while the AST reader was; /// (recursively) loading declarations.; ///; /// The declarations on the identifier chain for these identifiers will be; /// loaded once the recursive loading has completed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:220,Performance,load,loading,220,/// The set of identifiers that were read while the AST reader was; /// (recursively) loading declarations.; ///; /// The declarations on the identifier chain for these identifiers will be; /// loaded once the recursive loading has completed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:89,Performance,load,loaded,89,"/// The generation number of each identifier, which keeps track of; /// the last time we loaded information about this identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:278,Integrability,protocol,protocols,278,"/// Contains declarations and definitions that could be; /// ""interesting"" to the ASTConsumer, when we get that AST consumer.; ///; /// ""Interesting"" declarations are those that have data that may; /// need to be emitted, such as inline function definitions or; /// Objective-C protocols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:24,Modifiability,variab,variable,24,"/// The list of deduced variable types that we have not yet read, because; /// they might contain a deduced type that refers to a local type declared; /// within the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:166,Modifiability,variab,variable,166,"/// The list of deduced variable types that we have not yet read, because; /// they might contain a deduced type that refers to a local type declared; /// within the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:79,Performance,load,loaded,79,/// The Decl IDs for the Sema/Lexical DeclContext of a Decl that has; /// been loaded but its DeclContext was not set yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:36,Performance,load,loaded,36,/// The set of Decls that have been loaded but their DeclContexts are; /// not set yet.; ///; /// The DeclContexts for these Decls will be set once recursive loading has; /// been completed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:158,Performance,load,loading,158,/// The set of Decls that have been loaded but their DeclContexts are; /// not set yet.; ///; /// The DeclContexts for these Decls will be set once recursive loading has; /// been completed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:72,Availability,error,error,72,/// When resolving duplicate ivars from Objective-C extensions we don't error; /// out immediately but check if can merge identical extensions. Not checking; /// extensions for equality immediately because ivar deserialization isn't; /// over yet at that point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:41,Performance,load,loaded,41,"/// The set of NamedDecls that have been loaded, but are members of a; /// context that has been merged into another context where the corresponding; /// declaration is either missing or has not yet been loaded.; ///; /// We will check whether the corresponding declaration is in fact missing; /// once recursing loading has been completed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:204,Performance,load,loaded,204,"/// The set of NamedDecls that have been loaded, but are members of a; /// context that has been merged into another context where the corresponding; /// declaration is either missing or has not yet been loaded.; ///; /// We will check whether the corresponding declaration is in fact missing; /// once recursing loading has been completed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:313,Performance,load,loading,313,"/// The set of NamedDecls that have been loaded, but are members of a; /// context that has been merged into another context where the corresponding; /// declaration is either missing or has not yet been loaded.; ///; /// We will check whether the corresponding declaration is in fact missing; /// once recursing loading has been completed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:73,Performance,load,loaded,73,"/// The set of Objective-C class definitions that have already been; /// loaded, for which we will need to check for categories whenever a new; /// module is loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:158,Performance,load,loaded,158,"/// The set of Objective-C class definitions that have already been; /// loaded, for which we will need to check for categories whenever a new; /// module is loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:48,Deployability,update,updates,48,/// RAII object to mark the start of processing updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:12,Performance,load,loaded,12,"/// Get the loaded lookup tables for \p Primary, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:142,Performance,load,loaded,142,/// Returns the most recent declaration of a declaration (which must be; /// of a redeclarable kind) that is either local or has already been loaded; /// merged into its redecl chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:15,Availability,error,error,15,"/// Produce an error diagnostic and return true.; ///; /// This routine should only be used for fatal errors that have to; /// do with non-routine failures (e.g., corrupted AST file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:102,Availability,error,errors,102,"/// Produce an error diagnostic and return true.; ///; /// This routine should only be used for fatal errors that have to; /// do with non-routine failures (e.g., corrupted AST file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:147,Availability,failure,failures,147,"/// Produce an error diagnostic and return true.; ///; /// This routine should only be used for fatal errors that have to; /// do with non-routine failures (e.g., corrupted AST file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:64,Integrability,rout,routine,64,"/// Produce an error diagnostic and return true.; ///; /// This routine should only be used for fatal errors that have to; /// do with non-routine failures (e.g., corrupted AST file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:139,Integrability,rout,routine,139,"/// Produce an error diagnostic and return true.; ///; /// This routine should only be used for fatal errors that have to; /// do with non-routine failures (e.g., corrupted AST file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:1100,Availability,error,errors,1100,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:1234,Deployability,configurat,configuration,1234,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:1234,Modifiability,config,configuration,1234,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Performance,Load,Load,4,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:196,Performance,load,loaded,196,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:287,Performance,load,loaded,287,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:379,Performance,load,loading,379,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:489,Performance,load,loaded,489,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:1565,Performance,load,load,1565,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:26,Security,validat,validate,26,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:1318,Security,Validat,ValidateSystemInputs,1318,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:1368,Security,validat,validate,1368,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:49,Availability,failure,failures,49,"/// Flags that indicate what kind of AST loading failures the client; /// of the AST reader can directly handle.; ///; /// When a client states that it can handle a particular kind of failure,; /// the AST reader will not emit errors when producing that kind of failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:184,Availability,failure,failure,184,"/// Flags that indicate what kind of AST loading failures the client; /// of the AST reader can directly handle.; ///; /// When a client states that it can handle a particular kind of failure,; /// the AST reader will not emit errors when producing that kind of failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:227,Availability,error,errors,227,"/// Flags that indicate what kind of AST loading failures the client; /// of the AST reader can directly handle.; ///; /// When a client states that it can handle a particular kind of failure,; /// the AST reader will not emit errors when producing that kind of failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:262,Availability,failure,failure,262,"/// Flags that indicate what kind of AST loading failures the client; /// of the AST reader can directly handle.; ///; /// When a client states that it can handle a particular kind of failure,; /// the AST reader will not emit errors when producing that kind of failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:41,Performance,load,loading,41,"/// Flags that indicate what kind of AST loading failures the client; /// of the AST reader can directly handle.; ///; /// When a client states that it can handle a particular kind of failure,; /// the AST reader will not emit errors when producing that kind of failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:44,Availability,failure,failures,44,/// The client can't handle any AST loading failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:36,Performance,load,loading,36,/// The client can't handle any AST loading failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:50,Performance,load,load,50,/// The client can handle an AST file that cannot load because it; /// is missing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:50,Performance,load,load,50,/// The client can handle an AST file that cannot load because it; /// is out-of-date relative to its input files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:50,Performance,load,load,50,/// The client can handle an AST file that cannot load because it; /// was built with a different version of Clang.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:82,Deployability,configurat,configuration,82,/// The client can handle an AST file that cannot load because it's; /// compiled configuration doesn't match that of the context it was; /// loaded into.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:82,Modifiability,config,configuration,82,/// The client can handle an AST file that cannot load because it's; /// compiled configuration doesn't match that of the context it was; /// loaded into.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:50,Performance,load,load,50,/// The client can handle an AST file that cannot load because it's; /// compiled configuration doesn't match that of the context it was; /// loaded into.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:142,Performance,load,loaded,142,/// The client can handle an AST file that cannot load because it's; /// compiled configuration doesn't match that of the context it was; /// loaded into.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:36,Availability,error,errors,36,/// If a module file is marked with errors treat it as out-of-date so the; /// caller can rebuild it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:431,Availability,failure,failure,431,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Performance,Load,Load,4,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:111,Performance,load,load,111,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:161,Performance,load,loaded,161,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:426,Performance,load,load-failure,426,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:509,Performance,Load,LoadFailureCapabilities,509,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:551,Performance,Load,LoadedModuleFile,551,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:618,Performance,load,loaded,618,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:691,Performance,load,loaded,691,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:807,Performance,load,loaded,807,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:891,Performance,load,loaded,891,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:996,Performance,load,loaded,996,"/// Load the AST file designated by the given file name.; ///; /// \param FileName The name of the AST file to load.; ///; /// \param Type The kind of AST being loaded, e.g., PCH, module, main file,; /// or preamble.; ///; /// \param ImportLoc the location where the module file will be considered as; /// imported from. For non-module AST types it should be invalid.; ///; /// \param ClientLoadCapabilities The set of client load-failure; /// capabilities, represented as a bitset of the enumerators of; /// LoadFailureCapabilities.; ///; /// \param LoadedModuleFile The optional out-parameter refers to the new; /// loaded modules. In case the module specified by FileName is already; /// loaded, the module file pointer referred by NewLoadedModuleFile wouldn't; /// change. Otherwise if the AST file get loaded successfully,; /// NewLoadedModuleFile would refer to the address of the new loaded top level; /// module. The state of NewLoadedModuleFile is unspecified if the AST file; /// isn't loaded successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:16,Performance,load,load,16,/// Attempts to load the global index.; ///; /// \returns true if loading the global index has failed for any reason.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:66,Performance,load,loading,66,/// Attempts to load the global index.; ///; /// \returns true if loading the global index has failed for any reason.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:34,Performance,load,load,34,"/// Determine whether we tried to load the global index, but failed,; /// e.g., because it is out-of-date or does not exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Deployability,Update,Update,4,/// Update the state of Sema after loading some additional modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:35,Performance,load,loading,35,/// Update the state of Sema after loading some additional modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:107,Usability,undo,undo,107,/// Finalizes the AST reader's state before writing an AST file to; /// disk.; ///; /// This operation may undo temporary state in the AST that should not be; /// emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:105,Performance,load,loading,105,"/// Retrieve the name of the original source file name directly from; /// the AST file, without actually loading the AST file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:81,Availability,error,error,81,"/// Read the control block for the named AST file.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:58,Performance,load,load,58,/// Determine whether the given AST file is acceptable to load into a; /// translation unit with the given language and target options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:100,Availability,error,error,100,/// Read a preallocated preprocessed entity from the external source.; ///; /// \returns null if an error occurred that prevented the preprocessed; /// entity from being loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:170,Performance,load,loaded,170,/// Read a preallocated preprocessed entity from the external source.; ///; /// \returns null if an error occurred that prevented the preprocessed; /// entity from being loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:80,Performance,load,loaded,80,/// Resolve a declaration ID into a declaration. Return 0 if it's not; /// been loaded yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:110,Performance,load,loads,110,/// Finds all the visible declarations with a given name.; /// The current implementation of this method just loads the entire; /// lookup table as unmaterialized references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:332,Performance,load,loaded,332,/// Read all of the declarations lexically stored in a; /// declaration context.; ///; /// \param DC The declaration context whose declarations will be; /// read.; ///; /// \param IsKindWeWant A predicate indicating which declaration kinds; /// we are interested in.; ///; /// \param Decls Vector that will contain the declarations loaded; /// from the external source. The caller is responsible for merging; /// these declarations with any declarations already stored in the; /// declaration context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:54,Availability,error,error,54,/// Dump information about the AST reader to standard error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:65,Availability,down,down,65,"/// Return the amount of memory used by memory buffers, breaking down; /// by heap-backed versus mmap'ed memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:77,Performance,perform,perform,77,/// Initialize the semantic source with the Sema instance; /// being used to perform semantic analysis on the abstract syntax; /// tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:56,Availability,avail,available,56,/// Inform the semantic consumer that Sema is no longer available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:73,Integrability,rout,routine,73,"/// Retrieve the IdentifierInfo for the named identifier.; ///; /// This routine builds a new IdentifierInfo for the given identifier. If any; /// declarations with this name are visible from translation unit scope, their; /// declarations will be deserialized and introduced into the declaration; /// chain of the identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:69,Performance,load,loaded,69,/// Retrieve an iterator into the set of all identifiers; /// in all loaded AST files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Performance,Load,Load,4,/// Load the contents of the global method pool for a given; /// selector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Performance,Load,Load,4,/// Load the contents of the global method pool for a given; /// selector if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Performance,Load,Load,4,"/// Load the set of namespaces that are known to the external source,; /// which will be used during typo correction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Performance,Load,Load,4,"/// Load a selector from disk, registering its ID if it exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:20,Performance,load,loading,20,// Note that we are loading an identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:29,Performance,load,loaded,29,/// Get the index ID for the loaded SourceLocation offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Deployability,Update,Update,4,/// Update an out-of-date identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Performance,Load,Load,4,/// Load all external visible decls in the given DeclContext.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:76,Security,access,access,76,// Contains the IDs for declarations that were requested before we have; // access to a Sema object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:55,Deployability,update,updates,55,/// Get the identifier resolver used for name lookup / updates; /// in the translation unit scope. We have one of these even if we don't; /// have a Sema object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Performance,Load,Loads,4,/// Loads comments ranges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:40,Performance,load,loaded,40,/// Visit all the top-level module maps loaded when building the given module; /// file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:6,Usability,simpl,simple,6,/// A simple helper class to unpack an integer to bits and consuming; /// the bits in order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:55,Modifiability,inherit,inherited,55,/// Read information about an exception specification (inherited).; //FunctionProtoType::ExceptionSpecInfo; //readExceptionSpecInfo(SmallVectorImpl<QualType> &ExceptionStorage);; /// Get the global offset corresponding to a local offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:88,Modifiability,inherit,inherited,88,"/// Read a declaration name, advancing Idx.; // DeclarationName readDeclarationName(); (inherited)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:104,Modifiability,inherit,inherited,104,"/// Return a nested name specifier, advancing Idx.; // NestedNameSpecifier *readNestedNameSpecifier(); (inherited)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:79,Modifiability,inherit,inherited,79,"/// Read a template name, advancing Idx.; // TemplateName readTemplateName(); (inherited); /// Read a template argument, advancing Idx. (inherited); // TemplateArgument readTemplateArgument();",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:137,Modifiability,inherit,inherited,137,"/// Read a template name, advancing Idx.; // TemplateName readTemplateName(); (inherited); /// Read a template argument, advancing Idx. (inherited); // TemplateArgument readTemplateArgument();",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:81,Modifiability,inherit,inherited,81,"/// Read an arbitrary constant value, advancing Idx.; // APValue readAPValue(); (inherited); /// Read an integral value, advancing Idx.; // llvm::APInt readAPInt(); (inherited); /// Read a signed integral value, advancing Idx.; // llvm::APSInt readAPSInt(); (inherited); /// Read a floating-point value, advancing Idx.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:166,Modifiability,inherit,inherited,166,"/// Read an arbitrary constant value, advancing Idx.; // APValue readAPValue(); (inherited); /// Read an integral value, advancing Idx.; // llvm::APInt readAPInt(); (inherited); /// Read a signed integral value, advancing Idx.; // llvm::APSInt readAPSInt(); (inherited); /// Read a floating-point value, advancing Idx.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:259,Modifiability,inherit,inherited,259,"/// Read an arbitrary constant value, advancing Idx.; // APValue readAPValue(); (inherited); /// Read an integral value, advancing Idx.; // llvm::APInt readAPInt(); (inherited); /// Read a signed integral value, advancing Idx.; // llvm::APSInt readAPSInt(); (inherited); /// Read a floating-point value, advancing Idx.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h:81,Performance,queue,queue,81,/// Flush all of the statements and expressions that have; /// been added to the queue via AddStmt().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h:24,Integrability,interface,interface,24,/// Minimal vector-like interface.; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h:98,Integrability,rout,routine,98,"/// Add the given statement or expression to the queue of; /// statements to emit.; ///; /// This routine should be used when emitting types and declarations; /// that have expressions as part of their formulation. Once the; /// type or declaration has been written, Emit() will write; /// the corresponding statements just after the record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h:49,Performance,queue,queue,49,"/// Add the given statement or expression to the queue of; /// statements to emit.; ///; /// This routine should be used when emitting types and declarations; /// that have expressions as part of their formulation. Once the; /// type or declaration has been written, Emit() will write; /// the corresponding statements just after the record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h:51,Performance,queue,queue,51,/// Add a definition for the given function to the queue of statements; /// to emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:36,Security,hash,hash,36,/// The bit offset of the AST block hash blob.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:150,Performance,cache,cache,150,"/// Indicates whether timestamps should be written to the produced; /// module file. This is the case for files implicitly written to the; /// module cache, where we need the timestamps to determine if the module; /// file is up to date, but not otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:216,Security,hash,hash,216,"/// Indicates whether the AST file being written is an implicit module.; /// If that's the case, we may be able to skip writing some information that; /// are guaranteed to be the same in the importer by the context hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:104,Deployability,update,updates,104,"/// Indicates when the AST writing is actively performing; /// serialization, rather than just queueing updates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:47,Performance,perform,performing,47,"/// Indicates when the AST writing is actively performing; /// serialization, rather than just queueing updates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:95,Performance,queue,queueing,95,"/// Indicates when the AST writing is actively performing; /// serialization, rather than just queueing updates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:46,Availability,error,errors,46,/// Indicates that the AST contained compiler errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:20,Performance,Cache,Caches,20,/// @name FlushStmt Caches; /// @{; /// Set of parent Stmts for the currently serializing sub-stmt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:4,Performance,Cache,Cache,4,/// Cache of indices of anonymous declarations within their lexical; /// contexts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:7,Deployability,update,update,7,/// An update to a Decl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:414,Modifiability,variab,variable,414,"/// Declarations encountered that might be external; /// definitions.; ///; /// We keep track of external definitions and other 'interesting' declarations; /// as we are emitting declarations to the AST file. The AST file contains a; /// separate record for these declarations, which are provided to the AST; /// consumer by the AST reader. This is behavior is required to properly cope with,; /// e.g., tentative variable definitions that occur within; /// headers. The declarations themselves are stored as declaration; /// IDs, since they will be written out to an EAGERLY_DESERIALIZED_DECLS; /// record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:308,Deployability,update,updates,308,"/// DeclContexts that have received extensions since their serialized; /// form.; ///; /// For namespaces, when we're chaining and encountering a namespace, we check; /// if its primary namespace comes from the chain. If it does, we add the; /// primary to this set, so that we can write out lexical content updates for; /// it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:6,Performance,cache,cache,6,"/// A cache of the first local declaration for ""interesting""; /// redeclaration chains.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:14,Security,hash,hash,14,/// Calculate hash of the pcm content.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:540,Availability,avail,available,540,"/// Write a precompiled header for the given semantic analysis.; ///; /// \param SemaRef a reference to the semantic analysis object that processed; /// the AST to be written into the precompiled header.; ///; /// \param WritingModule The module that we are writing. If null, we are; /// writing a precompiled header.; ///; /// \param isysroot if non-empty, write a relocatable file whose headers; /// are relative to the given system root. If we're writing a module, its; /// build directory will be used in preference to this if both are available.; ///; /// \return the module signature, which eventually will be a hash of; /// the module but currently is merely a random 32-bit number.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:618,Security,hash,hash,618,"/// Write a precompiled header for the given semantic analysis.; ///; /// \param SemaRef a reference to the semantic analysis object that processed; /// the AST to be written into the precompiled header.; ///; /// \param WritingModule The module that we are writing. If null, we are; /// writing a precompiled header.; ///; /// \param isysroot if non-empty, write a relocatable file whose headers; /// are relative to the given system root. If we're writing a module, its; /// build directory will be used in preference to this if both are available.; ///; /// \return the module signature, which eventually will be a hash of; /// the module but currently is merely a random 32-bit number.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:6,Usability,simpl,simple,6,/// A simple helper class to pack several bits in order into (a) 32 bit; /// integer(s).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h:7,Deployability,Continuous,ContinuousRangeMap,7,"//===- ContinuousRangeMap.h - Map with int range as key ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ContinuousRangeMap class, which is a highly; // specialized container used by serialization.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h:405,Deployability,Continuous,ContinuousRangeMap,405,"//===- ContinuousRangeMap.h - Map with int range as key ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ContinuousRangeMap class, which is a highly; // specialized container used by serialization.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h:15,Deployability,continuous,continuous,15,"/// A map from continuous integer ranges to some value, with a very; /// specialized interface.; ///; /// CRM maps from integer ranges to values. The ranges are continuous, i.e.; /// where one ends, the next one begins. So if the map contains the stops I0-3,; /// the first range is from I0 to I1, the second from I1 to I2, the third from; /// I2 to I3 and the last from I3 to infinity.; ///; /// Ranges must be inserted in order. Inserting a new stop I4 into the map will; /// shrink the fourth range to I3 to I4 and add the new range I4 to inf.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h:161,Deployability,continuous,continuous,161,"/// A map from continuous integer ranges to some value, with a very; /// specialized interface.; ///; /// CRM maps from integer ranges to values. The ranges are continuous, i.e.; /// where one ends, the next one begins. So if the map contains the stops I0-3,; /// the first range is from I0 to I1, the second from I1 to I2, the third from; /// I2 to I3 and the last from I3 to infinity.; ///; /// Ranges must be inserted in order. Inserting a new stop I4 into the map will; /// shrink the fourth range to I3 to I4 and add the new range I4 to inf.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h:85,Integrability,interface,interface,85,"/// A map from continuous integer ranges to some value, with a very; /// specialized interface.; ///; /// CRM maps from integer ranges to values. The ranges are continuous, i.e.; /// where one ends, the next one begins. So if the map contains the stops I0-3,; /// the first range is from I0 to I1, the second from I1 to I2, the third from; /// I2 to I3 and the last from I3 to infinity.; ///; /// Ranges must be inserted in order. Inserting a new stop I4 into the map will; /// shrink the fourth range to I3 to I4 and add the new range I4 to inf.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h:42,Deployability,continuous,continuous,42,/// An object that helps properly build a continuous range map; /// from a set of values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:572,Performance,cache,cache,572,"//===--- GlobalModuleIndex.h - Global Module Index --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the GlobalModuleIndex class, which manages a global index; // containing all of the identifiers known to the various modules within a given; // subdirectory of the module cache. It is used to improve the performance of; // queries such as ""do any modules know about this identifier?""; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:605,Performance,perform,performance,605,"//===--- GlobalModuleIndex.h - Global Module Index --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the GlobalModuleIndex class, which manages a global index; // containing all of the identifiers known to the various modules within a given; // subdirectory of the module cache. It is used to improve the performance of; // queries such as ""do any modules know about this identifier?""; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:479,Performance,perform,performance,479,"/// A global index for a set of module files, providing information about; /// the identifiers within those module files.; ///; /// The global index is an aid for name lookup into modules, offering a central; /// place where one can look for identifiers determine which; /// module files contain any information about that identifier. This; /// allows the client to restrict the search to only those module files known; /// to have a information about that identifier, improving performance. Moreover,; /// the global module index may know about module files that have not been; /// imported, and can be queried to determine which modules the current; /// translation could or should load to fix a problem.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:684,Performance,load,load,684,"/// A global index for a set of module files, providing information about; /// the identifiers within those module files.; ///; /// The global index is an aid for name lookup into modules, offering a central; /// place where one can look for identifiers determine which; /// module files contain any information about that identifier. This; /// allows the client to restrict the search to only those module files known; /// to have a information about that identifier, improving performance. Moreover,; /// the global module index may know about module files that have not been; /// imported, and can be queried to determine which modules the current; /// translation could or should load to fix a problem.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:54,Security,access,accessed,54,"/// Buffer containing the index file, which is lazily accessed so long; /// as the global module index is live.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:8,Security,hash,hash,8,"/// The hash table.; ///; /// This pointer actually points to a IdentifierIndexTable object,; /// but that type is only accessible within the implementation of; /// GlobalModuleIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:120,Security,access,accessible,120,"/// The hash table.; ///; /// This pointer actually points to a IdentifierIndexTable object,; /// but that type is only accessible within the implementation of; /// GlobalModuleIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:49,Integrability,depend,depends,49,/// The module IDs on which this module directly depends.; /// FIXME: We don't really need a vector here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:153,Deployability,update,updated,153,"/// A mapping from module IDs to information about each module.; ///; /// This vector may have gaps, if module files have been removed or have; /// been updated since the index was built. A gap is indicated by an empty; /// file name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:40,Performance,perform,performed,40,/// The number of identifier lookups we performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:270,Availability,error,error,270,/// Read a global index file for the given directory.; ///; /// \param Path The path to the specific module cache where the module files; /// for the intended configuration reside.; ///; /// \returns A pair containing the global module index (if it exists) and; /// the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:159,Deployability,configurat,configuration,159,/// Read a global index file for the given directory.; ///; /// \param Path The path to the specific module cache where the module files; /// for the intended configuration reside.; ///; /// \returns A pair containing the global module index (if it exists) and; /// the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:159,Modifiability,config,configuration,159,/// Read a global index file for the given directory.; ///; /// \param Path The path to the specific module cache where the module files; /// for the intended configuration reside.; ///; /// \returns A pair containing the global module index (if it exists) and; /// the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:108,Performance,cache,cache,108,/// Read a global index file for the given directory.; ///; /// \param Path The path to the specific module cache where the module files; /// for the intended configuration reside.; ///; /// \returns A pair containing the global module index (if it exists) and; /// the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:82,Integrability,depend,depends,82,/// Retrieve the set of module files on which the given module file; /// directly depends.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:112,Modifiability,variab,variable,112,"/// Look for all of the module files with information about the given; /// identifier, e.g., a global function, variable, or type with that name.; ///; /// \param Name The identifier to look for.; ///; /// \param Hits Will be populated with the set of module files that have; /// information about this name.; ///; /// \returns true if the identifier is known to the index, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:45,Performance,load,loaded,45,"/// Note that the given module file has been loaded.; ///; /// \returns false if the global module index has information about this; /// module file, and true otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:33,Availability,error,error,33,/// Print statistics to standard error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:37,Availability,error,error,37,/// Print debugging view to standard error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:92,Performance,load,load,92,"/// Write a global index into the given; ///; /// \param FileMgr The file manager to use to load module files.; /// \param PCHContainerRdr - The PCHContainerOperations to use for loading and; /// creating modules.; /// \param Path The path to the directory containing module files, into; /// which the global index will be written.; /// \param Optionally pass already precomputed interesting identifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:179,Performance,load,loading,179,"/// Write a global index into the given; ///; /// \param FileMgr The file manager to use to load module files.; /// \param PCHContainerRdr - The PCHContainerOperations to use for loading and; /// creating modules.; /// \param Path The path to the directory containing module files, into; /// which the global index will be written.; /// \param Optionally pass already precomputed interesting identifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h:41,Performance,cache,cache,41,"//===- InMemoryModuleCache.h - In-memory cache for modules ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h:14,Performance,cache,cache,14,"/// In-memory cache for modules.; ///; /// This is a cache for modules for use across a compilation, sharing state; /// between the CompilerInstances in an implicit modules build. It must be; /// shared by each CompilerInstance, ASTReader, ASTWriter, and ModuleManager; /// that are coordinating.; ///; /// Critically, it ensures that a single process has a consistent view of each; /// PCM. This is used by \a CompilerInstance when building PCMs to ensure that; /// each \a ModuleManager sees the same files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h:53,Performance,cache,cache,53,"/// In-memory cache for modules.; ///; /// This is a cache for modules for use across a compilation, sharing state; /// between the CompilerInstances in an implicit modules build. It must be; /// shared by each CompilerInstance, ASTReader, ASTWriter, and ModuleManager; /// that are coordinating.; ///; /// Critically, it ensures that a single process has a consistent view of each; /// PCM. This is used by \a CompilerInstance when building PCMs to ensure that; /// each \a ModuleManager sees the same files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h:139,Performance,cache,cache,139,/// Track whether this PCM is known to be good (either built or; /// successfully imported by a CompilerInstance/ASTReader using this; /// cache).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h:4,Performance,Cache,Cache,4,/// Cache of buffers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h:36,Performance,cache,cache,36,"/// Try to remove a buffer from the cache. No effect if state is Final.; ///; /// \pre state is Tentative/Final.; /// \post Tentative => ToBuild or Final => Final.; /// \return false on success, i.e. if Tentative => ToBuild.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:462,Performance,load,loaded,462,"//===- ModuleFile.h - Module file description -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Module class, which describes a module that has; // been loaded from an AST file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:47,Performance,load,loaded,47,/// Specifies the kind of module that has been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:26,Performance,load,loaded,26,/// File is an implicitly-loaded module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:26,Performance,load,loaded,26,/// File is an explicitly-loaded module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:38,Performance,load,loaded,38,/// The input file info that has been loaded from an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:33,Performance,load,loaded,33,"/// The input file that has been loaded from this AST file, along with; /// bools indicating whether this was an overridden buffer or if it was; /// out-of-date or not-found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:372,Integrability,depend,depend,372,"/// Information about a module that has been loaded by the ASTReader.; ///; /// Each instance of the Module class corresponds to a single AST file, which; /// may be a precompiled header, precompiled preamble, a module, or an AST file; /// of some sort loaded as the main file, all of which are specific formulations; /// of the general notion of a ""module"". A module may depend on any number of; /// other modules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:45,Performance,load,loaded,45,"/// Information about a module that has been loaded by the ASTReader.; ///; /// Each instance of the Module class corresponds to a single AST file, which; /// may be a precompiled header, precompiled preamble, a module, or an AST file; /// of some sort loaded as the main file, all of which are specific formulations; /// of the general notion of a ""module"". A module may depend on any number of; /// other modules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:253,Performance,load,loaded,253,"/// Information about a module that has been loaded by the ASTReader.; ///; /// Each instance of the Module class corresponds to a single AST file, which; /// may be a precompiled header, precompiled preamble, a module, or an AST file; /// of some sort loaded as the main file, all of which are specific formulations; /// of the general notion of a ""module"". A module may depend on any number of; /// other modules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:137,Integrability,depend,depends,137,"/// The source location where the module was explicitly or implicitly; /// imported in the local translation unit.; ///; /// If module A depends on and imports module B, both modules will have the; /// same DirectImportLoc, but different ImportLoc (B's ImportLoc will be a; /// source location inside module A).; ///; /// WARNING: This is largely useless. It doesn't tell you when a module was; /// made visible, just when the first submodule of that module was imported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:77,Deployability,Continuous,ContinuousRangeMaps,77,"/// The module offset map data for this file. If non-empty, the various; /// ContinuousRangeMaps described below have not yet been populated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:35,Performance,load,loaded,35,/// The input files that have been loaded from this AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:40,Performance,load,loaded,40,/// The input file infos that have been loaded from this AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:49,Security,validat,validated,49,"/// If non-zero, specifies the time when we last validated input; /// files. Zero means we never validated them.; ///; /// The time is specified in seconds since the start of the Epoch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:97,Security,validat,validated,97,"/// If non-zero, specifies the time when we last validated input; /// files. Zero means we never validated them.; ///; /// The time is specified in seconds since the start of the Epoch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:32,Security,hash,hash,32,"/// Actual data for the on-disk hash table of identifiers.; ///; /// This pointer points into a memory buffer, where the on-disk hash; /// table for identifiers actually lives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:129,Security,hash,hash,129,"/// Actual data for the on-disk hash table of identifiers.; ///; /// This pointer points into a memory buffer, where the on-disk hash; /// table for identifiers actually lives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:28,Security,hash,hash,28,/// A pointer to an on-disk hash table of opaque type; /// IdentifierHashTable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:32,Security,hash,hash,32,"/// Actual data for the on-disk hash table of header file; /// information.; ///; /// This pointer points into a memory buffer, where the on-disk hash; /// table for header file information actually lives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:146,Security,hash,hash,146,"/// Actual data for the on-disk hash table of header file; /// information.; ///; /// This pointer points into a memory buffer, where the on-disk hash; /// table for header file information actually lives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:16,Security,hash,hash,16,/// The on-disk hash table that contains information about each of; /// the header files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:28,Security,hash,hash,28,"/// A pointer to an on-disk hash table of opaque type; /// ASTSelectorLookupTable.; ///; /// This hash table provides the IDs of all selectors, and the associated; /// instance and factory methods.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:98,Security,hash,hash,98,"/// A pointer to an on-disk hash table of opaque type; /// ASTSelectorLookupTable.; ///; /// This hash table provides the IDs of all selectors, and the associated; /// instance and factory methods.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:56,Integrability,depend,depends,56,"/// Mapping from the module files that this module file depends on; /// to the base declaration ID for that module as it is understood within this; /// module.; ///; /// This is effectively a reverse global-to-local mapping for declaration; /// IDs, so that we can interpret a true global ID (for this translation unit); /// as a local ID (for this module file).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:26,Integrability,depend,depend,26,/// List of modules which depend on this module,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:38,Integrability,depend,depends,38,/// List of modules which this module depends on,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h:375,Performance,load,loaded,375,/// An abstract superclass that describes a custom extension to the; /// module/precompiled header file format.; ///; /// A module file extension can introduce additional information into; /// compiled module files (.pcm) and precompiled headers (.pch) via a; /// custom writer that can then be accessed via a custom reader when; /// the module file or precompiled header is loaded.; ///; /// Subclasses must use LLVM RTTI for open class hierarchies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h:295,Security,access,accessed,295,/// An abstract superclass that describes a custom extension to the; /// module/precompiled header file format.; ///; /// A module file extension can introduce additional information into; /// compiled module files (.pcm) and precompiled headers (.pch) via a; /// custom writer that can then be accessed via a custom reader when; /// the module file or precompiled header is loaded.; ///; /// Subclasses must use LLVM RTTI for open class hierarchies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h:4,Security,Hash,Hash,4,"/// Hash information about the presence of this extension into the; /// module hash.; ///; /// The module hash is used to distinguish different variants of a module that; /// are incompatible. If the presence, absence, or version of the module file; /// extension should force the creation of a separate set of module files,; /// override this method to combine that distinguishing information into the; /// module hash.; ///; /// The default implementation of this function simply does nothing, so the; /// presence/absence of this extension does not distinguish module files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h:79,Security,hash,hash,79,"/// Hash information about the presence of this extension into the; /// module hash.; ///; /// The module hash is used to distinguish different variants of a module that; /// are incompatible. If the presence, absence, or version of the module file; /// extension should force the creation of a separate set of module files,; /// override this method to combine that distinguishing information into the; /// module hash.; ///; /// The default implementation of this function simply does nothing, so the; /// presence/absence of this extension does not distinguish module files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h:106,Security,hash,hash,106,"/// Hash information about the presence of this extension into the; /// module hash.; ///; /// The module hash is used to distinguish different variants of a module that; /// are incompatible. If the presence, absence, or version of the module file; /// extension should force the creation of a separate set of module files,; /// override this method to combine that distinguishing information into the; /// module hash.; ///; /// The default implementation of this function simply does nothing, so the; /// presence/absence of this extension does not distinguish module files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h:415,Security,hash,hash,415,"/// Hash information about the presence of this extension into the; /// module hash.; ///; /// The module hash is used to distinguish different variants of a module that; /// are incompatible. If the presence, absence, or version of the module file; /// extension should force the creation of a separate set of module files,; /// override this method to combine that distinguishing information into the; /// module hash.; ///; /// The default implementation of this function simply does nothing, so the; /// presence/absence of this extension does not distinguish module files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h:475,Usability,simpl,simply,475,"/// Hash information about the presence of this extension into the; /// module hash.; ///; /// The module hash is used to distinguish different variants of a module that; /// are incompatible. If the presence, absence, or version of the module file; /// extension should force the creation of a separate set of module files,; /// override this method to combine that distinguishing information into the; /// module hash.; ///; /// The default implementation of this function simply does nothing, so the; /// presence/absence of this extension does not distinguish module files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:449,Performance,load,loaded,449,"//===- ModuleManager.cpp - Module Manager -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ModuleManager class, which manages a set of loaded; // modules for the ASTReader.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:31,Performance,load,loaded,31,/// Manages the set of modules loaded by an AST reader.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:64,Performance,load,load,64,"/// The chain of AST files, in the order in which we started to load; /// them (this order isn't really useful for anything).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:127,Integrability,depend,depend,127,"/// The chain of non-module PCH files. The first entry is the one named; /// by the user, the last one is the one that doesn't depend on anything; /// further.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:20,Integrability,depend,dependency,20,// The roots of the dependency DAG of AST files. This is used; // to implement short-circuiting logic when running DFS over the dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:128,Integrability,depend,dependencies,128,// The roots of the dependency DAG of AST files. This is used; // to implement short-circuiting logic when running DFS over the dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:96,Testability,log,logic,96,// The roots of the dependency DAG of AST files. This is used; // to implement short-circuiting logic when running DFS over the dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:8,Performance,load,loaded,8,"/// All loaded modules, indexed by name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:4,Performance,Cache,Cache,4,/// Cache of PCM files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:373,Performance,load,loaded,373,"/// The list of module files that both we and the global module index; /// know about.; ///; /// Either the global index or the module manager may have modules that the; /// other does not know about, because the global index can be out-of-date; /// (in which case the module manager could have modules it does not) and; /// this particular translation unit might not have loaded all of the modules; /// known to the global index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:43,Safety,avoid,avoid,43,"/// State used by the ""visit"" operation to avoid malloc traffic in; /// calls to visit().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:37,Performance,load,loaded,37,/// Forward iterator to traverse all loaded modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:47,Performance,load,loaded,47,/// Forward iterator end-point to traverse all loaded modules,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:43,Performance,load,loaded,43,/// Const forward iterator to traverse all loaded modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:53,Performance,load,loaded,53,/// Const forward iterator end-point to traverse all loaded modules,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:37,Performance,load,loaded,37,/// Reverse iterator to traverse all loaded modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:47,Performance,load,loaded,47,/// Reverse iterator end-point to traverse all loaded modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:55,Performance,load,loaded,55,/// A range covering the PCH and preamble module files loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:91,Performance,load,loaded,91,"/// Returns the primary module associated with the manager, that is,; /// the first module loaded",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:91,Performance,load,loaded,91,"/// Returns the primary module associated with the manager, that is,; /// the first module loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:22,Performance,load,loaded,22,/// Number of modules loaded,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:37,Performance,load,loaded,37,/// The module file had already been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:29,Performance,load,loaded,29,/// The module file was just loaded in response to this call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:1100,Availability,Error,ErrorStr,1100,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:1150,Availability,error,errors,1150,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:142,Performance,load,loaded,142,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:197,Performance,load,loaded,197,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:478,Performance,load,loaded,478,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:974,Performance,load,loading,974,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:1075,Performance,load,loaded,1075,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:1187,Performance,load,load,1187,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:1333,Performance,load,loaded,1333,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:568,Security,validat,validation,568,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:708,Security,validat,validation,708,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:842,Security,validat,validation,842,"/// Attempts to create a new module and add it to the list of known; /// modules.; ///; /// \param FileName The file name of the module to be loaded.; ///; /// \param Type The kind of module being loaded.; ///; /// \param ImportLoc The location at which the module is imported.; ///; /// \param ImportedBy The module that is importing this module, or NULL if; /// this module is imported directly by the user.; ///; /// \param Generation The generation in which this module was loaded.; ///; /// \param ExpectedSize The expected size of the module file, used for; /// validation. This will be zero if unknown.; ///; /// \param ExpectedModTime The expected modification time of the module; /// file, used for validation. This will be zero if unknown.; ///; /// \param ExpectedSignature The expected signature of the module file, used; /// for validation. This will be zero if unknown.; ///; /// \param ReadSignature Reads the signature from an AST file without actually; /// loading it.; ///; /// \param Module A pointer to the module file if the module was successfully; /// loaded.; ///; /// \param ErrorStr Will be set to a non-empty string if any errors occurred; /// while trying to load the module.; ///; /// \return A pointer to the module that corresponds to this file name,; /// and a value indicating whether the module was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:46,Integrability,rout,routine,46,"/// Visit each of the modules.; ///; /// This routine visits each of the modules, starting with the; /// ""root"" modules that no other loaded modules depend on, and; /// proceeding to the leaf modules, visiting each module only once; /// during the traversal.; ///; /// This traversal is intended to support various ""lookup""; /// operations that can find data in any of the loaded modules.; ///; /// \param Visitor A visitor function that will be invoked with each; /// module. The return value must be convertible to bool; when false, the; /// visitation continues to modules that the current module depends on. When; /// true, the visitation skips any modules that the current module depends on.; ///; /// \param ModuleFilesHit If non-NULL, contains the set of module files; /// that we know we need to visit because the global module index told us to.; /// Any module that is known to both the global module index and the module; /// manager that is *not* in this set can be skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:149,Integrability,depend,depend,149,"/// Visit each of the modules.; ///; /// This routine visits each of the modules, starting with the; /// ""root"" modules that no other loaded modules depend on, and; /// proceeding to the leaf modules, visiting each module only once; /// during the traversal.; ///; /// This traversal is intended to support various ""lookup""; /// operations that can find data in any of the loaded modules.; ///; /// \param Visitor A visitor function that will be invoked with each; /// module. The return value must be convertible to bool; when false, the; /// visitation continues to modules that the current module depends on. When; /// true, the visitation skips any modules that the current module depends on.; ///; /// \param ModuleFilesHit If non-NULL, contains the set of module files; /// that we know we need to visit because the global module index told us to.; /// Any module that is known to both the global module index and the module; /// manager that is *not* in this set can be skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:600,Integrability,depend,depends,600,"/// Visit each of the modules.; ///; /// This routine visits each of the modules, starting with the; /// ""root"" modules that no other loaded modules depend on, and; /// proceeding to the leaf modules, visiting each module only once; /// during the traversal.; ///; /// This traversal is intended to support various ""lookup""; /// operations that can find data in any of the loaded modules.; ///; /// \param Visitor A visitor function that will be invoked with each; /// module. The return value must be convertible to bool; when false, the; /// visitation continues to modules that the current module depends on. When; /// true, the visitation skips any modules that the current module depends on.; ///; /// \param ModuleFilesHit If non-NULL, contains the set of module files; /// that we know we need to visit because the global module index told us to.; /// Any module that is known to both the global module index and the module; /// manager that is *not* in this set can be skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:685,Integrability,depend,depends,685,"/// Visit each of the modules.; ///; /// This routine visits each of the modules, starting with the; /// ""root"" modules that no other loaded modules depend on, and; /// proceeding to the leaf modules, visiting each module only once; /// during the traversal.; ///; /// This traversal is intended to support various ""lookup""; /// operations that can find data in any of the loaded modules.; ///; /// \param Visitor A visitor function that will be invoked with each; /// module. The return value must be convertible to bool; when false, the; /// visitation continues to modules that the current module depends on. When; /// true, the visitation skips any modules that the current module depends on.; ///; /// \param ModuleFilesHit If non-NULL, contains the set of module files; /// that we know we need to visit because the global module index told us to.; /// Any module that is known to both the global module index and the module; /// manager that is *not* in this set can be skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:134,Performance,load,loaded,134,"/// Visit each of the modules.; ///; /// This routine visits each of the modules, starting with the; /// ""root"" modules that no other loaded modules depend on, and; /// proceeding to the leaf modules, visiting each module only once; /// during the traversal.; ///; /// This traversal is intended to support various ""lookup""; /// operations that can find data in any of the loaded modules.; ///; /// \param Visitor A visitor function that will be invoked with each; /// module. The return value must be convertible to bool; when false, the; /// visitation continues to modules that the current module depends on. When; /// true, the visitation skips any modules that the current module depends on.; ///; /// \param ModuleFilesHit If non-NULL, contains the set of module files; /// that we know we need to visit because the global module index told us to.; /// Any module that is known to both the global module index and the module; /// manager that is *not* in this set can be skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:373,Performance,load,loaded,373,"/// Visit each of the modules.; ///; /// This routine visits each of the modules, starting with the; /// ""root"" modules that no other loaded modules depend on, and; /// proceeding to the leaf modules, visiting each module only once; /// during the traversal.; ///; /// This traversal is intended to support various ""lookup""; /// operations that can find data in any of the loaded modules.; ///; /// \param Visitor A visitor function that will be invoked with each; /// module. The return value must be convertible to bool; when false, the; /// visitation continues to modules that the current module depends on. When; /// true, the visitation skips any modules that the current module depends on.; ///; /// \param ModuleFilesHit If non-NULL, contains the set of module files; /// that we know we need to visit because the global module index told us to.; /// Any module that is known to both the global module index and the module; /// manager that is *not* in this set can be skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:673,Availability,avail,available,673,"/// Attempt to resolve the given module file name to a file entry.; ///; /// \param FileName The name of the module file.; ///; /// \param ExpectedSize The size that the module file is expected to have.; /// If the actual size differs, the resolver should return \c true.; ///; /// \param ExpectedModTime The modification time that the module file is; /// expected to have. If the actual modification time differs, the resolver; /// should return \c true.; ///; /// \param File Will be set to the file if there is one, or null; /// otherwise.; ///; /// \returns True if a file exists but does not meet the size/; /// modification time criteria, false if the file is either available and; /// suitable, or is missing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h:18,Integrability,interface,interface,18,/// This abstract interface provides operations for creating; /// containers for serialized ASTs (precompiled headers and clang; /// modules).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h:87,Integrability,wrap,wrapper,87,/// Return an ASTConsumer that can be chained with a; /// PCHGenerator that produces a wrapper file format containing a; /// serialized AST bitstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h:18,Integrability,interface,interface,18,/// This abstract interface provides operations for unwrapping; /// containers for serialized ASTs (precompiled headers and clang; /// modules).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h:4,Usability,Simpl,Simply,4,/// Simply returns the buffer contained in Buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h:511,Energy Efficiency,efficient,efficiently,511,"//===--- SourceLocationEncoding.h - Small serialized locations --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Source locations are stored pervasively in the AST, making up a third of; // the size of typical serialized files. Storing them efficiently is important.; //; // We use integers optimized by VBR-encoding, because:; // - when abbreviations cannot be used, VBR6 encoding is our only choice; // - in the worst case a SourceLocation can be ~any 32-bit number, but in; // practice they are highly predictable; //; // We encode the integer so that likely values encode as small numbers that; // turn into few VBR chunks:; // - the invalid sentinel location is a very common value: it encodes as 0; // - the ""macro or not"" bit is stored at the bottom of the integer; // (rather than at the top, as in memory), so macro locations can have; // small representations.; // - related locations (e.g. of a left and right paren pair) are usually; // similar, so when encoding a sequence of locations we store only; // differences between successive elements.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h:561,Performance,optimiz,optimized,561,"//===--- SourceLocationEncoding.h - Small serialized locations --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Source locations are stored pervasively in the AST, making up a third of; // the size of typical serialized files. Storing them efficiently is important.; //; // We use integers optimized by VBR-encoding, because:; // - when abbreviations cannot be used, VBR6 encoding is our only choice; // - in the worst case a SourceLocation can be ~any 32-bit number, but in; // practice they are highly predictable; //; // We encode the integer so that likely values encode as small numbers that; // turn into few VBR chunks:; // - the invalid sentinel location is a very common value: it encodes as 0; // - the ""macro or not"" bit is stored at the bottom of the integer; // (rather than at the top, as in memory), so macro locations can have; // small representations.; // - related locations (e.g. of a left and right paren pair) are usually; // similar, so when encoding a sequence of locations we store only; // differences between successive elements.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h:775,Safety,predict,predictable,775,"//===--- SourceLocationEncoding.h - Small serialized locations --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Source locations are stored pervasively in the AST, making up a third of; // the size of typical serialized files. Storing them efficiently is important.; //; // We use integers optimized by VBR-encoding, because:; // - when abbreviations cannot be used, VBR6 encoding is our only choice; // - in the worst case a SourceLocation can be ~any 32-bit number, but in; // practice they are highly predictable; //; // We encode the integer so that likely values encode as small numbers that; // turn into few VBR chunks:; // - the invalid sentinel location is a very common value: it encodes as 0; // - the ""macro or not"" bit is stored at the bottom of the integer; // (rather than at the top, as in memory), so macro locations can have; // small representations.; // - related locations (e.g. of a left and right paren pair) are usually; // similar, so when encoding a sequence of locations we store only; // differences between successive elements.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h:65,Performance,Optimiz,Optimized,65,"/// Serialized encoding of SourceLocations without context.; /// Optimized to have small unsigned values (=> small after VBR encoding).; ///; // Macro locations have the top bit set, we rotate by one so it is the low bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h:68,Performance,Optimiz,Optimized,68,"/// Serialized encoding of a sequence of SourceLocations.; ///; /// Optimized to produce small values when locations with the sequence are; /// similar. Each element can be delta-encoded against the last nonzero element.; ///; /// Sequences should be started by creating a SourceLocationSequence::State,; /// and then passed around as SourceLocationSequence*. Example:; ///; /// // establishes a sequence; /// void EmitTopLevelThing() {; /// SourceLocationSequence::State Seq;; /// EmitContainedThing(Seq);; /// EmitRecursiveThing(Seq);; /// }; ///; /// // optionally part of a sequence; /// void EmitContainedThing(SourceLocationSequence *Seq = nullptr) {; /// Record.push_back(SourceLocationEncoding::encode(SomeLoc, Seq));; /// }; ///; /// // establishes a sequence if there isn't one already; /// void EmitRecursiveThing(SourceLocationSequence *ParentSeq = nullptr) {; /// SourceLocationSequence::State Seq(ParentSeq);; /// Record.push_back(SourceLocationEncoding::encode(SomeLoc, Seq));; /// EmitRecursiveThing(Seq);; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h:560,Modifiability,variab,variable,560,"//== SValExplainer.h - Symbolic value explainer -----------------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines SValExplainer, a class for pretty-printing a; // human-readable description of a symbolic value. For example,; // ""reg_$0<x>"" is turned into ""initial value of variable 'x'"".; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h:3,Safety,Avoid,Avoid,3,"// Avoid the weird ""pointer to pointee of ..."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h:44,Integrability,wrap,wrapped,44,"// Explain 'this' object here - if it's not wrapped by an ElementRegion.; // TODO: Explain CXXThisRegion itself, find a way to test it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h:127,Testability,test,test,127,"// Explain 'this' object here - if it's not wrapped by an ElementRegion.; // TODO: Explain CXXThisRegion itself, find a way to test it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h:71,Integrability,wrap,wrapped,71,// Explain 'this' object here.; // They are represented by a SymRegion wrapped by an ElementRegion; so; // match and handle it here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:52,Availability,avail,available,52,// namespace ento; /// AnalysisConstraints - Set of available constraint models.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:33,Availability,avail,available,33,/// AnalysisDiagClients - Set of available diagnostic clients for rendering; /// analysis results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:32,Availability,avail,available,32,/// AnalysisPurgeModes - Set of available strategies for dead symbol removal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:4,Performance,Perform,Perform,4,/// Perform only intra-procedural analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:61,Availability,avail,available,61,/// Inline C functions and blocks when their definitions are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:60,Availability,avail,available,60,"/// Inline callees(C, C++, ObjC) when their definitions are available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:4,Performance,Perform,Perform,4,/// Perform shallow but fast analyzes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:4,Performance,Perform,Perform,4,/// Perform deep analyzes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:154,Deployability,configurat,configuration,154,"/// Stores options for the analyzer from the command line.; ///; /// Some options are frontend flags (e.g.: -analyzer-output), but some are; /// analyzer configuration options, which are preceded by -analyzer-config; /// (e.g.: -analyzer-config notes-as-events=true).; ///; /// If you'd like to add a new frontend flag, add it to; /// include/clang/Driver/CC1Options.td, add a new field to store the value of; /// that flag in this class, and initialize it in; /// lib/Frontend/CompilerInvocation.cpp.; ///; /// If you'd like to add a new non-checker configuration, register it in; /// include/clang/StaticAnalyzer/Core/AnalyzerOptions.def, and refer to the; /// top of the file for documentation.; ///; /// If you'd like to add a new checker option, call getChecker*Option(); /// whenever.; ///; /// Some of the options are controlled by raw frontend flags for no good reason,; /// and should be eventually converted into -analyzer-config flags. New analyzer; /// options should not be implemented as frontend flags. Frontend flags still; /// make sense for things that do not affect the actual analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:551,Deployability,configurat,configuration,551,"/// Stores options for the analyzer from the command line.; ///; /// Some options are frontend flags (e.g.: -analyzer-output), but some are; /// analyzer configuration options, which are preceded by -analyzer-config; /// (e.g.: -analyzer-config notes-as-events=true).; ///; /// If you'd like to add a new frontend flag, add it to; /// include/clang/Driver/CC1Options.td, add a new field to store the value of; /// that flag in this class, and initialize it in; /// lib/Frontend/CompilerInvocation.cpp.; ///; /// If you'd like to add a new non-checker configuration, register it in; /// include/clang/StaticAnalyzer/Core/AnalyzerOptions.def, and refer to the; /// top of the file for documentation.; ///; /// If you'd like to add a new checker option, call getChecker*Option(); /// whenever.; ///; /// Some of the options are controlled by raw frontend flags for no good reason,; /// and should be eventually converted into -analyzer-config flags. New analyzer; /// options should not be implemented as frontend flags. Frontend flags still; /// make sense for things that do not affect the actual analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:154,Modifiability,config,configuration,154,"/// Stores options for the analyzer from the command line.; ///; /// Some options are frontend flags (e.g.: -analyzer-output), but some are; /// analyzer configuration options, which are preceded by -analyzer-config; /// (e.g.: -analyzer-config notes-as-events=true).; ///; /// If you'd like to add a new frontend flag, add it to; /// include/clang/Driver/CC1Options.td, add a new field to store the value of; /// that flag in this class, and initialize it in; /// lib/Frontend/CompilerInvocation.cpp.; ///; /// If you'd like to add a new non-checker configuration, register it in; /// include/clang/StaticAnalyzer/Core/AnalyzerOptions.def, and refer to the; /// top of the file for documentation.; ///; /// If you'd like to add a new checker option, call getChecker*Option(); /// whenever.; ///; /// Some of the options are controlled by raw frontend flags for no good reason,; /// and should be eventually converted into -analyzer-config flags. New analyzer; /// options should not be implemented as frontend flags. Frontend flags still; /// make sense for things that do not affect the actual analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:209,Modifiability,config,config,209,"/// Stores options for the analyzer from the command line.; ///; /// Some options are frontend flags (e.g.: -analyzer-output), but some are; /// analyzer configuration options, which are preceded by -analyzer-config; /// (e.g.: -analyzer-config notes-as-events=true).; ///; /// If you'd like to add a new frontend flag, add it to; /// include/clang/Driver/CC1Options.td, add a new field to store the value of; /// that flag in this class, and initialize it in; /// lib/Frontend/CompilerInvocation.cpp.; ///; /// If you'd like to add a new non-checker configuration, register it in; /// include/clang/StaticAnalyzer/Core/AnalyzerOptions.def, and refer to the; /// top of the file for documentation.; ///; /// If you'd like to add a new checker option, call getChecker*Option(); /// whenever.; ///; /// Some of the options are controlled by raw frontend flags for no good reason,; /// and should be eventually converted into -analyzer-config flags. New analyzer; /// options should not be implemented as frontend flags. Frontend flags still; /// make sense for things that do not affect the actual analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:238,Modifiability,config,config,238,"/// Stores options for the analyzer from the command line.; ///; /// Some options are frontend flags (e.g.: -analyzer-output), but some are; /// analyzer configuration options, which are preceded by -analyzer-config; /// (e.g.: -analyzer-config notes-as-events=true).; ///; /// If you'd like to add a new frontend flag, add it to; /// include/clang/Driver/CC1Options.td, add a new field to store the value of; /// that flag in this class, and initialize it in; /// lib/Frontend/CompilerInvocation.cpp.; ///; /// If you'd like to add a new non-checker configuration, register it in; /// include/clang/StaticAnalyzer/Core/AnalyzerOptions.def, and refer to the; /// top of the file for documentation.; ///; /// If you'd like to add a new checker option, call getChecker*Option(); /// whenever.; ///; /// Some of the options are controlled by raw frontend flags for no good reason,; /// and should be eventually converted into -analyzer-config flags. New analyzer; /// options should not be implemented as frontend flags. Frontend flags still; /// make sense for things that do not affect the actual analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:551,Modifiability,config,configuration,551,"/// Stores options for the analyzer from the command line.; ///; /// Some options are frontend flags (e.g.: -analyzer-output), but some are; /// analyzer configuration options, which are preceded by -analyzer-config; /// (e.g.: -analyzer-config notes-as-events=true).; ///; /// If you'd like to add a new frontend flag, add it to; /// include/clang/Driver/CC1Options.td, add a new field to store the value of; /// that flag in this class, and initialize it in; /// lib/Frontend/CompilerInvocation.cpp.; ///; /// If you'd like to add a new non-checker configuration, register it in; /// include/clang/StaticAnalyzer/Core/AnalyzerOptions.def, and refer to the; /// top of the file for documentation.; ///; /// If you'd like to add a new checker option, call getChecker*Option(); /// whenever.; ///; /// Some of the options are controlled by raw frontend flags for no good reason,; /// and should be eventually converted into -analyzer-config flags. New analyzer; /// options should not be implemented as frontend flags. Frontend flags still; /// make sense for things that do not affect the actual analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:933,Modifiability,config,config,933,"/// Stores options for the analyzer from the command line.; ///; /// Some options are frontend flags (e.g.: -analyzer-output), but some are; /// analyzer configuration options, which are preceded by -analyzer-config; /// (e.g.: -analyzer-config notes-as-events=true).; ///; /// If you'd like to add a new frontend flag, add it to; /// include/clang/Driver/CC1Options.td, add a new field to store the value of; /// that flag in this class, and initialize it in; /// lib/Frontend/CompilerInvocation.cpp.; ///; /// If you'd like to add a new non-checker configuration, register it in; /// include/clang/StaticAnalyzer/Core/AnalyzerOptions.def, and refer to the; /// top of the file for documentation.; ///; /// If you'd like to add a new checker option, call getChecker*Option(); /// whenever.; ///; /// Some of the options are controlled by raw frontend flags for no good reason,; /// and should be eventually converted into -analyzer-config flags. New analyzer; /// options should not be implemented as frontend flags. Frontend flags still; /// make sense for things that do not affect the actual analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:138,Modifiability,plugin,plugin,138,/// Retrieves the list of checkers generated from Checkers.td. This doesn't; /// contain statically linked but non-generated checkers and plugin checkers!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:138,Modifiability,plugin,plugin,138,/// Retrieves the list of packages generated from Checkers.td. This doesn't; /// contain statically linked but non-generated packages and plugin packages!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:214,Integrability,depend,depending,214,"/// Convenience function for printing options or checkers and their; /// description in a formatted manner. If \p MinLineWidth is set to 0, no line; /// breaks are introduced for the description.; ///; /// Format, depending whether the option name's length is less than; /// \p EntryWidth:; ///; /// <padding>EntryName<padding>Description; /// <---------padding--------->Description; /// <---------padding--------->Description; ///; /// <padding>VeryVeryLongEntryName; /// <---------padding--------->Description; /// <---------padding--------->Description; /// ^~~~~~~~~InitialPad; /// ^~~~~~~~~~~~~~~~~~EntryWidth; /// ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MinLineWidth",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:39,Deployability,configurat,configuration,39,/// A key-value table of use-specified configuration values.; // TODO: This shouldn't be public.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:39,Modifiability,config,configuration,39,/// A key-value table of use-specified configuration values.; // TODO: This shouldn't be public.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:30,Availability,error,errors,30,/// Emit analyzer warnings as errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:37,Modifiability,config,config,37,// Create a field for each -analyzer-config option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:36,Modifiability,config,config,36,// Create an array of all -analyzer-config command line options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:534,Modifiability,config,config,534,"/// Interprets an option's string value as a boolean. The ""true"" string is; /// interpreted as true and the ""false"" string is interpreted as false.; ///; /// If an option value is not provided, returns the given \p DefaultVal.; /// @param [in] CheckerName The *full name* of the checker. One may retrieve; /// this from the checker object's field \c Name, or through \c; /// CheckerManager::getCurrentCheckerName within the checker's registry; /// function.; /// Checker options are retrieved in the following format:; /// `-analyzer-config CheckerName:OptionName=Value.; /// @param [in] OptionName Name for option to retrieve.; /// @param [in] SearchInParents If set to true and the searched option was not; /// specified for the given checker the options for the parent packages will; /// be searched as well. The inner packages take precedence over the outer; /// ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:447,Modifiability,config,config,447,"/// Interprets an option's string value as an integer value.; ///; /// If an option value is not provided, returns the given \p DefaultVal.; /// @param [in] CheckerName The *full name* of the checker. One may retrieve; /// this from the checker object's field \c Name, or through \c; /// CheckerManager::getCurrentCheckerName within the checker's registry; /// function.; /// Checker options are retrieved in the following format:; /// `-analyzer-config CheckerName:OptionName=Value.; /// @param [in] OptionName Name for option to retrieve.; /// @param [in] SearchInParents If set to true and the searched option was not; /// specified for the given checker the options for the parent packages will; /// be searched as well. The inner packages take precedence over the outer; /// ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:422,Modifiability,config,config,422,"/// Query an option's string value.; ///; /// If an option value is not provided, returns the given \p DefaultVal.; /// @param [in] CheckerName The *full name* of the checker. One may retrieve; /// this from the checker object's field \c Name, or through \c; /// CheckerManager::getCurrentCheckerName within the checker's registry; /// function.; /// Checker options are retrieved in the following format:; /// `-analyzer-config CheckerName:OptionName=Value.; /// @param [in] OptionName Name for option to retrieve.; /// @param [in] SearchInParents If set to true and the searched option was not; /// specified for the given checker the options for the parent packages will; /// be searched as well. The inner packages take precedence over the outer; /// ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:151,Modifiability,config,config,151,/// Returns the option controlling which C++ member functions will be; /// considered for inlining.; ///; /// This is controlled by the 'c++-inlining' config option.; ///; /// \sa CXXMemberInliningMode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:225,Integrability,depend,depends,225,"//===----------------------------------------------------------------------===//; // We'll use AnalyzerOptions in the frontend, but we can't link the frontend; // with clangStaticAnalyzerCore, because clangStaticAnalyzerCore depends on; // clangFrontend.; //; // For this reason, implement some methods in this header file.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h:41,Integrability,message,message,41,/// Tag that can use a checker name as a message provider; /// (see SimpleProgramPointTag).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h:68,Usability,Simpl,SimpleProgramPointTag,68,/// Tag that can use a checker name as a message provider; /// (see SimpleProgramPointTag).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:91,Security,access,accessible,91,"/// The pointer has been passed to a function indirectly.; /// For example, the pointer is accessible through an; /// argument to a function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:206,Availability,alive,alive,206,"/// This wrapper is used to ensure that only StringRefs originating from the; /// CheckerRegistry are used as check names. We want to make sure all checker; /// name strings have a lifetime that keeps them alive at least until the path; /// diagnostics have been processed, since they are expected to be constexpr; /// string literals (most likely generated by TblGen).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:9,Integrability,wrap,wrapper,9,"/// This wrapper is used to ensure that only StringRefs originating from the; /// CheckerRegistry are used as check names. We want to make sure all checker; /// name strings have a lifetime that keeps them alive at least until the path; /// diagnostics have been processed, since they are expected to be constexpr; /// string literals (most likely generated by TblGen).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:304,Integrability,depend,dependencies,304,"// These constructors are defined in the Frontend library, because; // CheckerRegistry, a crucial component of the initialization is in there.; // CheckerRegistry cannot be moved to the Core library, because the checker; // registration functions are defined in the Checkers library, and the library; // dependencies look like this: Core -> Checkers -> Frontend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:101,Testability,test,testing,101,"/// Constructs a CheckerManager that ignores all non TblGen-generated; /// checkers. Useful for unit testing, unless the checker infrastructure; /// itself is tested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:159,Testability,test,tested,159,"/// Constructs a CheckerManager that ignores all non TblGen-generated; /// checkers. Useful for unit testing, unless the checker infrastructure; /// itself is tested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:13,Availability,error,error,13,/// Emits an error through a DiagnosticsEngine about an invalid user supplied; /// checker option value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:299,Performance,perform,performed,299,"//===----------------------------------------------------------------------===//; // Functions for running checkers for path-sensitive checking.; //===----------------------------------------------------------------------===//; /// Run checkers for pre-visiting Stmts.; ///; /// The notification is performed for every explored CFGElement, which does; /// not include the control flow statements such as IfStmt.; ///; /// \sa runCheckersForBranchCondition, runCheckersForPostStmt",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:72,Performance,perform,performed,72,"/// Run checkers for post-visiting Stmts.; ///; /// The notification is performed for every explored CFGElement, which does; /// not include the control flow statements such as IfStmt.; ///; /// \sa runCheckersForBranchCondition, runCheckersForPreStmt",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:40,Integrability,message,messages,40,/// Run checkers for pre-visiting obj-c messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:41,Integrability,message,messages,41,/// Run checkers for post-visiting obj-c messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:39,Integrability,message,message,39,/// Run checkers for visiting an obj-c message to nil.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:36,Integrability,message,messages,36,/// Run checkers for visiting obj-c messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:40,Integrability,message,messages,40,/// Run checkers for pre-visiting obj-c messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:41,Integrability,message,messages,41,/// Run checkers for post-visiting obj-c messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:36,Integrability,message,messages,36,/// Run checkers for visiting obj-c messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:21,Performance,load,load,21,/// Run checkers for load/store of a location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:153,Energy Efficiency,reduce,reduce,153,"/// Run checkers for dead symbols.; ///; /// Notifies checkers when symbols become dead. For example, this allows; /// checkers to aggressively clean up/reduce the checker state and produce; /// precise diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:550,Integrability,wrap,wrapper,550,"/// Run checkers for region changes.; ///; /// This corresponds to the check::RegionChanges callback.; /// \param state The current program state.; /// \param invalidated A set of all symbols potentially touched by the change.; /// \param ExplicitRegions The regions explicitly requested for invalidation.; /// For example, in the case of a function call, these would be arguments.; /// \param Regions The transitive closure of accessible regions,; /// i.e. all regions that may have been touched by this change.; /// \param Call The call expression wrapper if the regions are invalidated; /// by a call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:428,Security,access,accessible,428,"/// Run checkers for region changes.; ///; /// This corresponds to the check::RegionChanges callback.; /// \param state The current program state.; /// \param invalidated A set of all symbols potentially touched by the change.; /// \param ExplicitRegions The regions explicitly requested for invalidation.; /// For example, in the case of a function call, these would be arguments.; /// \param Regions The transitive closure of accessible regions,; /// i.e. all regions that may have been touched by this change.; /// \param Call The call expression wrapper if the regions are invalidated; /// by a call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:411,Integrability,message,message,411,"/// Run checkers for debug-printing a ProgramState.; ///; /// Unlike most other callbacks, any checker can simply implement the virtual; /// method CheckerBase::printState if it has custom data to print.; ///; /// \param Out The output stream; /// \param State The state being printed; /// \param NL The preferred representation of a newline.; /// \param Space The preferred space between the left side and the message.; /// \param IsDot Whether the message will be printed in 'dot' format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:450,Integrability,message,message,450,"/// Run checkers for debug-printing a ProgramState.; ///; /// Unlike most other callbacks, any checker can simply implement the virtual; /// method CheckerBase::printState if it has custom data to print.; ///; /// \param Out The output stream; /// \param State The state being printed; /// \param NL The preferred representation of a newline.; /// \param Space The preferred space between the left side and the message.; /// \param IsDot Whether the message will be printed in 'dot' format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:107,Usability,simpl,simply,107,"/// Run checkers for debug-printing a ProgramState.; ///; /// Unlike most other callbacks, any checker can simply implement the virtual; /// method CheckerBase::printState if it has custom data to print.; ///; /// \param Out The output stream; /// \param State The state being printed; /// \param NL The preferred representation of a newline.; /// \param Space The preferred space between the left side and the message.; /// \param IsDot Whether the message will be printed in 'dot' format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h:827,Integrability,depend,dependency,827,"//===- CheckerRegistryData.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the data structures to which the TableGen file Checkers.td; // maps to, as well as what was parsed from the the specific invocation (whether; // a checker/package is enabled, their options values, etc).; //; // The parsing of the invocation is done by CheckerRegistry, which is found in; // the Frontend library. This allows the Core and Checkers libraries to utilize; // this information, such as enforcing rules on checker dependency bug emission,; // ensuring all checker options were queried, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h:29,Performance,perform,perform,29,/// Initialization functions perform any necessary setup for a checker.; /// They should include a call to CheckerManager::registerChecker.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h:63,Integrability,depend,dependencies,63,"/// Contains all (FullName, CmdLineOption) pairs. Similarly to dependencies,; /// we only modify the actual CheckerInfo and PackageInfo objects once all; /// of them have been added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathDiagnosticConsumers.h:407,Integrability,interface,interface,407,"//===--- PathDiagnosticConsumers.h - Path Diagnostic Clients ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface to create different path diagostic clients.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathDiagnosticConsumers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathDiagnosticConsumers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:85,Integrability,Interface,Interface,85,//===----------------------------------------------------------------------===//; // Interface for individual bug reports.; //===----------------------------------------------------------------------===//; /// A mapping from diagnostic consumers to the diagnostics they should; /// consume.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:4,Integrability,Interface,Interface,4,/// Interface for classes constructing Stack hints.; ///; /// If a PathDiagnosticEvent occurs in a different frame than the final; /// diagnostic the hints can be used to summarize the effect of the call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:29,Integrability,message,message,29,/// Construct the Diagnostic message for the given ExplodedNode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:108,Integrability,message,message,108,/// Constructs a Stack hint for the given symbol.; ///; /// The class knows how to construct the stack hint message based on; /// traversing the CallExpr associated with the call and checking if the given; /// symbol is returned or is one of the arguments.; /// The hint can be customized by redefining 'getMessageForX()' methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:123,Integrability,message,message,123,/// Search the call expression for the symbol Sym and dispatch the; /// 'getMessageForX()' methods to construct a specific message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:17,Integrability,message,message,17,/// Produces the message of the following form:; /// 'Msg via Nth parameter',MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:27,Integrability,interface,interface,27,/// This class provides an interface through which checkers can create; /// individual bug reports.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:22,Integrability,message,message,22,"/// A verbose warning message that is appropriate for displaying next to; /// the source code that introduces the problem. The description should be; /// at least a full sentence starting with a capital letter. The period at; /// the end of the warning is traditionally omitted. If the description; /// consists of multiple sentences, periods between the sentences are; /// encouraged, but the period at the end of the description is still omitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:28,Integrability,message,message,28,/// A short general warning message that is appropriate for displaying in; /// the list of all reported bugs. It should describe what kind of bug is found; /// but does not need to try to go into details of that specific bug.; /// Grammatical conventions of getDescription() apply here as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:629,Energy Efficiency,allocate,allocated,629,"/// Get the location on which the report should be uniqued. Two warnings are; /// considered to be equivalent whenever they have the same bug types,; /// descriptions, and uniqueing locations. Out of a class of equivalent; /// warnings only one gets displayed to the user. For most warnings the; /// uniqueing location coincides with their location, but sometimes; /// it makes sense to use different locations. For example, a leak; /// checker can place the warning at the location where the last reference; /// to the leaking resource is dropped but at the same time unique the warning; /// by where that resource is acquired (allocated).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:260,Availability,error,error,260,"/// Add a range to a bug report.; ///; /// Ranges are used to highlight regions of interest in the source code.; /// They should be at the same source code line as the BugReport location.; /// By default, the source range of the statement corresponding to the error; /// node will be used; add a single invalid range to specify absence of; /// ranges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:34,Availability,Error,ErrorNode,34,/// The range that corresponds to ErrorNode's program point. It is usually; /// highlighted in the report.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:51,Availability,error,error,51,"/// Profile to identify equivalent bug reports for error report coalescing.; /// A (stack of) a set of symbols that are registered with this; /// report as being ""interesting"", and thus used to help decide which; /// diagnostics to include when constructing the final path diagnostic.; /// The stack is largely used by BugReporter when generating PathDiagnostics; /// for multiple PathDiagnosticConsumers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:85,Integrability,message,message,85,"/// If an event occurs in a different frame than the final diagnostic,; /// supply a message that will be used to construct an extra hint on the; /// returns from all the calls on the stack from this event to the final; /// diagnostic.; // FIXME: Allow shared_ptr keys in DenseMap?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:212,Integrability,message,message,212,"/// Marks a symbol as interesting. Different kinds of interestingness will; /// be processed differently by visitors (e.g. if the tracking kind is; /// condition, will append ""will be used as a condition"" to the message).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:212,Integrability,message,message,212,"/// Marks a region as interesting. Different kinds of interestingness will; /// be processed differently by visitors (e.g. if the tracking kind is; /// condition, will append ""will be used as a condition"" to the message).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:220,Integrability,message,message,220,"/// Marks a symbolic value as interesting. Different kinds of interestingness; /// will be processed differently by visitors (e.g. if the tracking kind is; /// condition, will append ""will be used as a condition"" to the message).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:51,Availability,error,error,51,/// Profile to identify equivalent bug reports for error report coalescing.; /// Reports are uniqued to ensure that we do not emit multiple diagnostics; /// for each bug.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:44,Energy Efficiency,allocate,allocated,44,/// A vector of BugReports for tracking the allocated pointers and cleanup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:52,Security,access,access,52,// We cannot use std::make_unique because we cannot access the private; // constructor from inside it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:46,Integrability,message,messages,46,// TODO: Remember a few examples of generated messages; // and display them in the ExplodedGraph dump by; // returning them from this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:450,Modifiability,enhance,enhanced,450,"//===- BugReporterVisitors.h - Generate PathDiagnostics ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares BugReporterVisitors, which are used to generate enhanced; // diagnostic traces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:156,Modifiability,variab,variable,156,"/// The value got stored into the region as block capture.; /// Block data is modeled as a separate region, thus whenever; /// the analyzer sees a captured variable, its value is copied; /// into a special block region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:291,Testability,log,logic,291,"/// A generalized component for tracking expressions, values, and stores.; ///; /// Tracker aimes at providing a sensible set of default behaviors that can be; /// used by any checker, while providing mechanisms to hook into any part of the; /// tracking process and insert checker-specific logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:140,Availability,down,downstream,140,"/// Track expression value back to its point of origin.; ///; /// \param E The expression value which we are tracking; /// \param N A node ""downstream"" from the evaluation of the statement.; /// \param Opts Tracking options specifying how we want to track the value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:144,Availability,down,downstream,144,"/// Handle the given expression from the given node.; ///; /// \param E The expression value which we are tracking; /// \param Original A node ""downstream"" where the tracking started.; /// \param ExprNode A node where the evaluation of \c E actually happens.; /// \param Opts Tracking options specifying how we are tracking the value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:116,Availability,down,downstream,116,"/// Attempts to add visitors to track expression value back to its point of; /// origin.; ///; /// \param N A node ""downstream"" from the evaluation of the statement.; /// \param E The expression value which we are tracking; /// \param R The bug report to which visitors should be attached.; /// \param Opts Tracking options specifying how we are tracking the value.; ///; /// \return Whether or not the function was able to add visitors for this; /// statement. Note that returning \c true does not actually imply; /// that any visitors were added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:62,Integrability,message,message,62,/// \class NilReceiverBRVisitor; /// Prints path notes when a message is sent to a nil receiver.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:26,Integrability,message,message,26,"/// If the statement is a message send expression with nil receiver, returns; /// the receiver expression. Returns NULL otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:262,Security,access,accessed,262,"/// When a region containing undefined value or '0' value is passed; /// as an argument in a call, marks the call as interesting.; ///; /// As a result, BugReporter will not prune the path through the function even; /// if the region's contents are not modified/accessed by the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:16,Safety,detect,detects,16,/// The visitor detects NoteTags and displays the event notes they contain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:208,Availability,avail,available,208,/// Frames modifying the state as defined in \c wasModifiedBeforeCallExit.; /// This visitor generates a note only if a function does *not* change the; /// state that way. This information is not immediately available; /// by looking at the node associated with the exit from the function; /// (usually the return statement). To avoid recomputing the same information; /// many times (going up the path for each node and checking whether the; /// region was written into) we instead lazily compute the stack frames; /// along the path.; // TODO: Can't we just use a map instead? This is likely not as cheap as it; // makes the code difficult to read.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:329,Safety,avoid,avoid,329,/// Frames modifying the state as defined in \c wasModifiedBeforeCallExit.; /// This visitor generates a note only if a function does *not* change the; /// state that way. This information is not immediately available; /// by looking at the node associated with the exit from the function; /// (usually the return statement). To avoid recomputing the same information; /// many times (going up the path for each node and checking whether the; /// region was written into) we instead lazily compute the stack frames; /// along the path.; // TODO: Can't we just use a map instead? This is likely not as cheap as it; // makes the code difficult to read.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:145,Performance,cache,cached,145,/// Check and lazily calculate whether the state is modified in the stack; /// frame to which \p CallExitBeginN belongs.; /// The calculation is cached in FramesModifying.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:750,Modifiability,variab,variable,750,"/// \return Whether the state was modified in the inlined function call in; /// between \p CallEnterN and \p CallExitEndN. Mind that the stack frame; /// retrieved from a CallEnterN and CallExitEndN is the *caller's* stack; /// frame! The inlined function's stack should be retrieved from either the; /// immediate successor to \p CallEnterN or immediate predecessor to; /// \p CallExitEndN.; /// Clients should override this function if a state changes local to the; /// inlined function are not interesting, only the change occuring as a; /// result of it.; /// Example: we want to leave a not about a leaked resource object not being; /// deallocated / its ownership changed inside a function, and we don't care; /// if it was assigned to a local variable (its change in ownership is; /// inconsequential).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h:38,Integrability,interface,interface,38,"//===- BugSuppression.h - Suppression interface -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines BugSuppression, a simple interface class encapsulating; // all user provided in-code suppressions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h:426,Integrability,interface,interface,426,"//===- BugSuppression.h - Suppression interface -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines BugSuppression, a simple interface class encapsulating; // all user provided in-code suppressions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h:419,Usability,simpl,simple,419,"//===- BugSuppression.h - Suppression interface -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines BugSuppression, a simple interface class encapsulating; // all user provided in-code suppressions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/AnalysisManager.h:3,Modifiability,Config,Configurable,3,// Configurable components creators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/AnalysisManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/AnalysisManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/AnalysisManager.h:260,Safety,safe,safe,260,"// Support the ""unified sources"" compilation method (eg. WebKit) that; // involves producing non-header files that include other non-header files.; // We should be included directly from a UnifiedSource* file; // and we shouldn't be a header - which is a very safe defensive check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/AnalysisManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/AnalysisManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h:20,Usability,Simpl,Simple,20,"//== APSIntType.h - Simple record of the type of APSInts --------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h:27,Modifiability,extend,extend,27,"// Note the order here. We extend first to preserve the sign, if this value; // is signed, /then/ match the signedness of the result type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h:86,Testability,test,testInRange,86,/// Used to classify whether a value is representable using this type.; ///; /// \see testInRange,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h:4,Testability,Test,Tests,4,/// Tests whether a given value is losslessly representable using this type.; ///; /// \param Val The value to test.; /// \param AllowMixedSign Whether or not to allow signedness conversions.; /// This determines whether -1s8 is considered in range; /// for 'unsigned char' (u8).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h:111,Testability,test,test,111,/// Tests whether a given value is losslessly representable using this type.; ///; /// \param Val The value to test.; /// \param AllowMixedSign Whether or not to allow signedness conversions.; /// This determines whether -1s8 is considered in range; /// for 'unsigned char' (u8).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:183,Availability,avail,available,183,"/// @}; /// @name Matching CallDescriptions against a CallExpr; /// @{; /// Returns true if the CallExpr is a call to a function that matches the; /// CallDescription.; ///; /// When available, always prefer matching with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:283,Availability,avail,available,283,"/// @}; /// @name Matching CallDescriptions against a CallExpr; /// @{; /// Returns true if the CallExpr is a call to a function that matches the; /// CallDescription.; ///; /// When available, always prefer matching with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:853,Availability,avail,available,853,"/// @}; /// @name Matching CallDescriptions against a CallExpr; /// @{; /// Returns true if the CallExpr is a call to a function that matches the; /// CallDescription.; ///; /// When available, always prefer matching with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:40,Security,hash,hashable,40,"// Some call descriptions aren't easily hashable (eg., the ones with qualified; // names in which some sections are omitted), so let's put them; // in a simple vector and use linear lookup.; // TODO: Implement an actual map for fast lookup for ""hashable"" call; // descriptions (eg., the ones for C functions that just match the name).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:245,Security,hash,hashable,245,"// Some call descriptions aren't easily hashable (eg., the ones with qualified; // names in which some sections are omitted), so let's put them; // in a simple vector and use linear lookup.; // TODO: Implement an actual map for fast lookup for ""hashable"" call; // descriptions (eg., the ones for C functions that just match the name).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:153,Usability,simpl,simple,153,"// Some call descriptions aren't easily hashable (eg., the ones with qualified; // names in which some sections are omitted), so let's put them; // in a simple vector and use linear lookup.; // TODO: Implement an actual map for fast lookup for ""hashable"" call; // descriptions (eg., the ones for C functions that just match the name).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:86,Availability,redundant,redundant,86,"// These maps are usually stored once per checker, so let's make sure; // we don't do redundant copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:86,Safety,redund,redundant,86,"// These maps are usually stored once per checker, so let's make sure; // we don't do redundant copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:9,Availability,avail,available,9,"/// When available, always prefer lookup with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:107,Availability,avail,available,107,"/// When available, always prefer lookup with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:677,Availability,avail,available,677,"/// When available, always prefer lookup with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:60,Energy Efficiency,efficient,efficiently,60,/// An immutable set of CallDescriptions.; /// Checkers can efficiently decide if a given CallEvent matches any; /// CallDescription in the set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:9,Availability,avail,available,9,"/// When available, always prefer lookup with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:107,Availability,avail,available,107,"/// When available, always prefer lookup with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h:677,Availability,avail,available,677,"/// When available, always prefer lookup with a CallEvent! This function; /// exists only when that is not available, for example, when _only_; /// syntactic check is done on a piece of code.; ///; /// Also, StdLibraryFunctionsChecker::Signature is likely a better candicade; /// for syntactic only matching if you are writing a new checker. This is; /// handy if a CallDescriptionMap is already there.; ///; /// The function is imprecise because CallEvent may know path sensitive; /// information, such as the precise argument count (see comments for; /// CallEvent::getNumArgs), the called function if it was called through a; /// function pointer, and other information not available syntactically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallDescription.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:21,Integrability,Wrap,Wrapper,21,"//===- CallEvent.h - Wrapper for all function and method calls --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This file defines CallEvent and its subclasses, which represent path-; /// sensitive instances of different kinds of function and method calls; /// (C, C++, and Objective-C).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:87,Availability,avail,available,87,/// The Declaration of the function which could be called at runtime.; /// NULL if not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:130,Integrability,depend,depends,130,"/// The region representing an object (ObjC/C++) on which the method is; /// called. With dynamic dispatch, the method definition depends on the; /// runtime type of this object. NULL when the DynamicTypeInfo is; /// precise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:33,Availability,error,errors,33,/// Returns the source range for errors associated with this argument.; ///; /// May be invalid if the argument is not written in the source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:728,Availability,down,down,728,"/// Returns true if the callee is an externally-visible function in the; /// top-level namespace, such as \c malloc.; ///; /// You can use this call to determine that a particular function really is; /// a library function and not, say, a C++ member function with the same name.; ///; /// If a name is provided, the function must additionally match the given; /// name.; ///; /// Note that this deliberately excludes C++ library functions in the \c std; /// namespace, but will include C library functions accessed through the; /// \c std namespace. This also does not check if the function is declared; /// as 'extern ""C""', or if it uses C++ name mangling.; // FIXME: Add a helper for checking namespaces.; // FIXME: Move this down to AnyFunctionCall once checkers have more; // precise callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:506,Security,access,accessed,506,"/// Returns true if the callee is an externally-visible function in the; /// top-level namespace, such as \c malloc.; ///; /// You can use this call to determine that a particular function really is; /// a library function and not, say, a C++ member function with the same name.; ///; /// If a name is provided, the function must additionally match the given; /// name.; ///; /// Note that this deliberately excludes C++ library functions in the \c std; /// namespace, but will include C library functions accessed through the; /// \c std namespace. This also does not check if the function is declared; /// as 'extern ""C""', or if it uses C++ name mangling.; // FIXME: Add a helper for checking namespaces.; // FIXME: Move this down to AnyFunctionCall once checkers have more; // precise callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:306,Availability,down,down,306,"/// Returns the name of the callee, if its name is a simple identifier.; ///; /// Note that this will fail for Objective-C methods, blocks, and C++; /// overloaded operators. The former is named by a Selector rather than a; /// simple identifier, and the latter two do not have names.; // FIXME: Move this down to AnyFunctionCall once checkers have more; // precise callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:53,Usability,simpl,simple,53,"/// Returns the name of the callee, if its name is a simple identifier.; ///; /// Note that this will fail for Objective-C methods, blocks, and C++; /// overloaded operators. The former is named by a Selector rather than a; /// simple identifier, and the latter two do not have names.; // FIXME: Move this down to AnyFunctionCall once checkers have more; // precise callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:228,Usability,simpl,simple,228,"/// Returns the name of the callee, if its name is a simple identifier.; ///; /// Note that this will fail for Objective-C methods, blocks, and C++; /// overloaded operators. The former is named by a Selector rather than a; /// simple identifier, and the latter two do not have names.; // FIXME: Move this down to AnyFunctionCall once checkers have more; // precise callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:101,Availability,failure,failure,101,/// Returns AnalysisDeclContext for the callee stack frame.; /// Currently may fail; returns null on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:243,Availability,failure,failure,243,"/// Returns the callee stack frame. That stack frame will only be entered; /// during analysis if the call is inlined, but it may still be useful; /// in intermediate calculations even if the call isn't inlined.; /// May fail; returns null on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:224,Availability,failure,failure,224,/// Returns memory location for a parameter variable within the callee stack; /// frame. The behavior is undefined if the block count is different from the; /// one that is there when call happens. May fail; returns null on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:44,Modifiability,variab,variable,44,/// Returns memory location for a parameter variable within the callee stack; /// frame. The behavior is undefined if the block count is different from the; /// one that is there when call happens. May fail; returns null on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:243,Modifiability,variab,variable,243,/// Some calls have parameter numbering mismatched from argument numbering.; /// This function converts an argument index to the corresponding; /// parameter index. Returns std::nullopt is the argument doesn't correspond; /// to any parameter variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:12,Security,access,access,12,// Iterator access to formal parameters and their types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:200,Integrability,interface,interface,200,"/// Returns an iterator over the types of the call's formal parameters.; ///; /// This uses the callee decl found by default name lookup rather than the; /// definition because it represents a public interface, and probably has; /// more annotations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:86,Modifiability,variab,variable,86,"/// For a block converted from a C++ lambda, returns the block; /// VarRegion for the variable holding the captured C++ lambda record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:562,Testability,log,logic,562,/// Creates an implicit destructor.; ///; /// \param DD The destructor that will be called.; /// \param Trigger The statement whose completion causes this destructor call.; /// \param Target The object region to be destructed.; /// \param St The path-sensitive state at this point in the program.; /// \param LCtx The location context at this point in the program.; /// \param ElemRef The reference to this destructor in the CFG.; ///; /// FIXME: Eventually we want to drop \param Target and deduce it from; /// \param ElemRef. To do that we need to migrate the logic for target; /// region lookup from ExprEngine::ProcessImplicitDtor() and make it; /// independent from ExprEngine.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:87,Modifiability,inherit,inherited,87,/// Represents any constructor invocation. This includes regular constructors; /// and inherited constructors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:31,Modifiability,inherit,inherited,31,"/// Represents a call to a C++ inherited constructor.; ///; /// Example: \c class T : public S { using S::S; }; T(1);; ///; // Note, it is difficult to model the parameters. This is one of the reasons; // why we skip analysis of inheriting constructors as top-level functions.; // CXXInheritedCtorInitExpr doesn't take arguments and doesn't model parameter; // initialization because there is none: the arguments in the outer; // CXXConstructExpr directly initialize the parameters of the base class; // constructor, and no copies are made. (Making a copy of the parameter is; // incorrect, at least if it's done in an observable way.) The derived class; // constructor doesn't even exist in the formal model.; /// E.g., in:; ///; /// struct X { X *p = this; ~X() {} };; /// struct A { A(X x) : b(x.p == &x) {} bool b; };; /// struct B : A { using A::A; };; /// B b = X{};; ///; /// ... b.b is initialized to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:229,Modifiability,inherit,inheriting,229,"/// Represents a call to a C++ inherited constructor.; ///; /// Example: \c class T : public S { using S::S; }; T(1);; ///; // Note, it is difficult to model the parameters. This is one of the reasons; // why we skip analysis of inheriting constructors as top-level functions.; // CXXInheritedCtorInitExpr doesn't take arguments and doesn't model parameter; // initialization because there is none: the arguments in the outer; // CXXConstructExpr directly initialize the parameters of the base class; // constructor, and no copies are made. (Making a copy of the parameter is; // incorrect, at least if it's done in an observable way.) The derived class; // constructor doesn't even exist in the formal model.; /// E.g., in:; ///; /// struct X { X *p = this; ~X() {} };; /// struct A { A(X x) : b(x.p == &x) {} bool b; };; /// struct B : A { using A::A; };; /// B b = X{};; ///; /// ... b.b is initialized to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:34,Modifiability,inherit,inheriting,34,/// Obtain the stack frame of the inheriting constructor. Argument expressions; /// can be found on the call site of that stack frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:55,Modifiability,inherit,inherited,55,/// Obtain the CXXConstructExpr for the sub-class that inherited the current; /// constructor (possibly indirectly). It's the statement that contains; /// argument expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:389,Testability,test,test,389,"/// Represents the memory deallocation call in a C++ delete-expression.; ///; /// This is a call to ""operator delete"".; // FIXME: CXXDeleteExpr isn't present for custom delete operators, or even for; // some those that are in the standard library, like the no-throw or align_val; // versions.; // Some pointers:; // http://lists.llvm.org/pipermail/cfe-dev/2020-April/065080.html; // clang/test/Analysis/cxx-dynamic-memory-analysis-order.cpp; // clang/unittests/StaticAnalyzer/CallEventTest.cpp",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:39,Integrability,message,message,39,"/// Represents the ways an Objective-C message send can occur.; //; // Note to maintainers: OCM_Message should always be last, since it does not; // need to fit in the Data field's low bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:12,Integrability,interface,interface,12,"/// Get the interface for the receiver.; ///; /// This works whether this is an instance message or a class message.; /// However, it currently just uses the static type of the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:89,Integrability,message,message,89,"/// Get the interface for the receiver.; ///; /// This works whether this is an instance message or a class message.; /// However, it currently just uses the static type of the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:108,Integrability,message,message,108,"/// Get the interface for the receiver.; ///; /// This works whether this is an instance message or a class message.; /// However, it currently just uses the static type of the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:20,Integrability,message,message,20,"/// Returns how the message was written in the source (property access,; /// subscript, or explicit message send).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:100,Integrability,message,message,100,"/// Returns how the message was written in the source (property access,; /// subscript, or explicit message send).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:64,Security,access,access,64,"/// Returns how the message was written in the source (property access,; /// subscript, or explicit message send).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:34,Security,access,access,34,/// Returns true if this property access or subscript is a setter (has the; /// form of an assignment).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:24,Security,access,accessed,24,"// Returns the property accessed by this method, either explicitly via; // property syntax or implicitly via a getter or setter method. Returns; // nullptr if the call is not a prooperty access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:187,Security,access,access,187,"// Returns the property accessed by this method, either explicitly via; // property syntax or implicitly via a getter or setter method. Returns; // nullptr if the call is not a prooperty access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:183,Performance,cache,cache,183,"/// Manages the lifetime of CallEvent objects.; ///; /// CallEventManager provides a way to create arbitrary CallEvents ""on the; /// stack"" as if they were value objects by keeping a cache of CallEvent-sized; /// memory blocks. The CallEvents created by CallEventManager are only valid; /// for the lifetime of the OwnedCallEvent that holds them; right now these; /// objects cannot be copied and ownership cannot be transferred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:234,Modifiability,variab,variables,234,"/// If the given node corresponds to a PostStore program point,; /// retrieve the location region as it was uttered in the code.; ///; /// This utility can be useful for generating extensive diagnostics, for; /// example, for finding variables that the given symbol was assigned to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:140,Availability,error,error,140,"/// Generate a sink node. Generating a sink stops exploration of the; /// given path. To create a sink node for the purpose of reporting an error,; /// checkers should use generateErrorNode() instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:72,Availability,error,error,72,"/// Generate a transition to a node that will be used to report; /// an error. This node will be a sink. That is, it will stop exploration of; /// the given path.; ///; /// @param State The state of the generated node.; /// @param Tag The tag to uniquely identify the creation site. If null,; /// the default tag for the checker will be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:72,Availability,error,error,72,"/// Generate a transition to a node that will be used to report; /// an error. This node will be a sink. That is, it will stop exploration of; /// the given path.; ///; /// @param State The state of the generated node.; /// @param Pred The transition will be generated from the specified Pred node; /// to the newly generated node.; /// @param Tag The tag to uniquely identify the creation site. If null,; /// the default tag for the checker will be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:72,Availability,error,error,72,"/// Generate a transition to a node that will be used to report; /// an error. This node will not be a sink. That is, exploration will; /// continue along this path.; ///; /// @param State The state of the generated node.; /// @param Tag The tag to uniquely identify the creation site. If null,; /// the default tag for the checker will be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:72,Availability,error,error,72,"/// Generate a transition to a node that will be used to report; /// an error. This node will not be a sink. That is, exploration will; /// continue along this path.; ///; /// @param State The state of the generated node.; /// @param Pred The transition will be generated from the specified Pred node; /// to the newly generated node.; /// @param Tag The tag to uniquely identify the creation site. If null,; /// the default tag for the checker will be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:344,Security,access,accessed,344,"/// Returns true if the callee is an externally-visible function in the; /// top-level namespace, such as \c malloc.; ///; /// If a name is provided, the function must additionally match the given; /// name.; ///; /// Note that this deliberately excludes C++ library functions in the \c std; /// namespace, but will include C library functions accessed through the; /// \c std namespace. This also does not check if the function is declared; /// as 'extern ""C""', or if it uses C++ name mangling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:4,Integrability,Depend,Depending,4,"/// Depending on wither the location corresponds to a macro, return; /// either the macro name or the token spelling.; ///; /// This could be useful when checkers' logic depends on whether a function; /// is called with a given macro argument. For example:; /// s = socket(AF_INET,..); /// If AF_INET is a macro, the result should be treated as a source of taint.; ///; /// \sa clang::Lexer::getSpelling(), clang::Lexer::getImmediateMacroName().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:170,Integrability,depend,depends,170,"/// Depending on wither the location corresponds to a macro, return; /// either the macro name or the token spelling.; ///; /// This could be useful when checkers' logic depends on whether a function; /// is called with a given macro argument. For example:; /// s = socket(AF_INET,..); /// If AF_INET is a macro, the result should be treated as a source of taint.; ///; /// \sa clang::Lexer::getSpelling(), clang::Lexer::getImmediateMacroName().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:164,Testability,log,logic,164,"/// Depending on wither the location corresponds to a macro, return; /// either the macro name or the token spelling.; ///; /// This could be useful when checkers' logic depends on whether a function; /// is called with a given macro argument. For example:; /// s = socket(AF_INET,..); /// If AF_INET is a macro, the result should be treated as a source of taint.; ///; /// \sa clang::Lexer::getSpelling(), clang::Lexer::getImmediateMacroName().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:766,Deployability,update,updated,766,"// The analyzer may stop exploring if it sees a state it has previously; // visited (""cache out""). The early return here is a defensive check to; // prevent accidental caching out by checker API clients. Unless there is a; // tag or the client checker has requested that the generated node be; // marked as a sink, we assume that a client requesting a transition to a; // state that is the same as the predecessor state has made a mistake. We; // return the predecessor rather than cache out.; //; // TODO: We could potentially change the return to an assertion to alert; // clients to their mistake, but several checkers (including; // DereferenceChecker, CallAndMessageChecker, and DynamicTypePropagation); // rely upon the defensive behavior and would need to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:86,Performance,cache,cache,86,"// The analyzer may stop exploring if it sees a state it has previously; // visited (""cache out""). The early return here is a defensive check to; // prevent accidental caching out by checker API clients. Unless there is a; // tag or the client checker has requested that the generated node be; // marked as a sink, we assume that a client requesting a transition to a; // state that is the same as the predecessor state has made a mistake. We; // return the predecessor rather than cache out.; //; // TODO: We could potentially change the return to an assertion to alert; // clients to their mistake, but several checkers (including; // DereferenceChecker, CallAndMessageChecker, and DynamicTypePropagation); // rely upon the defensive behavior and would need to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:482,Performance,cache,cache,482,"// The analyzer may stop exploring if it sees a state it has previously; // visited (""cache out""). The early return here is a defensive check to; // prevent accidental caching out by checker API clients. Unless there is a; // tag or the client checker has requested that the generated node be; // marked as a sink, we assume that a client requesting a transition to a; // state that is the same as the predecessor state has made a mistake. We; // return the predecessor rather than cache out.; //; // TODO: We could potentially change the return to an assertion to alert; // clients to their mistake, but several checkers (including; // DereferenceChecker, CallAndMessageChecker, and DynamicTypePropagation); // rely upon the defensive behavior and would need to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:552,Testability,assert,assertion,552,"// The analyzer may stop exploring if it sees a state it has previously; // visited (""cache out""). The early return here is a defensive check to; // prevent accidental caching out by checker API clients. Unless there is a; // tag or the client checker has requested that the generated node be; // marked as a sink, we assume that a client requesting a transition to a; // state that is the same as the predecessor state has made a mistake. We; // return the predecessor rather than cache out.; //; // TODO: We could potentially change the return to an assertion to alert; // clients to their mistake, but several checkers (including; // DereferenceChecker, CallAndMessageChecker, and DynamicTypePropagation); // rely upon the defensive behavior and would need to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h:71,Performance,Optimiz,Optimization,71,"// Do not reorder! The getMostNullable method relies on the order.; // Optimization: Most pointers expected to be unspecified. When a symbol has an; // unspecified or nonnull type non of the rules would indicate any problem for; // that symbol. For this reason only nullable and contradicted nullability are; // stored for a symbol. When a symbol is already contradicted, it can not be; // casted back to nullable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h:176,Safety,avoid,avoid,176,// Tracked nullability is contradicted by an explicit cast. Do; // not report any nullability related issue for this symbol.; // This nullability is propagated aggressively to avoid false; // positive results. See the comment on getMostNullable method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h:83,Usability,simpl,simple,83,/// Try to parse the value of a defined preprocessor macro. We can only parse; /// simple expressions that consist of an optional minus sign token and then a; /// token for an integer. If we cannot parse the value then std::nullopt is; /// returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h:405,Integrability,interface,interface,405,"//===- ConstraintManager.h - Constraints on symbolic values. ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defined the interface to manage constraints on symbolic values.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h:105,Integrability,depend,depending,105,"/// Construct a ConditionTruthVal indicating the constraint is constrained; /// to either true or false, depending on the boolean value provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h:78,Availability,alive,alive,78,"/// Scan all symbols referenced by the constraints. If the symbol is not; /// alive, remove it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h:333,Availability,recover,recover,333,/// canReasonAbout - Not all ConstraintManagers can accurately reason about; /// all SVal values. This method returns true if the ConstraintManager can; /// reasonably handle a given SVal value. This is typically queried by; /// ExprEngine to determine if the value should be replaced with a; /// conjured symbolic value in order to recover some precision.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h:333,Safety,recover,recover,333,/// canReasonAbout - Not all ConstraintManagers can accurately reason about; /// all SVal values. This method returns true if the ConstraintManager can; /// reasonably handle a given SVal value. This is typically queried by; /// ExprEngine to determine if the value should be replaced with a; /// conjured symbolic value in order to recover some precision.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:119,Testability,log,logic,119,"//===----------------------------------------------------------------------===//; /// CoreEngine - Implements the core logic of the graph-reachability; /// analysis. It traverses the CFG and generates the ExplodedGraph.; /// Program ""states"" are treated as opaque void pointers.; /// The template class CoreEngine (which subclasses CoreEngine); /// provides the matching component to the engine that knows the actual types; /// for states. Note that this engine only dispatches to transfer functions; /// at the statement and block-level. The analyses themselves must implement; /// any transfer function logic and the sub-expression level (if any).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:605,Testability,log,logic,605,"//===----------------------------------------------------------------------===//; /// CoreEngine - Implements the core logic of the graph-reachability; /// analysis. It traverses the CFG and generates the ExplodedGraph.; /// Program ""states"" are treated as opaque void pointers.; /// The template class CoreEngine (which subclasses CoreEngine); /// provides the matching component to the engine that knows the actual types; /// for states. Note that this engine only dispatches to transfer functions; /// at the statement and block-level. The analyses themselves must implement; /// any transfer function logic and the sub-expression level (if any).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:21,Performance,queue,queued,21,/// WList - A set of queued nodes that need to be processed by the; /// worklist algorithm. It is up to the implementation of WList to decide; /// the order that nodes are processed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:54,Safety,abort,aborted,54,"/// The locations where we stopped because the engine aborted analysis,; /// usually because it could not reason about something.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:23,Testability,log,logic,23,/// Handle conditional logic for running static initializers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:49,Safety,abort,aborted,49,/// Inform the CoreEngine that a basic block was aborted because; /// it could not be completely analyzed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:40,Usability,simpl,simplest,40,/// \class NodeBuilder; /// This is the simplest builder which generates nodes in the; /// ExplodedGraph.; ///; /// The main benefit of the builder is that it automatically tracks the; /// frontier nodes (or destination set). This is the set of nodes which should; /// be propagated to the next step / builder. They are the nodes which have been; /// added to the builder (either as the input node set or as the newly; /// constructed nodes) but did not have any outgoing transitions added.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/DynamicTypeInfo.h:45,Availability,avail,available,45,/// Returns true if the dynamic type info is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/DynamicTypeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/DynamicTypeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h:4,Energy Efficiency,Efficient,Efficiently,4,"/// Efficiently stores a list of ExplodedNodes, or an optional flag.; ///; /// NodeGroup provides opaque storage for a list of ExplodedNodes, optimizing; /// for the case when there is only one node in the group. This is a fairly; /// common case in an ExplodedGraph, where most nodes have only one; /// predecessor and many have only one successor. It can also be used to; /// store a flag rather than a node list, which ExplodedNode uses to mark; /// whether a node is a sink. If the flag is set, the group is implicitly; /// empty and no nodes may be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h:142,Performance,optimiz,optimizing,142,"/// Efficiently stores a list of ExplodedNodes, or an optional flag.; ///; /// NodeGroup provides opaque storage for a list of ExplodedNodes, optimizing; /// for the case when there is only one node in the group. This is a fairly; /// common case in an ExplodedGraph, where most nodes have only one; /// predecessor and many have only one successor. It can also be used to; /// store a flag rather than a node list, which ExplodedNode uses to mark; /// whether a node is a sink. If the flag is set, the group is implicitly; /// empty and no nodes may be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h:6,Safety,avoid,avoid,6,// We avoid copy constructors by not using accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h:43,Security,access,accessors,43,// We avoid copy constructors by not using accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h:23,Energy Efficiency,allocate,allocated,23,/// A list of recently allocated nodes that can potentially be recycled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h:32,Energy Efficiency,allocate,allocated,32,/// Enable tracking of recently allocated nodes for potential reclamation; /// when calling reclaimRecentlyAllocatedNodes().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:64,Modifiability,extend,extended,64,"/// This call is a constructor for a temporary that is lifetime-extended; /// by binding it to a reference-type field within an aggregate,; /// for example 'A { const C &c; }; A a = { C() };'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:216,Performance,perform,perform,216,"/// This call is a pre-C++17 elidable constructor that we failed to elide; /// because we failed to compute the target region into which; /// this constructor would have been ultimately elided. Analysis that; /// we perform in this case is still correct but it behaves differently,; /// as if copy elision is disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:49,Integrability,message,message,49,/// Helper object to determine if an Objective-C message expression; /// implicitly never returns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:123,Modifiability,variab,variables,123,/// The BugReporter associated with this engine. It is important that; /// this object be placed at the very end of member variables so that its; /// destructor is called before the rest of the ExprEngine is destroyed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:816,Modifiability,variab,variables,816,"/// Run the analyzer's garbage collection - remove dead symbols and; /// bindings from the state.; ///; /// Checkers can participate in this process with two callbacks:; /// \c checkLiveSymbols and \c checkDeadSymbols. See the CheckerDocumentation; /// class for more information.; ///; /// \param Node The predecessor node, from which the processing should start.; /// \param Out The returned set of output nodes.; /// \param ReferenceStmt The statement which is about to be processed.; /// Everything needed for this statement should be considered live.; /// A null statement means that everything in child LocationContexts; /// is dead.; /// \param LC The location context of the \p ReferenceStmt. A null location; /// context means that we have reached the end of analysis and that; /// all statements and local variables should be considered dead.; /// \param DiagnosticStmt Used as a location for any warnings that should; /// occur while removing the dead (e.g. leaks). By default, the; /// \p ReferenceStmt is used.; /// \param K Denotes whether this is a pre- or post-statement purge. This; /// must only be ProgramPoint::PostStmtPurgeDeadSymbolsKind if an; /// entire location context is being cleared, in which case the; /// \p ReferenceStmt must either be a ReturnStmt or \c NULL. Otherwise,; /// it must be ProgramPoint::PreStmtPurgeDeadSymbolsKind (the default); /// and \p ReferenceStmt must be valid (non-null).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:1204,Usability,clear,cleared,1204,"/// Run the analyzer's garbage collection - remove dead symbols and; /// bindings from the state.; ///; /// Checkers can participate in this process with two callbacks:; /// \c checkLiveSymbols and \c checkDeadSymbols. See the CheckerDocumentation; /// class for more information.; ///; /// \param Node The predecessor node, from which the processing should start.; /// \param Out The returned set of output nodes.; /// \param ReferenceStmt The statement which is about to be processed.; /// Everything needed for this statement should be considered live.; /// A null statement means that everything in child LocationContexts; /// is dead.; /// \param LC The location context of the \p ReferenceStmt. A null location; /// context means that we have reached the end of analysis and that; /// all statements and local variables should be considered dead.; /// \param DiagnosticStmt Used as a location for any warnings that should; /// occur while removing the dead (e.g. leaks). By default, the; /// \p ReferenceStmt is used.; /// \param K Denotes whether this is a pre- or post-statement purge. This; /// must only be ProgramPoint::PostStmtPurgeDeadSymbolsKind if an; /// entire location context is being cleared, in which case the; /// \p ReferenceStmt must either be a ReturnStmt or \c NULL. Otherwise,; /// it must be ProgramPoint::PreStmtPurgeDeadSymbolsKind (the default); /// and \p ReferenceStmt must be valid (non-null).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:90,Integrability,depend,depending,90,/// Called by CoreEngine.; /// Used to generate successor nodes for temporary destructors depending; /// on whether the corresponding constructor was visited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:110,Deployability,update,update,110,/// processRegionChanges - Called by ProgramStateManager whenever a change is made; /// to the store. Used to update checkers that track region values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:30,Testability,log,logic,30,/// Visit - Transfer function logic for all statements. Dispatches to; /// other functions that handle specific kinds of statements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:58,Security,access,accesses,58,/// VisitArraySubscriptExpr - Transfer function for array accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:40,Testability,log,logic,40,/// VisitGCCAsmStmt - Transfer function logic for inline asm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:39,Testability,log,logic,39,/// VisitMSAsmStmt - Transfer function logic for MS inline asm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:39,Testability,log,logic,39,/// VisitBlockExpr - Transfer function logic for BlockExprs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:40,Testability,log,logic,40,/// VisitLambdaExpr - Transfer function logic for LambdaExprs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:44,Testability,log,logic,44,/// VisitBinaryOperator - Transfer function logic for binary operators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:34,Testability,log,logic,34,/// VisitCast - Transfer function logic for all casts (implicit and explicit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:49,Testability,log,logic,49,/// VisitCompoundLiteralExpr - Transfer function logic for compound literals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:22,Testability,log,logic,22,/// Transfer function logic for DeclRefExprs and BlockDeclRefExprs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:38,Testability,log,logic,38,/// VisitDeclStmt - Transfer function logic for DeclStmts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:41,Testability,log,logic,41,"/// VisitGuardedExpr - Transfer function logic for ?, __builtin_choose",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:41,Testability,log,logic,41,"/// VisitLogicalExpr - Transfer function logic for '&&', '||'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:22,Testability,log,logic,22,/// Transfer function logic for ObjCAtSynchronizedStmts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:22,Testability,log,logic,22,/// Transfer function logic for computing the lvalue of an Objective-C ivar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:51,Testability,log,logic,51,/// VisitObjCForCollectionStmt - Transfer function logic for; /// ObjCForCollectionStmt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:40,Testability,log,logic,40,/// VisitReturnStmt - Transfer function logic for return statements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:43,Testability,log,logic,43,/// VisitUnaryOperator - Transfer function logic for unary operators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:13,Integrability,wrap,wrapper,13,/// A simple wrapper when you only need to notify checkers of pointer-escape; /// of some values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:6,Usability,simpl,simple,6,/// A simple wrapper when you only need to notify checkers of pointer-escape; /// of some values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:506,Deployability,continuous,continuous,506,"/// Find location of the object that is being constructed by a given; /// constructor. This should ideally always succeed but due to not being; /// fully implemented it sometimes indicates that it failed via its; /// out-parameter CallOpts; in such cases a fake temporary region is; /// returned, which is better than nothing but does not represent; /// the actual behavior of the program. The Idx parameter is used if we; /// construct an array of objects. In that case it points to the index; /// of the continuous memory region.; /// E.g.:; /// For `int arr[4]` this index can be 0,1,2,3.; /// For `int arr2[3][3]` this index can be 0,1,...,7,8.; /// A multi-dimensional array is also a continuous memory location in a; /// row major order, so for arr[0][0] Idx is 0 and for arr[2][2] Idx is 8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:690,Deployability,continuous,continuous,690,"/// Find location of the object that is being constructed by a given; /// constructor. This should ideally always succeed but due to not being; /// fully implemented it sometimes indicates that it failed via its; /// out-parameter CallOpts; in such cases a fake temporary region is; /// returned, which is better than nothing but does not represent; /// the actual behavior of the program. The Idx parameter is used if we; /// construct an array of objects. In that case it points to the index; /// of the continuous memory region.; /// E.g.:; /// For `int arr[4]` this index can be 0,1,2,3.; /// For `int arr2[3][3]` this index can be 0,1,...,7,8.; /// A multi-dimensional array is also a continuous memory location in a; /// row major order, so for arr[0][0] Idx is 0 and for arr[2][2] Idx is 8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:4,Deployability,Update,Update,4,"/// Update the program state with all the path-sensitive information; /// that's necessary to perform construction of an object with a given; /// syntactic construction context. V and CallOpts have to be obtained from; /// computeObjectUnderConstruction() invoked with the same set of; /// the remaining arguments (E, State, LCtx, CC).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:94,Performance,perform,perform,94,"/// Update the program state with all the path-sensitive information; /// that's necessary to perform construction of an object with a given; /// syntactic construction context. V and CallOpts have to be obtained from; /// computeObjectUnderConstruction() invoked with the same set of; /// the remaining arguments (E, State, LCtx, CC).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:72,Deployability,update,updateObjectsUnderConstruction,72,/// A convenient wrapper around computeObjectUnderConstruction; /// and updateObjectsUnderConstruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:17,Integrability,wrap,wrapper,17,/// A convenient wrapper around computeObjectUnderConstruction; /// and updateObjectsUnderConstruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:99,Usability,simpl,simply,99,"/// See if the given AnalysisDeclContext is built for a function that we; /// should always inline simply because it's small enough.; /// Apart from ""small"" functions, we also have ""large"" functions; /// (cf. isLarge()), some of which are huge (cf. isHuge()), and we classify; /// the remaining functions as ""medium"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:60,Availability,error,error,60,"/// Prepares the program state for array destruction. If no error happens; /// the function binds a 'PendingArrayDestruction' entry to the state, which; /// it returns along with the index. If any error happens (we fail to read; /// the size, the index would be -1, etc.) the function will return the; /// original state along with an index of 0. The actual element count of the; /// array can be accessed by the optional 'ElementCountVal' parameter. \param; /// State The program state. \param Region The memory region where the array; /// is stored. \param ElementTy The type an element in the array. \param LCty; /// The location context. \param ElementCountVal A pointer to an optional; /// SVal. If specified, the size of the array will be returned in it. It can; /// be Unknown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:197,Availability,error,error,197,"/// Prepares the program state for array destruction. If no error happens; /// the function binds a 'PendingArrayDestruction' entry to the state, which; /// it returns along with the index. If any error happens (we fail to read; /// the size, the index would be -1, etc.) the function will return the; /// original state along with an index of 0. The actual element count of the; /// array can be accessed by the optional 'ElementCountVal' parameter. \param; /// State The program state. \param Region The memory region where the array; /// is stored. \param ElementTy The type an element in the array. \param LCty; /// The location context. \param ElementCountVal A pointer to an optional; /// SVal. If specified, the size of the array will be returned in it. It can; /// be Unknown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:397,Security,access,accessed,397,"/// Prepares the program state for array destruction. If no error happens; /// the function binds a 'PendingArrayDestruction' entry to the state, which; /// it returns along with the index. If any error happens (we fail to read; /// the size, the index would be -1, etc.) the function will return the; /// original state along with an index of 0. The actual element count of the; /// array can be accessed by the optional 'ElementCountVal' parameter. \param; /// State The program state. \param Region The memory region where the array; /// is stored. \param ElementTy The type an element in the array. \param LCty; /// The location context. \param ElementCountVal A pointer to an optional; /// SVal. If specified, the size of the array will be returned in it. It can; /// be Unknown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:94,Usability,simpl,simple,94,/// Models a trivial copy or move constructor or trivial assignment operator; /// call with a simple bind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:98,Integrability,interface,interface,98,/// Note whether this loop has any more iteratios to model. These methods are; /// essentially an interface for a GDM trait. Further reading in; /// ExprEngine::VisitObjCForCollectionStmt().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:402,Availability,alive,alive,402,"/// Store the location of a C++ object corresponding to a statement; /// until the statement is actually encountered. For example, if a DeclStmt; /// has CXXConstructExpr as its initializer, the object would be considered; /// to be ""under construction"" between CXXConstructExpr and DeclStmt.; /// This allows, among other things, to keep bindings to variable's fields; /// made within the constructor alive until its declaration actually; /// goes into scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:351,Modifiability,variab,variable,351,"/// Store the location of a C++ object corresponding to a statement; /// until the statement is actually encountered. For example, if a DeclStmt; /// has CXXConstructExpr as its initializer, the object would be considered; /// to be ""under construction"" between CXXConstructExpr and DeclStmt.; /// This allows, among other things, to keep bindings to variable's fields; /// made within the constructor alive until its declaration actually; /// goes into scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:169,Testability,assert,assertions,169,"/// Check if all objects under construction have been fully constructed; /// for the given context range (including FromLC, not including ToLC).; /// This is useful for assertions. Also checks if elided destructors; /// were cleaned up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:188,Security,access,accessible,188,/// Traits for storing the call processing policy inside GDM.; /// The GDM stores the corresponding CallExpr pointer.; // FIXME: This does not use the nice trait macros because it must be accessible; // from multiple translation units.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/LoopUnrolling.h:890,Modifiability,variab,variable,890,"//===--- LoopUnrolling.h - Unroll loops -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This header contains the declarations of functions which are used to decide; /// which loops should be completely unrolled and mark their corresponding; /// CFGBlocks. It is done by tracking a stack of loops in the ProgramState. This; /// way specific loops can be marked as completely unrolled. For considering a; /// loop to be completely unrolled it has to fulfill the following requirements:; /// - Currently only forStmts can be considered.; /// - The bound has to be known.; /// - The counter variable has not escaped before/in the body of the loop and; /// changed only in the increment statement corresponding to the loop. It also; /// has to be initialized by a literal in the corresponding initStmt.; /// - Does not contain goto, switch and returnStmt.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/LoopUnrolling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/LoopUnrolling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/LoopUnrolling.h:4,Deployability,Update,Updates,4,/// Updates the stack of loops contained by the ProgramState.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/LoopUnrolling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/LoopUnrolling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/LoopUnrolling.h:4,Deployability,Update,Updates,4,/// Updates the given ProgramState. In current implementation it removes the top; /// element of the stack of loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/LoopUnrolling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/LoopUnrolling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:52,Usability,user-friendly,user-friendly,52,/// Returns true if this region can be printed in a user-friendly way.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:79,Modifiability,variab,variable,79,"/// Get descriptive name for memory region. The name is obtained from; /// the variable/field declaration retrieved from the memory region.; /// Regions that point to an element of an array are returned as: ""arr[0]"".; /// Regions that point to a struct are returned as: ""st.var"".; //; /// \param UseQuotes Set if the name should be quoted.; ///; /// \returns variable name for memory region",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:359,Modifiability,variab,variable,359,"/// Get descriptive name for memory region. The name is obtained from; /// the variable/field declaration retrieved from the memory region.; /// Regions that point to an element of an array are returned as: ""arr[0]"".; /// Regions that point to a struct are returned as: ""st.var"".; //; /// \param UseQuotes Set if the name should be quoted.; ///; /// \returns variable name for memory region",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:107,Modifiability,variab,variables,107,"/// MemSpaceRegion - A memory region that represents a ""memory space"";; /// for example, the set of global variables, the stack frame, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:29,Modifiability,variab,variables,29,"/// The region of the static variables within the current CodeTextRegion; /// scope.; ///; /// Currently, only the static locals are placed there, so we know that these; /// variables do not get invalidated by calls to other functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:174,Modifiability,variab,variables,174,"/// The region of the static variables within the current CodeTextRegion; /// scope.; ///; /// Currently, only the static locals are placed there, so we know that these; /// variables do not get invalidated by calls to other functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:114,Energy Efficiency,efficient,efficient,114,"/// The region for all the non-static global variables.; ///; /// This class is further split into subclasses for efficient implementation of; /// invalidating a set of related global values as is done in; /// RegionStoreManager::invalidateRegions (instead of finding all the dependent; /// globals, we invalidate the whole parent region).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:276,Integrability,depend,dependent,276,"/// The region for all the non-static global variables.; ///; /// This class is further split into subclasses for efficient implementation of; /// invalidating a set of related global values as is done in; /// RegionStoreManager::invalidateRegions (instead of finding all the dependent; /// globals, we invalidate the whole parent region).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:45,Modifiability,variab,variables,45,"/// The region for all the non-static global variables.; ///; /// This class is further split into subclasses for efficient implementation of; /// invalidating a set of related global values as is done in; /// RegionStoreManager::invalidateRegions (instead of finding all the dependent; /// globals, we invalidate the whole parent region).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:65,Energy Efficiency,allocate,allocated,65,// Block counter. Used to distinguish different pieces of memory allocated by; // alloca at the same call site.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:26,Performance,optimiz,optimize,26,// FIXME: We can possibly optimize this later to cache this value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:49,Performance,cache,cache,49,// FIXME: We can possibly optimize this later to cache this value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:79,Integrability,depend,depending,79,// TODO: We might want to return a different type here (ex: id (*ty)(...)); // depending on how it is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:387,Modifiability,variab,variables,387,"/// BlockCodeRegion - A region that represents code texts of blocks (closures).; /// Blocks are represented with two kinds of regions. BlockCodeRegions; /// represent the ""code"", while BlockDataRegions represent instances of blocks,; /// which correspond to ""code+data"". The distinction is important, because; /// like a closure a block captures the values of externally referenced; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:372,Modifiability,variab,variables,372,"/// BlockDataRegion - A region that represents a block instance.; /// Blocks are represented with two kinds of regions. BlockCodeRegions; /// represent the ""code"", while BlockDataRegions represent instances of blocks,; /// which correspond to ""code+data"". The distinction is important, because; /// like a closure a block captures the values of externally referenced; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:62,Modifiability,layers,layers,62,"// Because pointer arithmetic is represented by ElementRegion layers,; // the base symbol here should not contain any arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:25,Integrability,wrap,wrapped,25,"/// Gets the type of the wrapped symbol.; /// This type might not be accurate at all times - it's just our best guess.; /// Consider these cases:; /// void foo(void *data, char *str, base *obj) {...}; /// The type of the pointee of `data` is of course not `void`, yet that's our; /// best guess. `str` might point to any object and `obj` might point to some; /// derived instance. `TypedRegions` other hand are representing the cases; /// when we actually know their types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:143,Energy Efficiency,allocate,allocated,143,/// CompoundLiteralRegion - A memory region representing a compound literal.; /// Compound literals are essentially temporaries that are stack allocated; /// or in the global constant pool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:56,Modifiability,variab,variable,56,"// VarRegion appears in unknown space when it's a block variable as seen; // from a block using it, when this block is analyzed at top-level.; // Other block variables appear within block data regions,; // which, unlike everything else on this list, are not memory spaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:158,Modifiability,variab,variables,158,"// VarRegion appears in unknown space when it's a block variable as seen; // from a block using it, when this block is analyzed at top-level.; // Other block variables appear within block data regions,; // which, unlike everything else on this list, are not memory spaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:17,Performance,cache,cache,17,// FIXME: We can cache this if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:56,Modifiability,variab,variable,56,"// VarRegion appears in unknown space when it's a block variable as seen; // from a block using it, when this block is analyzed at top-level.; // Other block variables appear within block data regions,; // which, unlike everything else on this list, are not memory spaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:158,Modifiability,variab,variables,158,"// VarRegion appears in unknown space when it's a block variable as seen; // from a block using it, when this block is analyzed at top-level.; // Other block variables appear within block data regions,; // which, unlike everything else on this list, are not memory spaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:17,Performance,cache,cache,17,// FIXME: We can cache this if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:600,Deployability,update,updated,600,"/// ParamVarRegion - Represents a region for paremters. Only parameters of the; /// function in the current stack frame are represented as `ParamVarRegion`s.; /// Parameters of top-level analyzed functions as well as captured paremeters; /// by lambdas and blocks are repesented as `VarRegion`s.; // FIXME: `ParamVarRegion` only supports parameters of functions, C++; // constructors, blocks and Objective-C methods with existing `Decl`. Upon; // implementing stack frame creations for functions without decl (functions; // passed by unknown function pointer) methods of `ParamVarRegion` must be; // updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:17,Performance,cache,cache,17,// FIXME: We can cache this if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:43,Modifiability,extend,extended,43,// C++ temporary object that have lifetime extended to lifetime of the; // variable. Usually they represent temporary bounds to reference variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:75,Modifiability,variab,variable,75,// C++ temporary object that have lifetime extended to lifetime of the; // variable. Usually they represent temporary bounds to reference variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:138,Modifiability,variab,variables,138,// C++ temporary object that have lifetime extended to lifetime of the; // variable. Usually they represent temporary bounds to reference variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:204,Usability,intuit,intuitive,204,// CXXDerivedObjectRegion represents a derived-class object that surrounds; // a C++ object. It is identified by the derived class declaration and the; // region of its parent object. It is a bit counter-intuitive (but not otherwise; // unseen) that this region represents a larger segment of memory that its; // super-region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:103,Usability,undo,undoing,103,"// In case of a concrete region, it should always be possible to model; // the base-to-derived cast by undoing a previous derived-to-base cast,; // otherwise the cast is most likely ill-formed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:78,Modifiability,variab,variables,78,/// getGlobalsRegion - Retrieve the memory region associated with; /// global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:115,Modifiability,variab,variable,115,/// getObjCIvarRegion - Retrieve or create the memory region associated with; /// a specified Objective-c instance variable. 'superRegion' corresponds; /// to the containing region (which typically represents the Objective-C; /// object).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:85,Modifiability,extend,extended,85,/// Create a CXXLifetimeExtendedObjectRegion for temporaries which are; /// lifetime-extended by local references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:85,Modifiability,extend,extended,85,"/// Create a CXXLifetimeExtendedObjectRegion for temporaries which are; /// lifetime-extended by *static* references.; /// This differs from \ref getCXXLifetimeExtendedObjectRegion(Expr const *,; /// ValueDecl const *, LocationContext const *) in the super-region used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:20,Modifiability,extend,extend,20,// Do not forget to extend StorageTypeForKinds if number of traits exceed; // the number of bits StorageTypeForKinds can store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:64,Security,access,access,64,// Make internal constraint solver entities friends so they can access the; // overconstrained-related functions. We want to keep this API inaccessible; // for Checkers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:677,Integrability,interface,interface,677,"//==---------------------------------------------------------------------==//; // Constraints on values.; //==---------------------------------------------------------------------==//; //; // Each ProgramState records constraints on symbolic values. These constraints; // are managed using the ConstraintManager associated with a ProgramStateManager.; // As constraints gradually accrue on symbolic values, added constraints; // may conflict and indicate that a state is infeasible (as no real values; // could satisfy all the constraints). This is the principal mechanism; // for modeling path-sensitivity in ExprEngine/ProgramState.; //; // Various ""assume"" methods form the interface for adding constraints to; // symbolic values. A call to 'assume' indicates an assumption being placed; // on one or symbolic values. 'assume' methods take the following inputs:; //; // (1) A ProgramState object representing the current state.; //; // (2) The assumed constraint (which is specific to a given ""assume"" method).; //; // (3) A binary value ""Assumption"" that indicates whether the constraint is; // assumed to be true or false.; //; // The output of ""assume*"" is a new ProgramState object with the added constraints.; // If no new state is feasible, NULL is returned.; //; /// Assumes that the value of \p cond is zero (if \p assumption is ""false""); /// or non-zero (if \p assumption is ""true"").; ///; /// This returns a new state with the added constraint on \p cond.; /// If no new state is feasible, NULL is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:131,Energy Efficiency,efficient,efficient,131,"/// Assumes both ""true"" and ""false"" for \p cond, and returns both; /// corresponding states (respectively).; ///; /// This is more efficient than calling assume() twice. Note that one (but not; /// both) of the returned states may be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:142,Energy Efficiency,efficient,efficient,142,"/// Assumes given range both ""true"" and ""false"" for \p Val, and returns both; /// corresponding states (respectively).; ///; /// This is more efficient than calling assume() twice. Note that one (but not; /// both) of the returned states may be NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:116,Performance,load,loaded,116,"/// Initializes the region of memory represented by \p loc with an initial; /// value. Once initialized, all values loaded from any sub-regions of that; /// region will be equal to \p V, unless overwritten later by the program.; /// This method should not be used on regions that are already initialized.; /// If you need to indicate that memory contents have suddenly become unknown; /// within a certain region of memory, consider invalidateRegions().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:4,Performance,Perform,Performs,4,/// Performs C++ zero-initialization procedure on the region of memory; /// represented by \p loc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:63,Usability,clear,cleared,63,"/// Returns the state with bindings for the given regions; /// cleared from the store.; ///; /// Optionally invalidates global regions as well.; ///; /// \param Regions the set of regions to be invalidated.; /// \param E the expression that caused the invalidation.; /// \param BlockCount The number of times the current basic block has been; // visited.; /// \param CausesPointerEscape the flag is set to true when; /// the invalidation entails escape of a symbol (representing a; /// pointer). For example, due to it being passed as an argument in a; /// call.; /// \param IS the set of invalidated symbols.; /// \param Call if non-null, the invalidated regions represent parameters to; /// the call and should be considered directly invalidated.; /// \param ITraits information about special handling for a particular; /// region/symbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:34,Availability,avail,available,34,/// Return the value of 'self' if available in the given context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:25,Modifiability,variab,variable,25,/// Get the lvalue for a variable reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:56,Usability,simpl,simplfication,56,"/// Returns the ""raw"" SVal bound to LV before any value simplfication.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:260,Safety,avoid,avoid,260,/// Visits the symbols reachable from the given SVal using the provided; /// SymbolVisitor.; ///; /// This is a convenience API. Consider using ScanReachableSymbols class; /// directly when making multiple scans on the same state with the same; /// visitor to avoid repeated initialization cost.; /// \sa ScanReachableSymbols,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:82,Security,Access,Accessing,82,//==---------------------------------------------------------------------==//; // Accessing the Generic Data Map (GDM).; //==---------------------------------------------------------------------==//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:26,Energy Efficiency,allocate,allocate,26,/// A BumpPtrAllocator to allocate states.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:646,Modifiability,variab,variable,646,"//==---------------------------------------------------------------------==//; // Generic Data Map methods.; //==---------------------------------------------------------------------==//; //; // ProgramStateManager and ProgramState support a ""generic data map"" that allows; // different clients of ProgramState objects to embed arbitrary data within a; // ProgramState object. The generic data map is essentially an immutable map; // from a ""tag"" (that acts as the ""key"" for a client) and opaque values.; // Tags/keys and values are simply void* values. The typical way that clients; // generate unique tags are by taking the address of a static variable.; // Clients are responsible for ensuring that data values referred to by a; // the data pointer are immutable (and thus are essentially purely functional; // data).; //; // The templated methods below use the ProgramStateTrait<T> class; // to resolve keys into the GDM and to return data values to clients.; //; // Trait based GDM dispatch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:533,Usability,simpl,simply,533,"//==---------------------------------------------------------------------==//; // Generic Data Map methods.; //==---------------------------------------------------------------------==//; //; // ProgramStateManager and ProgramState support a ""generic data map"" that allows; // different clients of ProgramState objects to embed arbitrary data within a; // ProgramState object. The generic data map is essentially an immutable map; // from a ""tag"" (that acts as the ""key"" for a client) and opaque values.; // Tags/keys and values are simply void* values. The typical way that clients; // generate unique tags are by taking the address of a static variable.; // Clients are responsible for ensuring that data values referred to by a; // the data pointer are immutable (and thus are essentially purely functional; // data).; //; // The templated methods below use the ProgramStateTrait<T> class; // to resolve keys into the GDM and to return data values to clients.; //; // Trait based GDM dispatch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h:457,Security,access,accessible,457,"/// Declares an immutable map of type \p NameTy, suitable for placement into; /// the ProgramState. This is implementing using llvm::ImmutableMap.; ///; /// \code; /// State = State->set<Name>(K, V);; /// const Value *V = State->get<Name>(K); // Returns NULL if not in the map.; /// State = State->remove<Name>(K);; /// NameTy Map = State->get<Name>();; /// \endcode; ///; /// The macro should not be used inside namespaces, or for traits that must; /// be accessible from more than one translation unit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h:422,Security,access,accessible,422,"/// Declares an immutable set of type \p NameTy, suitable for placement into; /// the ProgramState. This is implementing using llvm::ImmutableSet.; ///; /// \code; /// State = State->add<Name>(E);; /// State = State->remove<Name>(E);; /// bool Present = State->contains<Name>(E);; /// NameTy Set = State->get<Name>();; /// \endcode; ///; /// The macro should not be used inside namespaces, or for traits that must; /// be accessible from more than one translation unit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h:419,Security,access,accessible,419,"/// Declares an immutable list type \p NameTy, suitable for placement into; /// the ProgramState. This is implementing using llvm::ImmutableList.; ///; /// \code; /// State = State->add<Name>(E); // Adds to the /end/ of the list.; /// bool Present = State->contains<Name>(E);; /// NameTy List = State->get<Name>();; /// \endcode; ///; /// The macro should not be used inside namespaces, or for traits that must; /// be accessible from more than one translation unit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:419,Usability,Simpl,SimpleConstraintManager,419,"//== RangedConstraintManager.h ----------------------------------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Ranged constraint manager, built on SimpleConstraintManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:200,Performance,perform,performed,200,"/// @class RangeSet is a persistent set of non-overlapping ranges.; ///; /// New RangeSet objects can be ONLY produced by RangeSet::Factory object, which; /// also supports the most common operations performed on range sets.; ///; /// Empty set corresponds to an overly constrained symbol meaning that there; /// are no possible values for that symbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:289,Energy Efficiency,efficient,efficient,289,"// We use llvm::SmallVector as the underlying container for the following; // reasons:; //; // * Range sets are usually very simple, 1 or 2 ranges.; // That's why llvm::ImmutableSet is not perfect.; //; // * Ranges in sets are NOT overlapping, so it is natural to keep them; // sorted for efficient operations and queries. For this reason,; // llvm::SmallSet doesn't fit the requirements, it is not sorted when it; // is a vector.; //; // * Range set operations usually a bit harder than add/remove a range.; // Complex operations might do many of those for just one range set.; // Formerly it used to be llvm::ImmutableSet, which is inefficient for our; // purposes as we want to make these operations BOTH immutable AND; // efficient.; //; // * Iteration over ranges is widespread and a more cache-friendly; // structure is preferred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:726,Energy Efficiency,efficient,efficient,726,"// We use llvm::SmallVector as the underlying container for the following; // reasons:; //; // * Range sets are usually very simple, 1 or 2 ranges.; // That's why llvm::ImmutableSet is not perfect.; //; // * Ranges in sets are NOT overlapping, so it is natural to keep them; // sorted for efficient operations and queries. For this reason,; // llvm::SmallSet doesn't fit the requirements, it is not sorted when it; // is a vector.; //; // * Range set operations usually a bit harder than add/remove a range.; // Complex operations might do many of those for just one range set.; // Formerly it used to be llvm::ImmutableSet, which is inefficient for our; // purposes as we want to make these operations BOTH immutable AND; // efficient.; //; // * Iteration over ranges is widespread and a more cache-friendly; // structure is preferred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:794,Performance,cache,cache-friendly,794,"// We use llvm::SmallVector as the underlying container for the following; // reasons:; //; // * Range sets are usually very simple, 1 or 2 ranges.; // That's why llvm::ImmutableSet is not perfect.; //; // * Ranges in sets are NOT overlapping, so it is natural to keep them; // sorted for efficient operations and queries. For this reason,; // llvm::SmallSet doesn't fit the requirements, it is not sorted when it; // is a vector.; //; // * Range set operations usually a bit harder than add/remove a range.; // Complex operations might do many of those for just one range set.; // Formerly it used to be llvm::ImmutableSet, which is inefficient for our; // purposes as we want to make these operations BOTH immutable AND; // efficient.; //; // * Iteration over ranges is widespread and a more cache-friendly; // structure is preferred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:125,Usability,simpl,simple,125,"// We use llvm::SmallVector as the underlying container for the following; // reasons:; //; // * Range sets are usually very simple, 1 or 2 ranges.; // That's why llvm::ImmutableSet is not perfect.; //; // * Ranges in sets are NOT overlapping, so it is natural to keep them; // sorted for efficient operations and queries. For this reason,; // llvm::SmallSet doesn't fit the requirements, it is not sorted when it; // is a vector.; //; // * Range set operations usually a bit harder than add/remove a range.; // Complex operations might do many of those for just one range set.; // Formerly it used to be llvm::ImmutableSet, which is inefficient for our; // purposes as we want to make these operations BOTH immutable AND; // efficient.; //; // * Iteration over ranges is widespread and a more cache-friendly; // structure is preferred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:110,Availability,alive,alive,110,"// This is a non-owning pointer to an actual container.; // The memory is fully managed by the factory and is alive as long as the; // factory itself is alive.; // It is a pointer as opposed to a reference, so we can easily reassign; // RangeSet objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:153,Availability,alive,alive,153,"// This is a non-owning pointer to an actual container.; // The memory is fully managed by the factory and is alive as long as the; // factory itself is alive.; // It is a pointer as opposed to a reference, so we can easily reassign; // RangeSet objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:286,Integrability,wrap,wrap,286,"/// Intersect the given set with the closed range [Lower, Upper].; ///; /// Unlike the Range type, this range uses modular arithmetic, corresponding; /// to the common treatment of C integer overflow. Thus, if the Lower bound; /// is greater than the Upper bound, the range is taken to wrap around. This; /// is equivalent to taking the intersection with the two ranges [Min,; /// Upper] and [Lower, Max], or, alternatively, /removing/ all integers; /// between Upper and Lower.; ///; /// Complexity: O(N); /// where N = size(What)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:141,Integrability,depend,depending,141,/// Intersect the given range with the given point.; ///; /// The result can be either an empty set or a set containing the given; /// point depending on whether the point is in the range set.; ///; /// Complexity: O(logN); /// where N = size(What),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:217,Testability,log,logN,217,/// Intersect the given range with the given point.; ///; /// The result can be either an empty set or a set containing the given; /// point depending on whether the point is in the range set.; ///; /// Complexity: O(logN); /// where N = size(What),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:4,Performance,Perform,Performs,4,"/// Performs promotions, truncations and conversions of the given set.; ///; /// This function is optimized for each of the six cast cases:; /// - noop; /// - conversion; /// - truncation; /// - truncation-conversion; /// - promotion; /// - promotion-conversion; ///; /// NOTE: This function is NOT self-inverse for truncations, because of; /// the higher bits loss:; /// - castTo(castTo(OrigRangeOfInt, char), int) != OrigRangeOfInt.; /// - castTo(castTo(OrigRangeOfChar, int), char) == OrigRangeOfChar.; /// But it is self-inverse for all the rest casts.; ///; /// Complexity:; /// - Noop O(1);; /// - Truncation O(N^2);; /// - Another case O(N);; /// where N = size(What)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:98,Performance,optimiz,optimized,98,"/// Performs promotions, truncations and conversions of the given set.; ///; /// This function is optimized for each of the six cast cases:; /// - noop; /// - conversion; /// - truncation; /// - truncation-conversion; /// - promotion; /// - promotion-conversion; ///; /// NOTE: This function is NOT self-inverse for truncations, because of; /// the higher bits loss:; /// - castTo(castTo(OrigRangeOfInt, char), int) != OrigRangeOfInt.; /// - castTo(castTo(OrigRangeOfChar, int), char) == OrigRangeOfChar.; /// But it is self-inverse for all the rest casts.; ///; /// Complexity:; /// - Noop O(1);; /// - Truncation O(N^2);; /// - Another case O(N);; /// where N = size(What)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:96,Performance,Perform,Performs,96,/// This is a helper function for `castTo` method. Implies not to be used; /// separately.; /// Performs a truncation case of a cast operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:96,Performance,Perform,Performs,96,/// This is a helper function for `castTo` method. Implies not to be used; /// separately.; /// Performs a conversion case and a promotion-conversion case for signeds; /// of a cast operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:96,Performance,Perform,Performs,96,/// This is a helper function for `castTo` method. Implies not to be used; /// separately.; /// Performs a promotion for unsigneds only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:26,Security,hash,hash,26,/// Profile - Generates a hash profile of this RangeSet for use; /// by FoldingSet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:4,Testability,Test,Test,4,/// Test whether the given point is contained by any of the ranges.; ///; /// Complexity: O(logN); /// where N = size(this),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:92,Testability,log,logN,92,/// Test whether the given point is contained by any of the ranges.; ///; /// Complexity: O(logN); /// where N = size(this),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:4,Testability,Test,Test,4,"/// Test if the range is the [0,0] range.; ///; /// Complexity: O(1)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:4,Testability,Test,Test,4,/// Test if the range doesn't contain zero.; ///; /// Complexity: O(logN); /// where N = size(this),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:68,Testability,log,logN,68,/// Test if the range doesn't contain zero.; ///; /// Complexity: O(logN); /// where N = size(this),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:100,Integrability,interface,interface,100,//===------------------------------------------------------------------===//; // Implementation for interface from SimpleConstraintManager.; //===------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:115,Usability,Simpl,SimpleConstraintManager,115,//===------------------------------------------------------------------===//; // Implementation for interface from SimpleConstraintManager.; //===------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:81,Integrability,Interface,Interface,81,"//===------------------------------------------------------------------===//; // Interface that subclasses must implement.; //===------------------------------------------------------------------===//; // Each of these is of the form ""$Sym+Adj <> V"", where ""<>"" is the comparison; // operation for the method being invoked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:157,Deployability,update,updated,157,/// Try to simplify a given symbolic expression based on the constraints in; /// State. This is needed because the Environment bindings are not getting; /// updated when a new constraint is added to the State. If the symbol is; /// simplified to a non-symbol (e.g. to a constant) then the original symbol; /// is returned. We use this function in the family of assumeSymNE/EQ/LT/../GE; /// functions where we can work only with symbols. Use the other function; /// (simplifyToSVal) if you are interested in a simplification that may yield; /// a concrete constant value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:11,Usability,simpl,simplify,11,/// Try to simplify a given symbolic expression based on the constraints in; /// State. This is needed because the Environment bindings are not getting; /// updated when a new constraint is added to the State. If the symbol is; /// simplified to a non-symbol (e.g. to a constant) then the original symbol; /// is returned. We use this function in the family of assumeSymNE/EQ/LT/../GE; /// functions where we can work only with symbols. Use the other function; /// (simplifyToSVal) if you are interested in a simplification that may yield; /// a concrete constant value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:232,Usability,simpl,simplified,232,/// Try to simplify a given symbolic expression based on the constraints in; /// State. This is needed because the Environment bindings are not getting; /// updated when a new constraint is added to the State. If the symbol is; /// simplified to a non-symbol (e.g. to a constant) then the original symbol; /// is returned. We use this function in the family of assumeSymNE/EQ/LT/../GE; /// functions where we can work only with symbols. Use the other function; /// (simplifyToSVal) if you are interested in a simplification that may yield; /// a concrete constant value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:466,Usability,simpl,simplifyToSVal,466,/// Try to simplify a given symbolic expression based on the constraints in; /// State. This is needed because the Environment bindings are not getting; /// updated when a new constraint is added to the State. If the symbol is; /// simplified to a non-symbol (e.g. to a constant) then the original symbol; /// is returned. We use this function in the family of assumeSymNE/EQ/LT/../GE; /// functions where we can work only with symbols. Use the other function; /// (simplifyToSVal) if you are interested in a simplification that may yield; /// a concrete constant value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:509,Usability,simpl,simplification,509,/// Try to simplify a given symbolic expression based on the constraints in; /// State. This is needed because the Environment bindings are not getting; /// updated when a new constraint is added to the State. If the symbol is; /// simplified to a non-symbol (e.g. to a constant) then the original symbol; /// is returned. We use this function in the family of assumeSymNE/EQ/LT/../GE; /// functions where we can work only with symbols. Use the other function; /// (simplifyToSVal) if you are interested in a simplification that may yield; /// a concrete constant value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:11,Usability,simpl,simplify,11,"/// Try to simplify a given symbolic expression's associated `SVal` based on the; /// constraints in State. This is very similar to `simplify`, but this function; /// always returns the simplified SVal. The simplified SVal might be a single; /// constant (i.e. `ConcreteInt`).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:133,Usability,simpl,simplify,133,"/// Try to simplify a given symbolic expression's associated `SVal` based on the; /// constraints in State. This is very similar to `simplify`, but this function; /// always returns the simplified SVal. The simplified SVal might be a single; /// constant (i.e. `ConcreteInt`).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:186,Usability,simpl,simplified,186,"/// Try to simplify a given symbolic expression's associated `SVal` based on the; /// constraints in State. This is very similar to `simplify`, but this function; /// always returns the simplified SVal. The simplified SVal might be a single; /// constant (i.e. `ConcreteInt`).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:207,Usability,simpl,simplified,207,"/// Try to simplify a given symbolic expression's associated `SVal` based on the; /// constraints in State. This is very similar to `simplify`, but this function; /// always returns the simplified SVal. The simplified SVal might be a single; /// constant (i.e. `ConcreteInt`).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h:5,Usability,Simpl,SimpleConstraintManager,5,"//== SimpleConstraintManager.h ----------------------------------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simplified constraint manager backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h:383,Usability,Simpl,Simplified,383,"//== SimpleConstraintManager.h ----------------------------------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simplified constraint manager backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h:100,Integrability,interface,interface,100,//===------------------------------------------------------------------===//; // Implementation for interface from ConstraintManager.; //===------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h:81,Integrability,Interface,Interface,81,"//===------------------------------------------------------------------===//; // Interface that subclasses must implement.; //===------------------------------------------------------------------===//; /// Given a symbolic expression that can be reasoned about, assume that it is; /// true/false and generate the new program state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:100,Integrability,interface,interface,100,//===------------------------------------------------------------------===//; // Implementation for interface from SimpleConstraintManager.; //===------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:115,Usability,Simpl,SimpleConstraintManager,115,//===------------------------------------------------------------------===//; // Implementation for interface from SimpleConstraintManager.; //===------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:100,Integrability,interface,interface,100,//===------------------------------------------------------------------===//; // Implementation for interface from ConstraintManager.; //===------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:55,Performance,cache,cache,55,"// TODO: this should call checkModel so we can use the cache, however,; // this method tries to get the interpretation (the actual value) from; // the solver, which is currently not cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:182,Performance,cache,cached,182,"// TODO: this should call checkModel so we can use the cache, however,; // this method tries to get the interpretation (the actual value) from; // the solver, which is currently not cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:24,Safety,avoid,avoid,24,// Early termination to avoid expensive call,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:49,Deployability,update,update,49,"// Check whether a new model is satisfiable, and update the program state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:20,Safety,avoid,avoid,20,"// Check the model, avoid simplifying AST to save time",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:26,Usability,simpl,simplifying,26,"// Check the model, avoid simplifying AST to save time",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:41,Testability,log,logical,41,"/// Given a program state, construct the logical conjunction and add it to; /// the solver",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:17,Testability,log,logical,17,// Construct the logical AND of all the constraints,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:3,Performance,Cache,Cache,3,"// Cache the result of an SMT query (true, false, unknown). The key is the; // hash of the constraints in a state",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:79,Security,hash,hash,79,"// Cache the result of an SMT query (true, false, unknown). The key is the; // hash of the constraints in a state",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Testability,Log,Logical,3,// Logical operators,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Testability,Log,Logical,3,// Logical operators,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Integrability,Wrap,Wrapper,3,// Wrapper to generate SMTSolverRef from SymbolCast data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Integrability,Wrap,Wrapper,3,// Wrapper to generate SMTSolverRef from unpacked binary symbolic; // expression. Sets the RetTy parameter. See getSMTSolverRef().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Deployability,Update,Update,3,// Update the return type parameter if the output type has changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:177,Availability,error,errors,177,"// A boolean result can be represented as an integer type in C/C++, but at; // this point we only care about the SMT sorts. Set it as a boolean type; // to avoid subsequent SMT errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:156,Safety,avoid,avoid,156,"// A boolean result can be represented as an integer type in C/C++, but at; // this point we only care about the SMT sorts. Set it as a boolean type; // to avoid subsequent SMT errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Integrability,Wrap,Wrapper,3,// Wrapper to generate SMTSolverRef from BinarySymExpr.; // Sets the hasComparison and RetTy parameters. See getSMTSolverRef().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Integrability,Wrap,Wrapper,3,"// Wrapper to generate SMTSolverRef from a range. If From == To, an; // equality will be created instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:39,Testability,log,logical,39,"// Construct two (in)equalities, and a logical and/or",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Availability,Recover,Recover,3,// Recover the QualType of an APSInt.; // TODO: Refactor to put elsewhere,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:48,Modifiability,Refactor,Refactor,48,// Recover the QualType of an APSInt.; // TODO: Refactor to put elsewhere,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Safety,Recover,Recover,3,// Recover the QualType of an APSInt.; // TODO: Refactor to put elsewhere,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:103,Availability,avail,available,103,"// FIXME: This should be a cast from a 1-bit integer type to a boolean type,; // but the former is not available in Clang. Instead, extend the APSInt; // directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:132,Modifiability,extend,extend,132,"// FIXME: This should be a cast from a 1-bit integer type to a boolean type,; // but the former is not available in Clang. Instead, extend the APSInt; // directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:115,Modifiability,Refactor,Refactor,115,// Perform implicit type conversion on binary symbolic expressions.; // May modify all input parameters.; // TODO: Refactor to use built-in conversion functions,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Performance,Perform,Perform,3,// Perform implicit type conversion on binary symbolic expressions.; // May modify all input parameters.; // TODO: Refactor to use built-in conversion functions,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Performance,Perform,Perform,3,// Perform type conversion,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:9,Modifiability,Refactor,Refactor,9,"// TODO: Refactor to Sema::FindCompositePointerType(), and; // Sema::CheckCompareOperands().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:92,Modifiability,Refactor,Refactor,92,// Perform implicit integer type conversion.; // May modify all input parameters.; // TODO: Refactor to use Sema::handleIntegerConversion(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Performance,Perform,Perform,3,// Perform implicit integer type conversion.; // May modify all input parameters.; // TODO: Refactor to use Sema::handleIntegerConversion(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:10,Performance,perform,perform,10,"// Always perform integer promotion before checking type equality.; // Otherwise, e.g. (bool) a + (bool) b could trigger a backend assertion",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:131,Testability,assert,assertion,131,"// Always perform integer promotion before checking type equality.; // Otherwise, e.g. (bool) a + (bool) b could trigger a backend assertion",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Performance,Perform,Perform,3,// Perform integer type conversion; // Note: Safe to skip updating bitwidth because this must terminate,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:45,Safety,Safe,Safe,45,// Perform integer type conversion; // Note: Safe to skip updating bitwidth because this must terminate,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:99,Modifiability,Refactor,Refactor,99,// Perform implicit floating-point type conversion.; // May modify all input parameters.; // TODO: Refactor to use Sema::handleFloatConversion(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Performance,Perform,Perform,3,// Perform implicit floating-point type conversion.; // May modify all input parameters.; // TODO: Refactor to use Sema::handleFloatConversion(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Performance,Perform,Perform,3,// Perform float-point type promotion,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:102,Safety,Safe,Safe,102,"// If we have two real floating types, convert the smaller operand to the; // bigger result; // Note: Safe to skip updating bitwidth because this must terminate",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:17,Integrability,Interface,Interface,17,"//===- Store.h - Interface for maps from Locations to Values ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defined the types Store and StoreManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:21,Availability,down,down,21,/// Attempts to do a down cast. Used to model BaseToDerived and C++; /// dynamic_cast.; /// The callback may result in the following 3 scenarios:; /// - Successful cast (ex: derived is subclass of base).; /// - Failed cast (ex: derived is definitely not a subclass of base).; /// The distinction of this case from the next one is necessary to model; /// dynamic_cast.; /// - We don't know (base is a symbolic region and we don't have; /// enough info to determine if the cast will succeed at run time).; /// The function returns an optional with SVal representing the derived class; /// in case of a successful cast and `std::nullopt` otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:111,Integrability,Depend,Depending,111,"/// invalidateRegions - Clears out the specified regions from the store,; /// marking their values as unknown. Depending on the store, this may also; /// invalidate additional regions that may have changed based on accessing; /// the given regions. Optionally, invalidates non-static globals as well.; /// \param[in] store The initial store; /// \param[in] Values The values to invalidate.; /// \param[in] E The current statement being evaluated. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Count The current block count. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Call The call expression which will be used to determine which; /// globals should get invalidated.; /// \param[in,out] IS A set to fill with any symbols that are no longer; /// accessible. Pass \c NULL if this information will not be used.; /// \param[in] ITraits Information about invalidation for a particular; /// region/symbol.; /// \param[in,out] InvalidatedTopLevel A vector to fill with regions; //// explicitly being invalidated. Pass \c NULL if this; /// information will not be used.; /// \param[in,out] Invalidated A vector to fill with any regions being; /// invalidated. This should include any regions explicitly invalidated; /// even if they do not currently have bindings. Pass \c NULL if this; /// information will not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:215,Security,access,accessing,215,"/// invalidateRegions - Clears out the specified regions from the store,; /// marking their values as unknown. Depending on the store, this may also; /// invalidate additional regions that may have changed based on accessing; /// the given regions. Optionally, invalidates non-static globals as well.; /// \param[in] store The initial store; /// \param[in] Values The values to invalidate.; /// \param[in] E The current statement being evaluated. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Count The current block count. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Call The call expression which will be used to determine which; /// globals should get invalidated.; /// \param[in,out] IS A set to fill with any symbols that are no longer; /// accessible. Pass \c NULL if this information will not be used.; /// \param[in] ITraits Information about invalidation for a particular; /// region/symbol.; /// \param[in,out] InvalidatedTopLevel A vector to fill with regions; //// explicitly being invalidated. Pass \c NULL if this; /// information will not be used.; /// \param[in,out] Invalidated A vector to fill with any regions being; /// invalidated. This should include any regions explicitly invalidated; /// even if they do not currently have bindings. Pass \c NULL if this; /// information will not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:832,Security,access,accessible,832,"/// invalidateRegions - Clears out the specified regions from the store,; /// marking their values as unknown. Depending on the store, this may also; /// invalidate additional regions that may have changed based on accessing; /// the given regions. Optionally, invalidates non-static globals as well.; /// \param[in] store The initial store; /// \param[in] Values The values to invalidate.; /// \param[in] E The current statement being evaluated. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Count The current block count. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Call The call expression which will be used to determine which; /// globals should get invalidated.; /// \param[in,out] IS A set to fill with any symbols that are no longer; /// accessible. Pass \c NULL if this information will not be used.; /// \param[in] ITraits Information about invalidation for a particular; /// region/symbol.; /// \param[in,out] InvalidatedTopLevel A vector to fill with regions; //// explicitly being invalidated. Pass \c NULL if this; /// information will not be used.; /// \param[in,out] Invalidated A vector to fill with any regions being; /// invalidated. This should include any regions explicitly invalidated; /// even if they do not currently have bindings. Pass \c NULL if this; /// information will not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:24,Usability,Clear,Clears,24,"/// invalidateRegions - Clears out the specified regions from the store,; /// marking their values as unknown. Depending on the store, this may also; /// invalidate additional regions that may have changed based on accessing; /// the given regions. Optionally, invalidates non-static globals as well.; /// \param[in] store The initial store; /// \param[in] Values The values to invalidate.; /// \param[in] E The current statement being evaluated. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Count The current block count. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Call The call expression which will be used to determine which; /// globals should get invalidated.; /// \param[in,out] IS A set to fill with any symbols that are no longer; /// accessible. Pass \c NULL if this information will not be used.; /// \param[in] ITraits Information about invalidation for a particular; /// region/symbol.; /// \param[in,out] InvalidatedTopLevel A vector to fill with regions; //// explicitly being invalidated. Pass \c NULL if this; /// information will not be used.; /// \param[in,out] Invalidated A vector to fill with any regions being; /// invalidated. This should include any regions explicitly invalidated; /// even if they do not currently have bindings. Pass \c NULL if this; /// information will not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:108,Safety,abort,aborted,108,/// Finds the transitive closure of symbols within the given region.; ///; /// Returns false if the visitor aborted the scan.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SummaryManager.h:202,Integrability,Protocol,Protocol,202,"/* Key kinds:. - C functions; - C++ functions (name + parameter types); - ObjC methods:; - Class, selector (class method); - Class, selector (instance method); - Category, selector (instance method); - Protocol, selector (instance method); - C++ methods; - Class, function name + parameter types + const; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SummaryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SummaryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h:439,Integrability,interface,interface,439,"// SValBuilder.h - Construction of SVals from evaluating expressions -*- C++ -*-; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines SValBuilder, a class that defines the interface for; // ""symbolical evaluators"" which construct an SVal from an expression.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h:4,Usability,Simpl,Simplify,4,"/// Simplify symbolic expressions within a given SVal. Return an SVal; /// that represents the same value, but is hopefully easier to work with; /// than the original SVal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h:39,Energy Efficiency,allocate,allocated,39,"/// Conjure a symbol representing heap allocated memory region.; ///; /// Note, the expression should represent a location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h:39,Energy Efficiency,allocate,allocated,39,"/// Conjure a symbol representing heap allocated memory region.; ///; /// Note, now, the expression *doesn't* need to represent a location.; /// But the type need to!",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h:171,Integrability,wrap,wrapping,171,/// Make an SVal that represents the given symbol. This follows the convention; /// of representing Loc-type symbols (symbolic pointers and references); /// as Loc values wrapping the symbol rather than as plain symbol values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:40,Testability,assert,asserting,40,"/// Convert to the specified SVal type, asserting that this SVal is of; /// the desired type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:59,Integrability,wrap,wraps,59,"/// getAsFunctionDecl - If this SVal is a MemRegionVal and wraps a; /// CodeTextRegion wrapping a FunctionDecl, return that FunctionDecl.; /// Otherwise return 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:87,Integrability,wrap,wrapping,87,"/// getAsFunctionDecl - If this SVal is a MemRegionVal and wraps a; /// CodeTextRegion wrapping a FunctionDecl, return that FunctionDecl.; /// Otherwise return 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:35,Integrability,wrap,wraps,35,"/// If this SVal is a location and wraps a symbol, return that; /// SymbolRef. Otherwise return 0.; ///; /// Casts are ignored during lookup.; /// \param IncludeBaseRegions The boolean that controls whether the search; /// should continue to the base regions if the region is not symbolic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:17,Integrability,wrap,wraps,17,"/// If this SVal wraps a symbol return that SymbolRef.; /// Otherwise, return 0.; ///; /// Casts are ignored during lookup.; /// \param IncludeBaseRegions The boolean that controls whether the search; /// should continue to the base regions if the region is not symbolic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:315,Security,access,access,315,"/// Try to get a reasonable type for the given value.; ///; /// \returns The best approximation of the value type or Null.; /// In theory, all symbolic values should be typed, but this function; /// is still a WIP and might have a few blind spots.; ///; /// \note This function should not be used when the user has access to the; /// bound expression AST node as well, since AST always has exact types.; ///; /// \note Loc values are interpreted as pointer rvalues for the purposes of; /// this method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:50,Availability,error,error,50,// We want calling these methods to be a compiler error since they are; // tautologically false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:50,Availability,error,error,50,// We want calling these methods to be a compiler error since they are; // tautologically true/false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:102,Performance,load,loading,102,"/// Value representing pointer-to-member.; ///; /// This value is qualified as NonLoc because neither loading nor storing; /// operations are applied to it. Instead, the analyzer uses the L-value coming; /// from pointer-to-member applied to an object.; /// This SVal is represented by a NamedDecl which can be a member function; /// pointer or a member data pointer and an optional list of CXXBaseSpecifiers.; /// This list is required to accumulate the pointer-to-member cast history to; /// figure out the correct subobject field. In particular, implicit casts grow; /// this list and explicit casts like static_cast shrink this list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h:459,Integrability,interface,interfaces,459,"//===--- SValVisitor.h - Visitor for SVal subclasses ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the SValVisitor, SymExprVisitor, and MemRegionVisitor; // interfaces, and also FullSValVisitor, which visits all three hierarchies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h:42,Usability,simpl,simple,42,/// SValVisitor - this class implements a simple visitor for SVal; /// subclasses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h:45,Usability,simpl,simple,45,/// SymExprVisitor - this class implements a simple visitor for SymExpr; /// subclasses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h:47,Usability,simpl,simple,47,/// MemRegionVisitor - this class implements a simple visitor for MemRegion; /// subclasses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:224,Availability,alive,alive,224,/// SymbolMetadata - Represents path-dependent metadata about a specific region.; /// Metadata symbols remain live as long as they are marked as in use before; /// dead-symbol sweeping AND their associated regions are still alive.; /// Intended for use by checkers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:37,Integrability,depend,dependent,37,/// SymbolMetadata - Represents path-dependent metadata about a specific region.; /// Metadata symbols remain live as long as they are marked as in use before; /// dead-symbol sweeping AND their associated regions are still alive.; /// Intended for use by checkers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:61,Availability,redundant,redundant,61,// FIXME: We probably need to make this out-of-line to avoid redundant; // generation of virtual functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:55,Safety,avoid,avoid,55,// FIXME: We probably need to make this out-of-line to avoid redundant; // generation of virtual functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:61,Safety,redund,redundant,61,// FIXME: We probably need to make this out-of-line to avoid redundant; // generation of virtual functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:80,Availability,alive,alive,80,/// Stores the extra dependencies between symbols: the data should be kept; /// alive as long as the key is live.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:21,Integrability,depend,dependencies,21,/// Stores the extra dependencies between symbols: the data should be kept; /// alive as long as the key is live.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:201,Integrability,depend,dependent,201,"/// Creates a metadata symbol associated with a specific region.; ///; /// VisitCount can be used to differentiate regions corresponding to; /// different loop iterations, thus, making the symbol path-dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:81,Availability,alive,alive,81,/// Add artificial symbol dependency.; ///; /// The dependent symbol should stay alive as long as the primary is alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:113,Availability,alive,alive,113,/// Add artificial symbol dependency.; ///; /// The dependent symbol should stay alive as long as the primary is alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:26,Integrability,depend,dependency,26,/// Add artificial symbol dependency.; ///; /// The dependent symbol should stay alive as long as the primary is alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:52,Integrability,depend,dependent,52,/// Add artificial symbol dependency.; ///; /// The dependent symbol should stay alive as long as the primary is alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:71,Security,access,access,71,"// The lazily copied regions are locations for which a program; // can access the value stored at that location, but not its address.; // These regions are constructed as a set of regions referred to by; // lazyCompoundVal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:109,Availability,alive,alive,109,"/// Marks a symbol as important to a checker.; ///; /// For metadata symbols,; /// this will keep the symbol alive as long as its associated region is also; /// live. For other symbols, this has no effect; checkers are not permitted; /// to influence the life of other symbols. This should be used before any; /// symbol marking has occurred, i.e. in the MarkLiveSymbols callback.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:113,Availability,alive,alive,113,// A readable region is a region that live or lazily copied.; // Any symbols that refer to values in regions are alive if the region; // is readable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:21,Integrability,depend,dependent,21,/// Mark the symbols dependent on the input symbol as live.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h:10,Integrability,Depend,Depending,10,"// FIXME: Depending on whether we choose to deprecate structural symbols,; // this may become much stricter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h:50,Integrability,depend,depends,50,"/// Iterator over symbols that the current symbol depends on.; ///; /// For SymbolData, it's the symbol itself; for expressions, it's the; /// expression symbol and all the operands in it. Note, SymbolDerived is; /// treated as SymbolData - the iterator will NOT visit the parent region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h:232,Integrability,depend,depending,232,"/// Find the region from which this symbol originates.; ///; /// Whenever the symbol was constructed to denote an unknown value of; /// a certain memory region, return this region. This method; /// allows checkers to make decisions depending on the origin of the symbol.; /// Symbol classes for which the origin region is known include; /// SymbolRegionValue which denotes the value of the region before; /// the beginning of the analysis, and SymbolDerived which denotes the value; /// of a certain memory region after its super region (a memory space or; /// a larger record region) is default-bound with a certain symbol.; /// It might return null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/AnalysisConsumer.h:164,Modifiability,plugin,plugins,164,"/// This method allows registering statically linked custom checkers that are; /// not a part of the Clang tree. It employs the same mechanism that is used; /// by plugins.; ///; /// Example:; ///; /// Consumer->AddCheckerRegistrationFn([] (CheckerRegistry& Registry) {; /// Registry.addChecker<MyCustomChecker>(""example.MyCustomChecker"",; /// ""Description"");; /// });",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/AnalysisConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/AnalysisConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:41,Availability,avail,available,41,"//===- CheckerRegistry.h - Maintains all available checkers -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains the logic for parsing the TableGen file Checkers.td, and parsing the; // specific invocation of the analyzer (which checker/package is enabled, values; // of their options, etc). This is in the frontend library because checker; // registry functions are called from here but are defined in the dependent; // library libStaticAnalyzerCheckers, but the actual data structure that holds; // the parsed information is in the Core library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:686,Integrability,depend,dependent,686,"//===- CheckerRegistry.h - Maintains all available checkers -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains the logic for parsing the TableGen file Checkers.td, and parsing the; // specific invocation of the analyzer (which checker/package is enabled, values; // of their options, etc). This is in the frontend library because checker; // registry functions are called from here but are defined in the dependent; // library libStaticAnalyzerCheckers, but the actual data structure that holds; // the parsed information is in the Core library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:396,Testability,log,logic,396,"//===- CheckerRegistry.h - Maintains all available checkers -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains the logic for parsing the TableGen file Checkers.td, and parsing the; // specific invocation of the analyzer (which checker/package is enabled, values; // of their options, etc). This is in the frontend library because checker; // registry functions are called from here but are defined in the dependent; // library libStaticAnalyzerCheckers, but the actual data structure that holds; // the parsed information is in the Core library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:91,Modifiability,plugin,plugin,91,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:424,Modifiability,plugin,plugin,424,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:432,Modifiability,Plugin,Plugins,432,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:588,Modifiability,plugin,plugin,588,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:1414,Modifiability,plugin,plugin,1414,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:1636,Modifiability,plugin,plugin,1636,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:1769,Modifiability,plugin,plugin,1769,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:527,Performance,load,loaded,527,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:1399,Performance,load,load,1399,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:1495,Performance,load,load,1495,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:1621,Performance,load,load,1621,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:122,Deployability,release,releases,122,"// FIXME: The Clang version string is not particularly granular;; // the analyzer infrastructure can change a lot between releases.; // Unfortunately, this string has to be statically embedded in each plugin,; // so we can't just use the functions defined in Version.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:201,Modifiability,plugin,plugin,201,"// FIXME: The Clang version string is not particularly granular;; // the analyzer infrastructure can change a lot between releases.; // Unfortunately, this string has to be statically embedded in each plugin,; // so we can't just use the functions defined in Version.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:21,Availability,avail,available,21,"/// Manages a set of available checkers for running a static analysis.; /// The checkers are organized into packages by full name, where including; /// a package will recursively include all subpackages and checkers within it.; /// For example, the checker ""core.builtin.NoReturnFunctionChecker"" will be; /// included if initializeManager() is called with an option of ""core"",; /// ""core.builtin"", or the full name ""core.builtin.NoReturnFunctionChecker"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:109,Integrability,depend,dependencies,109,"/// Collects all enabled checkers in the field EnabledCheckers. It preserves; /// the order of insertion, as dependencies have to be enabled before the; /// checkers that depend on them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:171,Integrability,depend,depend,171,"/// Collects all enabled checkers in the field EnabledCheckers. It preserves; /// the order of insertion, as dependencies have to be enabled before the; /// checkers that depend on them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:267,Modifiability,plugin,plugins,267,"/// Adds a checker to the registry. Use this templated overload when your; /// checker does not require any custom initialization.; /// This function isn't really needed and probably causes more headaches than; /// the tiny convenience that it provides, but external plugins might use it,; /// and there isn't a strong incentive to remove it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:25,Availability,Error,Error,25,// Avoid MSVC's Compiler Error C2276:; // http://msdn.microsoft.com/en-us/library/850cstw1(v=VS.80).aspx,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:3,Safety,Avoid,Avoid,3,// Avoid MSVC's Compiler Error C2276:; // http://msdn.microsoft.com/en-us/library/850cstw1(v=VS.80).aspx,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:53,Integrability,depend,depend,53,/// Makes the checker with the full name \p fullName depend on the checker; /// called \p dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:90,Integrability,depend,dependency,90,/// Makes the checker with the full name \p fullName depend on the checker; /// called \p dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:58,Integrability,depend,depend,58,/// Makes the checker with the full name \p fullName weak depend on the; /// checker called \p dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:95,Integrability,depend,dependency,95,/// Makes the checker with the full name \p fullName weak depend on the; /// checker called \p dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:406,Availability,error,error,406,"/// Registers an option to a given checker. A checker option will always have; /// the following format:; /// CheckerFullName:OptionName=Value; /// And can be specified from the command line like this:; /// -analyzer-config CheckerFullName:OptionName=Value; ///; /// Options for unknown checkers, or unknown options for a given checker, or; /// invalid value types for that given option are reported as an error in; /// non-compatibility mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:217,Modifiability,config,config,217,"/// Registers an option to a given checker. A checker option will always have; /// the following format:; /// CheckerFullName:OptionName=Value; /// And can be specified from the command line like this:; /// -analyzer-config CheckerFullName:OptionName=Value; ///; /// Options for unknown checkers, or unknown options for a given checker, or; /// invalid value types for that given option are reported as an error in; /// non-compatibility mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:406,Availability,error,error,406,"/// Registers an option to a given package. A package option will always have; /// the following format:; /// PackageFullName:OptionName=Value; /// And can be specified from the command line like this:; /// -analyzer-config PackageFullName:OptionName=Value; ///; /// Options for unknown packages, or unknown options for a given package, or; /// invalid value types for that given option are reported as an error in; /// non-compatibility mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:217,Modifiability,config,config,217,"/// Registers an option to a given package. A package option will always have; /// the following format:; /// PackageFullName:OptionName=Value; /// And can be specified from the command line like this:; /// -analyzer-config PackageFullName:OptionName=Value; ///; /// Options for unknown packages, or unknown options for a given package, or; /// invalid value types for that given option are reported as an error in; /// non-compatibility mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/FrontendActions.h:200,Availability,avail,available,200,"/// Frontend action to parse model files.; ///; /// This frontend action is responsible for parsing model files. Model files can; /// not be parsed on their own, they rely on type information that is available; /// in another translation unit. The parsing of model files is done by a; /// separate compiler instance that reuses the ASTContext and othen information; /// from the main translation unit that is being compiled. After a model file is; /// parsed, the function definitions will be collected into a StringMap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/FrontendActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/FrontendActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:269,Performance,optimiz,optimization,269,"// LMUL1 should be kind of VectorTypeModifier, but that might come with; // Widening2XVector for widening reduction.; // However that might require VectorTypeModifier become bitmask rather than; // simple enum, so we decide keek LMUL1 in TypeModifier for code size; // optimization of clang binary size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:198,Usability,simpl,simple,198,"// LMUL1 should be kind of VectorTypeModifier, but that might come with; // Widening2XVector for widening reduction.; // However that might require VectorTypeModifier become bitmask rather than; // simple enum, so we decide keek LMUL1 in TypeModifier for code size; // optimization of clang binary size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:113,Performance,perform,performance,113,"// The default assumption for an RVV instruction is TAMA, as an undisturbed; // policy generally will affect the performance of an out-of-order core.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:45,Testability,test,test,45,// Just for maintain the old order for quick test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:114,Performance,cache,cache,114,"// This class is used to manage RVVType, RVVType should only created by this; // class, also provided thread-safe cache capability.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:109,Safety,safe,safe,109,"// This class is used to manage RVVType, RVVType should only created by this; // class, also provided thread-safe cache capability.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:57,Modifiability,config,config,57,/// Compute output and input types by applying different config (basic type; /// and LMUL with type transformers). It also record result of type in legal; /// or illegal set to avoid compute the same config again. The result maybe; /// have illegal RVVType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:200,Modifiability,config,config,200,/// Compute output and input types by applying different config (basic type; /// and LMUL with type transformers). It also record result of type in legal; /// or illegal set to avoid compute the same config again. The result maybe; /// have illegal RVVType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:177,Safety,avoid,avoid,177,/// Compute output and input types by applying different config (basic type; /// and LMUL with type transformers). It also record result of type in legal; /// or illegal set to avoid compute the same config again. The result maybe; /// have illegal RVVType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:8,Modifiability,refactor,refactor,8,// TODO refactor RVVIntrinsic class design after support all intrinsic; // combination. This represents an instantiation of an intrinsic with a; // particular type and prototype,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:19,Availability,mask,mask,19,"// Supported type, mask of BasicType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:52,Performance,load,load,52,"// Number of fields, greater than 1 if it's segment load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/CommandLineArgs.h:158,Modifiability,config,configured,158,/// Find a target name such that looking for it in TargetRegistry by that name; /// returns the same target. We expect that there is at least one target; /// configured with this property.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/CommandLineArgs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/CommandLineArgs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:658,Availability,alive,alive,658,"//===--- TestAST.h - Build clang ASTs for testing -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In normal operation of Clang, the FrontendAction's lifecycle both creates; // and destroys the AST, and code should operate on it during callbacks in; // between (e.g. via ASTConsumer).; //; // For tests it is often more convenient to parse an AST from code, and keep it; // alive as a normal local object, with assertions as straight-line code.; // TestAST provides such an interface.; // (ASTUnit can be used for this purpose, but is a production library with; // broad scope and complicated API).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:758,Integrability,interface,interface,758,"//===--- TestAST.h - Build clang ASTs for testing -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In normal operation of Clang, the FrontendAction's lifecycle both creates; // and destroys the AST, and code should operate on it during callbacks in; // between (e.g. via ASTConsumer).; //; // For tests it is often more convenient to parse an AST from code, and keep it; // alive as a normal local object, with assertions as straight-line code.; // TestAST provides such an interface.; // (ASTUnit can be used for this purpose, but is a production library with; // broad scope and complicated API).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:9,Testability,Test,TestAST,9,"//===--- TestAST.h - Build clang ASTs for testing -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In normal operation of Clang, the FrontendAction's lifecycle both creates; // and destroys the AST, and code should operate on it during callbacks in; // between (e.g. via ASTConsumer).; //; // For tests it is often more convenient to parse an AST from code, and keep it; // alive as a normal local object, with assertions as straight-line code.; // TestAST provides such an interface.; // (ASTUnit can be used for this purpose, but is a production library with; // broad scope and complicated API).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:42,Testability,test,testing,42,"//===--- TestAST.h - Build clang ASTs for testing -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In normal operation of Clang, the FrontendAction's lifecycle both creates; // and destroys the AST, and code should operate on it during callbacks in; // between (e.g. via ASTConsumer).; //; // For tests it is often more convenient to parse an AST from code, and keep it; // alive as a normal local object, with assertions as straight-line code.; // TestAST provides such an interface.; // (ASTUnit can be used for this purpose, but is a production library with; // broad scope and complicated API).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:581,Testability,test,tests,581,"//===--- TestAST.h - Build clang ASTs for testing -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In normal operation of Clang, the FrontendAction's lifecycle both creates; // and destroys the AST, and code should operate on it during callbacks in; // between (e.g. via ASTConsumer).; //; // For tests it is often more convenient to parse an AST from code, and keep it; // alive as a normal local object, with assertions as straight-line code.; // TestAST provides such an interface.; // (ASTUnit can be used for this purpose, but is a production library with; // broad scope and complicated API).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:695,Testability,assert,assertions,695,"//===--- TestAST.h - Build clang ASTs for testing -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In normal operation of Clang, the FrontendAction's lifecycle both creates; // and destroys the AST, and code should operate on it during callbacks in; // between (e.g. via ASTConsumer).; //; // For tests it is often more convenient to parse an AST from code, and keep it; // alive as a normal local object, with assertions as straight-line code.; // TestAST provides such an interface.; // (ASTUnit can be used for this purpose, but is a production library with; // broad scope and complicated API).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:733,Testability,Test,TestAST,733,"//===--- TestAST.h - Build clang ASTs for testing -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In normal operation of Clang, the FrontendAction's lifecycle both creates; // and destroys the AST, and code should operate on it during callbacks in; // between (e.g. via ASTConsumer).; //; // For tests it is often more convenient to parse an AST from code, and keep it; // alive as a normal local object, with assertions as straight-line code.; // TestAST provides such an interface.; // (ASTUnit can be used for this purpose, but is a production library with; // broad scope and complicated API).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:62,Testability,test,test,62,/// Specifies a virtual source file to be parsed as part of a test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:33,Availability,avail,available,33,"/// Extra virtual files that are available to be #included.; /// Keys are plain filenames (""foo.h""), values are file content.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:16,Availability,error,error,16,"/// By default, error diagnostics during parsing are reported as gtest errors.; /// To suppress this, set ErrorOK or include ""error-ok"" in a comment in Code.; /// In either case, all diagnostics appear in TestAST::diagnostics().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:71,Availability,error,errors,71,"/// By default, error diagnostics during parsing are reported as gtest errors.; /// To suppress this, set ErrorOK or include ""error-ok"" in a comment in Code.; /// In either case, all diagnostics appear in TestAST::diagnostics().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:106,Availability,Error,ErrorOK,106,"/// By default, error diagnostics during parsing are reported as gtest errors.; /// To suppress this, set ErrorOK or include ""error-ok"" in a comment in Code.; /// In either case, all diagnostics appear in TestAST::diagnostics().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:126,Availability,error,error-ok,126,"/// By default, error diagnostics during parsing are reported as gtest errors.; /// To suppress this, set ErrorOK or include ""error-ok"" in a comment in Code.; /// In either case, all diagnostics appear in TestAST::diagnostics().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:205,Testability,Test,TestAST,205,"/// By default, error diagnostics during parsing are reported as gtest errors.; /// To suppress this, set ErrorOK or include ""error-ok"" in a comment in Code.; /// In either case, all diagnostics appear in TestAST::diagnostics().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:129,Availability,alive,alive,129,"/// The result of parsing a file specified by TestInputs.; ///; /// The ASTContext, Sema etc are valid as long as this object is alive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:46,Testability,Test,TestInputs,46,"/// The result of parsing a file specified by TestInputs.; ///; /// The ASTContext, Sema etc are valid as long as this object is alive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:92,Availability,error,errors,92,"/// Constructing a TestAST parses the virtual file.; ///; /// To keep tests terse, critical errors (e.g. invalid flags) are reported as; /// unit test failures with ADD_FAILURE() and produce an empty ASTContext,; /// Sema etc. This frees the test code from handling these explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h
