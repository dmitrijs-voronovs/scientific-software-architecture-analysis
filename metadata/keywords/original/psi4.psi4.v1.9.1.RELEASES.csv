id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/releases/tag/v1.9:3145,Availability,redundant,redundant,3145,"/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through atin.extras[""extra_infiles""] = {""grid.dat"": <contents>} and be sure to atin.protocols.native_files = ""all"", then one can retrieve through atres.native_files[""grid_esp.dat""] or ""grid_field.dat"" closes https://github.com/psi4/psi4/issues/2307; [#2955](https://github.com/psi4/psi4/pull/2955), [#3055](https://github.com/psi4/psi4/pull/3055): Adds new “SplitJK” backend for composite SCF_TYPE combinations ; [#3001](https://github.com/psi4/psi4/pull/3001): Composite SCF_TYPE methods can now be specified using only a J algorithm for non-hybrid DFT calculations ; [#3024](https://github.com/psi4/psi4/pull/3024) / [#3026](https",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:8406,Availability,toler,tolerant,8406,"X grid defaults; [#3081](https://github.com/psi4/psi4/pull/3081): Sets broken combinations of SCF type and screening method to throw exceptions ; [#3087](https://github.com/psi4/psi4/pull/3087): Adds the capability to compute and retrieve gradients with respect to embedded point charges in external potential calculations; [#3053](https://github.com/psi4/psi4/pull/3053): Reworks internal documentation building process to fix broken Psicode redirects and enable capabilities with new Sphinx themes. ## Conda Package Updates; includes PCMSolver (backported to v1.8.1); includes libECPInt (build _2 onwards; not present for osx-arm64 with py != 3.10 in build _1 or _0) (backported to v1.8.1); includes files so psi4 --plugin-compile from Linux and Mac can work off the conda binary compatible with pydantic v1 or v2 in build _2 (backported to v1.8.1). ## Features (11 PRs); [#2999](https://github.com/psi4/psi4/pull/2999) / [#3019](https://github.com/psi4/psi4/pull/3019): still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build _2 of v1.8.1 on conda-forge.) (backported to v1.8.2); [#3013](https://github.com/psi4/psi4/pull/3013): allow passing protocols, tag, owner_group, and priority to QCArchive-enabled runs in the distributed driver. Works with qcfractal>=0.50. (backported to v1.8.2); [#2978](https://github.com/psi4/psi4/pull/2978): Adds new pytest module, test_comprehensive_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:10994,Availability,error,error,10994,"mplicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) ; [#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, too (backported to v1.8.1); [#3037](https://github.com/psi4/psi4/pull/3037): fixes BasisSet.n_prim_per_shell_ never populated and refactors shell formation in BasisSet. (backported to v1.8.2); [#3043](https://github.com/psi4/psi4/pull/3043) / [#3044](https://github.com/psi4/psi4/pull/3044) - fixes bug resulting in UnicodeDecodeError and corrupted timer.dat files, especially on systems with long hostnames. (backported to v1.8.2); [#3048](https://github.com/psi4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2); [#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with negative weights were used; [#3033](https://github.com/psi4/psi4/pull/3033): Fixes multiple circular import issues and generally cleans up Psi4 import calls ; [#2986](https://github.com/psi4/psi4/pull/2986) : Fixes Issue [#2985](https://github.com/psi4/p",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:13208,Availability,error,errors,13208,"i4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2); [#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with negative weights were used; [#3033](https://github.com/psi4/psi4/pull/3033): Fixes multiple circular import issues and generally cleans up Psi4 import calls ; [#2986](https://github.com/psi4/psi4/pull/2986) : Fixes Issue [#2985](https://github.com/psi4/psi4/issues/2985), where one-electron integrals would be returned to the user in different formats (e.g., full symmetric matrix vs. lower triangular representation) depending on function and input parameters ; [#2977](https://github.com/psi4/psi4/pull/2977): Fixes Issue [#2976](https://github.com/psi4/psi4/issues/2976), where DF-MP2 would crash for very small systems ; [#3086](https://github.com/psi4/psi4/pull/3086): Fixes Issue [#3085](https://github.com/psi4/psi4/issues/3085), where the “mbis_volume_ratios” keyword as an input to oeprop() was case-sensitive, leading to different behavior based on the case of the argument ; [#3082](https://github.com/psi4/psi4/pull/3082): Fixes Psi4 forum issue [#2979](https://forum.psicode.org/t/dispersion-gradients/2979), where printout of dispersion gradients was not labeled properly; [#3023](https://github.com/psi4/psi4/pull/3023): Fixes issues with redirects in documentation hosted on Psicode.org, and updates WIndows build dependencies; [#3089](https://github.com/psi4/psi4/pull/3089): Fixes issue in build introduced by CMake policy 0144 for old versions of CMake . ## Known Bugs; - Find them and tell us; - Watch out for deep periodic table ECP, as there's errors suspected. ## Contributors to v1.9; @andyj10224, @Awallace3, @carolinesargent, @CDSherrill, @davpoolechem, @EricaCMitchell, @fevangelista, @hokru, @johnppederson, @JonathanMisiewicz, @loriab, @lukekurfman, @mfherbst, @phillipmnel, @susilehtola, @TiborGY, @zachglick",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:204,Deployability,install,installers,204,"Advertised Version: 1.9.0 ; Continuous Version: 1.9.0 ; Release Date: 6 Dec 2023 ; Documentation: https://psicode.org/psi4manual/1.9.x/ . ; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.app/installs/v19/), [Docker](https://hub.docker.com/r/psi4/psi4/tags) Span: [79 PRs](https://github.com/psi4/psi4/milestone/10?closed=1). ## Required Dependency Changes (3 PRs); [#3022](https://github.com/psi4/psi4/pull/3022): Updates QCEngine to v0.28; [#2968](https://github.com/psi4/psi4/pull/2968): Updates gdma to v2.3 and switches gdma usage to be selectable at runtime; [#3090](https://github.com/psi4/psi4/pull/3090): Updates QCFractal to v0.52; #2842 Bump Libxc minimum from v5.1.2 to v6. ## New Methods (6 PRs); [#2992](https://github.com/psi4/psi4/pull/2992): Adds support for computation of analytic Hessians when using unrestricted DFT with LDA functionals; [#3039](https://github.com/psi4/psi4/pull/3039): adds fitted SAP guess described in J. Chem. Phys. 152, 144105 (2020) and accessed through set guess sapgau (backported to v1.8.2) ; [#3002](https://github.com/psi4/psi4/pull/3002) / [#3011](https://github.com/psi4/psi4/pull/3011): Implements new option for GUESS keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 ; [#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:244,Deployability,install,installs,244,"Advertised Version: 1.9.0 ; Continuous Version: 1.9.0 ; Release Date: 6 Dec 2023 ; Documentation: https://psicode.org/psi4manual/1.9.x/ . ; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.app/installs/v19/), [Docker](https://hub.docker.com/r/psi4/psi4/tags) Span: [79 PRs](https://github.com/psi4/psi4/milestone/10?closed=1). ## Required Dependency Changes (3 PRs); [#3022](https://github.com/psi4/psi4/pull/3022): Updates QCEngine to v0.28; [#2968](https://github.com/psi4/psi4/pull/2968): Updates gdma to v2.3 and switches gdma usage to be selectable at runtime; [#3090](https://github.com/psi4/psi4/pull/3090): Updates QCFractal to v0.52; #2842 Bump Libxc minimum from v5.1.2 to v6. ## New Methods (6 PRs); [#2992](https://github.com/psi4/psi4/pull/2992): Adds support for computation of analytic Hessians when using unrestricted DFT with LDA functionals; [#3039](https://github.com/psi4/psi4/pull/3039): adds fitted SAP guess described in J. Chem. Phys. 152, 144105 (2020) and accessed through set guess sapgau (backported to v1.8.2) ; [#3002](https://github.com/psi4/psi4/pull/3002) / [#3011](https://github.com/psi4/psi4/pull/3011): Implements new option for GUESS keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 ; [#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:7007,Deployability,release,releases,7007,"i4/psi4/pull/2953): Deprecate assignment-from-int* and cast-to-int* operations for the Dimension object, and make multiple significant improvements to the Dimension object under the hood ; [#2987](https://github.com/psi4/psi4/pull/2987): Adds capability to acquire more types of F12 integrals Python-side with basis set quadruplets; [#2966](https://github.com/psi4/psi4/pull/2966): Update README display badges and binder demo, and fix bug in serial quick_not_d2ints test; [#3056](https://github.com/psi4/psi4/pull/3056) / [#3058](https://github.com/psi4/psi4/pull/3058): Alters internal handling of documentation building to more effectively handle storage of documentation snapshots of previous code versions ; [#2961](https://github.com/psi4/psi4/pull/2961) / [#2979](https://github.com/psi4/psi4/pull/2979): Updates dependencies within Azure CI execution on Windows, and makes general improvements to such execution; [#3059](https://github.com/psi4/psi4/pull/3059): Cleans up documentation regarding management of Psi4 releases ; [#3088](https://github.com/psi4/psi4/pull/3088) Removes unnecessary macros kept over from previous usage of Boost, and never removed; [#3049](https://github.com/psi4/psi4/pull/3049): Fixes up code to support Python 3.12 and more modern versions of QCFractal ; [#3079](https://github.com/psi4/psi4/pull/3079): Updates documentation regarding usage of composite JK methods and COSX grid defaults; [#3081](https://github.com/psi4/psi4/pull/3081): Sets broken combinations of SCF type and screening method to throw exceptions ; [#3087](https://github.com/psi4/psi4/pull/3087): Adds the capability to compute and retrieve gradients with respect to embedded point charges in external potential calculations; [#3053](https://github.com/psi4/psi4/pull/3053): Reworks internal documentation building process to fix broken Psicode redirects and enable capabilities with new Sphinx themes. ## Conda Package Updates; includes PCMSolver (backported to v1.8.1); includes libECPInt ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:8480,Deployability,patch,patch,8480,"binations of SCF type and screening method to throw exceptions ; [#3087](https://github.com/psi4/psi4/pull/3087): Adds the capability to compute and retrieve gradients with respect to embedded point charges in external potential calculations; [#3053](https://github.com/psi4/psi4/pull/3053): Reworks internal documentation building process to fix broken Psicode redirects and enable capabilities with new Sphinx themes. ## Conda Package Updates; includes PCMSolver (backported to v1.8.1); includes libECPInt (build _2 onwards; not present for osx-arm64 with py != 3.10 in build _1 or _0) (backported to v1.8.1); includes files so psi4 --plugin-compile from Linux and Mac can work off the conda binary compatible with pydantic v1 or v2 in build _2 (backported to v1.8.1). ## Features (11 PRs); [#2999](https://github.com/psi4/psi4/pull/2999) / [#3019](https://github.com/psi4/psi4/pull/3019): still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build _2 of v1.8.1 on conda-forge.) (backported to v1.8.2); [#3013](https://github.com/psi4/psi4/pull/3013): allow passing protocols, tag, owner_group, and priority to QCArchive-enabled runs in the distributed driver. Works with qcfractal>=0.50. (backported to v1.8.2); [#2978](https://github.com/psi4/psi4/pull/2978): Adds new pytest module, test_comprehensive_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.c",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:12950,Deployability,update,updates,12950,"i4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2); [#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with negative weights were used; [#3033](https://github.com/psi4/psi4/pull/3033): Fixes multiple circular import issues and generally cleans up Psi4 import calls ; [#2986](https://github.com/psi4/psi4/pull/2986) : Fixes Issue [#2985](https://github.com/psi4/psi4/issues/2985), where one-electron integrals would be returned to the user in different formats (e.g., full symmetric matrix vs. lower triangular representation) depending on function and input parameters ; [#2977](https://github.com/psi4/psi4/pull/2977): Fixes Issue [#2976](https://github.com/psi4/psi4/issues/2976), where DF-MP2 would crash for very small systems ; [#3086](https://github.com/psi4/psi4/pull/3086): Fixes Issue [#3085](https://github.com/psi4/psi4/issues/3085), where the “mbis_volume_ratios” keyword as an input to oeprop() was case-sensitive, leading to different behavior based on the case of the argument ; [#3082](https://github.com/psi4/psi4/pull/3082): Fixes Psi4 forum issue [#2979](https://forum.psicode.org/t/dispersion-gradients/2979), where printout of dispersion gradients was not labeled properly; [#3023](https://github.com/psi4/psi4/pull/3023): Fixes issues with redirects in documentation hosted on Psicode.org, and updates WIndows build dependencies; [#3089](https://github.com/psi4/psi4/pull/3089): Fixes issue in build introduced by CMake policy 0144 for old versions of CMake . ## Known Bugs; - Find them and tell us; - Watch out for deep periodic table ECP, as there's errors suspected. ## Contributors to v1.9; @andyj10224, @Awallace3, @carolinesargent, @CDSherrill, @davpoolechem, @EricaCMitchell, @fevangelista, @hokru, @johnppederson, @JonathanMisiewicz, @loriab, @lukekurfman, @mfherbst, @phillipmnel, @susilehtola, @TiborGY, @zachglick",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:7676,Energy Efficiency,charge,charges,7676,"tion snapshots of previous code versions ; [#2961](https://github.com/psi4/psi4/pull/2961) / [#2979](https://github.com/psi4/psi4/pull/2979): Updates dependencies within Azure CI execution on Windows, and makes general improvements to such execution; [#3059](https://github.com/psi4/psi4/pull/3059): Cleans up documentation regarding management of Psi4 releases ; [#3088](https://github.com/psi4/psi4/pull/3088) Removes unnecessary macros kept over from previous usage of Boost, and never removed; [#3049](https://github.com/psi4/psi4/pull/3049): Fixes up code to support Python 3.12 and more modern versions of QCFractal ; [#3079](https://github.com/psi4/psi4/pull/3079): Updates documentation regarding usage of composite JK methods and COSX grid defaults; [#3081](https://github.com/psi4/psi4/pull/3081): Sets broken combinations of SCF type and screening method to throw exceptions ; [#3087](https://github.com/psi4/psi4/pull/3087): Adds the capability to compute and retrieve gradients with respect to embedded point charges in external potential calculations; [#3053](https://github.com/psi4/psi4/pull/3053): Reworks internal documentation building process to fix broken Psicode redirects and enable capabilities with new Sphinx themes. ## Conda Package Updates; includes PCMSolver (backported to v1.8.1); includes libECPInt (build _2 onwards; not present for osx-arm64 with py != 3.10 in build _1 or _0) (backported to v1.8.1); includes files so psi4 --plugin-compile from Linux and Mac can work off the conda binary compatible with pydantic v1 or v2 in build _2 (backported to v1.8.1). ## Features (11 PRs); [#2999](https://github.com/psi4/psi4/pull/2999) / [#3019](https://github.com/psi4/psi4/pull/3019): still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build _2 of v1.8.1 on conda-forge.) (backported to v1.8.2); [#3013](https://github.com/psi4/psi4/pull/3013): allow passing protocols, tag, owner_group, and priority ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:2256,Integrability,depend,dependency,2256," keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 ; [#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for many methods (e.g., b3lyp-d3) and aren't disabled but are no longer supported. ## External Libraries (1 PR); [#3050](https://github.com/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:3633,Integrability,protocol,protocols,3633,"ing since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through atin.extras[""extra_infiles""] = {""grid.dat"": <contents>} and be sure to atin.protocols.native_files = ""all"", then one can retrieve through atres.native_files[""grid_esp.dat""] or ""grid_field.dat"" closes https://github.com/psi4/psi4/issues/2307; [#2955](https://github.com/psi4/psi4/pull/2955), [#3055](https://github.com/psi4/psi4/pull/3055): Adds new “SplitJK” backend for composite SCF_TYPE combinations ; [#3001](https://github.com/psi4/psi4/pull/3001): Composite SCF_TYPE methods can now be specified using only a J algorithm for non-hybrid DFT calculations ; [#3024](https://github.com/psi4/psi4/pull/3024) / [#3026](https://github.com/psi4/psi4/pull/3026): Cleans up multiple libmints classes, including SOBasis and PetiteList, to use std::vector objects instead of manual memory management ; [#2969](https://github.com/psi4/psi4/pull/2969): Improves printout of thermochemical property information derived from vibrational analyses ; [#2937](https://github.com/psi4/psi4/pull/2937): Changes the BasisSet::print_detail_cfour() function in multiple ways, including using C++-styl",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:6804,Integrability,depend,dependencies,6804,"ation; [#3078](https://github.com/psi4/psi4/pull/3078): Refines build process for Libint2 code generator; [#2953](https://github.com/psi4/psi4/pull/2953): Deprecate assignment-from-int* and cast-to-int* operations for the Dimension object, and make multiple significant improvements to the Dimension object under the hood ; [#2987](https://github.com/psi4/psi4/pull/2987): Adds capability to acquire more types of F12 integrals Python-side with basis set quadruplets; [#2966](https://github.com/psi4/psi4/pull/2966): Update README display badges and binder demo, and fix bug in serial quick_not_d2ints test; [#3056](https://github.com/psi4/psi4/pull/3056) / [#3058](https://github.com/psi4/psi4/pull/3058): Alters internal handling of documentation building to more effectively handle storage of documentation snapshots of previous code versions ; [#2961](https://github.com/psi4/psi4/pull/2961) / [#2979](https://github.com/psi4/psi4/pull/2979): Updates dependencies within Azure CI execution on Windows, and makes general improvements to such execution; [#3059](https://github.com/psi4/psi4/pull/3059): Cleans up documentation regarding management of Psi4 releases ; [#3088](https://github.com/psi4/psi4/pull/3088) Removes unnecessary macros kept over from previous usage of Boost, and never removed; [#3049](https://github.com/psi4/psi4/pull/3049): Fixes up code to support Python 3.12 and more modern versions of QCFractal ; [#3079](https://github.com/psi4/psi4/pull/3079): Updates documentation regarding usage of composite JK methods and COSX grid defaults; [#3081](https://github.com/psi4/psi4/pull/3081): Sets broken combinations of SCF type and screening method to throw exceptions ; [#3087](https://github.com/psi4/psi4/pull/3087): Adds the capability to compute and retrieve gradients with respect to embedded point charges in external potential calculations; [#3053](https://github.com/psi4/psi4/pull/3053): Reworks internal documentation building process to fix broken Psicode redirects ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:8612,Integrability,protocol,protocols,8612,"ients with respect to embedded point charges in external potential calculations; [#3053](https://github.com/psi4/psi4/pull/3053): Reworks internal documentation building process to fix broken Psicode redirects and enable capabilities with new Sphinx themes. ## Conda Package Updates; includes PCMSolver (backported to v1.8.1); includes libECPInt (build _2 onwards; not present for osx-arm64 with py != 3.10 in build _1 or _0) (backported to v1.8.1); includes files so psi4 --plugin-compile from Linux and Mac can work off the conda binary compatible with pydantic v1 or v2 in build _2 (backported to v1.8.1). ## Features (11 PRs); [#2999](https://github.com/psi4/psi4/pull/2999) / [#3019](https://github.com/psi4/psi4/pull/3019): still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build _2 of v1.8.1 on conda-forge.) (backported to v1.8.2); [#3013](https://github.com/psi4/psi4/pull/3013): allow passing protocols, tag, owner_group, and priority to QCArchive-enabled runs in the distributed driver. Works with qcfractal>=0.50. (backported to v1.8.2); [#2978](https://github.com/psi4/psi4/pull/2978): Adds new pytest module, test_comprehensive_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying test",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:9872,Integrability,depend,dependencies,9872,"ve_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/30",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:10041,Integrability,depend,dependent,10041,"yword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) ; [#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, to",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:10191,Integrability,rout,routine,10191,"AL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) ; [#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, too (backported to v1.8.1); [#3037](https://github.com/psi4/psi4/pull/3037): fixes BasisSet.n_prim_per_shell_ never populated and refactors shell formation in BasisS",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:11000,Integrability,message,messages,11000,"mplicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) ; [#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, too (backported to v1.8.1); [#3037](https://github.com/psi4/psi4/pull/3037): fixes BasisSet.n_prim_per_shell_ never populated and refactors shell formation in BasisSet. (backported to v1.8.2); [#3043](https://github.com/psi4/psi4/pull/3043) / [#3044](https://github.com/psi4/psi4/pull/3044) - fixes bug resulting in UnicodeDecodeError and corrupted timer.dat files, especially on systems with long hostnames. (backported to v1.8.2); [#3048](https://github.com/psi4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2); [#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with negative weights were used; [#3033](https://github.com/psi4/psi4/pull/3033): Fixes multiple circular import issues and generally cleans up Psi4 import calls ; [#2986](https://github.com/psi4/psi4/pull/2986) : Fixes Issue [#2985](https://github.com/psi4/p",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:12160,Integrability,depend,depending,12160,"BasisSet. (backported to v1.8.2); [#3043](https://github.com/psi4/psi4/pull/3043) / [#3044](https://github.com/psi4/psi4/pull/3044) - fixes bug resulting in UnicodeDecodeError and corrupted timer.dat files, especially on systems with long hostnames. (backported to v1.8.2); [#3048](https://github.com/psi4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2); [#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with negative weights were used; [#3033](https://github.com/psi4/psi4/pull/3033): Fixes multiple circular import issues and generally cleans up Psi4 import calls ; [#2986](https://github.com/psi4/psi4/pull/2986) : Fixes Issue [#2985](https://github.com/psi4/psi4/issues/2985), where one-electron integrals would be returned to the user in different formats (e.g., full symmetric matrix vs. lower triangular representation) depending on function and input parameters ; [#2977](https://github.com/psi4/psi4/pull/2977): Fixes Issue [#2976](https://github.com/psi4/psi4/issues/2976), where DF-MP2 would crash for very small systems ; [#3086](https://github.com/psi4/psi4/pull/3086): Fixes Issue [#3085](https://github.com/psi4/psi4/issues/3085), where the “mbis_volume_ratios” keyword as an input to oeprop() was case-sensitive, leading to different behavior based on the case of the argument ; [#3082](https://github.com/psi4/psi4/pull/3082): Fixes Psi4 forum issue [#2979](https://forum.psicode.org/t/dispersion-gradients/2979), where printout of dispersion gradients was not labeled properly; [#3023](https://github.com/psi4/psi4/pull/3023): Fixes issues with redirects in documentation hosted on Psicode.org, and updates WIndows build dependencies; [#3089](https://github.com/psi4/psi4/pull/3089): Fixes issue in build introduced by CMake policy 0144 for old versions of CMake . ## Known Bugs; - Find them and tell us; - Watch out for deep ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:12972,Integrability,depend,dependencies,12972,"i4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2); [#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with negative weights were used; [#3033](https://github.com/psi4/psi4/pull/3033): Fixes multiple circular import issues and generally cleans up Psi4 import calls ; [#2986](https://github.com/psi4/psi4/pull/2986) : Fixes Issue [#2985](https://github.com/psi4/psi4/issues/2985), where one-electron integrals would be returned to the user in different formats (e.g., full symmetric matrix vs. lower triangular representation) depending on function and input parameters ; [#2977](https://github.com/psi4/psi4/pull/2977): Fixes Issue [#2976](https://github.com/psi4/psi4/issues/2976), where DF-MP2 would crash for very small systems ; [#3086](https://github.com/psi4/psi4/pull/3086): Fixes Issue [#3085](https://github.com/psi4/psi4/issues/3085), where the “mbis_volume_ratios” keyword as an input to oeprop() was case-sensitive, leading to different behavior based on the case of the argument ; [#3082](https://github.com/psi4/psi4/pull/3082): Fixes Psi4 forum issue [#2979](https://forum.psicode.org/t/dispersion-gradients/2979), where printout of dispersion gradients was not labeled properly; [#3023](https://github.com/psi4/psi4/pull/3023): Fixes issues with redirects in documentation hosted on Psicode.org, and updates WIndows build dependencies; [#3089](https://github.com/psi4/psi4/pull/3089): Fixes issue in build introduced by CMake policy 0144 for old versions of CMake . ## Known Bugs; - Find them and tell us; - Watch out for deep periodic table ECP, as there's errors suspected. ## Contributors to v1.9; @andyj10224, @Awallace3, @carolinesargent, @CDSherrill, @davpoolechem, @EricaCMitchell, @fevangelista, @hokru, @johnppederson, @JonathanMisiewicz, @loriab, @lukekurfman, @mfherbst, @phillipmnel, @susilehtola, @TiborGY, @zachglick",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:2551,Modifiability,variab,variable,2551,"a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for many methods (e.g., b3lyp-d3) and aren't disabled but are no longer supported. ## External Libraries (1 PR); [#3050](https://github.com/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat content",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:8114,Modifiability,plugin,plugin-compile,8114,"ps://github.com/psi4/psi4/pull/3049): Fixes up code to support Python 3.12 and more modern versions of QCFractal ; [#3079](https://github.com/psi4/psi4/pull/3079): Updates documentation regarding usage of composite JK methods and COSX grid defaults; [#3081](https://github.com/psi4/psi4/pull/3081): Sets broken combinations of SCF type and screening method to throw exceptions ; [#3087](https://github.com/psi4/psi4/pull/3087): Adds the capability to compute and retrieve gradients with respect to embedded point charges in external potential calculations; [#3053](https://github.com/psi4/psi4/pull/3053): Reworks internal documentation building process to fix broken Psicode redirects and enable capabilities with new Sphinx themes. ## Conda Package Updates; includes PCMSolver (backported to v1.8.1); includes libECPInt (build _2 onwards; not present for osx-arm64 with py != 3.10 in build _1 or _0) (backported to v1.8.1); includes files so psi4 --plugin-compile from Linux and Mac can work off the conda binary compatible with pydantic v1 or v2 in build _2 (backported to v1.8.1). ## Features (11 PRs); [#2999](https://github.com/psi4/psi4/pull/2999) / [#3019](https://github.com/psi4/psi4/pull/3019): still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build _2 of v1.8.1 on conda-forge.) (backported to v1.8.2); [#3013](https://github.com/psi4/psi4/pull/3013): allow passing protocols, tag, owner_group, and priority to QCArchive-enabled runs in the distributed driver. Works with qcfractal>=0.50. (backported to v1.8.2); [#2978](https://github.com/psi4/psi4/pull/2978): Adds new pytest module, test_comprehensive_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keywor",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:10479,Modifiability,plugin,plugin,10479,"4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) ; [#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, too (backported to v1.8.1); [#3037](https://github.com/psi4/psi4/pull/3037): fixes BasisSet.n_prim_per_shell_ never populated and refactors shell formation in BasisSet. (backported to v1.8.2); [#3043](https://github.com/psi4/psi4/pull/3043) / [#3044](https://github.com/psi4/psi4/pull/3044) - fixes bug resulting in UnicodeDecodeError and corrupted timer.dat files, especially on systems with long hostnames. (backported to v1.8.2); [#3048](https://github.com/psi4/p",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:11148,Modifiability,refactor,refactors,11148,"4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) ; [#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, too (backported to v1.8.1); [#3037](https://github.com/psi4/psi4/pull/3037): fixes BasisSet.n_prim_per_shell_ never populated and refactors shell formation in BasisSet. (backported to v1.8.2); [#3043](https://github.com/psi4/psi4/pull/3043) / [#3044](https://github.com/psi4/psi4/pull/3044) - fixes bug resulting in UnicodeDecodeError and corrupted timer.dat files, especially on systems with long hostnames. (backported to v1.8.2); [#3048](https://github.com/psi4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2); [#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with negative weights were used; [#3033](https://github.com/psi4/psi4/pull/3033): Fixes multiple circular import issues and generally cleans up Psi4 import calls ; [#2986](https://github.com/psi4/psi4/pull/2986) : Fixes Issue [#2985](https://github.com/psi4/psi4/issues/2985), where one-electron integrals would be returned to the user in different formats (e.g., full symmetric matrix vs. lower triangular repr",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:2781,Performance,perform,performance,2781,"4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for many methods (e.g., b3lyp-d3) and aren't disabled but are no longer supported. ## External Libraries (1 PR); [#3050](https://github.com/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through atin.extras[""extra_infiles""] = {""grid.dat"": <contents>} and be sure to atin.protocols.native_files = ""all"", then one can retrieve through atres.native_files[""grid_esp.dat""] or ""grid_field.dat"" closes https://github.com/psi4/psi4/issues/2307; [#2955](https",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:9226,Performance,perform,performed,9226,"v1 or v2 in build _2 (backported to v1.8.1). ## Features (11 PRs); [#2999](https://github.com/psi4/psi4/pull/2999) / [#3019](https://github.com/psi4/psi4/pull/3019): still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build _2 of v1.8.1 on conda-forge.) (backported to v1.8.2); [#3013](https://github.com/psi4/psi4/pull/3013): allow passing protocols, tag, owner_group, and priority to QCArchive-enabled runs in the distributed driver. Works with qcfractal>=0.50. (backported to v1.8.2); [#2978](https://github.com/psi4/psi4/pull/2978): Adds new pytest module, test_comprehensive_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:3139,Safety,avoid,avoid,3139,"/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through atin.extras[""extra_infiles""] = {""grid.dat"": <contents>} and be sure to atin.protocols.native_files = ""all"", then one can retrieve through atres.native_files[""grid_esp.dat""] or ""grid_field.dat"" closes https://github.com/psi4/psi4/issues/2307; [#2955](https://github.com/psi4/psi4/pull/2955), [#3055](https://github.com/psi4/psi4/pull/3055): Adds new “SplitJK” backend for composite SCF_TYPE combinations ; [#3001](https://github.com/psi4/psi4/pull/3001): Composite SCF_TYPE methods can now be specified using only a J algorithm for non-hybrid DFT calculations ; [#3024](https://github.com/psi4/psi4/pull/3024) / [#3026](https",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:3145,Safety,redund,redundant,3145,"/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through atin.extras[""extra_infiles""] = {""grid.dat"": <contents>} and be sure to atin.protocols.native_files = ""all"", then one can retrieve through atres.native_files[""grid_esp.dat""] or ""grid_field.dat"" closes https://github.com/psi4/psi4/issues/2307; [#2955](https://github.com/psi4/psi4/pull/2955), [#3055](https://github.com/psi4/psi4/pull/3055): Adds new “SplitJK” backend for composite SCF_TYPE combinations ; [#3001](https://github.com/psi4/psi4/pull/3001): Composite SCF_TYPE methods can now be specified using only a J algorithm for non-hybrid DFT calculations ; [#3024](https://github.com/psi4/psi4/pull/3024) / [#3026](https",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:10310,Safety,avoid,avoids,10310,"C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) ; [#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, too (backported to v1.8.1); [#3037](https://github.com/psi4/psi4/pull/3037): fixes BasisSet.n_prim_per_shell_ never populated and refactors shell formation in BasisSet. (backported to v1.8.2); [#3043](https://github.com/psi4/psi4/pull/3043) / [#3044](https://github.com/psi4/psi4/pull/3044) - fixes bug resulting in UnicodeDec",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:10854,Safety,avoid,avoids,10854,"pendencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) ; [#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, too (backported to v1.8.1); [#3037](https://github.com/psi4/psi4/pull/3037): fixes BasisSet.n_prim_per_shell_ never populated and refactors shell formation in BasisSet. (backported to v1.8.2); [#3043](https://github.com/psi4/psi4/pull/3043) / [#3044](https://github.com/psi4/psi4/pull/3044) - fixes bug resulting in UnicodeDecodeError and corrupted timer.dat files, especially on systems with long hostnames. (backported to v1.8.2); [#3048](https://github.com/psi4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2); [#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with negative weights were used; [#3033](https://github.com/psi4/psi4/pull/3033): Fixes multiple circular import issues and generally clea",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:1033,Security,access,accessed,1033," 1.9.0 ; Release Date: 6 Dec 2023 ; Documentation: https://psicode.org/psi4manual/1.9.x/ . ; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.app/installs/v19/), [Docker](https://hub.docker.com/r/psi4/psi4/tags) Span: [79 PRs](https://github.com/psi4/psi4/milestone/10?closed=1). ## Required Dependency Changes (3 PRs); [#3022](https://github.com/psi4/psi4/pull/3022): Updates QCEngine to v0.28; [#2968](https://github.com/psi4/psi4/pull/2968): Updates gdma to v2.3 and switches gdma usage to be selectable at runtime; [#3090](https://github.com/psi4/psi4/pull/3090): Updates QCFractal to v0.52; #2842 Bump Libxc minimum from v5.1.2 to v6. ## New Methods (6 PRs); [#2992](https://github.com/psi4/psi4/pull/2992): Adds support for computation of analytic Hessians when using unrestricted DFT with LDA functionals; [#3039](https://github.com/psi4/psi4/pull/3039): adds fitted SAP guess described in J. Chem. Phys. 152, 144105 (2020) and accessed through set guess sapgau (backported to v1.8.2) ; [#3002](https://github.com/psi4/psi4/pull/3002) / [#3011](https://github.com/psi4/psi4/pull/3011): Implements new option for GUESS keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 ; [#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for m",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:9907,Security,access,accessible,9907,"ve_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/30",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:6451,Testability,test,test,6451,"e export docstrings for fix_orientation and fix_com functions in export_mints.cc; [#2975](https://github.com/psi4/psi4/pull/2975): Adds missing LibXC citation to documentation; [#3018](https://github.com/psi4/psi4/pull/3018): Cleans up broken links and deprecated functions in psiapi Jupyter notebook; [#3005](https://github.com/psi4/psi4/pull/3005): Adds clarifying details to cubature.cc code regarding the Chebyshev quadrature implementation; [#3078](https://github.com/psi4/psi4/pull/3078): Refines build process for Libint2 code generator; [#2953](https://github.com/psi4/psi4/pull/2953): Deprecate assignment-from-int* and cast-to-int* operations for the Dimension object, and make multiple significant improvements to the Dimension object under the hood ; [#2987](https://github.com/psi4/psi4/pull/2987): Adds capability to acquire more types of F12 integrals Python-side with basis set quadruplets; [#2966](https://github.com/psi4/psi4/pull/2966): Update README display badges and binder demo, and fix bug in serial quick_not_d2ints test; [#3056](https://github.com/psi4/psi4/pull/3056) / [#3058](https://github.com/psi4/psi4/pull/3058): Alters internal handling of documentation building to more effectively handle storage of documentation snapshots of previous code versions ; [#2961](https://github.com/psi4/psi4/pull/2961) / [#2979](https://github.com/psi4/psi4/pull/2979): Updates dependencies within Azure CI execution on Windows, and makes general improvements to such execution; [#3059](https://github.com/psi4/psi4/pull/3059): Cleans up documentation regarding management of Psi4 releases ; [#3088](https://github.com/psi4/psi4/pull/3088) Removes unnecessary macros kept over from previous usage of Boost, and never removed; [#3049](https://github.com/psi4/psi4/pull/3049): Fixes up code to support Python 3.12 and more modern versions of QCFractal ; [#3079](https://github.com/psi4/psi4/pull/3079): Updates documentation regarding usage of composite JK methods and COSX grid default",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:8882,Testability,test,test,8882,"includes PCMSolver (backported to v1.8.1); includes libECPInt (build _2 onwards; not present for osx-arm64 with py != 3.10 in build _1 or _0) (backported to v1.8.1); includes files so psi4 --plugin-compile from Linux and Mac can work off the conda binary compatible with pydantic v1 or v2 in build _2 (backported to v1.8.1). ## Features (11 PRs); [#2999](https://github.com/psi4/psi4/pull/2999) / [#3019](https://github.com/psi4/psi4/pull/3019): still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build _2 of v1.8.1 on conda-forge.) (backported to v1.8.2); [#3013](https://github.com/psi4/psi4/pull/3013): allow passing protocols, tag, owner_group, and priority to QCArchive-enabled runs in the distributed driver. Works with qcfractal>=0.50. (backported to v1.8.2); [#2978](https://github.com/psi4/psi4/pull/2978): Adds new pytest module, test_comprehensive_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashio",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:9635,Testability,test,tests,9635,"llow passing protocols, tag, owner_group, and priority to QCArchive-enabled runs in the distributed driver. Works with qcfractal>=0.50. (backported to v1.8.2); [#2978](https://github.com/psi4/psi4/pull/2978): Adds new pytest module, test_comprehensive_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts f",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:9668,Testability,test,testing,9668,"er. Works with qcfractal>=0.50. (backported to v1.8.2); [#2978](https://github.com/psi4/psi4/pull/2978): Adds new pytest module, test_comprehensive_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords; [#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely ; [#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid; [#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard ; [#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file; [#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options; [#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/ps",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:10737,Testability,test,test,10737,"com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion ; [#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library . ## Bug Fixes (19 PRs); [#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) ; [#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1); [#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1); [#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) ; [#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1); [#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) ; [#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, too (backported to v1.8.1); [#3037](https://github.com/psi4/psi4/pull/3037): fixes BasisSet.n_prim_per_shell_ never populated and refactors shell formation in BasisSet. (backported to v1.8.2); [#3043](https://github.com/psi4/psi4/pull/3043) / [#3044](https://github.com/psi4/psi4/pull/3044) - fixes bug resulting in UnicodeDecodeError and corrupted timer.dat files, especially on systems with long hostnames. (backported to v1.8.2); [#3048](https://github.com/psi4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2); [#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with nega",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:1549,Usability,simpl,simple,1549,"968): Updates gdma to v2.3 and switches gdma usage to be selectable at runtime; [#3090](https://github.com/psi4/psi4/pull/3090): Updates QCFractal to v0.52; #2842 Bump Libxc minimum from v5.1.2 to v6. ## New Methods (6 PRs); [#2992](https://github.com/psi4/psi4/pull/2992): Adds support for computation of analytic Hessians when using unrestricted DFT with LDA functionals; [#3039](https://github.com/psi4/psi4/pull/3039): adds fitted SAP guess described in J. Chem. Phys. 152, 144105 (2020) and accessed through set guess sapgau (backported to v1.8.2) ; [#3002](https://github.com/psi4/psi4/pull/3002) / [#3011](https://github.com/psi4/psi4/pull/3011): Implements new option for GUESS keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 ; [#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for many methods (e.g., b3lyp-d3) and aren't disabled but are no longer supported. ## External Libraries (1 PR); [#3050](https://github.com/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.9:5301,Usability,clear,clearly,5301," of manual memory management ; [#2969](https://github.com/psi4/psi4/pull/2969): Improves printout of thermochemical property information derived from vibrational analyses ; [#2937](https://github.com/psi4/psi4/pull/2937): Changes the BasisSet::print_detail_cfour() function in multiple ways, including using C++-style printout options and string manipulations, using more kocher floating-point comparison methods, and fixing broken URL links; [#2995](https://github.com/psi4/psi4/pull/2995), [#3035](https://github.com/psi4/psi4/pull/3035) : Fixes documentation regarding Hirshfeld volume ratios for one-electron properties and exchange term scaling via the S^2 approximation; [#3027](https://github.com/psi4/psi4/pull/3027): Encapsulates acquisition of physical constants (e.g., Bohr/Angstrom conversion factor) data via QCElemental from a single import in constants.py; [#3017](https://github.com/psi4/psi4/pull/3017): Updates sapt_psivars() docstring in psivardefs.py to more clearly explain the function ; [#3029](https://github.com/psi4/psi4/pull/3029): Adds clarifying details to the export docstrings for fix_orientation and fix_com functions in export_mints.cc; [#2975](https://github.com/psi4/psi4/pull/2975): Adds missing LibXC citation to documentation; [#3018](https://github.com/psi4/psi4/pull/3018): Cleans up broken links and deprecated functions in psiapi Jupyter notebook; [#3005](https://github.com/psi4/psi4/pull/3005): Adds clarifying details to cubature.cc code regarding the Chebyshev quadrature implementation; [#3078](https://github.com/psi4/psi4/pull/3078): Refines build process for Libint2 code generator; [#2953](https://github.com/psi4/psi4/pull/2953): Deprecate assignment-from-int* and cast-to-int* operations for the Dimension object, and make multiple significant improvements to the Dimension object under the hood ; [#2987](https://github.com/psi4/psi4/pull/2987): Adds capability to acquire more types of F12 integrals Python-side with basis set quadruplets; [#2966",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
https://github.com/psi4/psi4/releases/tag/v1.7:722,Availability,avail,available,722,"Advertised Version: 1.7; Continuous Version: 1.7; Release Date: 6 Dec 2022; NYI Documentation: https://psicode.org/psi4manual/1.7.0/; Availability: Public, GitHub source, CMake build, NYI [Conda binary installers](https://psicode.netlify.com/installs/v17/); Span: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1). ## Required Dependency Changes. ## New Methods. * Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks main",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:871,Availability,avail,available,871,"Advertised Version: 1.7; Continuous Version: 1.7; Release Date: 6 Dec 2022; NYI Documentation: https://psicode.org/psi4manual/1.7.0/; Availability: Public, GitHub source, CMake build, NYI [Conda binary installers](https://psicode.netlify.com/installs/v17/); Span: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1). ## Required Dependency Changes. ## New Methods. * Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks main",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:3386,Availability,redundant,redundant,3386,", @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:3892,Availability,reliab,reliably,3892,"n users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611); * Updates LibXC interface so that one can set omega for any functional that contains it",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:4408,Availability,reliab,reliability,4408,"(#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611); * Updates LibXC interface so that one can set omega for any functional that contains it, rather than only for a hardcoded list of functionals. (#2643); * References with more beta than alpha orbitals of a given irrep can now be represented, as docc and socc are computed from alpha and beta rather than the other way around. (#2619); * Adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require di",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:4603,Availability,error,error,4603,"ndard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611); * Updates LibXC interface so that one can set omega for any functional that contains it, rather than only for a hardcoded list of functionals. (#2643); * References with more beta than alpha orbitals of a given irrep can now be represented, as docc and socc are computed from alpha and beta rather than the other way around. (#2619); * Adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores. (#2667); * Incremental Fock builds; * Turn off incfock by default for SCF_TYPE=COSX for greater reliability. (#2689); * Standardizes the incf",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:5554,Availability,reliab,reliability,5554,"ons to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611); * Updates LibXC interface so that one can set omega for any functional that contains it, rather than only for a hardcoded list of functionals. (#2643); * References with more beta than alpha orbitals of a given irrep can now be represented, as docc and socc are computed from alpha and beta rather than the other way around. (#2619); * Adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores. (#2667); * Incremental Fock builds; * Turn off incfock by default for SCF_TYPE=COSX for greater reliability. (#2689); * Standardizes the incfock implementation of DFJLinK toward the model of DFJCOSK, thereby improving memory usage. (#2792); * Standardizes the incfock implementation of DirectJK toward the model of DFJCOSK, thereby improving memory usage. (#2808); * Enhances the incfock implementation of DFJCOSK to be like the others: controlled by `INCFOCK` keyword (replacing `COSX_INCFOCK`), able to recompute the full Fock matrix every n iterations controlled by `INCFOCK_FULL_FOCK_EVERY`, and able to disable incfock at a certain `INCFOCK_CONVERGENCE` threshold. (#2816); * Update CC* modules toward internal use of Wavefunction: remove unused code, MOInfo->Wfn data, Libmints for orbital rotation, use Matrix class, Slice notation, orbital indexing management. (#2703, #2696, #2704, #2715, #2719, #2720, #2751, #2753, #2782, #2786, #2812, #2818, #2826); * Brueckner CC no longer set QCVariable `CCSD TOTAL ENERGY` as the final result but instead ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:6737,Availability,error,error,6737,"implementation of DirectJK toward the model of DFJCOSK, thereby improving memory usage. (#2808); * Enhances the incfock implementation of DFJCOSK to be like the others: controlled by `INCFOCK` keyword (replacing `COSX_INCFOCK`), able to recompute the full Fock matrix every n iterations controlled by `INCFOCK_FULL_FOCK_EVERY`, and able to disable incfock at a certain `INCFOCK_CONVERGENCE` threshold. (#2816); * Update CC* modules toward internal use of Wavefunction: remove unused code, MOInfo->Wfn data, Libmints for orbital rotation, use Matrix class, Slice notation, orbital indexing management. (#2703, #2696, #2704, #2715, #2719, #2720, #2751, #2753, #2782, #2786, #2812, #2818, #2826); * Brueckner CC no longer set QCVariable `CCSD TOTAL ENERGY` as the final result but instead set BCCD-specific variables from the final iteration and some other variables from the first iteration. BRUECKNER_ORBS_R_CONVERGENCE parameter tightened when defaulting from E_CONVERGENCE. (#2708); * Renovate PSIO to improve error messaging. (#2711, #2700, #2724, #2741, #2756, #2773); * Improve Matrix/Vector tech.; * Refactor Vector and IntVector. (#2628, #2705); * Allow non-symmetric matrix <-> dpdfile2. (#2722); * `Matrix::set_block` can be used on matrices that are not totally symmetric. (#2734); * Check Matrix size compatability in gemm(). (#2729); * Improved `Matrix::transform`'s ability to handle edge cases. (#2748); * Improved Matrix::back_transform's ability to handle edge cases. (#2745); * `Matrix::get_block` can be used on matrices that are not totally symmetric. (#2752); * Running DF through CCENERGY (experimental, expert only) may now require set qc_module ccenergy. (#2731); * Many NYI messages, whether from `ManagedMethodError`, `MissingMethodError`, or plain `ValidationError` from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes. (#2731); * Capabilities ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:9444,Availability,avail,available,9444,"use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, s9:=0.0). When s-dftd3 is the engine, another set of new extensions, e.g., -d3atm alias of -d3zeroatm turns on 3-body (s9=1.0) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., energy(""b3lyp-d3atm"") — and Psi4 will figure out if you have the right engine to do the job. (#2791); * psi4.core.Molecule.run_dftd3 and qcdb.Molecu",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:10604,Availability,avail,available,10604,"d slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, s9:=0.0). When s-dftd3 is the engine, another set of new extensions, e.g., -d3atm alias of -d3zeroatm turns on 3-body (s9=1.0) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., energy(""b3lyp-d3atm"") — and Psi4 will figure out if you have the right engine to do the job. (#2791); * psi4.core.Molecule.run_dftd3 and qcdb.Molecule.run_dftd3 don't work with s-dftd3. Please file an issue if you really want this capability. run_gcp will use classic gcp or mctc-gcp interchangeably, whichever you have available. (#2791). ## Bug Fixes. * Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669); * Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653); * Worked around Intel compiler bug. (#2625); * Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673); * Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmet",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:11615,Availability,error,error,11615,"able. (#2791). ## Bug Fixes. * Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669); * Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653); * Worked around Intel compiler bug. (#2625); * Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673); * Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731); * Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759); * Fixed so `basis_relativistic <name> {...}` now works. (#2764); * Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763); * Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770); * Raise an error when a user requests more roots of detci than there are determinants. (#2779, #2780); * Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied (#2818); * Previous to QCEngine v0.26.0 (now required), the pairwise dispersion analysis returned by executable/classic/psi4-channel dftd3 was scaled differently from that by s-dftd3 and dftd4 (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A co",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:12118,Availability,error,error,12118," led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731); * Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759); * Fixed so `basis_relativistic <name> {...}` now works. (#2764); * Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763); * Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770); * Raise an error when a user requests more roots of detci than there are determinants. (#2779, #2780); * Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied (#2818); * Previous to QCEngine v0.26.0 (now required), the pairwise dispersion analysis returned by executable/classic/psi4-channel dftd3 was scaled differently from that by s-dftd3 and dftd4 (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A consistent set are QCEngine >=0.26.0 and Empirical_Disp.dat file generated in the course of energy(""fisapt0-d"") by v1.7 or later Psi4 and script fsapt.py released with Psi4 v1.7 or later. This is semi-enforced since v1.7 requires v0.26 (fsapt.py is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and fsapt.py <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped. (#2791). ## Known Bugs; Find them and tell us. <!-- ## Skipped; #2585, #2589, #25",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:202,Deployability,install,installers,202,"Advertised Version: 1.7; Continuous Version: 1.7; Release Date: 6 Dec 2022; NYI Documentation: https://psicode.org/psi4manual/1.7.0/; Availability: Public, GitHub source, CMake build, NYI [Conda binary installers](https://psicode.netlify.com/installs/v17/); Span: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1). ## Required Dependency Changes. ## New Methods. * Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks main",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:242,Deployability,install,installs,242,"Advertised Version: 1.7; Continuous Version: 1.7; Release Date: 6 Dec 2022; NYI Documentation: https://psicode.org/psi4manual/1.7.0/; Availability: Public, GitHub source, CMake build, NYI [Conda binary installers](https://psicode.netlify.com/installs/v17/); Span: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1). ## Required Dependency Changes. ## New Methods. * Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks main",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:10701,Deployability,deploy,deploying,10701,"-D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, s9:=0.0). When s-dftd3 is the engine, another set of new extensions, e.g., -d3atm alias of -d3zeroatm turns on 3-body (s9=1.0) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., energy(""b3lyp-d3atm"") — and Psi4 will figure out if you have the right engine to do the job. (#2791); * psi4.core.Molecule.run_dftd3 and qcdb.Molecule.run_dftd3 don't work with s-dftd3. Please file an issue if you really want this capability. run_gcp will use classic gcp or mctc-gcp interchangeably, whichever you have available. (#2791). ## Bug Fixes. * Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669); * Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653); * Worked around Intel compiler bug. (#2625); * Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673); * Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order m",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:12761,Deployability,release,released,12761," Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731); * Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759); * Fixed so `basis_relativistic <name> {...}` now works. (#2764); * Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763); * Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770); * Raise an error when a user requests more roots of detci than there are determinants. (#2779, #2780); * Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied (#2818); * Previous to QCEngine v0.26.0 (now required), the pairwise dispersion analysis returned by executable/classic/psi4-channel dftd3 was scaled differently from that by s-dftd3 and dftd4 (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A consistent set are QCEngine >=0.26.0 and Empirical_Disp.dat file generated in the course of energy(""fisapt0-d"") by v1.7 or later Psi4 and script fsapt.py released with Psi4 v1.7 or later. This is semi-enforced since v1.7 requires v0.26 (fsapt.py is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and fsapt.py <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped. (#2791). ## Known Bugs; Find them and tell us. <!-- ## Skipped; #2585, #2589, #2597, #2629, #2644, #2650, #2646, #2658, #2664, #2639, #2691, #2699, #2718, #2723, #2744, #2757, #2755, #2761, #2771, #2781, #2790, #2807, #2811, #2822, #2820; -->",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:8910,Energy Efficiency,energy,energy,8910,"u notice a problem. (#2758); * LinearK algorithm has been removed as an option to SCF_TYPE=DIRECT (`DO_LINK` is no longer an option). It has been added back through `SCF_TYPE=LINK` that enables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768); * Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallo",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:8928,Energy Efficiency,energy,energy,8928,"u notice a problem. (#2758); * LinearK algorithm has been removed as an option to SCF_TYPE=DIRECT (`DO_LINK` is no longer an option). It has been added back through `SCF_TYPE=LINK` that enables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768); * Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallo",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:8947,Energy Efficiency,energy,energy,8947,"u notice a problem. (#2758); * LinearK algorithm has been removed as an option to SCF_TYPE=DIRECT (`DO_LINK` is no longer an option). It has been added back through `SCF_TYPE=LINK` that enables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768); * Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallo",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:9137,Energy Efficiency,energy,energy,9137,"nables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768); * Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, s9:=0.0). When s-dftd3 is the engine, another set of new extensions, e.g., -d3atm alias of -d3zeroatm turns on 3-body (s9=1.0) and allows u",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:10284,Energy Efficiency,energy,energy,10284,"th a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, s9:=0.0). When s-dftd3 is the engine, another set of new extensions, e.g., -d3atm alias of -d3zeroatm turns on 3-body (s9=1.0) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., energy(""b3lyp-d3atm"") — and Psi4 will figure out if you have the right engine to do the job. (#2791); * psi4.core.Molecule.run_dftd3 and qcdb.Molecule.run_dftd3 don't work with s-dftd3. Please file an issue if you really want this capability. run_gcp will use classic gcp or mctc-gcp interchangeably, whichever you have available. (#2791). ## Bug Fixes. * Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669); * Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653); * Worked around Intel compiler bug. (#2625); * Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673); * Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:11211,Energy Efficiency,charge,charges,11211,"default. If this seems confusing, state what calc you want — e.g., energy(""b3lyp-d3atm"") — and Psi4 will figure out if you have the right engine to do the job. (#2791); * psi4.core.Molecule.run_dftd3 and qcdb.Molecule.run_dftd3 don't work with s-dftd3. Please file an issue if you really want this capability. run_gcp will use classic gcp or mctc-gcp interchangeably, whichever you have available. (#2791). ## Bug Fixes. * Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669); * Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653); * Worked around Intel compiler bug. (#2625); * Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673); * Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731); * Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759); * Fixed so `basis_relativistic <name> {...}` now works. (#2764); * Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763); * Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770); * Raise an error when a user requests more roots of detci than there are determinants. (#2779, #2780); * Fixed ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:12699,Energy Efficiency,energy,energy,12699," Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731); * Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759); * Fixed so `basis_relativistic <name> {...}` now works. (#2764); * Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763); * Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770); * Raise an error when a user requests more roots of detci than there are determinants. (#2779, #2780); * Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied (#2818); * Previous to QCEngine v0.26.0 (now required), the pairwise dispersion analysis returned by executable/classic/psi4-channel dftd3 was scaled differently from that by s-dftd3 and dftd4 (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A consistent set are QCEngine >=0.26.0 and Empirical_Disp.dat file generated in the course of energy(""fisapt0-d"") by v1.7 or later Psi4 and script fsapt.py released with Psi4 v1.7 or later. This is semi-enforced since v1.7 requires v0.26 (fsapt.py is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and fsapt.py <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped. (#2791). ## Known Bugs; Find them and tell us. <!-- ## Skipped; #2585, #2589, #2597, #2629, #2644, #2650, #2646, #2658, #2664, #2639, #2691, #2699, #2718, #2723, #2744, #2757, #2755, #2761, #2771, #2781, #2790, #2807, #2811, #2822, #2820; -->",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:1665,Integrability,depend,dependency,1665,"6.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:1955,Integrability,interface,interfaced,1955," of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from glob",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:3650,Integrability,contract,contracts,3650,"`set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:4684,Integrability,depend,depend,4684,"omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611); * Updates LibXC interface so that one can set omega for any functional that contains it, rather than only for a hardcoded list of functionals. (#2643); * References with more beta than alpha orbitals of a given irrep can now be represented, as docc and socc are computed from alpha and beta rather than the other way around. (#2619); * Adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores. (#2667); * Incremental Fock builds; * Turn off incfock by default for SCF_TYPE=COSX for greater reliability. (#2689); * Standardizes the incfock implementation of DFJLinK toward the model of DFJCOSK, thereby improving memory us",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:4792,Integrability,interface,interface,4792,"nd dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611); * Updates LibXC interface so that one can set omega for any functional that contains it, rather than only for a hardcoded list of functionals. (#2643); * References with more beta than alpha orbitals of a given irrep can now be represented, as docc and socc are computed from alpha and beta rather than the other way around. (#2619); * Adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores. (#2667); * Incremental Fock builds; * Turn off incfock by default for SCF_TYPE=COSX for greater reliability. (#2689); * Standardizes the incfock implementation of DFJLinK toward the model of DFJCOSK, thereby improving memory usage. (#2792); * Standardizes the incfock implementation of DirectJK toward the model of DFJCOSK, thereby improving memory usage. (#2808); * Enhances the incf",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:7423,Integrability,message,messages,7423,"nal result but instead set BCCD-specific variables from the final iteration and some other variables from the first iteration. BRUECKNER_ORBS_R_CONVERGENCE parameter tightened when defaulting from E_CONVERGENCE. (#2708); * Renovate PSIO to improve error messaging. (#2711, #2700, #2724, #2741, #2756, #2773); * Improve Matrix/Vector tech.; * Refactor Vector and IntVector. (#2628, #2705); * Allow non-symmetric matrix <-> dpdfile2. (#2722); * `Matrix::set_block` can be used on matrices that are not totally symmetric. (#2734); * Check Matrix size compatability in gemm(). (#2729); * Improved `Matrix::transform`'s ability to handle edge cases. (#2748); * Improved Matrix::back_transform's ability to handle edge cases. (#2745); * `Matrix::get_block` can be used on matrices that are not totally symmetric. (#2752); * Running DF through CCENERGY (experimental, expert only) may now require set qc_module ccenergy. (#2731); * Many NYI messages, whether from `ManagedMethodError`, `MissingMethodError`, or plain `ValidationError` from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes. (#2731); * Capabilities tables in documentation made more detailed and thorough; autogenerated from tests. (#2731); * Modified the orbital instability following procedure. This should be a minor change for most applications: contact developers if you notice a problem. (#2758); * LinearK algorithm has been removed as an option to SCF_TYPE=DIRECT (`DO_LINK` is no longer an option). It has been added back through `SCF_TYPE=LINK` that enables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768); * Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instabili",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:9338,Integrability,wrap,wrapper,9338," difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, s9:=0.0). When s-dftd3 is the engine, another set of new extensions, e.g., -d3atm alias of -d3zeroatm turns on 3-body (s9=1.0) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., energy(""b3lyp-d3atm"") — and Psi4",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:11621,Integrability,message,messages,11621,"able. (#2791). ## Bug Fixes. * Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669); * Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653); * Worked around Intel compiler bug. (#2625); * Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673); * Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731); * Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759); * Fixed so `basis_relativistic <name> {...}` now works. (#2764); * Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763); * Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770); * Raise an error when a user requests more roots of detci than there are determinants. (#2779, #2780); * Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied (#2818); * Previous to QCEngine v0.26.0 (now required), the pairwise dispersion analysis returned by executable/classic/psi4-channel dftd3 was scaled differently from that by s-dftd3 and dftd4 (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A co",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:2858,Modifiability,plugin,plugin,2858,"eloped software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecu",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:5246,Modifiability,variab,variable,5246," #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611); * Updates LibXC interface so that one can set omega for any functional that contains it, rather than only for a hardcoded list of functionals. (#2643); * References with more beta than alpha orbitals of a given irrep can now be represented, as docc and socc are computed from alpha and beta rather than the other way around. (#2619); * Adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores. (#2667); * Incremental Fock builds; * Turn off incfock by default for SCF_TYPE=COSX for greater reliability. (#2689); * Standardizes the incfock implementation of DFJLinK toward the model of DFJCOSK, thereby improving memory usage. (#2792); * Standardizes the incfock implementation of DirectJK toward the model of DFJCOSK, thereby improving memory usage. (#2808); * Enhances the incfock implementation of DFJCOSK to be like the others: controlled by `INCFOCK` keyword (replacing `COSX_INCFOCK`), able to recompute the full Fock matrix every n iterations controlled by `INCFOCK_FULL_FOCK_EVERY`, and able to disable incfock at a certain `INCFOCK_CONVERGENCE` threshold. (#2816); * Update CC* modules toward internal use of Wavefu",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:5288,Modifiability,flexible,flexible,5288,"2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611); * Updates LibXC interface so that one can set omega for any functional that contains it, rather than only for a hardcoded list of functionals. (#2643); * References with more beta than alpha orbitals of a given irrep can now be represented, as docc and socc are computed from alpha and beta rather than the other way around. (#2619); * Adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores. (#2667); * Incremental Fock builds; * Turn off incfock by default for SCF_TYPE=COSX for greater reliability. (#2689); * Standardizes the incfock implementation of DFJLinK toward the model of DFJCOSK, thereby improving memory usage. (#2792); * Standardizes the incfock implementation of DirectJK toward the model of DFJCOSK, thereby improving memory usage. (#2808); * Enhances the incfock implementation of DFJCOSK to be like the others: controlled by `INCFOCK` keyword (replacing `COSX_INCFOCK`), able to recompute the full Fock matrix every n iterations controlled by `INCFOCK_FULL_FOCK_EVERY`, and able to disable incfock at a certain `INCFOCK_CONVERGENCE` threshold. (#2816); * Update CC* modules toward internal use of Wavefunction: remove unused code, MOInfo->Wfn data, Libmints for orbital rotation, use Matrix class, Slice notation, orbital indexing management. (#2703, #2696, #2704, #2715, #2719, #27",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:6530,Modifiability,variab,variables,6530,"ncremental Fock builds; * Turn off incfock by default for SCF_TYPE=COSX for greater reliability. (#2689); * Standardizes the incfock implementation of DFJLinK toward the model of DFJCOSK, thereby improving memory usage. (#2792); * Standardizes the incfock implementation of DirectJK toward the model of DFJCOSK, thereby improving memory usage. (#2808); * Enhances the incfock implementation of DFJCOSK to be like the others: controlled by `INCFOCK` keyword (replacing `COSX_INCFOCK`), able to recompute the full Fock matrix every n iterations controlled by `INCFOCK_FULL_FOCK_EVERY`, and able to disable incfock at a certain `INCFOCK_CONVERGENCE` threshold. (#2816); * Update CC* modules toward internal use of Wavefunction: remove unused code, MOInfo->Wfn data, Libmints for orbital rotation, use Matrix class, Slice notation, orbital indexing management. (#2703, #2696, #2704, #2715, #2719, #2720, #2751, #2753, #2782, #2786, #2812, #2818, #2826); * Brueckner CC no longer set QCVariable `CCSD TOTAL ENERGY` as the final result but instead set BCCD-specific variables from the final iteration and some other variables from the first iteration. BRUECKNER_ORBS_R_CONVERGENCE parameter tightened when defaulting from E_CONVERGENCE. (#2708); * Renovate PSIO to improve error messaging. (#2711, #2700, #2724, #2741, #2756, #2773); * Improve Matrix/Vector tech.; * Refactor Vector and IntVector. (#2628, #2705); * Allow non-symmetric matrix <-> dpdfile2. (#2722); * `Matrix::set_block` can be used on matrices that are not totally symmetric. (#2734); * Check Matrix size compatability in gemm(). (#2729); * Improved `Matrix::transform`'s ability to handle edge cases. (#2748); * Improved Matrix::back_transform's ability to handle edge cases. (#2745); * `Matrix::get_block` can be used on matrices that are not totally symmetric. (#2752); * Running DF through CCENERGY (experimental, expert only) may now require set qc_module ccenergy. (#2731); * Many NYI messages, whether from `ManagedMethodError`, `Mi",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:6580,Modifiability,variab,variables,6580,"ncremental Fock builds; * Turn off incfock by default for SCF_TYPE=COSX for greater reliability. (#2689); * Standardizes the incfock implementation of DFJLinK toward the model of DFJCOSK, thereby improving memory usage. (#2792); * Standardizes the incfock implementation of DirectJK toward the model of DFJCOSK, thereby improving memory usage. (#2808); * Enhances the incfock implementation of DFJCOSK to be like the others: controlled by `INCFOCK` keyword (replacing `COSX_INCFOCK`), able to recompute the full Fock matrix every n iterations controlled by `INCFOCK_FULL_FOCK_EVERY`, and able to disable incfock at a certain `INCFOCK_CONVERGENCE` threshold. (#2816); * Update CC* modules toward internal use of Wavefunction: remove unused code, MOInfo->Wfn data, Libmints for orbital rotation, use Matrix class, Slice notation, orbital indexing management. (#2703, #2696, #2704, #2715, #2719, #2720, #2751, #2753, #2782, #2786, #2812, #2818, #2826); * Brueckner CC no longer set QCVariable `CCSD TOTAL ENERGY` as the final result but instead set BCCD-specific variables from the final iteration and some other variables from the first iteration. BRUECKNER_ORBS_R_CONVERGENCE parameter tightened when defaulting from E_CONVERGENCE. (#2708); * Renovate PSIO to improve error messaging. (#2711, #2700, #2724, #2741, #2756, #2773); * Improve Matrix/Vector tech.; * Refactor Vector and IntVector. (#2628, #2705); * Allow non-symmetric matrix <-> dpdfile2. (#2722); * `Matrix::set_block` can be used on matrices that are not totally symmetric. (#2734); * Check Matrix size compatability in gemm(). (#2729); * Improved `Matrix::transform`'s ability to handle edge cases. (#2748); * Improved Matrix::back_transform's ability to handle edge cases. (#2745); * `Matrix::get_block` can be used on matrices that are not totally symmetric. (#2752); * Running DF through CCENERGY (experimental, expert only) may now require set qc_module ccenergy. (#2731); * Many NYI messages, whether from `ManagedMethodError`, `Mi",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:9020,Modifiability,variab,variable,9020,"F_TYPE=DIRECT (`DO_LINK` is no longer an option). It has been added back through `SCF_TYPE=LINK` that enables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768); * Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, s9:=0.0). When s-dftd3 is the engine",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:774,Performance,optimiz,optimized,774,"Advertised Version: 1.7; Continuous Version: 1.7; Release Date: 6 Dec 2022; NYI Documentation: https://psicode.org/psi4manual/1.7.0/; Availability: Public, GitHub source, CMake build, NYI [Conda binary installers](https://psicode.netlify.com/installs/v17/); Span: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1). ## Required Dependency Changes. ## New Methods. * Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks main",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:1258,Performance,optimiz,optimizer,1258,"pan: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1). ## Required Dependency Changes. ## New Methods. * Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little differ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:1383,Performance,optimiz,optimization,1383,"EMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoole",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:3095,Performance,optimiz,optimized,3095,"through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and remo",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:8583,Performance,tune,tuned,8583,". On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes. (#2731); * Capabilities tables in documentation made more detailed and thorough; autogenerated from tests. (#2731); * Modified the orbital instability following procedure. This should be a minor change for most applications: contact developers if you notice a problem. (#2758); * LinearK algorithm has been removed as an option to SCF_TYPE=DIRECT (`DO_LINK` is no longer an option). It has been added back through `SCF_TYPE=LINK` that enables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768); * Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slig",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:9416,Performance,optimiz,optimized,9416,"use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, s9:=0.0). When s-dftd3 is the engine, another set of new extensions, e.g., -d3atm alias of -d3zeroatm turns on 3-body (s9=1.0) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., energy(""b3lyp-d3atm"") — and Psi4 will figure out if you have the right engine to do the job. (#2791); * psi4.core.Molecule.run_dftd3 and qcdb.Molecu",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:11579,Performance,perform,performs,11579,"able. (#2791). ## Bug Fixes. * Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669); * Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653); * Worked around Intel compiler bug. (#2625); * Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673); * Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731); * Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759); * Fixed so `basis_relativistic <name> {...}` now works. (#2764); * Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763); * Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770); * Raise an error when a user requests more roots of detci than there are determinants. (#2779, #2780); * Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied (#2818); * Previous to QCEngine v0.26.0 (now required), the pairwise dispersion analysis returned by executable/classic/psi4-channel dftd3 was scaled differently from that by s-dftd3 and dftd4 (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A co",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:2166,Safety,detect,detected,2166,"#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:3379,Safety,avoid,avoids,3379,", @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:3386,Safety,redund,redundant,3386,", @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:11153,Security,access,accessing,11153," tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., energy(""b3lyp-d3atm"") — and Psi4 will figure out if you have the right engine to do the job. (#2791); * psi4.core.Molecule.run_dftd3 and qcdb.Molecule.run_dftd3 don't work with s-dftd3. Please file an issue if you really want this capability. run_gcp will use classic gcp or mctc-gcp interchangeably, whichever you have available. (#2791). ## Bug Fixes. * Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669); * Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653); * Worked around Intel compiler bug. (#2625); * Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673); * Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731); * Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759); * Fixed so `basis_relativistic <name> {...}` now works. (#2764); * Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763); * Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770); * Raise an error when a user request",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:1542,Testability,log,log,1542,"brid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahat",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:3611,Testability,test,testing,3611,"`set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:7803,Testability,test,tests,7803,"#2711, #2700, #2724, #2741, #2756, #2773); * Improve Matrix/Vector tech.; * Refactor Vector and IntVector. (#2628, #2705); * Allow non-symmetric matrix <-> dpdfile2. (#2722); * `Matrix::set_block` can be used on matrices that are not totally symmetric. (#2734); * Check Matrix size compatability in gemm(). (#2729); * Improved `Matrix::transform`'s ability to handle edge cases. (#2748); * Improved Matrix::back_transform's ability to handle edge cases. (#2745); * `Matrix::get_block` can be used on matrices that are not totally symmetric. (#2752); * Running DF through CCENERGY (experimental, expert only) may now require set qc_module ccenergy. (#2731); * Many NYI messages, whether from `ManagedMethodError`, `MissingMethodError`, or plain `ValidationError` from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes. (#2731); * Capabilities tables in documentation made more detailed and thorough; autogenerated from tests. (#2731); * Modified the orbital instability following procedure. This should be a minor change for most applications: contact developers if you notice a problem. (#2758); * LinearK algorithm has been removed as an option to SCF_TYPE=DIRECT (`DO_LINK` is no longer an option). It has been added back through `SCF_TYPE=LINK` that enables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768); * Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:1502,Usability,simpl,simple,1502,"NV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sa",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.7:4122,Usability,clear,clearing,4122," methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669); * Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669); * Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, ); * Replacing `ERISieve` (#2660, #2657, #2659); * Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727); * Improve docs reliability by turning on strict checking and running at PR time. (#2607); * Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605); * If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611); * Updates LibXC interface so that one can set omega for any functional that contains it, rather than only for a hardcoded list of functionals. (#2643); * References with more beta than alpha orbitals of a given irrep can now be represented, as docc and socc are computed from alpha and beta rather than the other way around. (#26",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
https://github.com/psi4/psi4/releases/tag/v1.6:1452,Availability,avail,available,1452," to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals and F12 integrals. See details below and summary at https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview. (#2527); * Ambit >=v0.6 required if ambit enabled. (#2546); * For CheMPS2, DMRG densities saved to wavefunction to allow natural orbitals. (#2570, #2558). ## Contributors to v1.6. @alenaizan, @andyj10224, @brianz98, @carolinesargent, @cgbriggs99, @e-kwsm, @konpat, @lazaroid, @phili",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:1510,Availability,avail,available,1510,"ependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals and F12 integrals. See details below and summary at https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview. (#2527); * Ambit >=v0.6 required if ambit enabled. (#2546); * For CheMPS2, DMRG densities saved to wavefunction to allow natural orbitals. (#2570, #2558). ## Contributors to v1.6. @alenaizan, @andyj10224, @brianz98, @carolinesargent, @cgbriggs99, @e-kwsm, @konpat, @lazaroid, @philipmnel, @susilehtola, @TiborGY, @timostrunk, @andysim, @hokr",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4640,Availability,error,errors,4640,"uidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Perfo",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:10044,Availability,avail,available,10044,"2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Various n-body QCVariables have been renamed. Old ones will work for a while. (#2575); ```; # from: to; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED T",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:10233,Availability,avail,available,10233,"t form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Various n-body QCVariables have been renamed. Old ones will work for a while. (#2575); ```; # from: to; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:11878,Availability,error,error,11878,"CTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ```; * The output generated from wrappers (cbs/composite, findif/finite difference, manybody/nbody) now writes the single-point calc to the output file after completion, not in real-time. Ordinary analytic single-point calcs continue to write to output in real-time. (#2575). ## Bug Fixes. * Allow MBIS volume ratios to be called from `set scf_properties ['MBIS_VOLUME_RATIOS']`. This is equivalent to the already-working `oeprop(...,'MBIS_VOLUME_RATIOS')` but now can be used with a QCSchema call. (#2299, #2370); * Fixes error in MBE VMFC Hessian. (#2389); * Fixes bug in `compare_recursive()` (#2397); * Fixes bug where `fchk()` couldn't be run on a Wavefunction deserialized from file (#2400, #2408); * Fixes bug in MemDFJK affecting TD-DFT excitation spectra with range-separated functionals in asymmetric case. (#2431, #2435); * Avert segfault for non-RHF CC response properties. (#2310, #2450); * Fixes export of left eigenvector beta in TDSCF scf_response.py. (#2452, #2453); * Fixes parallel scaling of Libint2 one-electron integrals by using new Libint2. (#2491, #2413); * Fixes finding ambit when specialty ambit path given. (#2500); * Fixes bug with Karton 2-point SCF extrapolation. (#2526); * Fixes bug where `allen_focal_point` wasn't working because higher deltas were getting lopped off. (#2532); * Fixes CC properties naming bug by making OEProp names flexible. (#2534); * Fixes fcidump.py handling of frozen orbitals. (#2545); * Fixes incremental Fock convergence bug. (#2550); * Fixes bug where non-physi",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:199,Deployability,install,installers,199,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:239,Deployability,install,installs,239,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:3656,Deployability,update,update,3656,"ossible adjustment to environment keyword. (#2393); * Scalar Debye-based n-pole components QCVariables are retired, replaced by atomic-units arrays (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors a",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:2853,Energy Efficiency,charge,charges,2853," Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals and F12 integrals. See details below and summary at https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview. (#2527); * Ambit >=v0.6 required if ambit enabled. (#2546); * For CheMPS2, DMRG densities saved to wavefunction to allow natural orbitals. (#2570, #2558). ## Contributors to v1.6. @alenaizan, @andyj10224, @brianz98, @carolinesargent, @cgbriggs99, @e-kwsm, @konpat, @lazaroid, @philipmnel, @susilehtola, @TiborGY, @timostrunk, @andysim, @hokru, @jeffschriber, @JonathonMisiewicz, @jturney, @loriab, @maxscheurer, @zachglick. ## Breaking Changes. * Require adcc 0.15.9 and possible adjustment to environment keyword. (#2393); * Scalar Debye-based n-pole components QCVariables are retired, replaced by atomic-units arrays (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values report",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:2992,Energy Efficiency,charge,charges,2992,"See details below and summary at https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview. (#2527); * Ambit >=v0.6 required if ambit enabled. (#2546); * For CheMPS2, DMRG densities saved to wavefunction to allow natural orbitals. (#2570, #2558). ## Contributors to v1.6. @alenaizan, @andyj10224, @brianz98, @carolinesargent, @cgbriggs99, @e-kwsm, @konpat, @lazaroid, @philipmnel, @susilehtola, @TiborGY, @timostrunk, @andysim, @hokru, @jeffschriber, @JonathonMisiewicz, @jturney, @loriab, @maxscheurer, @zachglick. ## Breaking Changes. * Require adcc 0.15.9 and possible adjustment to environment keyword. (#2393); * Scalar Debye-based n-pole components QCVariables are retired, replaced by atomic-units arrays (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecti",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:3417,Energy Efficiency,energy,energy,3417,"zaroid, @philipmnel, @susilehtola, @TiborGY, @timostrunk, @andysim, @hokru, @jeffschriber, @JonathonMisiewicz, @jturney, @loriab, @maxscheurer, @zachglick. ## Breaking Changes. * Require adcc 0.15.9 and possible adjustment to environment keyword. (#2393); * Scalar Debye-based n-pole components QCVariables are retired, replaced by atomic-units arrays (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs b",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:3477,Energy Efficiency,energy,energy,3477,"rGY, @timostrunk, @andysim, @hokru, @jeffschriber, @JonathonMisiewicz, @jturney, @loriab, @maxscheurer, @zachglick. ## Breaking Changes. * Require adcc 0.15.9 and possible adjustment to environment keyword. (#2393); * Scalar Debye-based n-pole components QCVariables are retired, replaced by atomic-units arrays (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:3711,Energy Efficiency,energy,energy,3711,"s (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `c",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:3821,Energy Efficiency,energy,energy,3821,"s (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `c",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4260,Energy Efficiency,energy,energy,4260,"unction` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no lon",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4399,Energy Efficiency,energy,energy,4399,"unction` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no lon",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4519,Energy Efficiency,energy,energy,4519,"ogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4801,Energy Efficiency,energy,energy-conv,4801,"so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#23",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:5017,Energy Efficiency,energy,energy,5017,"radient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#2378). ## Details of Interest. * Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384); * Remove potentially buggy convergence metric in DCT. (#2381); * Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382); * Me",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:5068,Energy Efficiency,energy,energy,5068,"radient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#2378). ## Details of Interest. * Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384); * Remove potentially buggy convergence metric in DCT. (#2381); * Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382); * Me",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:5177,Energy Efficiency,energy,energy,5177,"radient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#2378). ## Details of Interest. * Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384); * Remove potentially buggy convergence metric in DCT. (#2381); * Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382); * Me",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:5217,Energy Efficiency,energy,energy,5217,"radient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#2378). ## Details of Interest. * Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384); * Remove potentially buggy convergence metric in DCT. (#2381); * Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382); * Me",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:5371,Energy Efficiency,charge,charges,5371,"g their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#2378). ## Details of Interest. * Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384); * Remove potentially buggy convergence metric in DCT. (#2381); * Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382); * Memory/const cleanup (DMRG #2383; FittingMetric #2417; SCF #2425; FNOCC #2421, #2444, #2561; CCDENSITY #2438; CCEOM #2466); MERGE* Move DIIS to Python, and implement ADIIS/EDIIS (#2369, #2387, #2436, #2445, #2449); * Allow C++17 syntax in code (#2392); * Fix gu",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:9952,Energy Efficiency,energy,energy,9952," (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Various n-body QCVariables have been renamed. Old ones will work for a while. (#2575); ```; # from: to; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUN",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:10083,Energy Efficiency,energy,energy,10083,"w advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Various n-body QCVariables have been renamed. Old ones will work for a while. (#2575); ```; # from: to; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTE",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:515,Integrability,depend,dependency,515,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:578,Integrability,interface,interface,578,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4184,Integrability,wrap,wrapper,4184,"t objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:5300,Integrability,wrap,wrapper,5300,"g their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#2378). ## Details of Interest. * Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384); * Remove potentially buggy convergence metric in DCT. (#2381); * Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382); * Memory/const cleanup (DMRG #2383; FittingMetric #2417; SCF #2425; FNOCC #2421, #2444, #2561; CCDENSITY #2438; CCEOM #2466); MERGE* Move DIIS to Python, and implement ADIIS/EDIIS (#2369, #2387, #2436, #2445, #2449); * Allow C++17 syntax in code (#2392); * Fix gu",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:9617,Integrability,depend,dependent,9617,"://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527); * F12 integrals. (#2502); * Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Various n-body QCVariables have been renamed. Old ones will work for a while. (#2575); ```; # from: to; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTE",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:9885,Integrability,wrap,wrappers,9885,"); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Various n-body QCVariables have been renamed. Old ones will work for a while. (#2575); ```; # from: to; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL EN",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:11388,Integrability,wrap,wrappers,11388," from: to; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ```; * The output generated from wrappers (cbs/composite, findif/finite difference, manybody/nbody) now writes the single-point calc to the output file after completion, not in real-time. Ordinary analytic single-point calcs continue to write to output in real-time. (#2575). ## Bug Fixes. * Allow MBIS volume ratios to be called from `set scf_properties ['MBIS_VOLUME_RATIOS']`. This is equivalent to the already-working `oeprop(...,'MBIS_VOLUME_RATIOS')` but now can be used with a QCSchema call. (#2299, #2370); * Fixes error in MBE VMFC Hessian. (#2389); * Fixes bug in `compare_recursive()` (#2397); * Fixes bug where `fchk()` couldn't be run on a Wavefunction deserialized from file (#2400, #2408); * Fixes bug in MemDFJK affecting TD-DFT excitation spectra with range-separated functionals in asymmetric case. (#2431, #2435); * Avert segfault for non-RHF CC response properties. (#2310, #2450); * Fixes export of left eigenvector beta in TDSCF scf_response.py. (#2452, #2453); * Fixes parallel scaling of Libint2 one-electron integrals by using new Libint2. (#2491, #2413); * Fixes fi",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:12725,Modifiability,flexible,flexible,12725,"o write to output in real-time. (#2575). ## Bug Fixes. * Allow MBIS volume ratios to be called from `set scf_properties ['MBIS_VOLUME_RATIOS']`. This is equivalent to the already-working `oeprop(...,'MBIS_VOLUME_RATIOS')` but now can be used with a QCSchema call. (#2299, #2370); * Fixes error in MBE VMFC Hessian. (#2389); * Fixes bug in `compare_recursive()` (#2397); * Fixes bug where `fchk()` couldn't be run on a Wavefunction deserialized from file (#2400, #2408); * Fixes bug in MemDFJK affecting TD-DFT excitation spectra with range-separated functionals in asymmetric case. (#2431, #2435); * Avert segfault for non-RHF CC response properties. (#2310, #2450); * Fixes export of left eigenvector beta in TDSCF scf_response.py. (#2452, #2453); * Fixes parallel scaling of Libint2 one-electron integrals by using new Libint2. (#2491, #2413); * Fixes finding ambit when specialty ambit path given. (#2500); * Fixes bug with Karton 2-point SCF extrapolation. (#2526); * Fixes bug where `allen_focal_point` wasn't working because higher deltas were getting lopped off. (#2532); * Fixes CC properties naming bug by making OEProp names flexible. (#2534); * Fixes fcidump.py handling of frozen orbitals. (#2545); * Fixes incremental Fock convergence bug. (#2550); * Fixes bug where non-physical masses couldn't run through QCSchema. (#2557); * Fixes testing bug where `pytest psi4/` would pick up unconfigured tests so one had to use `pytest psi4/tests/`. (#2549); * Fixes dftd3/gcp/mp2d on single cpu job. (#2548, #2549); * Fixes single-atom Hessian by finite difference. (#1683, #2552); * Fixes bad performance where SCF gradients took longer with more threads. (#2559, #2581). ## Known Bugs; Find them and tell us. <!-- ## Skipped; #2367, #2373, #2391, #2394, #2402/#2409, #2406, #2418, #2423, #2422, #2424, #2426, #2441, #2446, #2448, #2428, #2415, #2459, #2464, #2455, #2467, #2468, #2471, #2474, #2482, #2484, #2465, #2494, #2501, #2509, #2511, #2518, #2528, #2531, #2539, #2540, #2458, #2574 -->",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:5696,Performance,perform,performance,5696," example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#2378). ## Details of Interest. * Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384); * Remove potentially buggy convergence metric in DCT. (#2381); * Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382); * Memory/const cleanup (DMRG #2383; FittingMetric #2417; SCF #2425; FNOCC #2421, #2444, #2561; CCDENSITY #2438; CCEOM #2466); MERGE* Move DIIS to Python, and implement ADIIS/EDIIS (#2369, #2387, #2436, #2445, #2449); * Allow C++17 syntax in code (#2392); * Fix guess mix with SAD and other guesses. (#2411); * Expose to Python (`Vector.clone()` #2375; `FittingMetric` #2420; `DIISManager::reset_subspace()` #2437; OEProp #2507); * Add an atomic blocking scheme for quadrature grid points (needed for COSX and ddCOSMO). (#2336); * Reform `ccdensity` keywords around OPDM relaxation. Keywords `ONEPDM`, `OPDM_ONLY`, `ONEPDM_GRID_DUMP`, and `OPDM_GRID_DUMP` affe",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:13189,Performance,perform,performance,13189,"o write to output in real-time. (#2575). ## Bug Fixes. * Allow MBIS volume ratios to be called from `set scf_properties ['MBIS_VOLUME_RATIOS']`. This is equivalent to the already-working `oeprop(...,'MBIS_VOLUME_RATIOS')` but now can be used with a QCSchema call. (#2299, #2370); * Fixes error in MBE VMFC Hessian. (#2389); * Fixes bug in `compare_recursive()` (#2397); * Fixes bug where `fchk()` couldn't be run on a Wavefunction deserialized from file (#2400, #2408); * Fixes bug in MemDFJK affecting TD-DFT excitation spectra with range-separated functionals in asymmetric case. (#2431, #2435); * Avert segfault for non-RHF CC response properties. (#2310, #2450); * Fixes export of left eigenvector beta in TDSCF scf_response.py. (#2452, #2453); * Fixes parallel scaling of Libint2 one-electron integrals by using new Libint2. (#2491, #2413); * Fixes finding ambit when specialty ambit path given. (#2500); * Fixes bug with Karton 2-point SCF extrapolation. (#2526); * Fixes bug where `allen_focal_point` wasn't working because higher deltas were getting lopped off. (#2532); * Fixes CC properties naming bug by making OEProp names flexible. (#2534); * Fixes fcidump.py handling of frozen orbitals. (#2545); * Fixes incremental Fock convergence bug. (#2550); * Fixes bug where non-physical masses couldn't run through QCSchema. (#2557); * Fixes testing bug where `pytest psi4/` would pick up unconfigured tests so one had to use `pytest psi4/tests/`. (#2549); * Fixes dftd3/gcp/mp2d on single cpu job. (#2548, #2549); * Fixes single-atom Hessian by finite difference. (#1683, #2552); * Fixes bad performance where SCF gradients took longer with more threads. (#2559, #2581). ## Known Bugs; Find them and tell us. <!-- ## Skipped; #2367, #2373, #2391, #2394, #2402/#2409, #2406, #2418, #2423, #2422, #2424, #2426, #2441, #2446, #2448, #2428, #2415, #2459, #2464, #2455, #2467, #2468, #2471, #2474, #2482, #2484, #2465, #2494, #2501, #2509, #2511, #2518, #2528, #2531, #2539, #2540, #2458, #2574 -->",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:387,Safety,avoid,avoided,387,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4001,Safety,safe,safety,4001,"ged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4050,Safety,unsafe,unsafe,4050,"keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:8786,Safety,sanity check,sanity checks,8786," all double shell loops to use Onebody object's shell pair list instead. (#2388); * Convert multipole potential ints to use McMurchie-Davidson recursions. (#2414); * Convert X2C ints to use L2 engines. (#2388); * Convert AngularMomentum ints to use McMurchie-Davidson recursions. (#2414; #2483); * Screening of one electron integrals to improve efficiency of PCM, EFP, and embedding methods. (#2388); * Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. (#2388); * Three-center overlap integrals using Libint2. (#2489); * Arbitrary-order multipole integrals (and gradients) with McMurchie-Davidson. (#2496); * Multipole Potential Integrals (for EFP/PE) with McMurchie-Davidson. (#2504); * Remove Obara-Saika recursion code. (#2517); * Algorithm summary https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527); * F12 integrals. (#2502); * Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:8803,Safety,avoid,avoid,8803," all double shell loops to use Onebody object's shell pair list instead. (#2388); * Convert multipole potential ints to use McMurchie-Davidson recursions. (#2414); * Convert X2C ints to use L2 engines. (#2388); * Convert AngularMomentum ints to use McMurchie-Davidson recursions. (#2414; #2483); * Screening of one electron integrals to improve efficiency of PCM, EFP, and embedding methods. (#2388); * Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. (#2388); * Three-center overlap integrals using Libint2. (#2489); * Arbitrary-order multipole integrals (and gradients) with McMurchie-Davidson. (#2496); * Multipole Potential Integrals (for EFP/PE) with McMurchie-Davidson. (#2504); * Remove Obara-Saika recursion code. (#2517); * Algorithm summary https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527); * F12 integrals. (#2502); * Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:757,Testability,test,testing,757,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:3996,Testability,test,test,3996,"ged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4091,Testability,test,test,4091,"rapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:4814,Testability,test,test,4814,"so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#23",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:6810,Testability,test,testing,6810,"378). ## Details of Interest. * Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384); * Remove potentially buggy convergence metric in DCT. (#2381); * Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382); * Memory/const cleanup (DMRG #2383; FittingMetric #2417; SCF #2425; FNOCC #2421, #2444, #2561; CCDENSITY #2438; CCEOM #2466); MERGE* Move DIIS to Python, and implement ADIIS/EDIIS (#2369, #2387, #2436, #2445, #2449); * Allow C++17 syntax in code (#2392); * Fix guess mix with SAD and other guesses. (#2411); * Expose to Python (`Vector.clone()` #2375; `FittingMetric` #2420; `DIISManager::reset_subspace()` #2437; OEProp #2507); * Add an atomic blocking scheme for quadrature grid points (needed for COSX and ddCOSMO). (#2336); * Reform `ccdensity` keywords around OPDM relaxation. Keywords `ONEPDM`, `OPDM_ONLY`, `ONEPDM_GRID_DUMP`, and `OPDM_GRID_DUMP` affected. (#2432, #2434); * Store cc* modules results in QCVariables and use them in testing. These include energies, left- and right-overlap vectors, dipole polarizability, specific rotation, quadrupole polarizability, oscillator strength, Einstein coefficients, rotatory strength. (#2440, #2443, #2447, #2451, #2456, #2460, #2461, #2508, #2514, #2525, #2541); * Reconcile excited-state QCVariable names in EOMCC, TDSCF, ADC, ADCC. Remove ""EOM-"" in some cases. In general, a value is stored in each of the following qcvars. (#2462, #2470, #2475, #2506, #2533, #2513, #2538, #2486, #2569). ```; ""{method} ROOT {global_idx_from} -> ROOT {global_idx_to} {property}""; ""{method} ROOT {global_idx_from} -> ROOT {global_idx_to} {property} - {transition_irrep} TRANSITION""; ""{method} ROOT {global_idx_from} ({irrep_from}) -> ROOT {global_idx_to} ({irrep_to}) {property}""; ""{method} ROOT {within_irrep_idx_from} (IN {irrep_from}) -> ROOT {within_irrep_idx_to} (IN {irrep_to}) {property}""; ```. * Libint2; * Switches one-electron integrals to Libint2. (#2388);",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:9168,Testability,test,tests,9168,"ds. (#2388); * Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. (#2388); * Three-center overlap integrals using Libint2. (#2489); * Arbitrary-order multipole integrals (and gradients) with McMurchie-Davidson. (#2496); * Multipole Potential Integrals (for EFP/PE) with McMurchie-Davidson. (#2504); * Remove Obara-Saika recursion code. (#2517); * Algorithm summary https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527); * F12 integrals. (#2502); * Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole d",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:9331,Testability,log,logging,9331,"Arbitrary-order multipole integrals (and gradients) with McMurchie-Davidson. (#2496); * Multipole Potential Integrals (for EFP/PE) with McMurchie-Davidson. (#2504); * Remove Obara-Saika recursion code. (#2517); * Algorithm summary https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527); * F12 integrals. (#2502); * Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Vario",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:9424,Testability,log,log,9424,"on. (#2496); * Multipole Potential Integrals (for EFP/PE) with McMurchie-Davidson. (#2504); * Remove Obara-Saika recursion code. (#2517); * Algorithm summary https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527); * F12 integrals. (#2502); * Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Various n-body QCVariables have been renamed. Old ones will work for a while.",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:9457,Testability,log,loglevel,9457,"tial Integrals (for EFP/PE) with McMurchie-Davidson. (#2504); * Remove Obara-Saika recursion code. (#2517); * Algorithm summary https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527); * F12 integrals. (#2502); * Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Various n-body QCVariables have been renamed. Old ones will work for a while. (#2575); ```; # from: to; ""CP-",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:9475,Testability,log,log,9475,"#2504); * Remove Obara-Saika recursion code. (#2517); * Algorithm summary https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527); * F12 integrals. (#2502); * Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Various n-body QCVariables have been renamed. Old ones will work for a while. (#2575); ```; # from: to; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTE",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:12938,Testability,test,testing,12938,"o write to output in real-time. (#2575). ## Bug Fixes. * Allow MBIS volume ratios to be called from `set scf_properties ['MBIS_VOLUME_RATIOS']`. This is equivalent to the already-working `oeprop(...,'MBIS_VOLUME_RATIOS')` but now can be used with a QCSchema call. (#2299, #2370); * Fixes error in MBE VMFC Hessian. (#2389); * Fixes bug in `compare_recursive()` (#2397); * Fixes bug where `fchk()` couldn't be run on a Wavefunction deserialized from file (#2400, #2408); * Fixes bug in MemDFJK affecting TD-DFT excitation spectra with range-separated functionals in asymmetric case. (#2431, #2435); * Avert segfault for non-RHF CC response properties. (#2310, #2450); * Fixes export of left eigenvector beta in TDSCF scf_response.py. (#2452, #2453); * Fixes parallel scaling of Libint2 one-electron integrals by using new Libint2. (#2491, #2413); * Fixes finding ambit when specialty ambit path given. (#2500); * Fixes bug with Karton 2-point SCF extrapolation. (#2526); * Fixes bug where `allen_focal_point` wasn't working because higher deltas were getting lopped off. (#2532); * Fixes CC properties naming bug by making OEProp names flexible. (#2534); * Fixes fcidump.py handling of frozen orbitals. (#2545); * Fixes incremental Fock convergence bug. (#2550); * Fixes bug where non-physical masses couldn't run through QCSchema. (#2557); * Fixes testing bug where `pytest psi4/` would pick up unconfigured tests so one had to use `pytest psi4/tests/`. (#2549); * Fixes dftd3/gcp/mp2d on single cpu job. (#2548, #2549); * Fixes single-atom Hessian by finite difference. (#1683, #2552); * Fixes bad performance where SCF gradients took longer with more threads. (#2559, #2581). ## Known Bugs; Find them and tell us. <!-- ## Skipped; #2367, #2373, #2391, #2394, #2402/#2409, #2406, #2418, #2423, #2422, #2424, #2426, #2441, #2446, #2448, #2428, #2415, #2459, #2464, #2455, #2467, #2468, #2471, #2474, #2482, #2484, #2465, #2494, #2501, #2509, #2511, #2518, #2528, #2531, #2539, #2540, #2458, #2574 -->",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:12998,Testability,test,tests,12998,"o write to output in real-time. (#2575). ## Bug Fixes. * Allow MBIS volume ratios to be called from `set scf_properties ['MBIS_VOLUME_RATIOS']`. This is equivalent to the already-working `oeprop(...,'MBIS_VOLUME_RATIOS')` but now can be used with a QCSchema call. (#2299, #2370); * Fixes error in MBE VMFC Hessian. (#2389); * Fixes bug in `compare_recursive()` (#2397); * Fixes bug where `fchk()` couldn't be run on a Wavefunction deserialized from file (#2400, #2408); * Fixes bug in MemDFJK affecting TD-DFT excitation spectra with range-separated functionals in asymmetric case. (#2431, #2435); * Avert segfault for non-RHF CC response properties. (#2310, #2450); * Fixes export of left eigenvector beta in TDSCF scf_response.py. (#2452, #2453); * Fixes parallel scaling of Libint2 one-electron integrals by using new Libint2. (#2491, #2413); * Fixes finding ambit when specialty ambit path given. (#2500); * Fixes bug with Karton 2-point SCF extrapolation. (#2526); * Fixes bug where `allen_focal_point` wasn't working because higher deltas were getting lopped off. (#2532); * Fixes CC properties naming bug by making OEProp names flexible. (#2534); * Fixes fcidump.py handling of frozen orbitals. (#2545); * Fixes incremental Fock convergence bug. (#2550); * Fixes bug where non-physical masses couldn't run through QCSchema. (#2557); * Fixes testing bug where `pytest psi4/` would pick up unconfigured tests so one had to use `pytest psi4/tests/`. (#2549); * Fixes dftd3/gcp/mp2d on single cpu job. (#2548, #2549); * Fixes single-atom Hessian by finite difference. (#1683, #2552); * Fixes bad performance where SCF gradients took longer with more threads. (#2559, #2581). ## Known Bugs; Find them and tell us. <!-- ## Skipped; #2367, #2373, #2391, #2394, #2402/#2409, #2406, #2418, #2423, #2422, #2424, #2426, #2441, #2446, #2448, #2428, #2415, #2459, #2464, #2455, #2467, #2468, #2471, #2474, #2482, #2484, #2465, #2494, #2501, #2509, #2511, #2518, #2528, #2531, #2539, #2540, #2458, #2574 -->",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:13035,Testability,test,tests,13035,"o write to output in real-time. (#2575). ## Bug Fixes. * Allow MBIS volume ratios to be called from `set scf_properties ['MBIS_VOLUME_RATIOS']`. This is equivalent to the already-working `oeprop(...,'MBIS_VOLUME_RATIOS')` but now can be used with a QCSchema call. (#2299, #2370); * Fixes error in MBE VMFC Hessian. (#2389); * Fixes bug in `compare_recursive()` (#2397); * Fixes bug where `fchk()` couldn't be run on a Wavefunction deserialized from file (#2400, #2408); * Fixes bug in MemDFJK affecting TD-DFT excitation spectra with range-separated functionals in asymmetric case. (#2431, #2435); * Avert segfault for non-RHF CC response properties. (#2310, #2450); * Fixes export of left eigenvector beta in TDSCF scf_response.py. (#2452, #2453); * Fixes parallel scaling of Libint2 one-electron integrals by using new Libint2. (#2491, #2413); * Fixes finding ambit when specialty ambit path given. (#2500); * Fixes bug with Karton 2-point SCF extrapolation. (#2526); * Fixes bug where `allen_focal_point` wasn't working because higher deltas were getting lopped off. (#2532); * Fixes CC properties naming bug by making OEProp names flexible. (#2534); * Fixes fcidump.py handling of frozen orbitals. (#2545); * Fixes incremental Fock convergence bug. (#2550); * Fixes bug where non-physical masses couldn't run through QCSchema. (#2557); * Fixes testing bug where `pytest psi4/` would pick up unconfigured tests so one had to use `pytest psi4/tests/`. (#2549); * Fixes dftd3/gcp/mp2d on single cpu job. (#2548, #2549); * Fixes single-atom Hessian by finite difference. (#1683, #2552); * Fixes bad performance where SCF gradients took longer with more threads. (#2559, #2581). ## Known Bugs; Find them and tell us. <!-- ## Skipped; #2367, #2373, #2391, #2394, #2402/#2409, #2406, #2418, #2423, #2422, #2424, #2426, #2441, #2446, #2448, #2428, #2415, #2459, #2464, #2455, #2467, #2468, #2471, #2474, #2482, #2484, #2465, #2494, #2501, #2509, #2511, #2518, #2528, #2531, #2539, #2540, #2458, #2574 -->",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:3663,Usability,guid,guidance,3663,"ossible adjustment to environment keyword. (#2393); * Scalar Debye-based n-pole components QCVariables are retired, replaced by atomic-units arrays (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors a",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.6:9384,Usability,simpl,simplified,9384,"Arbitrary-order multipole integrals (and gradients) with McMurchie-Davidson. (#2496); * Multipole Potential Integrals (for EFP/PE) with McMurchie-Davidson. (#2504); * Remove Obara-Saika recursion code. (#2517); * Algorithm summary https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527); * F12 integrals. (#2502); * Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488); * Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485); * Access Yukawa integrals from Libint2. (#2386); * Adapt DIIS for ambit (#2505); * Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454); * All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495); * A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575); * Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529); * Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530); * Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544); * Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536); * Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568); * Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575); * Add means of saving CCSD amplitudes in QCSchema through `extras[""psi4:tamps""]`. (#2328); * Vario",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
https://github.com/psi4/psi4/releases/tag/v1.5:480,Availability,avail,available,480,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:836,Availability,avail,available,836,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:1015,Availability,avail,available,1015,"mber 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), lib",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:1662,Availability,error,error,1662,"through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradient",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:2465,Availability,error,errors,2465,"vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).; - Fix MCSCF final energy mismatch (#2259); - Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).; - Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292).; - Fix fractional occupation with symmetry (#2280, #2290).; - Fix print spacing in FCIDUMP files for 1e and 0e (#2277).; - Fix a bug where MOM could clear all electrons (#2270).; - Fix handling of frozen core orbitals in SAPT between monomer and dimer parts. Common case is when one monomer is an alkali cation (#2271). ## Contributors to v1.5. @andyj10224, @maxscheurer, @kis-gergely-dzsi, @alenaizan, @Icyyork, @konpat, @zachglick, @susilehtola, @brianz98, @je",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:210,Deployability,install,installers,210,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:250,Deployability,install,installs,250,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:377,Deployability,install,installers,377,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:431,Deployability,install,install,431,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:980,Deployability,install,install,980,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:1035,Deployability,install,install,1035,"mber 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), lib",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:1125,Deployability,install,installed,1125,"mber 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), lib",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:2017,Deployability,integrat,integration,2017,"lso available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).; - Fix MCSCF final energy mismatch (#2259); - Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).; - Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292)",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:652,Energy Efficiency,energy,energy,652,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:767,Energy Efficiency,energy,energy,767,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:1711,Energy Efficiency,charge,charges,1711,"ced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT resu",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:2809,Energy Efficiency,energy,energy,2809,"ails of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).; - Fix MCSCF final energy mismatch (#2259); - Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).; - Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292).; - Fix fractional occupation with symmetry (#2280, #2290).; - Fix print spacing in FCIDUMP files for 1e and 0e (#2277).; - Fix a bug where MOM could clear all electrons (#2270).; - Fix handling of frozen core orbitals in SAPT between monomer and dimer parts. Common case is when one monomer is an alkali cation (#2271). ## Contributors to v1.5. @andyj10224, @maxscheurer, @kis-gergely-dzsi, @alenaizan, @Icyyork, @konpat, @zachglick, @susilehtola, @brianz98, @jeffschriber, @hokru, @loriab, @JonathonMisiewicz, @fevangelista, @andysim",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:509,Integrability,depend,dependencies,509,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:537,Integrability,depend,dependencies,537,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:729,Integrability,interface,interfaced,729,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:1112,Integrability,depend,dependencies,1112,"mber 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), lib",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:1292,Integrability,protocol,protocols,1292,".com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:1455,Integrability,rout,routines,1455,"560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling w",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:2017,Integrability,integrat,integration,2017,"lso available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).; - Fix MCSCF final energy mismatch (#2259); - Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).; - Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292)",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:2874,Integrability,depend,dependencies,2874,"ails of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).; - Fix MCSCF final energy mismatch (#2259); - Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).; - Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292).; - Fix fractional occupation with symmetry (#2280, #2290).; - Fix print spacing in FCIDUMP files for 1e and 0e (#2277).; - Fix a bug where MOM could clear all electrons (#2270).; - Fix handling of frozen core orbitals in SAPT between monomer and dimer parts. Common case is when one monomer is an alkali cation (#2271). ## Contributors to v1.5. @andyj10224, @maxscheurer, @kis-gergely-dzsi, @alenaizan, @Icyyork, @konpat, @zachglick, @susilehtola, @brianz98, @jeffschriber, @hokru, @loriab, @JonathonMisiewicz, @fevangelista, @andysim",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:1510,Modifiability,refactor,refactoring,1510,"560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling w",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:2198,Performance,perform,performance,2198,"lt.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).; - Fix MCSCF final energy mismatch (#2259); - Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).; - Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292).; - Fix fractional occupation with symmetry (#2280, #2290).; - Fix print spacing in FCIDUMP files for 1e and 0e (#2277).; - Fix a bug where MOM could clear all electrons (#2270).; - Fix handling of frozen core orbitals in SAPT ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.5:3162,Usability,clear,clear,3162,"ails of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).; - Fix MCSCF final energy mismatch (#2259); - Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).; - Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292).; - Fix fractional occupation with symmetry (#2280, #2290).; - Fix print spacing in FCIDUMP files for 1e and 0e (#2277).; - Fix a bug where MOM could clear all electrons (#2270).; - Fix handling of frozen core orbitals in SAPT between monomer and dimer parts. Common case is when one monomer is an alkali cation (#2271). ## Contributors to v1.5. @andyj10224, @maxscheurer, @kis-gergely-dzsi, @alenaizan, @Icyyork, @konpat, @zachglick, @susilehtola, @brianz98, @jeffschriber, @hokru, @loriab, @JonathonMisiewicz, @fevangelista, @andysim",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
https://github.com/psi4/psi4/releases/tag/v1.2:3343,Availability,error,errors,3343,", #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:192,Deployability,install,installers,192,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:250,Deployability,install,install-,250,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:679,Deployability,install,installers,679,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:719,Deployability,install,install,719,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:826,Deployability,update,update,826,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:906,Deployability,update,update,906,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:5261,Deployability,configurat,configuration,5261,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation para",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:7114,Deployability,install,installs,7114,"ow no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). ### Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; - Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; - (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017. ### Known Bugs; - PCM-ROHF is broken. See #999; - ERD interface is broken and disabled",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:7401,Deployability,install,installed,7401,"ow no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). ### Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; - Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; - (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017. ### Known Bugs; - PCM-ROHF is broken. See #999; - ERD interface is broken and disabled",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:2745,Energy Efficiency,efficient,efficient,2745,"s://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectabi",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:4555,Energy Efficiency,efficient,efficient,4555,symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns ,MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:1431,Integrability,interface,interface,1431,"s optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:1800,Integrability,interface,interface,1800,"any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matr",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:4610,Integrability,depend,depending,4610,symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns ,MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:5313,Integrability,rout,routine,5313,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation para",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:5998,Integrability,wrap,wrapped,5998,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). ### Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:7632,Integrability,interface,interface,7632,"ow no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). ### Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; - Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; - (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017. ### Known Bugs; - PCM-ROHF is broken. See #999; - ERD interface is broken and disabled",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:477,Modifiability,enhance,enhancement,477,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:641,Modifiability,enhance,enhancements,641,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:3125,Modifiability,plugin,plugin,3125,"uk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:3159,Modifiability,plugin,plugin,3159,"uk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:5261,Modifiability,config,configuration,5261,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation para",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:442,Performance,optimiz,optimized,442,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:629,Performance,perform,performance,629,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:1963,Performance,optimiz,optimizations,1963,"s of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi De",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:2831,Performance,cache,cache-level,2831," [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybi",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:2945,Performance,bottleneck,bottlenecks,2945,"meTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf ex",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:2939,Safety,avoid,avoid,2939,"meTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf ex",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:3060,Safety,avoid,avoid,3060,"#937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:3729,Safety,detect,detectability,3729," with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:5906,Security,expose,exposed,5906,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). ### Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:7038,Security,access,accessing,7038,"ow no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). ### Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; - Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; - (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017. ### Known Bugs; - PCM-ROHF is broken. See #999; - ERD interface is broken and disabled",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:4776,Testability,test,tests,4776,"bind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.2:5722,Usability,simpl,simpler,5722,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). ### Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than s",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
https://github.com/psi4/psi4/releases/tag/v1.1:247,Availability,down,download,247,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:3711,Availability,avail,available,3711,"om- and AM-labels to printing of molecular orbitals.; * Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just prints a warning and exits sucessfully (beer) but now exits unsuccessfully (coffee) and raises a `psi4.ConvergenceError`.; * Reworked `psi4.set_memory()` to optionally take a string that includes a memory unit. Added a minimum memory (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.; * Added beginnings of JSON interface. ### Infrast",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:8873,Availability,error,errors,8873,"++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2 legacy modules from codebase. They can be enabled at build-time for testing.; * Added threading to MintsHelper for one-body integrals for MIC architectures. ### Bug Fixes. * Fixed OEProp bug for fields and electrostatic potentials when spherical basis sets were used with a symmetry-breaking origin.; * Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.; * Fixed DF-MP2 to fail gracefully when no virtual orbitals present.; * Fixed bug that prevented freezing a bond angle at 0 degrees during a geometry optimization.; * Fixed CASSCF to return correct variable if state averaging requested.; * Fixed diag_method=rsp in detci module that wasn't working.; * Fixed guess=read for ROHF wavefunctions.; * Fixed integer overflows in SAPT code and libdpd code (for CC2) and dfocc code (for CCSD(T)).; * Fixed DF-MP2 gradients in the presence of external potential.; * Fixed various bugs and useability improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't w",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:192,Deployability,install,installers,192,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:4003,Deployability,integrat,integration,4003,"ry (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.; * Added beginnings of JSON interface. ### Infrastructure Improvements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light scr",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:4462,Deployability,install,installed,4462,"1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.; * Added beginnings of JSON interface. ### Infrastructure Improvements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light script calling `import psi4` rather than a hefty C++ executable. No longer linking to libpython.so.; * Added Python 3 (3.5 & 3.6) support to existing Python 2.7; * Reorganized directory layout so that Psi4+Addons in `/`, Psi4 Python module in `/psi4/`, and Psi4 C++ library in `/psi4/src/`.; * Rewrote build system into a CMake (min version 3.3) superbuild, evicting all external code and leaving each add-on with only a single-file build footprint in the external/upstream/ folder specifying its ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6843,Deployability,install,install,6843,"full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implicatio",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10315,Deployability,integrat,integration,10315,"D(T)).; * Fixed DF-MP2 gradients in the presence of external potential.; * Fixed various bugs and useability improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10621,Deployability,integrat,integration,10621,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10932,Deployability,integrat,integration,10932,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:467,Energy Efficiency,adapt,adapted,467,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:1388,Energy Efficiency,energy,energy,1388,"d analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:1583,Energy Efficiency,energy,energy,1583,"/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so th",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:2412,Energy Efficiency,energy,energy,2412,"rface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.; * Added atom- and AM-labels to printing of molecular orbitals.; * Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just prints a warning and exits sucessfully (beer) but now exits unsuccessfully (coffee) and raises a `psi4.ConvergenceError`.; * Reworked `psi4.set_memory()` to optionally take a string that includes a memory unit. Added a minimum memory (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:9775,Energy Efficiency,energy,energy,9775,"pherical basis sets were used with a symmetry-breaking origin.; * Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.; * Fixed DF-MP2 to fail gracefully when no virtual orbitals present.; * Fixed bug that prevented freezing a bond angle at 0 degrees during a geometry optimization.; * Fixed CASSCF to return correct variable if state averaging requested.; * Fixed diag_method=rsp in detci module that wasn't working.; * Fixed guess=read for ROHF wavefunctions.; * Fixed integer overflows in SAPT code and libdpd code (for CC2) and dfocc code (for CCSD(T)).; * Fixed DF-MP2 gradients in the presence of external potential.; * Fixed various bugs and useability improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10436,Energy Efficiency,energy,energy,10436,"ity improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10543,Energy Efficiency,energy,energy,10543,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:1415,Integrability,interface,interface,1415,"d analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:1520,Integrability,interface,interface,1520,"lities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworke",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:1687,Integrability,interface,interface,1687,".4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.; * Added atom- and AM-labels to printing of molec",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:4003,Integrability,integrat,integration,4003,"ry (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.; * Added beginnings of JSON interface. ### Infrastructure Improvements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light scr",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:4144,Integrability,interface,interface,4144,"THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.; * Added beginnings of JSON interface. ### Infrastructure Improvements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light script calling `import psi4` rather than a hefty C++ executable. No longer linking to libpython.so.; * Added Python 3 (3.5 & 3.6) support to ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:4615,Integrability,interface,interface,4615,"orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.; * Added beginnings of JSON interface. ### Infrastructure Improvements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light script calling `import psi4` rather than a hefty C++ executable. No longer linking to libpython.so.; * Added Python 3 (3.5 & 3.6) support to existing Python 2.7; * Reorganized directory layout so that Psi4+Addons in `/`, Psi4 Python module in `/psi4/`, and Psi4 C++ library in `/psi4/src/`.; * Rewrote build system into a CMake (min version 3.3) superbuild, evicting all external code and leaving each add-on with only a single-file build footprint in the external/upstream/ folder specifying its build as a CMake External Project.; * Removed `setup.py` as user interface to CMake build. Now one sh",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:5570,Integrability,interface,interface,5570,"hare/psi4.; * Added beginnings of JSON interface. ### Infrastructure Improvements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light script calling `import psi4` rather than a hefty C++ executable. No longer linking to libpython.so.; * Added Python 3 (3.5 & 3.6) support to existing Python 2.7; * Reorganized directory layout so that Psi4+Addons in `/`, Psi4 Python module in `/psi4/`, and Psi4 C++ library in `/psi4/src/`.; * Rewrote build system into a CMake (min version 3.3) superbuild, evicting all external code and leaving each add-on with only a single-file build footprint in the external/upstream/ folder specifying its build as a CMake External Project.; * Removed `setup.py` as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6621,Integrability,interface,interface,6621,"ptions and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and Shar",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:8284,Integrability,rout,routines,8284,"nd_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2 legacy modules from codebase. They can be enabled at build-time for testing.; * Added threading to MintsHelper for one-body integrals for MIC architectures. ### Bug Fixes. * Fixed OEProp bug for fields and electrostatic potentials when spherical basis sets were used with a symmetry-breaking origin.; * Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.; * Fixed DF-MP2 to fail gracefully when no virtual orbitals present.; * Fixed bug that prevented freezing a bond angle at 0 degrees during a geometry optimization.; * Fixed CASSCF to return correct variable if state averaging requested.; * Fixed diag_method=rsp in detci module that wasn't working.; * Fixed guess=read for ROHF wavefunctions.; * Fixed integer overflows in SAPT code and libd",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10315,Integrability,integrat,integration,10315,"D(T)).; * Fixed DF-MP2 gradients in the presence of external potential.; * Fixed various bugs and useability improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10621,Integrability,integrat,integration,10621,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10932,Integrability,integrat,integration,10932,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:11228,Integrability,interface,interface,11228,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:11308,Integrability,interface,interfaces,11308,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:11390,Integrability,interface,interface,11390,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:467,Modifiability,adapt,adapted,467,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:2614,Modifiability,variab,variables,2614,"TE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.; * Added atom- and AM-labels to printing of molecular orbitals.; * Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just prints a warning and exits sucessfully (beer) but now exits unsuccessfully (coffee) and raises a `psi4.ConvergenceError`.; * Reworked `psi4.set_memory()` to optionally take a string that includes a memory unit. Added a minimum memory (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selec",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:3110,Modifiability,variab,variables,3110,"3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.; * Added atom- and AM-labels to printing of molecular orbitals.; * Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just prints a warning and exits sucessfully (beer) but now exits unsuccessfully (coffee) and raises a `psi4.ConvergenceError`.; * Reworked `psi4.set_memory()` to optionally take a string that includes a memory unit. Added a minimum memory (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/n",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:3279,Modifiability,variab,variables,3279,"te = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.; * Added atom- and AM-labels to printing of molecular orbitals.; * Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just prints a warning and exits sucessfully (beer) but now exits unsuccessfully (coffee) and raises a `psi4.ConvergenceError`.; * Reworked `psi4.set_memory()` to optionally take a string that includes a memory unit. Added a minimum memory (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDAT",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:4258,Modifiability,variab,variable,4258,"orked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.; * Added beginnings of JSON interface. ### Infrastructure Improvements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light script calling `import psi4` rather than a hefty C++ executable. No longer linking to libpython.so.; * Added Python 3 (3.5 & 3.6) support to existing Python 2.7; * Reorganized directory layout so that Psi4+Addons in `/`, Psi4 Python module in `/psi4/`, and Psi4 ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6474,Modifiability,plugin,plugin,6474,"lder specifying its build as a CMake External Project.; * Removed `setup.py` as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detect",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6523,Modifiability,plugin,plugin-compile,6523," as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MK",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6584,Modifiability,plugin,plugin-makefile,6584," as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MK",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6676,Modifiability,plugin,plugin,6676,"++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to e",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6725,Modifiability,plugin,plugin,6725,"++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to e",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6767,Modifiability,plugin,plugin-name,6767,"++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to e",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6790,Modifiability,plugin,plugin-template,6790,"++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to e",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:7772,Modifiability,variab,variables,7772,"unction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2 legacy modules from codebase. They can be enabled at build-time for testing.; * Added threading to MintsHelper for one-body integrals for MIC architectures. ### Bug Fixes. * Fixed OEProp bug for fields and electrostatic potentials wh",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:7936,Modifiability,plugin,plugins,7936,"ython driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2 legacy modules from codebase. They can be enabled at build-time for testing.; * Added threading to MintsHelper for one-body integrals for MIC architectures. ### Bug Fixes. * Fixed OEProp bug for fields and electrostatic potentials when spherical basis sets were used with a symmetry-breaking origin.; * Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.; * Fixed DF-MP2 to fail gracefully when no virtual",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:9096,Modifiability,variab,variable,9096,"orked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2 legacy modules from codebase. They can be enabled at build-time for testing.; * Added threading to MintsHelper for one-body integrals for MIC architectures. ### Bug Fixes. * Fixed OEProp bug for fields and electrostatic potentials when spherical basis sets were used with a symmetry-breaking origin.; * Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.; * Fixed DF-MP2 to fail gracefully when no virtual orbitals present.; * Fixed bug that prevented freezing a bond angle at 0 degrees during a geometry optimization.; * Fixed CASSCF to return correct variable if state averaging requested.; * Fixed diag_method=rsp in detci module that wasn't working.; * Fixed guess=read for ROHF wavefunctions.; * Fixed integer overflows in SAPT code and libdpd code (for CC2) and dfocc code (for CCSD(T)).; * Fixed DF-MP2 gradients in the presence of external potential.; * Fixed various bugs and useability improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based func",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10838,Modifiability,plugin,plugin,10838,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:11343,Modifiability,plugin,plugin,11343,"ions in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:1767,Performance,optimiz,optimizer,1767,"d_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.; * Added atom- and AM-labels to printing of molecular orbitals.; * Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just pr",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:2731,Performance,optimiz,optimization,2731," option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.; * Added atom- and AM-labels to printing of molecular orbitals.; * Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just prints a warning and exits sucessfully (beer) but now exits unsuccessfully (coffee) and raises a `psi4.ConvergenceError`.; * Reworked `psi4.set_memory()` to optionally take a string that includes a memory unit. Added a minimum memory (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.;",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:3453,Performance,load,loading,3453,"c. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.; * Added atom- and AM-labels to printing of molecular orbitals.; * Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just prints a warning and exits sucessfully (beer) but now exits unsuccessfully (coffee) and raises a `psi4.ConvergenceError`.; * Reworked `psi4.set_memory()` to optionally take a string that includes a memory unit. Added a minimum memory (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. Fo",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6830,Performance,perform,performs,6830,"full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implicatio",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:9048,Performance,optimiz,optimization,9048,"rior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2 legacy modules from codebase. They can be enabled at build-time for testing.; * Added threading to MintsHelper for one-body integrals for MIC architectures. ### Bug Fixes. * Fixed OEProp bug for fields and electrostatic potentials when spherical basis sets were used with a symmetry-breaking origin.; * Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.; * Fixed DF-MP2 to fail gracefully when no virtual orbitals present.; * Fixed bug that prevented freezing a bond angle at 0 degrees during a geometry optimization.; * Fixed CASSCF to return correct variable if state averaging requested.; * Fixed diag_method=rsp in detci module that wasn't working.; * Fixed guess=read for ROHF wavefunctions.; * Fixed integer overflows in SAPT code and libdpd code (for CC2) and dfocc code (for CCSD(T)).; * Fixed DF-MP2 gradients in the presence of external potential.; * Fixed various bugs and useability improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is ho",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:9785,Performance,optimiz,optimize,9785,"pherical basis sets were used with a symmetry-breaking origin.; * Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.; * Fixed DF-MP2 to fail gracefully when no virtual orbitals present.; * Fixed bug that prevented freezing a bond angle at 0 degrees during a geometry optimization.; * Fixed CASSCF to return correct variable if state averaging requested.; * Fixed diag_method=rsp in detci module that wasn't working.; * Fixed guess=read for ROHF wavefunctions.; * Fixed integer overflows in SAPT code and libdpd code (for CC2) and dfocc code (for CCSD(T)).; * Fixed DF-MP2 gradients in the presence of external potential.; * Fixed various bugs and useability improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:7244,Safety,detect,detection,7244," when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC rou",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:7480,Safety,detect,detection,7480,"UMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:7493,Safety,detect,detect,7493,"UMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:8296,Safety,avoid,avoid,8296,"nd_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2 legacy modules from codebase. They can be enabled at build-time for testing.; * Added threading to MintsHelper for one-body integrals for MIC architectures. ### Bug Fixes. * Fixed OEProp bug for fields and electrostatic potentials when spherical basis sets were used with a symmetry-breaking origin.; * Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.; * Fixed DF-MP2 to fail gracefully when no virtual orbitals present.; * Fixed bug that prevented freezing a bond angle at 0 degrees during a geometry optimization.; * Fixed CASSCF to return correct variable if state averaging requested.; * Fixed diag_method=rsp in detci module that wasn't working.; * Fixed guess=read for ROHF wavefunctions.; * Fixed integer overflows in SAPT code and libd",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:10454,Security,access,accessed,10454,"ity improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:533,Testability,test,tests,533,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:3751,Testability,test,test,3751,"maxiter, it no longer just prints a warning and exits sucessfully (beer) but now exits unsuccessfully (coffee) and raises a `psi4.ConvergenceError`.; * Reworked `psi4.set_memory()` to optionally take a string that includes a memory unit. Added a minimum memory (250MiB) and increase the default memory (500 MiB).; * Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.; * Added beginnings of JSON interface. ### Infrastructure Improvements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:4126,Testability,test,tests,4126,"THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.; * Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.; * Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.; * Added new complete set of test case reference output files.; * Added BFDb databases.; * Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.; * Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.; * Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.; * Added beginnings of JSON interface. ### Infrastructure Improvements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light script calling `import psi4` rather than a hefty C++ executable. No longer linking to libpython.so.; * Added Python 3 (3.5 & 3.6) support to ",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6243,Testability,test,testing,6243,"C++ library in `/psi4/src/`.; * Rewrote build system into a CMake (min version 3.3) superbuild, evicting all external code and leaving each add-on with only a single-file build footprint in the external/upstream/ folder specifying its build as a CMake External Project.; * Removed `setup.py` as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_packag",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6404,Testability,test,test,6404,"l code and leaving each add-on with only a single-file build footprint in the external/upstream/ folder specifying its build as a CMake External Project.; * Removed `setup.py` as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/outp",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:6453,Testability,test,test,6453,"in the external/upstream/ folder specifying its build as a CMake External Project.; * Removed `setup.py` as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.;",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:8574,Testability,test,testing,8574,"r MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC routines to avoid expensive sorting.; * Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.; * Removed ccsort/transqt2 legacy modules from codebase. They can be enabled at build-time for testing.; * Added threading to MintsHelper for one-body integrals for MIC architectures. ### Bug Fixes. * Fixed OEProp bug for fields and electrostatic potentials when spherical basis sets were used with a symmetry-breaking origin.; * Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.; * Fixed DF-MP2 to fail gracefully when no virtual orbitals present.; * Fixed bug that prevented freezing a bond angle at 0 degrees during a geometry optimization.; * Fixed CASSCF to return correct variable if state averaging requested.; * Fixed diag_method=rsp in detci module that wasn't working.; * Fixed guess=read for ROHF wavefunctions.; * Fixed integer overflows in SAPT code and libdpd code (for CC2) and dfocc code (for CCSD(T)).; * Fixed DF-MP2 gradients in the presence of external potential.; * Fixed various bugs and useability improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_sph",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
https://github.com/psi4/psi4/releases/tag/v1.1:5649,Usability,guid,guidance,5649,"vements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light script calling `import psi4` rather than a hefty C++ executable. No longer linking to libpython.so.; * Added Python 3 (3.5 & 3.6) support to existing Python 2.7; * Reorganized directory layout so that Psi4+Addons in `/`, Psi4 Python module in `/psi4/`, and Psi4 C++ library in `/psi4/src/`.; * Rewrote build system into a CMake (min version 3.3) superbuild, evicting all external code and leaving each add-on with only a single-file build footprint in the external/upstream/ folder specifying its build as a CMake External Project.; * Removed `setup.py` as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantial",MatchSource.RELEASES,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
