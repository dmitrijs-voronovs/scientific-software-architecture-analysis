id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:219,Deployability,install,installed,219,"""""""Return `conda list` in json format. Thanks, https://stackoverflow.com/a/56363822; SO convinced me that subprocess was better than import (following block); Also, the conda.cli only works on base env (where conda pkg installed). #import conda.cli.python_api as Conda; #env_list_json, stderr, rc = Conda.run_command(Conda.Commands.LIST, [""--json""]); #env_list_dict = json.loads(env_list_json). """"""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:373,Performance,load,loads,373,"""""""Return `conda list` in json format. Thanks, https://stackoverflow.com/a/56363822; SO convinced me that subprocess was better than import (following block); Also, the conda.cli only works on base env (where conda pkg installed). #import conda.cli.python_api as Conda; #env_list_json, stderr, rc = Conda.run_command(Conda.Commands.LIST, [""--json""]); #env_list_dict = json.loads(env_list_json). """"""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:79,Deployability,configurat,configuration,79,"""""""byo:; Omit blas/lapack from cache to engage self-provided libraries.; CMake configuration may still use conda libraries if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:79,Modifiability,config,configuration,79,"""""""byo:; Omit blas/lapack from cache to engage self-provided libraries.; CMake configuration may still use conda libraries if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:31,Performance,cache,cache,31,"""""""byo:; Omit blas/lapack from cache to engage self-provided libraries.; CMake configuration may still use conda libraries if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:77,Deployability,configurat,configuration,77,"""""""byo:; Omit compilers from cache to engage self-provided compilers.; CMake configuration may still use conda compilers if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:77,Modifiability,config,configuration,77,"""""""byo:; Omit compilers from cache to engage self-provided compilers.; CMake configuration may still use conda compilers if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:29,Performance,cache,cache,29,"""""""byo:; Omit compilers from cache to engage self-provided compilers.; CMake configuration may still use conda compilers if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:77,Deployability,configurat,configuration,77,"""""""byo:; Omit compilers from cache to engage self-provided compilers.; CMake configuration may still use conda compilers if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:77,Modifiability,config,configuration,77,"""""""byo:; Omit compilers from cache to engage self-provided compilers.; CMake configuration may still use conda compilers if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:29,Performance,cache,cache,29,"""""""byo:; Omit compilers from cache to engage self-provided compilers.; CMake configuration may still use conda compilers if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:77,Deployability,configurat,configuration,77,"""""""byo:; Omit compilers from cache to engage self-provided compilers.; CMake configuration may still use conda compilers if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:77,Modifiability,config,configuration,77,"""""""byo:; Omit compilers from cache to engage self-provided compilers.; CMake configuration may still use conda compilers if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:29,Performance,cache,cache,29,"""""""byo:; Omit compilers from cache to engage self-provided compilers.; CMake configuration may still use conda compilers if; present and not contravened.""""""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:1955,Deployability,configurat,configuration,1955,"e env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or customized command to configure & build with cmake.; cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 && cmake --build objdir_p4dev310. # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev310/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files; """"""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:2153,Deployability,install,install-,2153,"e env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or customized command to configure & build with cmake.; cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 && cmake --build objdir_p4dev310. # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev310/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files; """"""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:1113,Integrability,depend,dependency,1113,"nv subcommand. Conda env create and activate. Run cmake subcommand. Build. =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or customized command to configure & build with cmake.; cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 -DCMAKE_",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:611,Modifiability,config,configures,611,"""""""Dependency, Build, and Run path advisor for Psi4.; Mediates file https://github.com/psi4/psi4/blob/master/codedeps.yaml; Run env subcommand. Conda env create and activate. Run cmake subcommand. Build. =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or cus",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:954,Modifiability,flexible,flexible,954,"""""""Dependency, Build, and Run path advisor for Psi4.; Mediates file https://github.com/psi4/psi4/blob/master/codedeps.yaml; Run env subcommand. Conda env create and activate. Run cmake subcommand. Build. =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or cus",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:1955,Modifiability,config,configuration,1955,"e env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or customized command to configure & build with cmake.; cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 && cmake --build objdir_p4dev310. # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev310/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files; """"""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:2020,Modifiability,config,configure,2020,"e env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or customized command to configure & build with cmake.; cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 && cmake --build objdir_p4dev310. # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev310/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files; """"""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:570,Performance,cache,cache,570,"""""""Dependency, Build, and Run path advisor for Psi4.; Mediates file https://github.com/psi4/psi4/blob/master/codedeps.yaml; Run env subcommand. Conda env create and activate. Run cmake subcommand. Build. =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or cus",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:1733,Performance,cache,cache,1733,"e env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or customized command to configure & build with cmake.; cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 && cmake --build objdir_p4dev310. # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev310/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files; """"""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:718,Testability,log,login,718,"""""""Dependency, Build, and Run path advisor for Psi4.; Mediates file https://github.com/psi4/psi4/blob/master/codedeps.yaml; Run env subcommand. Conda env create and activate. Run cmake subcommand. Build. =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or cus",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:2230,Testability,log,login,2230,"e env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake). # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4. # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310. # (3.0) consider compile options; conda/psi4-path-advisor.py cmake -h; # (3.1) generate cmake cache file from conda env.; conda/psi4-path-advisor.py cmake; #> cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 && cmake --build objdir_p4dev310; # (3.2) edit cache_p4dev310.cmake to customize build configuration.; # (3.3) issue suggested or customized command to configure & build with cmake.; cmake -S. -GNinja -C/home/psi4/cache_p4dev310.cmake -Bobjdir_p4dev310 -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 && cmake --build objdir_p4dev310. # (4) next steps. repeat each login or add to shell's rc. your paths may vary.; eval $(objdir_p4dev310/stage/bin/psi4 --psiapi); export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files; """"""",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:35,Performance,cache,cache,35,"# print(f""Warning: Active value in cache for {k} does not exist on filesystem: {v}"")",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:29,Performance,cache,cache,29,"# using tilde-type strike in cache file so searchable",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:179,Availability,down,downloaded,179,"#elif sys.platform == 'darwin':; # parser.add_argument('--clang', action='store_true',; # help=""""""Engage conda's psi4-dev-provided clang/clang++/gfortran compilers. You must have downloaded this file https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz, unpacked it, and saved it at ~/SDKs/MacOSX10.9.sdk . !Change! this arg invoked XCode AppleClang prior to Jul 2018.""""""); #; # # help=""""""Engage system-provided clang/clang++ compilers and psi4-dev-provided gfortran.""""""); # #parser.add_argument('--gcc', action='store_true',; # # help=""""""Engage psi4-dev-provided gcc/g++/gfortran compilers.""""""); #; ## duplicates from `bin/psi4`; #psi4 = os.path.abspath(os.path.dirname(__file__)) + os.path.sep + 'psi4'; #psi4alongside = os.path.isfile(psi4) and os.access(psi4, os.X_OK); #; #if psi4alongside:; # parser.add_argument(""--psiapi-path"", action='store_true',; # help=""""""(Duplicate from `psi4`) Generates a bash command to source correct Python for `python -c ""import psi4""`""""""); #; #if psi4alongside:; # from subprocess import call; #; # if args.psiapi_path:; # call([psi4, '--psiapi-path']); # sys.exit(0); #; #else:; # if args.plugin_compile:; # print(""""""Install ""psi4"" via `conda install psi4 -c psi4[/label/dev]`, then reissue command.""""""); #; #; #if sys.platform == 'darwin':; # if args.clang:; # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsClangCache.cmake'); # # recc.insert(0, 'CONDA_BUILD_SYSROOT=~/SDKs/MacOSX10.9.sdk'); # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsAppleClangCache.cmake'); # #if args.gcc:; # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsGNUCache.cmake')",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:249,Availability,down,download,249,"#elif sys.platform == 'darwin':; # parser.add_argument('--clang', action='store_true',; # help=""""""Engage conda's psi4-dev-provided clang/clang++/gfortran compilers. You must have downloaded this file https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz, unpacked it, and saved it at ~/SDKs/MacOSX10.9.sdk . !Change! this arg invoked XCode AppleClang prior to Jul 2018.""""""); #; # # help=""""""Engage system-provided clang/clang++ compilers and psi4-dev-provided gfortran.""""""); # #parser.add_argument('--gcc', action='store_true',; # # help=""""""Engage psi4-dev-provided gcc/g++/gfortran compilers.""""""); #; ## duplicates from `bin/psi4`; #psi4 = os.path.abspath(os.path.dirname(__file__)) + os.path.sep + 'psi4'; #psi4alongside = os.path.isfile(psi4) and os.access(psi4, os.X_OK); #; #if psi4alongside:; # parser.add_argument(""--psiapi-path"", action='store_true',; # help=""""""(Duplicate from `psi4`) Generates a bash command to source correct Python for `python -c ""import psi4""`""""""); #; #if psi4alongside:; # from subprocess import call; #; # if args.psiapi_path:; # call([psi4, '--psiapi-path']); # sys.exit(0); #; #else:; # if args.plugin_compile:; # print(""""""Install ""psi4"" via `conda install psi4 -c psi4[/label/dev]`, then reissue command.""""""); #; #; #if sys.platform == 'darwin':; # if args.clang:; # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsClangCache.cmake'); # # recc.insert(0, 'CONDA_BUILD_SYSROOT=~/SDKs/MacOSX10.9.sdk'); # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsAppleClangCache.cmake'); # #if args.gcc:; # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsGNUCache.cmake')",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:240,Deployability,release,releases,240,"#elif sys.platform == 'darwin':; # parser.add_argument('--clang', action='store_true',; # help=""""""Engage conda's psi4-dev-provided clang/clang++/gfortran compilers. You must have downloaded this file https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz, unpacked it, and saved it at ~/SDKs/MacOSX10.9.sdk . !Change! this arg invoked XCode AppleClang prior to Jul 2018.""""""); #; # # help=""""""Engage system-provided clang/clang++ compilers and psi4-dev-provided gfortran.""""""); # #parser.add_argument('--gcc', action='store_true',; # # help=""""""Engage psi4-dev-provided gcc/g++/gfortran compilers.""""""); #; ## duplicates from `bin/psi4`; #psi4 = os.path.abspath(os.path.dirname(__file__)) + os.path.sep + 'psi4'; #psi4alongside = os.path.isfile(psi4) and os.access(psi4, os.X_OK); #; #if psi4alongside:; # parser.add_argument(""--psiapi-path"", action='store_true',; # help=""""""(Duplicate from `psi4`) Generates a bash command to source correct Python for `python -c ""import psi4""`""""""); #; #if psi4alongside:; # from subprocess import call; #; # if args.psiapi_path:; # call([psi4, '--psiapi-path']); # sys.exit(0); #; #else:; # if args.plugin_compile:; # print(""""""Install ""psi4"" via `conda install psi4 -c psi4[/label/dev]`, then reissue command.""""""); #; #; #if sys.platform == 'darwin':; # if args.clang:; # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsClangCache.cmake'); # # recc.insert(0, 'CONDA_BUILD_SYSROOT=~/SDKs/MacOSX10.9.sdk'); # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsAppleClangCache.cmake'); # #if args.gcc:; # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsGNUCache.cmake')",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:1214,Deployability,install,install,1214,"#elif sys.platform == 'darwin':; # parser.add_argument('--clang', action='store_true',; # help=""""""Engage conda's psi4-dev-provided clang/clang++/gfortran compilers. You must have downloaded this file https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz, unpacked it, and saved it at ~/SDKs/MacOSX10.9.sdk . !Change! this arg invoked XCode AppleClang prior to Jul 2018.""""""); #; # # help=""""""Engage system-provided clang/clang++ compilers and psi4-dev-provided gfortran.""""""); # #parser.add_argument('--gcc', action='store_true',; # # help=""""""Engage psi4-dev-provided gcc/g++/gfortran compilers.""""""); #; ## duplicates from `bin/psi4`; #psi4 = os.path.abspath(os.path.dirname(__file__)) + os.path.sep + 'psi4'; #psi4alongside = os.path.isfile(psi4) and os.access(psi4, os.X_OK); #; #if psi4alongside:; # parser.add_argument(""--psiapi-path"", action='store_true',; # help=""""""(Duplicate from `psi4`) Generates a bash command to source correct Python for `python -c ""import psi4""`""""""); #; #if psi4alongside:; # from subprocess import call; #; # if args.psiapi_path:; # call([psi4, '--psiapi-path']); # sys.exit(0); #; #else:; # if args.plugin_compile:; # print(""""""Install ""psi4"" via `conda install psi4 -c psi4[/label/dev]`, then reissue command.""""""); #; #; #if sys.platform == 'darwin':; # if args.clang:; # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsClangCache.cmake'); # # recc.insert(0, 'CONDA_BUILD_SYSROOT=~/SDKs/MacOSX10.9.sdk'); # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsAppleClangCache.cmake'); # #if args.gcc:; # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsGNUCache.cmake')",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py:784,Security,access,access,784,"#elif sys.platform == 'darwin':; # parser.add_argument('--clang', action='store_true',; # help=""""""Engage conda's psi4-dev-provided clang/clang++/gfortran compilers. You must have downloaded this file https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz, unpacked it, and saved it at ~/SDKs/MacOSX10.9.sdk . !Change! this arg invoked XCode AppleClang prior to Jul 2018.""""""); #; # # help=""""""Engage system-provided clang/clang++ compilers and psi4-dev-provided gfortran.""""""); # #parser.add_argument('--gcc', action='store_true',; # # help=""""""Engage psi4-dev-provided gcc/g++/gfortran compilers.""""""); #; ## duplicates from `bin/psi4`; #psi4 = os.path.abspath(os.path.dirname(__file__)) + os.path.sep + 'psi4'; #psi4alongside = os.path.isfile(psi4) and os.access(psi4, os.X_OK); #; #if psi4alongside:; # parser.add_argument(""--psiapi-path"", action='store_true',; # help=""""""(Duplicate from `psi4`) Generates a bash command to source correct Python for `python -c ""import psi4""`""""""); #; #if psi4alongside:; # from subprocess import call; #; # if args.psiapi_path:; # call([psi4, '--psiapi-path']); # sys.exit(0); #; #else:; # if args.plugin_compile:; # print(""""""Install ""psi4"" via `conda install psi4 -c psi4[/label/dev]`, then reissue command.""""""); #; #; #if sys.platform == 'darwin':; # if args.clang:; # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsClangCache.cmake'); # # recc.insert(0, 'CONDA_BUILD_SYSROOT=~/SDKs/MacOSX10.9.sdk'); # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsAppleClangCache.cmake'); # #if args.gcc:; # # recc.insert(-1, '-C/opt/anaconda1anaconda2anaconda3/share/cmake/psi4/psi4DepsGNUCache.cmake')",MatchSource.CODE_COMMENT,conda/psi4-path-advisor.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/conda/psi4-path-advisor.py
https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_print_failing.py:14,Testability,test,test,14,"""""""\n <<< All test cases have passed! >>>\n\n""""""",MatchSource.CODE_COMMENT,devtools/scripts/ci_print_failing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_print_failing.py
https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_print_failing.py:19,Availability,error,error,19,"# <<< return ctest error code >>>",MatchSource.CODE_COMMENT,devtools/scripts/ci_print_failing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_print_failing.py
https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_run_test.py:22,Testability,test,tests,22,"# <<< identify failed tests and cat their output >>>",MatchSource.CODE_COMMENT,devtools/scripts/ci_run_test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_run_test.py
https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_run_test.py:86,Testability,log,log,86,"# if ctest_exit_status:; # sys.stdout.write(""""""\n <<< CTest failed, printing LastTest.log >>>\n\n""""""); # with open('Testing/Temporary/LastTest.log', 'r') as ttllog:; # sys.stdout.write(ttllog.read())",MatchSource.CODE_COMMENT,devtools/scripts/ci_run_test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_run_test.py
https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_run_test.py:143,Testability,log,log,143,"# if ctest_exit_status:; # sys.stdout.write(""""""\n <<< CTest failed, printing LastTest.log >>>\n\n""""""); # with open('Testing/Temporary/LastTest.log', 'r') as ttllog:; # sys.stdout.write(ttllog.read())",MatchSource.CODE_COMMENT,devtools/scripts/ci_run_test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/devtools/scripts/ci_run_test.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py:36,Availability,error,error,36,"# toggle for "" "" in visual mode; # ""error"": ('\u2717', """" ), # toggle for ""X"" in visual mode",MatchSource.CODE_COMMENT,doc/sphinxman/document_capabilities.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py:2,Deployability,toggle,toggle,2,"# toggle for "" "" in visual mode; # ""error"": ('\u2717', """" ), # toggle for ""X"" in visual mode",MatchSource.CODE_COMMENT,doc/sphinxman/document_capabilities.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py:63,Deployability,toggle,toggle,63,"# toggle for "" "" in visual mode; # ""error"": ('\u2717', """" ), # toggle for ""X"" in visual mode",MatchSource.CODE_COMMENT,doc/sphinxman/document_capabilities.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py:378,Energy Efficiency,energy,energy,378,"# +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | Restricted (RHF) | Unrestricted (UHF) | Restricted Open (ROHF) |; # +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | |psi4.energy| | |psi4.gradient| | |psi4.energy| | |psi4.gradient| | |psi4.energy| | |psi4.gradient| |; # +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD |; # +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F |; # +===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+",MatchSource.CODE_COMMENT,doc/sphinxman/document_capabilities.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py:412,Energy Efficiency,energy,energy,412,"# +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | Restricted (RHF) | Unrestricted (UHF) | Restricted Open (ROHF) |; # +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | |psi4.energy| | |psi4.gradient| | |psi4.energy| | |psi4.gradient| | |psi4.energy| | |psi4.gradient| |; # +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD |; # +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F |; # +===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+",MatchSource.CODE_COMMENT,doc/sphinxman/document_capabilities.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py:446,Energy Efficiency,energy,energy,446,"# +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | Restricted (RHF) | Unrestricted (UHF) | Restricted Open (ROHF) |; # +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | |psi4.energy| | |psi4.gradient| | |psi4.energy| | |psi4.gradient| | |psi4.energy| | |psi4.gradient| |; # +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD |; # +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; # | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F | A | F |; # +===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+",MatchSource.CODE_COMMENT,doc/sphinxman/document_capabilities.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py:2,Safety,avoid,avoid,2,"# avoid aligned delimiters",MatchSource.CODE_COMMENT,doc/sphinxman/document_capabilities.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py:22,Availability,error,error,22,"# module ""psi4"" means error, so removing it suppresses a blank or all-X line",MatchSource.CODE_COMMENT,doc/sphinxman/document_capabilities.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_capabilities.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_cfour.py:16,Modifiability,variab,variables,16,"# Available psi variables in psi4/driver/qcdb/cfour.py",MatchSource.CODE_COMMENT,doc/sphinxman/document_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_driver.py:14,Modifiability,plugin,plugin,14,"# Python-only plugin modules in psi4/driver",MatchSource.CODE_COMMENT,doc/sphinxman/document_driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_driver.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_plugins.py:29,Modifiability,plugin,plugin,29,"# individual option file for plugin options. rather pointless but consistent w/regular module options",MatchSource.CODE_COMMENT,doc/sphinxman/document_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_plugins.py:45,Modifiability,plugin,plugin,45,"# Objective #3; # Plugin directories in psi4/plugin/",MatchSource.CODE_COMMENT,doc/sphinxman/document_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_plugins.py:12,Modifiability,plugin,plugin,12,"# from each plugin directory ...",MatchSource.CODE_COMMENT,doc/sphinxman/document_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/document_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/extensions/psidomain.py:37,Modifiability,variab,variables,37,"""""""Extension to format and index PSI variables.""""""",MatchSource.CODE_COMMENT,doc/sphinxman/source/extensions/psidomain.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/extensions/psidomain.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:207,Modifiability,variab,variable,207,"""""""Prints the exit time and status. Parameters; ----------; start_time; starting time from which the elapsed time is computed.; success; Provides a success flag, otherwise uses the ``_success_flag_`` global variable. Returns; -------; None. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:31,Availability,avail,available,31,"""""""Test to see if a command is available in Psi4 search path. Returns; -------; str or None; By default, returns command path if command found or `None` if not.; Environment is $PSIPATH:$PATH, less any None values.; bool; When `return_bool=True`, returns whether or not found. Raises; ------; ModuleNotFoundError; When `raises_error=True` and command not found. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:50,Availability,avail,available,50,"""""""Returns boolean of whether Add-On *request* is available to Psi4,; either compiled in or searchable in $PSIPATH:$PATH, as relevant. If; *request* not passed, returns list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:177,Availability,avail,available,177,"""""""Returns boolean of whether Add-On *request* is available to Psi4,; either compiled in or searchable in $PSIPATH:$PATH, as relevant. If; *request* not passed, returns list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:149,Availability,redundant,redundant,149,"""""""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:149,Safety,redund,redundant,149,"""""""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:10,Testability,test,test,10,"""""""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:217,Testability,test,test,217,"""""""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:297,Testability,test,tests,297,"""""""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:332,Testability,test,test,332,"""""""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:409,Testability,test,test,409,"""""""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:815,Modifiability,inherit,inherited,815,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:31,Testability,log,logging,31,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:128,Testability,log,logging,128,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:175,Testability,log,log,175,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:229,Testability,log,logging,229,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:287,Testability,log,loglevel,287,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:331,Testability,log,log,331,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:472,Testability,log,logger,472,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:756,Testability,log,loglevel,756,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:839,Testability,log,logger,839,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:1068,Testability,log,logging,1068,"""""""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:17,Testability,log,logger,17,"# Get the custom logger",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:96,Availability,avail,available,96,"# Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available)",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:67,Testability,log,logger,67,"# Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available)",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py:66,Testability,log,logging,66,"# Warning: baseFilename is not part of the documented API for the logging module and could change.",MatchSource.CODE_COMMENT,psi4/extras.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/extras.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/header.py:14,Deployability,release,release,14,"""""""{version} {release}""""""",MatchSource.CODE_COMMENT,psi4/header.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/header.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:38,Safety,safe,safe,38,"""""""Generates a one-line bash command (safe for command substitution) to source correct """"""",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:32,Performance,load,loading,32,"""""""Generates the path to PsiAPI loading. That is, the following file exists: `psi4 --module`/psi4/__init__.py . Also, adding `psi4 --module` to PYTHONPATH allows ""import psi4"".""""""",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:6,Modifiability,plugin,plugins,6,"# For plugins",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:59,Modifiability,plugin,plugin,59,"""""""\; Creates a new directory with files for writing a new plugin.; You can specify an additional argument that specifies a; template to use, for example; >>> psi4 --plugin-name mygreatcode --plugin-template mointegrals""""""",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:166,Modifiability,plugin,plugin-name,166,"""""""\; Creates a new directory with files for writing a new plugin.; You can specify an additional argument that specifies a; template to use, for example; >>> psi4 --plugin-name mygreatcode --plugin-template mointegrals""""""",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:192,Modifiability,plugin,plugin-template,192,"""""""\; Creates a new directory with files for writing a new plugin.; You can specify an additional argument that specifies a; template to use, for example; >>> psi4 --plugin-name mygreatcode --plugin-template mointegrals""""""",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:72,Deployability,install,installation,72,"""""""\; Generates a CMake command for building a plugin against this Psi4 installation.; >>> cd <plugin_directory>; >>> `psi4 --plugin-compile`; >>> make; >>> psi4""""""",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:47,Modifiability,plugin,plugin,47,"""""""\; Generates a CMake command for building a plugin against this Psi4 installation.; >>> cd <plugin_directory>; >>> `psi4 --plugin-compile`; >>> make; >>> psi4""""""",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:126,Modifiability,plugin,plugin-compile,126,"""""""\; Generates a CMake command for building a plugin against this Psi4 installation.; >>> cd <plugin_directory>; >>> `psi4 --plugin-compile`; >>> make; >>> psi4""""""",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:6,Testability,test,tested,6,"# not tested after pathlib adjustments",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:33,Deployability,install,install,33,"""""""Install ""psi4-dev"" via `conda install psi4-dev -c psi4[/label/dev]`, then reissue command.""""""",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:101,Integrability,message,message,101,"### Actually import psi4 and apply setup ###; # Arrange for warnings to ignore everything except the message",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:9,Deployability,install,installed,9,"# Import installed psi4",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:26,Availability,failure,failure,26,"# Register exit printing, failure GOTO coffee ELSE beer",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:23,Availability,error,error,23,"# Capture _any_ python error message",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:29,Integrability,message,message,29,"# Capture _any_ python error message",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:9,Availability,error,error,9,"# module error where lineno useless (e.g., `print ""asdf""`)",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py:20,Integrability,message,message,20,"# extract exception message and print it in a box for attention.",MatchSource.CODE_COMMENT,psi4/run_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/run_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:86,Availability,avail,available,86,"""""""Returns boolean as to whether *cwd* is under git control. When no ``git``; command available in environment, *no_git_cmd_result* returned. If within; the .git directory of a git repository, *dot_git_qualifies* returned.; For rare circumstances when one might be under git control but not in the; target software repo that's providing versionable tags (e.g., conda-forge; staged-recipes Linux), string patterns in the *extraneous_toplevel_patterns*; list will return False. """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:31,Availability,avail,available,31,"# most likely, git command not available",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:228,Availability,error,errors,228,"""""""Returns a dictionary filled with ``git describe`` results, clean/dirty; flag, and branch status. *cwd* should already be confirmed as a git; repository; this doesn't catch returncodes or EnvironmentErrors because the; raised errors are preferred to incomplete return dictionary. """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:111,Security,hash,hash,111,"# * only want annotated tags, so not --all; # * in case *no* tags (impossible in Psi4), --always gets at least hash; # * get commits & hash info even if on tag using --long",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:135,Security,hash,hash,135,"# * only want annotated tags, so not --all; # * in case *no* tags (impossible in Psi4), --always gets at least hash; # * get commits & hash info even if on tag using --long",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:251,Deployability,release,release,251,"# some versioning machinery (looking at you, CMake) does strictly; # numerical comparisons such as M.m.p.t and thus can't handle; # prereleases and dev snapshots. we compute a Most Rescent Ancestral; # Release tag (e.g., 1.0 or 1.12.1) for a backward release series.",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:43,Safety,predict,predict,43,"""""""Unavoidable snag. Probably ""2.0"". Can't predict backward series from present prerelease.""""""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:48,Security,hash,hash,48,"""""""Amazing, this can't actually happen that git hash stored at git commit.""""""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:41,Security,hash,hashes,41,"""""""Undefining version for irreconcilable hashes: {} (computed) vs {} (recorded)""""""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:62,Availability,mainten,maintenance,62,"""""""Undefining version as development snapshots not allowed on maintenance branch: {} (rejected computed)""""""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:30,Deployability,release,release,30,"""""""Blindly (no git) accepting release version: {} (recorded)""""""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:40,Deployability,release,release,40,"# assumes that zip only comes from [pre]release. GitHub hides others, but they're there.",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:392,Availability,mainten,maintenance,392,"""""""CMake expects MAJOR.MINOR.PATCH.TWEAK. The ancestral *last_release*; is padded into the first three roles. If not *is_release*, the tweak role; collects all postrelease states (prereleases and devel snapshots) into; dummy 999 that at least gets them sorted correctly between releases and; allows EXACT CMake version comparisons. Returns, for example, 1.1.0.0 for; release 1.1, 1.3.4.0 for maintenance release 1.3.4, and 1.0.0.999 for; prerelease 1.1a1 or snapshot 1.1.dev600. """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:278,Deployability,release,releases,278,"""""""CMake expects MAJOR.MINOR.PATCH.TWEAK. The ancestral *last_release*; is padded into the first three roles. If not *is_release*, the tweak role; collects all postrelease states (prereleases and devel snapshots) into; dummy 999 that at least gets them sorted correctly between releases and; allows EXACT CMake version comparisons. Returns, for example, 1.1.0.0 for; release 1.1, 1.3.4.0 for maintenance release 1.3.4, and 1.0.0.999 for; prerelease 1.1a1 or snapshot 1.1.dev600. """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:367,Deployability,release,release,367,"""""""CMake expects MAJOR.MINOR.PATCH.TWEAK. The ancestral *last_release*; is padded into the first three roles. If not *is_release*, the tweak role; collects all postrelease states (prereleases and devel snapshots) into; dummy 999 that at least gets them sorted correctly between releases and; allows EXACT CMake version comparisons. Returns, for example, 1.1.0.0 for; release 1.1, 1.3.4.0 for maintenance release 1.3.4, and 1.0.0.999 for; prerelease 1.1a1 or snapshot 1.1.dev600. """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:404,Deployability,release,release,404,"""""""CMake expects MAJOR.MINOR.PATCH.TWEAK. The ancestral *last_release*; is padded into the first three roles. If not *is_release*, the tweak role; collects all postrelease states (prereleases and devel snapshots) into; dummy 999 that at least gets them sorted correctly between releases and; allows EXACT CMake version comparisons. Returns, for example, 1.1.0.0 for; release 1.1, 1.3.4.0 for maintenance release 1.3.4, and 1.0.0.999 for; prerelease 1.1a1 or snapshot 1.1.dev600. """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:148,Deployability,release,release,148,"""""""; def version_formatter(formatstring='{version}'):; if formatstring == 'all':; formatstring = '{version} {{{branch}}} {githash} {cmake} {clean} {release} {lastrel} <-- {versionlong}'. release = 'release' if (__version_release == 'True') else ('prerelease' if (__version_prerelease == 'True') else ''). ans = formatstring.format(version=__version__,; versionlong=__version_long,; githash=__version_long[len(__version__)+1:],; clean='' if __version_is_clean == 'True' else 'dirty',; branch=__version_branch_name,; lastrel=__version_last_release,; cmake=__version_cmake,; release=release); return ans; """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:187,Deployability,release,release,187,"""""""; def version_formatter(formatstring='{version}'):; if formatstring == 'all':; formatstring = '{version} {{{branch}}} {githash} {cmake} {clean} {release} {lastrel} <-- {versionlong}'. release = 'release' if (__version_release == 'True') else ('prerelease' if (__version_prerelease == 'True') else ''). ans = formatstring.format(version=__version__,; versionlong=__version_long,; githash=__version_long[len(__version__)+1:],; clean='' if __version_is_clean == 'True' else 'dirty',; branch=__version_branch_name,; lastrel=__version_last_release,; cmake=__version_cmake,; release=release); return ans; """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:198,Deployability,release,release,198,"""""""; def version_formatter(formatstring='{version}'):; if formatstring == 'all':; formatstring = '{version} {{{branch}}} {githash} {cmake} {clean} {release} {lastrel} <-- {versionlong}'. release = 'release' if (__version_release == 'True') else ('prerelease' if (__version_prerelease == 'True') else ''). ans = formatstring.format(version=__version__,; versionlong=__version_long,; githash=__version_long[len(__version__)+1:],; clean='' if __version_is_clean == 'True' else 'dirty',; branch=__version_branch_name,; lastrel=__version_last_release,; cmake=__version_cmake,; release=release); return ans; """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:572,Deployability,release,release,572,"""""""; def version_formatter(formatstring='{version}'):; if formatstring == 'all':; formatstring = '{version} {{{branch}}} {githash} {cmake} {clean} {release} {lastrel} <-- {versionlong}'. release = 'release' if (__version_release == 'True') else ('prerelease' if (__version_prerelease == 'True') else ''). ans = formatstring.format(version=__version__,; versionlong=__version_long,; githash=__version_long[len(__version__)+1:],; clean='' if __version_is_clean == 'True' else 'dirty',; branch=__version_branch_name,; lastrel=__version_last_release,; cmake=__version_cmake,; release=release); return ans; """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:580,Deployability,release,release,580,"""""""; def version_formatter(formatstring='{version}'):; if formatstring == 'all':; formatstring = '{version} {{{branch}}} {githash} {cmake} {clean} {release} {lastrel} <-- {versionlong}'. release = 'release' if (__version_release == 'True') else ('prerelease' if (__version_prerelease == 'True') else ''). ans = formatstring.format(version=__version__,; versionlong=__version_long,; githash=__version_long[len(__version__)+1:],; clean='' if __version_is_clean == 'True' else 'dirty',; branch=__version_branch_name,; lastrel=__version_last_release,; cmake=__version_cmake,; release=release); return ans; """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py:228,Deployability,release,release,228,"""""""Return version information string with data from *versdata* when; supplied with *formatstring* suitable for ``formatstring.format()``.; Use plaintext and any placeholders among: version, versionlong, githash,; branch, clean, release, lastrel, cmake. For example, '{branch}@{githash}'; returns something like 'fix200@1234567'. """"""",MatchSource.CODE_COMMENT,psi4/versioner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/versioner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py:73,Deployability,install,installed,73,"# Figure out paths; # * in figuring out psidatadir: envvar trumps staged/installed; # * some full paths are computed here using the prefix, but all outputs are relative to __file__, so relocatability preserved; # * note that all path entities are directories except for ""executable"" that is a file",MatchSource.CODE_COMMENT,psi4/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py:16,Modifiability,plugin,plugins,16,"# Make official plugins accessible in input",MatchSource.CODE_COMMENT,psi4/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py:24,Security,access,accessible,24,"# Make official plugins accessible in input",MatchSource.CODE_COMMENT,psi4/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py:41,Modifiability,plugin,plugins,41,"# Manage threads. Must be after endorsed plugins, honestly.",MatchSource.CODE_COMMENT,psi4/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py:77,Availability,down,down,77,"# Python portions of compiled-in Add-Ons; # * Note that this is a ""battening down the hatches"" for the many; # rather than letting PYTHONPATH rule for the few.",MatchSource.CODE_COMMENT,psi4/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py:18,Testability,log,logger,18,"# Create a custom logger",MatchSource.CODE_COMMENT,psi4/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py:38,Modifiability,config,configured,38,"# create initial psi4 from root to be configured later in extras",MatchSource.CODE_COMMENT,psi4/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py:44,Integrability,wrap,wrappers,44,"""""""Module with high-level functions calling wrappers and driver. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""",MatchSource.CODE_COMMENT,psi4/driver/aliases.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py:153,Usability,simpl,simple,153,"""""""Module with high-level functions calling wrappers and driver. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""",MatchSource.CODE_COMMENT,psi4/driver/aliases.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py:74,Deployability,integrat,integrated,74,"# Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file.",MatchSource.CODE_COMMENT,psi4/driver/aliases.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py:97,Energy Efficiency,energy,energy,97,"# Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file.",MatchSource.CODE_COMMENT,psi4/driver/aliases.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py:74,Integrability,integrat,integrated,74,"# Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file.",MatchSource.CODE_COMMENT,psi4/driver/aliases.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py:112,Integrability,rout,routines,112,"# Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file.",MatchSource.CODE_COMMENT,psi4/driver/aliases.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py:109,Integrability,interface,interface,109,"# Note: HF and MP2 steps (which don't need MRCC and indeed can't be; # run directly in MRCC through the Psi4 interface) nevertheless have; # qc_module=mrcc set here so that options sets (below, `""options""`; # and `""options_lo""`) are the same and the cbs() driver knows it's; # safe (that is, consistent) to use the ""free"" values (e.g.,; # HF from CCSD) resulting from; # MRCC CCSD calcs. This logic can be made smarter if needed.",MatchSource.CODE_COMMENT,psi4/driver/aliases.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py:277,Safety,safe,safe,277,"# Note: HF and MP2 steps (which don't need MRCC and indeed can't be; # run directly in MRCC through the Psi4 interface) nevertheless have; # qc_module=mrcc set here so that options sets (below, `""options""`; # and `""options_lo""`) are the same and the cbs() driver knows it's; # safe (that is, consistent) to use the ""free"" values (e.g.,; # HF from CCSD) resulting from; # MRCC CCSD calcs. This logic can be made smarter if needed.",MatchSource.CODE_COMMENT,psi4/driver/aliases.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py:393,Testability,log,logic,393,"# Note: HF and MP2 steps (which don't need MRCC and indeed can't be; # run directly in MRCC through the Psi4 interface) nevertheless have; # qc_module=mrcc set here so that options sets (below, `""options""`; # and `""options_lo""`) are the same and the cbs() driver knows it's; # safe (that is, consistent) to use the ""free"" values (e.g.,; # HF from CCSD) resulting from; # MRCC CCSD calcs. This logic can be made smarter if needed.",MatchSource.CODE_COMMENT,psi4/driver/aliases.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/aliases.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py:28,Availability,error,errors,28,"""""""Catch NumPy based import errors and suggest solutions.; Define some prettyprint formats.; Collect physical constants for py-side from QCElemental at CODATA consistent with c-side header.; """"""",MatchSource.CODE_COMMENT,psi4/driver/constants.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py:53,Deployability,install,install,53,"""""""; NumPy is a runtime requirement for Psi4. Please install NumPy to proceed. NumPy installation with a package manager can be accomplished by the following lines:; - conda install numpy; - sudo yum install numpy; - sudo apt-get install python-numpy; - brew install numpy; """"""",MatchSource.CODE_COMMENT,psi4/driver/constants.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py:85,Deployability,install,installation,85,"""""""; NumPy is a runtime requirement for Psi4. Please install NumPy to proceed. NumPy installation with a package manager can be accomplished by the following lines:; - conda install numpy; - sudo yum install numpy; - sudo apt-get install python-numpy; - brew install numpy; """"""",MatchSource.CODE_COMMENT,psi4/driver/constants.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py:174,Deployability,install,install,174,"""""""; NumPy is a runtime requirement for Psi4. Please install NumPy to proceed. NumPy installation with a package manager can be accomplished by the following lines:; - conda install numpy; - sudo yum install numpy; - sudo apt-get install python-numpy; - brew install numpy; """"""",MatchSource.CODE_COMMENT,psi4/driver/constants.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py:200,Deployability,install,install,200,"""""""; NumPy is a runtime requirement for Psi4. Please install NumPy to proceed. NumPy installation with a package manager can be accomplished by the following lines:; - conda install numpy; - sudo yum install numpy; - sudo apt-get install python-numpy; - brew install numpy; """"""",MatchSource.CODE_COMMENT,psi4/driver/constants.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py:230,Deployability,install,install,230,"""""""; NumPy is a runtime requirement for Psi4. Please install NumPy to proceed. NumPy installation with a package manager can be accomplished by the following lines:; - conda install numpy; - sudo yum install numpy; - sudo apt-get install python-numpy; - brew install numpy; """"""",MatchSource.CODE_COMMENT,psi4/driver/constants.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py:259,Deployability,install,install,259,"""""""; NumPy is a runtime requirement for Psi4. Please install NumPy to proceed. NumPy installation with a package manager can be accomplished by the following lines:; - conda install numpy; - sudo yum install numpy; - sudo apt-get install python-numpy; - brew install numpy; """"""",MatchSource.CODE_COMMENT,psi4/driver/constants.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py:15,Testability,log,logging,15,"# printing and logging formatting niceties",MatchSource.CODE_COMMENT,psi4/driver/constants.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/constants.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py:1091,Availability,avail,available,1091,"""""""Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using a weighted least squares approach; (c.f. https://doi.org/10.1063/1.4862157, particularly eqn. 7), locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic; constants. Any number of points greater than 4 may be provided, and they should bracket the minimum.; The data need not be evenly spaced, and can be provided in any order. The data are weighted such that; those closest to the minimum have highest impact. A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. :param rvals: The bond lengths (in Angstrom) for which energies are; provided, of length at least 5 and equal to the length of the energies array. :param energies: The energies (Eh) computed at the bond lengths in the rvals list. :param plot_fit: A string describing where to save a plot of the harmonic and anharmonic fits, the; inputted data points, re, r0 and the first few energy levels, if matplotlib; is available. Set to 'screen' to generate an interactive plot on the screen instead. If a filename is; provided, the image type is determined by the extension; see matplotlib for supported file types. :returns: (*dict*) Keys: ""re"", ""r0"", ""we"", ""wexe"", ""nu"", ""ZPVE(harmonic)"", ""ZPVE(anharmonic)"", ""Be"", ""B0"", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """"""",MatchSource.CODE_COMMENT,psi4/driver/diatomic.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py:90,Energy Efficiency,energy,energy,90,"""""""Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using a weighted least squares approach; (c.f. https://doi.org/10.1063/1.4862157, particularly eqn. 7), locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic; constants. Any number of points greater than 4 may be provided, and they should bracket the minimum.; The data need not be evenly spaced, and can be provided in any order. The data are weighted such that; those closest to the minimum have highest impact. A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. :param rvals: The bond lengths (in Angstrom) for which energies are; provided, of length at least 5 and equal to the length of the energies array. :param energies: The energies (Eh) computed at the bond lengths in the rvals list. :param plot_fit: A string describing where to save a plot of the harmonic and anharmonic fits, the; inputted data points, re, r0 and the first few energy levels, if matplotlib; is available. Set to 'screen' to generate an interactive plot on the screen instead. If a filename is; provided, the image type is determined by the extension; see matplotlib for supported file types. :returns: (*dict*) Keys: ""re"", ""r0"", ""we"", ""wexe"", ""nu"", ""ZPVE(harmonic)"", ""ZPVE(anharmonic)"", ""Be"", ""B0"", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """"""",MatchSource.CODE_COMMENT,psi4/driver/diatomic.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py:228,Energy Efficiency,energy,energy,228,"""""""Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using a weighted least squares approach; (c.f. https://doi.org/10.1063/1.4862157, particularly eqn. 7), locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic; constants. Any number of points greater than 4 may be provided, and they should bracket the minimum.; The data need not be evenly spaced, and can be provided in any order. The data are weighted such that; those closest to the minimum have highest impact. A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. :param rvals: The bond lengths (in Angstrom) for which energies are; provided, of length at least 5 and equal to the length of the energies array. :param energies: The energies (Eh) computed at the bond lengths in the rvals list. :param plot_fit: A string describing where to save a plot of the harmonic and anharmonic fits, the; inputted data points, re, r0 and the first few energy levels, if matplotlib; is available. Set to 'screen' to generate an interactive plot on the screen instead. If a filename is; provided, the image type is determined by the extension; see matplotlib for supported file types. :returns: (*dict*) Keys: ""re"", ""r0"", ""we"", ""wexe"", ""nu"", ""ZPVE(harmonic)"", ""ZPVE(anharmonic)"", ""Be"", ""B0"", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """"""",MatchSource.CODE_COMMENT,psi4/driver/diatomic.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py:1058,Energy Efficiency,energy,energy,1058,"""""""Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using a weighted least squares approach; (c.f. https://doi.org/10.1063/1.4862157, particularly eqn. 7), locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic; constants. Any number of points greater than 4 may be provided, and they should bracket the minimum.; The data need not be evenly spaced, and can be provided in any order. The data are weighted such that; those closest to the minimum have highest impact. A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. :param rvals: The bond lengths (in Angstrom) for which energies are; provided, of length at least 5 and equal to the length of the energies array. :param energies: The energies (Eh) computed at the bond lengths in the rvals list. :param plot_fit: A string describing where to save a plot of the harmonic and anharmonic fits, the; inputted data points, re, r0 and the first few energy levels, if matplotlib; is available. Set to 'screen' to generate an interactive plot on the screen instead. If a filename is; provided, the image type is determined by the extension; see matplotlib for supported file types. :returns: (*dict*) Keys: ""re"", ""r0"", ""we"", ""wexe"", ""nu"", ""ZPVE(harmonic)"", ""ZPVE(anharmonic)"", ""Be"", ""B0"", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """"""",MatchSource.CODE_COMMENT,psi4/driver/diatomic.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py:41,Energy Efficiency,energy,energy,41,"# Default plot range, before considering energy levels",MatchSource.CODE_COMMENT,psi4/driver/diatomic.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py:19,Energy Efficiency,energy,energy,19,"# Plot vibrational energy levels",MatchSource.CODE_COMMENT,psi4/driver/diatomic.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/diatomic.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:112,Performance,optimiz,optimizations,112,"""""""; Nexus of psi4.driver module with primary user-facing functions, including; single-point energies, geometry optimizations, properties, and vibrational; frequency calculations. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:15,Integrability,wrap,wrappers,15,"# never import wrappers or aliases into this file",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:31,Integrability,interface,interface,31,"# Bounce to MDI (MolSSI driver interface) if mdi kwarg",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:114,Energy Efficiency,energy,energy,114,"## Second half of this fn -- entry means program running exactly analytic 0th derivative; # Commit to procedures['energy'] call hereafter",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:27,Energy Efficiency,energy,energy,27,"#for precallback in hooks['energy']['pre']:; # precallback(lowername, **kwargs); # needed (+restore below) so long as AtomicComputer-s aren't run through json (where convcrit also lives)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:15,Availability,avail,available,15,"# Option still available for procedure-specific action",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:29,Availability,checkpoint,checkpoint,29,"# Default file number is the checkpoint one",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:15,Energy Efficiency,energy,energy,15,"# TODO current energy safer than wfn.energy() for now, but should be revisited; # TODO place this with the associated call, very awkward to call this in other areas at the moment",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:37,Energy Efficiency,energy,energy,37,"# TODO current energy safer than wfn.energy() for now, but should be revisited; # TODO place this with the associated call, very awkward to call this in other areas at the moment",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:22,Safety,safe,safer,22,"# TODO current energy safer than wfn.energy() for now, but should be revisited; # TODO place this with the associated call, very awkward to call this in other areas at the moment",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:10,Integrability,wrap,wrapper,10,"# Convert wrapper directives from options (where ppl know to find them) to kwargs (suitable for non-globals transmitting)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:159,Energy Efficiency,energy,energy,159,"## Second half of this fn -- entry means program running exactly analytic 1st derivative; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:103,Integrability,depend,dependent,103,"## Second half of this fn -- entry means program running exactly analytic 1st derivative; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:139,Testability,test,test,139,"## Second half of this fn -- entry means program running exactly analytic 1st derivative; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:19,Performance,perform,perform,19,"""""""gradient() will perform analytic gradient computation.\n""""""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:23,Energy Efficiency,energy,energy,23,"""""""; Internally run an energy and gradient calculation for geometric ; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:11,Performance,optimiz,optimizer,11,"# Setup an optimizer object",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:59,Performance,optimiz,optimization,59,"# Recreate all of optking's internal classes to restart an optimization; # This has not been well tested - Experimental",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:98,Testability,test,tested,98,"# Recreate all of optking's internal classes to restart an optimization; # This has not been well tested - Experimental",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:32,Performance,optimiz,optimization,32,"# create an OptHelper to run an optimization through; # Optking will ignore any keywords it doesn't recognize.",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:105,Performance,optimiz,optimize,105,"# Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:21,Energy Efficiency,energy,energy,21,"# tuple of strings ('energy', 'gradient', etc); # Compute the gradient - no longer need to worry about opt_data being wiped",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:19,Deployability,update,update,19,"# force optking to update its molecule to psi4's.; # This allows for psi4 to rotate as desired. If optimizing in cartesians. rotation is not allowed; # Process gradient / hessian. Take step. Print summary to output for user",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:99,Performance,optimiz,optimizing,99,"# force optking to update its molecule to psi4's.; # This allows for psi4 to rotate as desired. If optimizing in cartesians. rotation is not allowed; # Process gradient / hessian. Take step. Print summary to output for user",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:35,Availability,error,error,35,"# Optking encountered an algorithm error and reset.",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:33,Availability,failure,failure,33,"# Query optking for convergence, failure or continuing opt.",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:26,Performance,optimiz,optimized,26,"# Changing environment to optimized geometry as expected by user",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:61,Performance,optimiz,optimize,61,"# Create OptimizationResult like Schema. Not validated since optimize() does not pass AtomicResults.",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:45,Security,validat,validated,45,"# Create OptimizationResult like Schema. Not validated since optimize() does not pass AtomicResults.",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:12,Performance,optimiz,optimization,12,"""""""geometry optimization""""""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:12,Performance,optimiz,optimization,12,"""""""geometry optimization""""""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:10,Integrability,wrap,wrapper,10,"# Convert wrapper directives from options (where ppl know to find them) to kwargs (suitable for non-globals transmitting)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:69,Energy Efficiency,energy,energy,69,"# Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:13,Integrability,depend,dependent,13,"# Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:49,Testability,test,test,49,"# Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed)",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:18,Performance,perform,perform,18,"""""""hessian() will perform analytic frequency computation.\n""""""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:60,Energy Efficiency,energy,energy,60,"#if isinstance(lowername, str) and lowername in procedures['energy']:; # # this correctly filters out cbs fn and ""hf/cc-pvtz""; # # it probably incorrectly filters out mp5, but reconsider in DDD; # core.set_variable(f""CURRENT HESSIAN"", H); # core.set_variable(f""{lowername.upper()} TOTAL HESSIAN"", H); # core.set_variable(f""{lowername.upper()} TOTAL GRADIENT"", G0); # wfn.set_variable(f""{lowername.upper()} TOTAL HESSIAN"", H); # wfn.set_variable(f""{lowername.upper()} TOTAL GRADIENT"", G0); # TODO: check that current energy's being set to the right figure when this code is actually used",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:516,Energy Efficiency,energy,energy,516,"#if isinstance(lowername, str) and lowername in procedures['energy']:; # # this correctly filters out cbs fn and ""hf/cc-pvtz""; # # it probably incorrectly filters out mp5, but reconsider in DDD; # core.set_variable(f""CURRENT HESSIAN"", H); # core.set_variable(f""{lowername.upper()} TOTAL HESSIAN"", H); # core.set_variable(f""{lowername.upper()} TOTAL GRADIENT"", G0); # wfn.set_variable(f""{lowername.upper()} TOTAL HESSIAN"", H); # wfn.set_variable(f""{lowername.upper()} TOTAL GRADIENT"", G0); # TODO: check that current energy's being set to the right figure when this code is actually used",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:2,Availability,avail,available,2,"# available for analytic and any findif including totally symmetric space",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:169,Modifiability,variab,variables,169,"""""""Function to perform analysis of a hessian or hessian block, specifically...; calling for and printing vibrational and thermochemical analysis, setting thermochemical variables,; and writing the vibrec and normal mode files. Parameters; ----------; wfn; The wavefunction which had its Hessian computed.; hess; Hessian to analyze, if not the hessian in wfn.; (3*nat, 3*nat) non-mass-weighted Hessian in atomic units, [Eh/a0/a0].; irrep; The irrep for which frequencies are calculated. Thermochemical analysis; is skipped if this is specified (non-None),; as only one symmetry block of the hessian has been computed.; molecule : :py:class:`~psi4.core.Molecule` or qcdb.Molecule, optional; The molecule to pull information from, if not the molecule in wfn. Must at least have similar; geometry to the molecule in wfn.; project_trans; Should translations be projected in the harmonic analysis?; project_rot; Should rotations be projected in the harmonic analysis?. Returns; -------; vibinfo : ~typing.Dict[str, ~numpy.ndarray]; A dictionary of vibrational information. See :py:func:`~psi4.driver.qcdb.vib.harmonic_analysis`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:15,Performance,perform,perform,15,"""""""Function to perform analysis of a hessian or hessian block, specifically...; calling for and printing vibrational and thermochemical analysis, setting thermochemical variables,; and writing the vibrec and normal mode files. Parameters; ----------; wfn; The wavefunction which had its Hessian computed.; hess; Hessian to analyze, if not the hessian in wfn.; (3*nat, 3*nat) non-mass-weighted Hessian in atomic units, [Eh/a0/a0].; irrep; The irrep for which frequencies are calculated. Thermochemical analysis; is skipped if this is specified (non-None),; as only one symmetry block of the hessian has been computed.; molecule : :py:class:`~psi4.core.Molecule` or qcdb.Molecule, optional; The molecule to pull information from, if not the molecule in wfn. Must at least have similar; geometry to the molecule in wfn.; project_trans; Should translations be projected in the harmonic analysis?; project_rot; Should rotations be projected in the harmonic analysis?. Returns; -------; vibinfo : ~typing.Dict[str, ~numpy.ndarray]; A dictionary of vibrational information. See :py:func:`~psi4.driver.qcdb.vib.harmonic_analysis`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:15,Energy Efficiency,energy,energy,15,"# someday, wfn.energy()",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:24,Availability,checkpoint,checkpoint,24,"# Start by writing a G* checkpoint file, for the GDMA code to read in",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:21,Availability,avail,available,21,"""""""; DMA results are available in the Python driver through the commands:; variable('DMA DISTRIBUTED MULTIPOLES'); variable('DMA TOTAL MULTIPOLES'). """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:75,Modifiability,variab,variable,75,"""""""; DMA results are available in the Python driver through the commands:; variable('DMA DISTRIBUTED MULTIPOLES'); variable('DMA TOTAL MULTIPOLES'). """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:115,Modifiability,variab,variable,115,"""""""; DMA results are available in the Python driver through the commands:; variable('DMA DISTRIBUTED MULTIPOLES'); variable('DMA TOTAL MULTIPOLES'). """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:1204,Energy Efficiency,energy,energy,1204,"""""""Function to write wavefunction information in *wfn* to *filename* in; Gaussian FCHK format. .. versionadded:: 0.6. :returns: None. :param wfn: set of molecule, basis, orbitals from which to generate fchk file. :param filename: destination file name for FCHK file. :param debug: returns a dictionary to aid with debugging. :param strict_label: If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes; -----; * A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; * The allowed headers for methods are general and limited, i.e., ""Total SCF|MP2|CI|CC Density"",; PSI4 will try to find the right one for the current calculation. If `strict_label=False` the PSI4 method name will be used as label.; * Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; * Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the 'Orbital Energy' field contains ambiguous data. :examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:1040,Performance,optimiz,optimized,1040,"""""""Function to write wavefunction information in *wfn* to *filename* in; Gaussian FCHK format. .. versionadded:: 0.6. :returns: None. :param wfn: set of molecule, basis, orbitals from which to generate fchk file. :param filename: destination file name for FCHK file. :param debug: returns a dictionary to aid with debugging. :param strict_label: If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes; -----; * A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; * The allowed headers for methods are general and limited, i.e., ""Total SCF|MP2|CI|CC Density"",; PSI4 will try to find the right one for the current calculation. If `strict_label=False` the PSI4 method name will be used as label.; * Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; * Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the 'Orbital Energy' field contains ambiguous data. :examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:36,Performance,optimiz,optimized,36,"""""""FCHKWriter: Caution! For orbital-optimized correlated methods; the 'Orbital Energy' field contains ambiguous data. \n""""""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:147,Energy Efficiency,energy,energy,147,"# At this point we don't know the method name, so we try to search for it.; # idea: get the method from the variable matching closely the 'current energy'; # for varlist, wfn is long-term and to allow from-file wfns. core is b/c some modules not storing in wfn yet",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:108,Modifiability,variab,variable,108,"# At this point we don't know the method name, so we try to search for it.; # idea: get the method from the variable matching closely the 'current energy'; # for varlist, wfn is long-term and to allow from-file wfns. core is b/c some modules not storing in wfn yet",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:24,Energy Efficiency,energy,energy,24,"# find closest matching energy",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:79,Energy Efficiency,reduce,reduced,79,"# The 'official' list of labels for compatibility.; # OMP2,MP2.5,OCCD, etc get reduced to MP2,CC.",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:262,Energy Efficiency,energy,energy,262,"""""""Function to write wavefunction information in *wfn* to *filename* in; molden format. Will write natural orbitals from *density* (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. .. versionadded:: 0.5; *wfn* parameter passed explicitly. :returns: None. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, basis, orbitals from which to generate cube files. :type filename: str; :param filename: destination file name for MOLDEN file (optional). :type density_a: :py:class:`~psi4.core.Matrix`; :param density_a: density in the MO basis to build alpha NO's from (optional). :type density_b: :py:class:`~psi4.core.Matrix`; :param density_b: density in the MO basis to build beta NO's from, assumes restricted if not supplied (optional). :type dovirtual: bool; :param dovirtual: do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO's (false) (optional). :examples:. 1. Molden file with the Kohn-Sham orbitals of a DFT calculation. >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). 2. Molden file for CI/MCSCF computation using NO roots.; Any method returning a ``CIWavefunction`` object will work: ``detci``,; ``fci``, ``casscf``, etc. The first two arguments of ``get_opdm`` can be; set to ``n, n`` where n => 0 selects the root to write out, provided; these roots were computed, see :term:`NUM_ROOTS <NUM_ROOTS (DETCI)>`. The; third argument controls the spin (``""A""``, ``""B""`` or ``""SUM""``) and the final; boolean option determines whether inactive orbitals are included. >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). 3. The following produces **an INCORRECT Molden file**, because th",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:1249,Energy Efficiency,energy,energy,1249,"n addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. .. versionadded:: 0.5; *wfn* parameter passed explicitly. :returns: None. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, basis, orbitals from which to generate cube files. :type filename: str; :param filename: destination file name for MOLDEN file (optional). :type density_a: :py:class:`~psi4.core.Matrix`; :param density_a: density in the MO basis to build alpha NO's from (optional). :type density_b: :py:class:`~psi4.core.Matrix`; :param density_b: density in the MO basis to build beta NO's from, assumes restricted if not supplied (optional). :type dovirtual: bool; :param dovirtual: do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO's (false) (optional). :examples:. 1. Molden file with the Kohn-Sham orbitals of a DFT calculation. >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). 2. Molden file for CI/MCSCF computation using NO roots.; Any method returning a ``CIWavefunction`` object will work: ``detci``,; ``fci``, ``casscf``, etc. The first two arguments of ``get_opdm`` can be; set to ``n, n`` where n => 0 selects the root to write out, provided; these roots were computed, see :term:`NUM_ROOTS <NUM_ROOTS (DETCI)>`. The; third argument controls the spin (``""A""``, ``""B""`` or ``""SUM""``) and the final; boolean option determines whether inactive orbitals are included. >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). 3. The following produces **an INCORRECT Molden file**, because the; ``molden`` function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point. >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:1824,Energy Efficiency,energy,energy,1824,"file name for MOLDEN file (optional). :type density_a: :py:class:`~psi4.core.Matrix`; :param density_a: density in the MO basis to build alpha NO's from (optional). :type density_b: :py:class:`~psi4.core.Matrix`; :param density_b: density in the MO basis to build beta NO's from, assumes restricted if not supplied (optional). :type dovirtual: bool; :param dovirtual: do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO's (false) (optional). :examples:. 1. Molden file with the Kohn-Sham orbitals of a DFT calculation. >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). 2. Molden file for CI/MCSCF computation using NO roots.; Any method returning a ``CIWavefunction`` object will work: ``detci``,; ``fci``, ``casscf``, etc. The first two arguments of ``get_opdm`` can be; set to ``n, n`` where n => 0 selects the root to write out, provided; these roots were computed, see :term:`NUM_ROOTS <NUM_ROOTS (DETCI)>`. The; third argument controls the spin (``""A""``, ``""B""`` or ``""SUM""``) and the final; boolean option determines whether inactive orbitals are included. >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). 3. The following produces **an INCORRECT Molden file**, because the; ``molden`` function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point. >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). 4. Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO). >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py:2197,Energy Efficiency,energy,energy,2197,"file name for MOLDEN file (optional). :type density_a: :py:class:`~psi4.core.Matrix`; :param density_a: density in the MO basis to build alpha NO's from (optional). :type density_b: :py:class:`~psi4.core.Matrix`; :param density_b: density in the MO basis to build beta NO's from, assumes restricted if not supplied (optional). :type dovirtual: bool; :param dovirtual: do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO's (false) (optional). :examples:. 1. Molden file with the Kohn-Sham orbitals of a DFT calculation. >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). 2. Molden file for CI/MCSCF computation using NO roots.; Any method returning a ``CIWavefunction`` object will work: ``detci``,; ``fci``, ``casscf``, etc. The first two arguments of ``get_opdm`` can be; set to ``n, n`` where n => 0 selects the root to write out, provided; these roots were computed, see :term:`NUM_ROOTS <NUM_ROOTS (DETCI)>`. The; third argument controls the spin (``""A""``, ``""B""`` or ``""SUM""``) and the final; boolean option determines whether inactive orbitals are included. >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). 3. The following produces **an INCORRECT Molden file**, because the; ``molden`` function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point. >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). 4. Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO). >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). """"""",MatchSource.CODE_COMMENT,psi4/driver/driver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:1914,Availability,redundant,redundant,1914,"rmat (aka dict spec). _validate_cbs_inputs(); ----------------------. _get_default_xtpl(); -------------------; * supply default xtpl fn for stage and basis conditions. _expand_bracketed_basis(); -------------------------; * parse and validate user bases. * check and supply defaults for cbs_metadata format (various calls to above two fns). * BaseComputer.__init__(). _build_cbs_compute(); --------------------. _expand_scheme_orders(); -----------------------; * form f_fields dict of entries for each zeta in a scheme (single NEED; entries related by nonlinear fn; (that is, constructing the CBS energy from the component energies is nonlinear)). _contract_bracketed_basis(); ---------------------------; * form basis abbr. string from basis seq. * form d_fields list of stages or stage halves from NEEDs (GRAND_NEED; items related linearly to form final val); * form list of entries (entry:= mtd-bas-opt specification) mentioned in GRAND_NEED (MODELCHEM; redundant, naive); * form subset of MODELCHEM with minimal list of jobs (job:= entry on which to call QC) to satisfy CBS (JOBS; minimal, enlightened); * form superset of JOBS with maximal list of entries resulting from JOBS (TROVE); * return GRAND_NEED/cbsrec, JOBS/compute_list, TROVE/trove. * form task_list of AtomicComputers 1:1 from JOBS/compute_list. -------------------------------; CompositeComputer.build_tasks(); -------------------------------; * pass. ---------------------------; CompositeComputer.compute(); ---------------------------; * compute() for each job in task list. -----------------------------------; CompositeComputer.get_psi_results(); -----------------------------------. Computer.get_results(); ----------------------. Computer._prepare_results(); ---------------------------; * get_results() for each job in task list; * arrange atomicresult data into e/d/g/h fields in compute_list and copy them into cbs tables. _assemble_cbs_components(); --------------------------; * fill in results from TROVE/trove into ",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:3131,Availability,avail,available,3131," abbr. string from basis seq. * form d_fields list of stages or stage halves from NEEDs (GRAND_NEED; items related linearly to form final val); * form list of entries (entry:= mtd-bas-opt specification) mentioned in GRAND_NEED (MODELCHEM; redundant, naive); * form subset of MODELCHEM with minimal list of jobs (job:= entry on which to call QC) to satisfy CBS (JOBS; minimal, enlightened); * form superset of JOBS with maximal list of entries resulting from JOBS (TROVE); * return GRAND_NEED/cbsrec, JOBS/compute_list, TROVE/trove. * form task_list of AtomicComputers 1:1 from JOBS/compute_list. -------------------------------; CompositeComputer.build_tasks(); -------------------------------; * pass. ---------------------------; CompositeComputer.compute(); ---------------------------; * compute() for each job in task list. -----------------------------------; CompositeComputer.get_psi_results(); -----------------------------------. Computer.get_results(); ----------------------. Computer._prepare_results(); ---------------------------; * get_results() for each job in task list; * arrange atomicresult data into e/d/g/h fields in compute_list and copy them into cbs tables. _assemble_cbs_components(); --------------------------; * fill in results from TROVE/trove into GRAND_NEED/cbsrec. _contract_scheme_orders(); -------------------------; * prepare arguments for xtpl fns based on desired E/D/G/H quantity. * form extrapolated values for all available E/D/G/H quantities; * return structure of extrapolated values and filled-in GRAND_NEED/cbsrec. _summary_table(); ----------------; * build string table of cbs results. * form cbs qcvars, inc'l number, E, DG, G, H as available; * form model, including detailed dict at atomicresult.extras[""cbs_record""]. * convert result to psi4.core.Matrix (non-energy). _cbs_schema_to_wfn(); --------------------; * build wfn from cbs mol and basis (always def2-svp) and module (if present); * push qcvars to P::e and wfn. * return e/g/h and wfn. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:3357,Availability,avail,available,3357," abbr. string from basis seq. * form d_fields list of stages or stage halves from NEEDs (GRAND_NEED; items related linearly to form final val); * form list of entries (entry:= mtd-bas-opt specification) mentioned in GRAND_NEED (MODELCHEM; redundant, naive); * form subset of MODELCHEM with minimal list of jobs (job:= entry on which to call QC) to satisfy CBS (JOBS; minimal, enlightened); * form superset of JOBS with maximal list of entries resulting from JOBS (TROVE); * return GRAND_NEED/cbsrec, JOBS/compute_list, TROVE/trove. * form task_list of AtomicComputers 1:1 from JOBS/compute_list. -------------------------------; CompositeComputer.build_tasks(); -------------------------------; * pass. ---------------------------; CompositeComputer.compute(); ---------------------------; * compute() for each job in task list. -----------------------------------; CompositeComputer.get_psi_results(); -----------------------------------. Computer.get_results(); ----------------------. Computer._prepare_results(); ---------------------------; * get_results() for each job in task list; * arrange atomicresult data into e/d/g/h fields in compute_list and copy them into cbs tables. _assemble_cbs_components(); --------------------------; * fill in results from TROVE/trove into GRAND_NEED/cbsrec. _contract_scheme_orders(); -------------------------; * prepare arguments for xtpl fns based on desired E/D/G/H quantity. * form extrapolated values for all available E/D/G/H quantities; * return structure of extrapolated values and filled-in GRAND_NEED/cbsrec. _summary_table(); ----------------; * build string table of cbs results. * form cbs qcvars, inc'l number, E, DG, G, H as available; * form model, including detailed dict at atomicresult.extras[""cbs_record""]. * convert result to psi4.core.Matrix (non-energy). _cbs_schema_to_wfn(); --------------------; * build wfn from cbs mol and basis (always def2-svp) and module (if present); * push qcvars to P::e and wfn. * return e/g/h and wfn. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:251,Energy Efficiency,energy,energy,251,"""""""Plan, run, and assemble QC tasks to obtain composite method, basis, & options treatments. ========; CBS Flow; ========; Bullet points are major actions; Lines of dashes denote function calls; stage: scf, corl, delta1, delta2, ...; e/d/dd=dg/g/h := energy, dipole, dipole derivative = dipole gradient, gradient, Hessian. cbs_text_parser(); -----------------; * called from task_planner() only if ""/"" in method. _parse_cbs_gufunc_string(); --------------------------; * break user string into paired method and basis stages. * transform user string into cbs kwargs inc'l basic cbs_metadata; cbs kwargs may signal simple method/basis single point -or- a modelchem requiring CompositeComputer. ----------------------------; CompositeComputer.__init__(); ----------------------------. _process_cbs_kwargs(); ---------------------; * if input is cbs_metadata dict, skip to _validate_cbs_inputs(); * otherwise, transform user kwargs into trial cbs_metadata format (aka dict spec). _validate_cbs_inputs(); ----------------------. _get_default_xtpl(); -------------------; * supply default xtpl fn for stage and basis conditions. _expand_bracketed_basis(); -------------------------; * parse and validate user bases. * check and supply defaults for cbs_metadata format (various calls to above two fns). * BaseComputer.__init__(). _build_cbs_compute(); --------------------. _expand_scheme_orders(); -----------------------; * form f_fields dict of entries for each zeta in a scheme (single NEED; entries related by nonlinear fn; (that is, constructing the CBS energy from the component energies is nonlinear)). _contract_bracketed_basis(); ---------------------------; * form basis abbr. string from basis seq. * form d_fields list of stages or stage halves from NEEDs (GRAND_NEED; items related linearly to form final val); * form list of entries (entry:= mtd-bas-opt specification) mentioned in GRAND_NEED (MODELCHEM; redundant, naive); * form subset of MODELCHEM with minimal list of jobs (job:= entry on",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:1554,Energy Efficiency,energy,energy,1554,"ing into paired method and basis stages. * transform user string into cbs kwargs inc'l basic cbs_metadata; cbs kwargs may signal simple method/basis single point -or- a modelchem requiring CompositeComputer. ----------------------------; CompositeComputer.__init__(); ----------------------------. _process_cbs_kwargs(); ---------------------; * if input is cbs_metadata dict, skip to _validate_cbs_inputs(); * otherwise, transform user kwargs into trial cbs_metadata format (aka dict spec). _validate_cbs_inputs(); ----------------------. _get_default_xtpl(); -------------------; * supply default xtpl fn for stage and basis conditions. _expand_bracketed_basis(); -------------------------; * parse and validate user bases. * check and supply defaults for cbs_metadata format (various calls to above two fns). * BaseComputer.__init__(). _build_cbs_compute(); --------------------. _expand_scheme_orders(); -----------------------; * form f_fields dict of entries for each zeta in a scheme (single NEED; entries related by nonlinear fn; (that is, constructing the CBS energy from the component energies is nonlinear)). _contract_bracketed_basis(); ---------------------------; * form basis abbr. string from basis seq. * form d_fields list of stages or stage halves from NEEDs (GRAND_NEED; items related linearly to form final val); * form list of entries (entry:= mtd-bas-opt specification) mentioned in GRAND_NEED (MODELCHEM; redundant, naive); * form subset of MODELCHEM with minimal list of jobs (job:= entry on which to call QC) to satisfy CBS (JOBS; minimal, enlightened); * form superset of JOBS with maximal list of entries resulting from JOBS (TROVE); * return GRAND_NEED/cbsrec, JOBS/compute_list, TROVE/trove. * form task_list of AtomicComputers 1:1 from JOBS/compute_list. -------------------------------; CompositeComputer.build_tasks(); -------------------------------; * pass. ---------------------------; CompositeComputer.compute(); ---------------------------; * compute() for each ",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:3486,Energy Efficiency,energy,energy,3486," abbr. string from basis seq. * form d_fields list of stages or stage halves from NEEDs (GRAND_NEED; items related linearly to form final val); * form list of entries (entry:= mtd-bas-opt specification) mentioned in GRAND_NEED (MODELCHEM; redundant, naive); * form subset of MODELCHEM with minimal list of jobs (job:= entry on which to call QC) to satisfy CBS (JOBS; minimal, enlightened); * form superset of JOBS with maximal list of entries resulting from JOBS (TROVE); * return GRAND_NEED/cbsrec, JOBS/compute_list, TROVE/trove. * form task_list of AtomicComputers 1:1 from JOBS/compute_list. -------------------------------; CompositeComputer.build_tasks(); -------------------------------; * pass. ---------------------------; CompositeComputer.compute(); ---------------------------; * compute() for each job in task list. -----------------------------------; CompositeComputer.get_psi_results(); -----------------------------------. Computer.get_results(); ----------------------. Computer._prepare_results(); ---------------------------; * get_results() for each job in task list; * arrange atomicresult data into e/d/g/h fields in compute_list and copy them into cbs tables. _assemble_cbs_components(); --------------------------; * fill in results from TROVE/trove into GRAND_NEED/cbsrec. _contract_scheme_orders(); -------------------------; * prepare arguments for xtpl fns based on desired E/D/G/H quantity. * form extrapolated values for all available E/D/G/H quantities; * return structure of extrapolated values and filled-in GRAND_NEED/cbsrec. _summary_table(); ----------------; * build string table of cbs results. * form cbs qcvars, inc'l number, E, DG, G, H as available; * form model, including detailed dict at atomicresult.extras[""cbs_record""]. * convert result to psi4.core.Matrix (non-energy). _cbs_schema_to_wfn(); --------------------; * build wfn from cbs mol and basis (always def2-svp) and module (if present); * push qcvars to P::e and wfn. * return e/g/h and wfn. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:1914,Safety,redund,redundant,1914,"rmat (aka dict spec). _validate_cbs_inputs(); ----------------------. _get_default_xtpl(); -------------------; * supply default xtpl fn for stage and basis conditions. _expand_bracketed_basis(); -------------------------; * parse and validate user bases. * check and supply defaults for cbs_metadata format (various calls to above two fns). * BaseComputer.__init__(). _build_cbs_compute(); --------------------. _expand_scheme_orders(); -----------------------; * form f_fields dict of entries for each zeta in a scheme (single NEED; entries related by nonlinear fn; (that is, constructing the CBS energy from the component energies is nonlinear)). _contract_bracketed_basis(); ---------------------------; * form basis abbr. string from basis seq. * form d_fields list of stages or stage halves from NEEDs (GRAND_NEED; items related linearly to form final val); * form list of entries (entry:= mtd-bas-opt specification) mentioned in GRAND_NEED (MODELCHEM; redundant, naive); * form subset of MODELCHEM with minimal list of jobs (job:= entry on which to call QC) to satisfy CBS (JOBS; minimal, enlightened); * form superset of JOBS with maximal list of entries resulting from JOBS (TROVE); * return GRAND_NEED/cbsrec, JOBS/compute_list, TROVE/trove. * form task_list of AtomicComputers 1:1 from JOBS/compute_list. -------------------------------; CompositeComputer.build_tasks(); -------------------------------; * pass. ---------------------------; CompositeComputer.compute(); ---------------------------; * compute() for each job in task list. -----------------------------------; CompositeComputer.get_psi_results(); -----------------------------------. Computer.get_results(); ----------------------. Computer._prepare_results(); ---------------------------; * get_results() for each job in task list; * arrange atomicresult data into e/d/g/h fields in compute_list and copy them into cbs tables. _assemble_cbs_components(); --------------------------; * fill in results from TROVE/trove into ",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:1190,Security,validat,validate,1190,"ashes denote function calls; stage: scf, corl, delta1, delta2, ...; e/d/dd=dg/g/h := energy, dipole, dipole derivative = dipole gradient, gradient, Hessian. cbs_text_parser(); -----------------; * called from task_planner() only if ""/"" in method. _parse_cbs_gufunc_string(); --------------------------; * break user string into paired method and basis stages. * transform user string into cbs kwargs inc'l basic cbs_metadata; cbs kwargs may signal simple method/basis single point -or- a modelchem requiring CompositeComputer. ----------------------------; CompositeComputer.__init__(); ----------------------------. _process_cbs_kwargs(); ---------------------; * if input is cbs_metadata dict, skip to _validate_cbs_inputs(); * otherwise, transform user kwargs into trial cbs_metadata format (aka dict spec). _validate_cbs_inputs(); ----------------------. _get_default_xtpl(); -------------------; * supply default xtpl fn for stage and basis conditions. _expand_bracketed_basis(); -------------------------; * parse and validate user bases. * check and supply defaults for cbs_metadata format (various calls to above two fns). * BaseComputer.__init__(). _build_cbs_compute(); --------------------. _expand_scheme_orders(); -----------------------; * form f_fields dict of entries for each zeta in a scheme (single NEED; entries related by nonlinear fn; (that is, constructing the CBS energy from the component energies is nonlinear)). _contract_bracketed_basis(); ---------------------------; * form basis abbr. string from basis seq. * form d_fields list of stages or stage halves from NEEDs (GRAND_NEED; items related linearly to form final val); * form list of entries (entry:= mtd-bas-opt specification) mentioned in GRAND_NEED (MODELCHEM; redundant, naive); * form subset of MODELCHEM with minimal list of jobs (job:= entry on which to call QC) to satisfy CBS (JOBS; minimal, enlightened); * form superset of JOBS with maximal list of entries resulting from JOBS (TROVE); * return GRAND_NEED/",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:614,Usability,simpl,simple,614,"""""""Plan, run, and assemble QC tasks to obtain composite method, basis, & options treatments. ========; CBS Flow; ========; Bullet points are major actions; Lines of dashes denote function calls; stage: scf, corl, delta1, delta2, ...; e/d/dd=dg/g/h := energy, dipole, dipole derivative = dipole gradient, gradient, Hessian. cbs_text_parser(); -----------------; * called from task_planner() only if ""/"" in method. _parse_cbs_gufunc_string(); --------------------------; * break user string into paired method and basis stages. * transform user string into cbs kwargs inc'l basic cbs_metadata; cbs kwargs may signal simple method/basis single point -or- a modelchem requiring CompositeComputer. ----------------------------; CompositeComputer.__init__(); ----------------------------. _process_cbs_kwargs(); ---------------------; * if input is cbs_metadata dict, skip to _validate_cbs_inputs(); * otherwise, transform user kwargs into trial cbs_metadata format (aka dict spec). _validate_cbs_inputs(); ----------------------. _get_default_xtpl(); -------------------; * supply default xtpl fn for stage and basis conditions. _expand_bracketed_basis(); -------------------------; * parse and validate user bases. * check and supply defaults for cbs_metadata format (various calls to above two fns). * BaseComputer.__init__(). _build_cbs_compute(); --------------------. _expand_scheme_orders(); -----------------------; * form f_fields dict of entries for each zeta in a scheme (single NEED; entries related by nonlinear fn; (that is, constructing the CBS energy from the component energies is nonlinear)). _contract_bracketed_basis(); ---------------------------; * form basis abbr. string from basis seq. * form d_fields list of stages or stage halves from NEEDs (GRAND_NEED; items related linearly to form final val); * form list of entries (entry:= mtd-bas-opt specification) mentioned in GRAND_NEED (MODELCHEM; redundant, naive); * form subset of MODELCHEM with minimal list of jobs (job:= entry on",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:29,Security,validat,validate,29,"""""""Function to transform and validate basis series specification for cbs(). Parameters; ----------; basisstring; A string containing the basis sets to be expanded.; A basis set with no paired square brackets is passed through; with zeta level 0 (e.g., ``'6-31+G(d,p)'`` is returned as; ``([""6-31+G(d,p)""], [0])``). A basis set with square brackets is checked; for sensible sequence and returned as separate basis sets; (e.g., ``'cc-pV[Q5]Z'` is returned as ``([""cc-pVQZ"", ""cc-pV5Z""], [4, 5])``).; Allows out-of-order zeta specification (e.g., ``[qtd]``) and numeral for; number (e.g., ``[23]``). Does not allow skipped zetas (e.g., ``[dq]``), zetas; outside the [2,8] range, non-Dunning, non-Ahlrichs, or non-Jensen sets,; or non-findable .gbs sets.; molecule; This function checks that the basis is valid by trying to build; the qcdb.BasisSet object for *molecule* or for H2 if None. Returns; -------; tuple; Tuple in the ``([basis set names], [basis set zetas])`` format. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:185,Energy Efficiency,energy,energy,185,""""""" A helper function to determine default extrapolation type. Parameters; ----------; nbasis; Number of basis sets; xtpl_type; {'scf', 'corl'}; Extrapolation type: 'scf' for the total energy, 'corl' for just the; correlation component. Returns; -------; Callable; Extrapolation function to be used.; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:28,Security,validat,validates,28,""""""" A helper function which validates the ``cbs_metadata`` format,; expands basis sets, and provides sensible defaults for optional arguments. Parameters; ----------; cbs_metadata; List of dicts containing CBS stage keywords.; molecule; Molecule to be passed to _expand_bracketed_basis(). Returns; -------; list; Validated list of dictionaries, with each item consisting of an extrapolation; stage. All validation takes place here.; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:403,Security,validat,validation,403,""""""" A helper function which validates the ``cbs_metadata`` format,; expands basis sets, and provides sensible defaults for optional arguments. Parameters; ----------; cbs_metadata; List of dicts containing CBS stage keywords.; molecule; Molecule to be passed to _expand_bracketed_basis(). Returns; -------; list; Validated list of dictionaries, with each item consisting of an extrapolation; stage. All validation takes place here.; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:107,Security,validat,validation,107,""""""" A helper function which translates supplied kwargs into the; ``cbs_metadata`` format and passes it for validation. Parameters; ----------; kwargs; kwargs containing the CBS function specification. Returns; -------; cbs_metadata; List of dictionaries, with each item consisting of an extrapolation; stage. All validation takes place here.; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:313,Security,validat,validation,313,""""""" A helper function which translates supplied kwargs into the; ``cbs_metadata`` format and passes it for validation. Parameters; ----------; kwargs; kwargs containing the CBS function specification. Returns; -------; cbs_metadata; List of dictionaries, with each item consisting of an extrapolation; stage. All validation takes place here.; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:26,Security,validat,validate,26,"# if we passed in a dict, validate it right away",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:602,Integrability,depend,dependent,602,"# LAB: below is a piece of pre-class cbs() that didn't make the transition. it has details, so preserving for future revival; #; # #psioh = core.IOManager.shared_object(); # #psioh.set_specific_retention(psif.PSIF_SCF_MOS, True); # # projection across point groups not allowed and cbs() usually a mix of symm-enabled and symm-tol calls; # # needs to be communicated to optimize() so reset by that optstash; # core.set_local_option('SCF', 'GUESS_PERSIST', True); #; # # Run necessary computations; # for mc in JOBS:; # kwargs['name'] = mc['f_wfn']; #; # # Build string of molecule and commands that are dependent on the database; # commands = '\n'; # commands += """"""\ncore.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); # commands += """"""core.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; # (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + mc['f_wfn'].lower() + '-' + mc['f_basis'].lower()); # exec(commands); #; # psioh.set_specific_retention(psif.PSIF_SCF_MOS, False)",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:369,Performance,optimiz,optimize,369,"# LAB: below is a piece of pre-class cbs() that didn't make the transition. it has details, so preserving for future revival; #; # #psioh = core.IOManager.shared_object(); # #psioh.set_specific_retention(psif.PSIF_SCF_MOS, True); # # projection across point groups not allowed and cbs() usually a mix of symm-enabled and symm-tol calls; # # needs to be communicated to optimize() so reset by that optstash; # core.set_local_option('SCF', 'GUESS_PERSIST', True); #; # # Run necessary computations; # for mc in JOBS:; # kwargs['name'] = mc['f_wfn']; #; # # Build string of molecule and commands that are dependent on the database; # commands = '\n'; # commands += """"""\ncore.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); # commands += """"""core.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; # (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + mc['f_wfn'].lower() + '-' + mc['f_basis'].lower()); # exec(commands); #; # psioh.set_specific_retention(psif.PSIF_SCF_MOS, False)",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:548,Deployability,update,updated,548,"""""""; A text based parser of the CBS method string. Provided to handle ""method/basis""; specification of the requested calculations. Also handles ""simple"" (i.e.; one-method and one-basis) calls. Parameters; ----------; total_method_name; String in a ``""method/basis""`` syntax. Simple calls (e.g. ``""blyp/sto-3g""``) are; bounced out of CBS. More complex calls (e.g. ``""mp2/cc-pv[tq]z""`` or; ``""mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz""``) are expanded by `_parse_cbs_gufunc_string()`; and pushed through :py:func:`~psi4.driver.cbs`. Returns; -------; dict of updated CBS keyword arguments; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:145,Usability,simpl,simple,145,"""""""; A text based parser of the CBS method string. Provided to handle ""method/basis""; specification of the requested calculations. Also handles ""simple"" (i.e.; one-method and one-basis) calls. Parameters; ----------; total_method_name; String in a ``""method/basis""`` syntax. Simple calls (e.g. ``""blyp/sto-3g""``) are; bounced out of CBS. More complex calls (e.g. ``""mp2/cc-pv[tq]z""`` or; ``""mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz""``) are expanded by `_parse_cbs_gufunc_string()`; and pushed through :py:func:`~psi4.driver.cbs`. Returns; -------; dict of updated CBS keyword arguments; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:9,Energy Efficiency,energy,energy,9,"# Single energy call?",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:39,Integrability,wrap,wrapper,39,"# If we are not a single call, let CBS wrapper handle it!",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:41,Energy Efficiency,energy,energy,41,"# Call schemes for each portion of total energy to 'place orders' for calculations needed",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:35,Availability,redundant,redundant,35,"# MODELCHEM is unordered, possibly redundant list of single result *entries* needed to satisfy full CBS; # JOBS is subset of MODELCHEM with minimal list of single result *jobs* needed to satisfy full CBS; # TROVE is superset of JOBS with maximal list of single result *entries* resulting from JOBS; # ""entry"" here is a mtd-bas-opt spec that can support E/G/H data; # ""job"" here is an entry on which to sic Psi4 that, through VARH, may fill in multiple entries",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:35,Safety,redund,redundant,35,"# MODELCHEM is unordered, possibly redundant list of single result *entries* needed to satisfy full CBS; # JOBS is subset of MODELCHEM with minimal list of single result *jobs* needed to satisfy full CBS; # TROVE is superset of JOBS with maximal list of single result *entries* resulting from JOBS; # ""entry"" here is a mtd-bas-opt spec that can support E/G/H data; # ""job"" here is an entry on which to sic Psi4 that, through VARH, may fill in multiple entries",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:2,Testability,log,logger,2,"# logger.debug(""METAMETA\n"" + pp.pformat(self.metameta))",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:2,Testability,log,logger,2,"# logger.debug(""TASK\n"" + pp.pformat(task.dict()))",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:65,Safety,avoid,avoid,65,"# signature of ""MP2 GRAD"" - ""HF GRAD"" implementation detail; # * avoid having post-scf single-method gradients/Hessians show up as ""(mixed)"" module just because an outright HF call in the jobs list",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:2,Performance,load,load,2,"# load results_list numbers into compute_list (task_list is AtomicComputer-s)",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:2,Testability,log,logger,2,"# logger.debug(""MC\n"" + pp.pformat(mc))",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:2,Testability,log,logger,2,"# logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec))",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:61,Testability,log,logger,61,"# logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec))",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:2,Performance,load,load,2,"# load QCVariables & properties",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:133,Integrability,interface,interface,133,"""""""Called by driver to assemble results into Composite-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - molecule; - dummy basis, def2-svp; - e/g/h member data; - QCVariables; - module if simple. Returns; -------; ret; Energy, gradient, or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py:429,Usability,simpl,simple,429,"""""""Called by driver to assemble results into Composite-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - molecule; - dummy basis, def2-svp; - e/g/h member data; - QCVariables; - module if simple. Returns; -------; ret; Energy, gradient, or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py:26,Energy Efficiency,power,power,26,"""""""\n ==> Truhlar 2-point power form SCF extrapolation for method: %s <==\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py:25,Energy Efficiency,power,power,25,"""""""\n ==> Karton 2-point power form SCF extrapolation for method: %s <==\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py:28,Integrability,rout,routines,28,"## Build and set from numpy routines; #value = core.Matrix(*valueHI.shape); #value_view = np.asarray(value); #value_view[:] = np_value; #return value",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py:15,Energy Efficiency,energy,energy-only,15,"# Note that in energy-only days, this used to print SCF and Correlation, not Total, Energy",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py:144,Deployability,configurat,configuration,144,"""""""Register a user-defined composite method function to use like a built-in one. Parameters; ----------; func; A Python function that defines a configuration of the :py:func:`psi4.driver.cbs` wrapper.; See :source:`psi4/driver/aliases.py` and :srcsample:`cbs-xtpl-nbody` for examples. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py:192,Integrability,wrap,wrapper,192,"""""""Register a user-defined composite method function to use like a built-in one. Parameters; ----------; func; A Python function that defines a configuration of the :py:func:`psi4.driver.cbs` wrapper.; See :source:`psi4/driver/aliases.py` and :srcsample:`cbs-xtpl-nbody` for examples. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py:144,Modifiability,config,configuration,144,"""""""Register a user-defined composite method function to use like a built-in one. Parameters; ----------; func; A Python function that defines a configuration of the :py:func:`psi4.driver.cbs` wrapper.; See :source:`psi4/driver/aliases.py` and :srcsample:`cbs-xtpl-nbody` for examples. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_cbs_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_cbs_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:2156,Availability,avail,available,2156," geometry by linear combination. * ... and collect geometry into a field of findifrec[""displacements""].<label>; * for (2, 0) also collect off-diagonal displacements; * also collect undisplaced geometry into field reference; * return findifrec. * form AtomicComputers for each displacement, particularly changing mol and driver, and possibly relaxing disp symm; * form dict task_list with keys findifrec labels and vals AtomicComputers. --------------------------------------; FiniteDifferenceComputer.build_tasks(); --------------------------------------; * pass. ----------------------------------; FiniteDifferenceComputer.compute(); ----------------------------------; * compute() for each job in task list. ------------------------------------------; FiniteDifferenceComputer.get_psi_results(); ------------------------------------------. Computer.get_results(); ----------------------. Computer._prepare_results(); ---------------------------; * get_results() for each job in task list; * arrange atomicresult data into e/d/g/h fields as available on each of reference and displacements entries. assemble_hessian_from_energies(); --------------------------------; assemble_hessian_from_gradients(); ---------------------------------. _process_hessian_symmetry_block(); ---------------------------------; * resymmetrize each H block. _process_hessian(); ------------------; * transform H to Cartesians and unmasswt. assemble_gradient_from_energies(); ---------------------------------; assemble_dipder_from_dipoles(); ------------------------------. * form DD, G, H from lower derivative points. * place as many of DD, G, H as available onto reference entry. * pull qcvars off reference job; * from reference job, set add'l mol, DD, G, H as available; * form model, including detailed dict at atomicresult.extras[""findif_record""]. * convert result to psi4.core.Matrix. _findif_schema_to_wfn(); -----------------------; * build wfn from findif mol and basis (if singular) and module (if singular);",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:2744,Availability,avail,available,2744,"metry into field reference; * return findifrec. * form AtomicComputers for each displacement, particularly changing mol and driver, and possibly relaxing disp symm; * form dict task_list with keys findifrec labels and vals AtomicComputers. --------------------------------------; FiniteDifferenceComputer.build_tasks(); --------------------------------------; * pass. ----------------------------------; FiniteDifferenceComputer.compute(); ----------------------------------; * compute() for each job in task list. ------------------------------------------; FiniteDifferenceComputer.get_psi_results(); ------------------------------------------. Computer.get_results(); ----------------------. Computer._prepare_results(); ---------------------------; * get_results() for each job in task list; * arrange atomicresult data into e/d/g/h fields as available on each of reference and displacements entries. assemble_hessian_from_energies(); --------------------------------; assemble_hessian_from_gradients(); ---------------------------------. _process_hessian_symmetry_block(); ---------------------------------; * resymmetrize each H block. _process_hessian(); ------------------; * transform H to Cartesians and unmasswt. assemble_gradient_from_energies(); ---------------------------------; assemble_dipder_from_dipoles(); ------------------------------. * form DD, G, H from lower derivative points. * place as many of DD, G, H as available onto reference entry. * pull qcvars off reference job; * from reference job, set add'l mol, DD, G, H as available; * form model, including detailed dict at atomicresult.extras[""findif_record""]. * convert result to psi4.core.Matrix. _findif_schema_to_wfn(); -----------------------; * build wfn from findif mol and basis (if singular) and module (if singular); * push qcvars to P::e and wfn. gradient_write(); ----------------; * write .grad file if requested. hessian_write(); ---------------; * write .hess file if requested. * return dd/g/h and wfn. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:2858,Availability,avail,available,2858,"metry into field reference; * return findifrec. * form AtomicComputers for each displacement, particularly changing mol and driver, and possibly relaxing disp symm; * form dict task_list with keys findifrec labels and vals AtomicComputers. --------------------------------------; FiniteDifferenceComputer.build_tasks(); --------------------------------------; * pass. ----------------------------------; FiniteDifferenceComputer.compute(); ----------------------------------; * compute() for each job in task list. ------------------------------------------; FiniteDifferenceComputer.get_psi_results(); ------------------------------------------. Computer.get_results(); ----------------------. Computer._prepare_results(); ---------------------------; * get_results() for each job in task list; * arrange atomicresult data into e/d/g/h fields as available on each of reference and displacements entries. assemble_hessian_from_energies(); --------------------------------; assemble_hessian_from_gradients(); ---------------------------------. _process_hessian_symmetry_block(); ---------------------------------; * resymmetrize each H block. _process_hessian(); ------------------; * transform H to Cartesians and unmasswt. assemble_gradient_from_energies(); ---------------------------------; assemble_dipder_from_dipoles(); ------------------------------. * form DD, G, H from lower derivative points. * place as many of DD, G, H as available onto reference entry. * pull qcvars off reference job; * from reference job, set add'l mol, DD, G, H as available; * form model, including detailed dict at atomicresult.extras[""findif_record""]. * convert result to psi4.core.Matrix. _findif_schema_to_wfn(); -----------------------; * build wfn from findif mol and basis (if singular) and module (if singular); * push qcvars to P::e and wfn. gradient_write(); ----------------; * write .grad file if requested. hessian_write(); ---------------; * write .hess file if requested. * return dd/g/h and wfn. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:230,Energy Efficiency,energy,energy,230,"""""""Plan, run, and assemble QC tasks to obtain derivatives by finite difference of lesser derivatives. ===========; FINDIF Flow; ===========; Bullet points are major actions; Lines of dashes denote function calls; e/d/dd=dg/g/h := energy, dipole, dipole derivative = dipole gradient, gradient, Hessian. -----------------------------------; FiniteDifferenceComputer.__init__(); -----------------------------------; * collect findif_stencil_size, findif_step_size from initializer kwargs; * BaseComputer.__init__(); * negotiate safety and user wishes on translation and rotation projection. gradient_from_energies_geometries(); -----------------------------------; hessian_from_gradients_geometries(); -----------------------------------; hessian_from_energies_geometries(); ----------------------------------. _geom_generator(); -----------------. _initialize_findif(); --------------------; * initialize CdSalcs, partition them per irrep, apply user irreps. * start the governing dict findifrec with parameters, size, mol; * for each irrep, for each relevant salc ... _displace_cart(); ----------------; * form new geometry by linear combination. * ... and collect geometry into a field of findifrec[""displacements""].<label>; * for (2, 0) also collect off-diagonal displacements; * also collect undisplaced geometry into field reference; * return findifrec. * form AtomicComputers for each displacement, particularly changing mol and driver, and possibly relaxing disp symm; * form dict task_list with keys findifrec labels and vals AtomicComputers. --------------------------------------; FiniteDifferenceComputer.build_tasks(); --------------------------------------; * pass. ----------------------------------; FiniteDifferenceComputer.compute(); ----------------------------------; * compute() for each job in task list. ------------------------------------------; FiniteDifferenceComputer.get_psi_results(); ------------------------------------------. Computer.get_results(); ---------------------",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:525,Safety,safe,safety,525,"""""""Plan, run, and assemble QC tasks to obtain derivatives by finite difference of lesser derivatives. ===========; FINDIF Flow; ===========; Bullet points are major actions; Lines of dashes denote function calls; e/d/dd=dg/g/h := energy, dipole, dipole derivative = dipole gradient, gradient, Hessian. -----------------------------------; FiniteDifferenceComputer.__init__(); -----------------------------------; * collect findif_stencil_size, findif_step_size from initializer kwargs; * BaseComputer.__init__(); * negotiate safety and user wishes on translation and rotation projection. gradient_from_energies_geometries(); -----------------------------------; hessian_from_gradients_geometries(); -----------------------------------; hessian_from_energies_geometries(); ----------------------------------. _geom_generator(); -----------------. _initialize_findif(); --------------------; * initialize CdSalcs, partition them per irrep, apply user irreps. * start the governing dict findifrec with parameters, size, mol; * for each irrep, for each relevant salc ... _displace_cart(); ----------------; * form new geometry by linear combination. * ... and collect geometry into a field of findifrec[""displacements""].<label>; * for (2, 0) also collect off-diagonal displacements; * also collect undisplaced geometry into field reference; * return findifrec. * form AtomicComputers for each displacement, particularly changing mol and driver, and possibly relaxing disp symm; * form dict task_list with keys findifrec labels and vals AtomicComputers. --------------------------------------; FiniteDifferenceComputer.build_tasks(); --------------------------------------; * pass. ----------------------------------; FiniteDifferenceComputer.compute(); ----------------------------------; * compute() for each job in task list. ------------------------------------------; FiniteDifferenceComputer.get_psi_results(); ------------------------------------------. Computer.get_results(); ---------------------",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:39,Modifiability,variab,variable,39,"# CONVENTIONS:; # n_ at the start of a variable name is short for ""number of.""; # _pi at the end of a variable name is short for ""per irrep.""; # h is the index of an irrep.",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:102,Modifiability,variab,variable,102,"# CONVENTIONS:; # n_ at the start of a variable name is short for ""number of.""; # _pi at the end of a variable name is short for ""per irrep.""; # h is the index of an irrep.",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:11,Availability,error,error,11,"# * Python error if iterate through `salc_list`",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:654,Integrability,depend,dependent,654,"""""""Perform initialization tasks needed by all primary functions. Parameters; ----------; mol; The molecule to displace; freq_irrep_only; The Cotton ordered irrep to get frequencies for. Choose -1 for all; irreps.; mode; {""1_0"", ""2_0"", ""2_1""}; The first number specifies the derivative level determined from; displacements, and the second number is the level determined at.; stencil_size; {3, 5}; Number of points to evaluate for each displacement basis vector inclusive of central reference geometry.; step_size; [a0]; initialize_string; A function that returns the string to print to show the caller was entered.; The string is both caller-specific and dependent on values determined; in this function.; initialize; For printing, whether call is from generator or assembly stages.; verbose; Set to 0 to silence extra print information, regardless of the print level.; Used so the information is printed only during geometry generation, and not; during the derivative computation as well. Returns; -------; data; Miscellaneous information required by callers.; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:55,Availability,error,error,55,"# Populate salc_indices_pi for all irreps.; # * Python error if iterate through `salc_list`",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:36,Usability,clear,clear,36,"# Now that we've printed the SALCs, clear any that are not of user-specified symmetry.",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:71,Safety,safe,safe,71,"# Either len(indices) or len(indices)-1 is even, so dividing by two is safe.",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:1098,Availability,avail,available,1098," instead use one of the convenience functions:; gradient_from_energies_geometries, hessian_from_energies_geometries,; hessian_from_gradients_geometries. Parameters; ----------; mol; The molecule on which to perform a finite difference calculation.; freq_irrep_only; The Cotton ordered irrep to get frequencies for. Choose -1 for all; irreps. Irrelevant for ""1_0"".; mode; {""1_0"", ""2_0"", ""2_1""}; The first number specifies the targeted derivative level. The; second number is the compute derivative level. E.g., ""2_0""; is hessian from energies.; stencil_size; {3, 5}; Number of points to evaluate for each displacement basis vector inclusive of central reference geometry.; step_size; Displacement size [a0]. Returns; -------; findifrec; Dictionary of finite difference data, specified below.; The dictionary makes findifrec _extensible_. If you need a new field; in the record, just add it.; All fields should be present at all times, with two exceptions:; 1. Fields for computed quantities will not be available until; after they are computed.; 2. Displacement specific overrides for globals will not be; available unless the user specified the overrides.; (Such overrides are not implemented at time of writing. An example; is giving a displacement its own step dict.). step : dict; A descriptor for the finite difference step.; In future, this can be overriden by step fields for individual displacements. units : {'Bohr'}; The units for the displacement. The code currently assumes ""bohr,"" per MolSSI standards.; size : float; The step size for the displacement. stencil_size : {3, 5}; Number of points to evaluate at for each displacement basis vector. Count; includes the central reference point. displacement_space : {'CdSalc'}; A string specifying the vector space in which displacements are performed.; Currently, only CdSalc is supported. project_translations : bool; Whether translations are to be projected out of the displacements. project_rotations : bool; Whether rotations are to be pro",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:1201,Availability,avail,available,1201,"ies_geometries,; hessian_from_gradients_geometries. Parameters; ----------; mol; The molecule on which to perform a finite difference calculation.; freq_irrep_only; The Cotton ordered irrep to get frequencies for. Choose -1 for all; irreps. Irrelevant for ""1_0"".; mode; {""1_0"", ""2_0"", ""2_1""}; The first number specifies the targeted derivative level. The; second number is the compute derivative level. E.g., ""2_0""; is hessian from energies.; stencil_size; {3, 5}; Number of points to evaluate for each displacement basis vector inclusive of central reference geometry.; step_size; Displacement size [a0]. Returns; -------; findifrec; Dictionary of finite difference data, specified below.; The dictionary makes findifrec _extensible_. If you need a new field; in the record, just add it.; All fields should be present at all times, with two exceptions:; 1. Fields for computed quantities will not be available until; after they are computed.; 2. Displacement specific overrides for globals will not be; available unless the user specified the overrides.; (Such overrides are not implemented at time of writing. An example; is giving a displacement its own step dict.). step : dict; A descriptor for the finite difference step.; In future, this can be overriden by step fields for individual displacements. units : {'Bohr'}; The units for the displacement. The code currently assumes ""bohr,"" per MolSSI standards.; size : float; The step size for the displacement. stencil_size : {3, 5}; Number of points to evaluate at for each displacement basis vector. Count; includes the central reference point. displacement_space : {'CdSalc'}; A string specifying the vector space in which displacements are performed.; Currently, only CdSalc is supported. project_translations : bool; Whether translations are to be projected out of the displacements. project_rotations : bool; Whether rotations are to be projected out of the displacements. molecule : dict; The reference molecule, in MolSSI schema. See; htt",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:2965,Energy Efficiency,energy,energy,2965," step dict.). step : dict; A descriptor for the finite difference step.; In future, this can be overriden by step fields for individual displacements. units : {'Bohr'}; The units for the displacement. The code currently assumes ""bohr,"" per MolSSI standards.; size : float; The step size for the displacement. stencil_size : {3, 5}; Number of points to evaluate at for each displacement basis vector. Count; includes the central reference point. displacement_space : {'CdSalc'}; A string specifying the vector space in which displacements are performed.; Currently, only CdSalc is supported. project_translations : bool; Whether translations are to be projected out of the displacements. project_rotations : bool; Whether rotations are to be projected out of the displacements. molecule : dict; The reference molecule, in MolSSI schema. See; https://molssi-qc-schema.readthedocs.io/en/latest/auto_topology.html. displacements : dict; A dictionary mapping labels specifying the displacement to data about; the geometry. Labels are of the form ""A: a, B: b"" where A and B index the; basis vector in displacement space and A < B, and a and b index the step; magnitude. For instance, ""0: 1, 1: -1"" specifies displacing +1 in; displacement vector 0 and -1 in displacement vector 1. ""1: -1, 0: 1"" is; forbidden for breaking ordering. Generalizes to arbitrary numbers of; simultaneous displacements in the obvious way. The possible geometry data is as follows:. geometry: list of floats; (3 * nat) The molecular geometry as a flat list in bohr. All coordinates; are given for one atom before proceeding to the next atom. energy: int; The last computed electronic energy at the geometry. gradient: list of floats; (3 * nat) The last computed gradient of energy with respect to changes in; geometry at the geometry, as a flat list. All coordinates are given for; displacing one atom before proceeding to the next atom. reference : dict; A geometry data dict, as described above, for the reference geometry.; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:3007,Energy Efficiency,energy,energy,3007," step dict.). step : dict; A descriptor for the finite difference step.; In future, this can be overriden by step fields for individual displacements. units : {'Bohr'}; The units for the displacement. The code currently assumes ""bohr,"" per MolSSI standards.; size : float; The step size for the displacement. stencil_size : {3, 5}; Number of points to evaluate at for each displacement basis vector. Count; includes the central reference point. displacement_space : {'CdSalc'}; A string specifying the vector space in which displacements are performed.; Currently, only CdSalc is supported. project_translations : bool; Whether translations are to be projected out of the displacements. project_rotations : bool; Whether rotations are to be projected out of the displacements. molecule : dict; The reference molecule, in MolSSI schema. See; https://molssi-qc-schema.readthedocs.io/en/latest/auto_topology.html. displacements : dict; A dictionary mapping labels specifying the displacement to data about; the geometry. Labels are of the form ""A: a, B: b"" where A and B index the; basis vector in displacement space and A < B, and a and b index the step; magnitude. For instance, ""0: 1, 1: -1"" specifies displacing +1 in; displacement vector 0 and -1 in displacement vector 1. ""1: -1, 0: 1"" is; forbidden for breaking ordering. Generalizes to arbitrary numbers of; simultaneous displacements in the obvious way. The possible geometry data is as follows:. geometry: list of floats; (3 * nat) The molecular geometry as a flat list in bohr. All coordinates; are given for one atom before proceeding to the next atom. energy: int; The last computed electronic energy at the geometry. gradient: list of floats; (3 * nat) The last computed gradient of energy with respect to changes in; geometry at the geometry, as a flat list. All coordinates are given for; displacing one atom before proceeding to the next atom. reference : dict; A geometry data dict, as described above, for the reference geometry.; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:3097,Energy Efficiency,energy,energy,3097," step dict.). step : dict; A descriptor for the finite difference step.; In future, this can be overriden by step fields for individual displacements. units : {'Bohr'}; The units for the displacement. The code currently assumes ""bohr,"" per MolSSI standards.; size : float; The step size for the displacement. stencil_size : {3, 5}; Number of points to evaluate at for each displacement basis vector. Count; includes the central reference point. displacement_space : {'CdSalc'}; A string specifying the vector space in which displacements are performed.; Currently, only CdSalc is supported. project_translations : bool; Whether translations are to be projected out of the displacements. project_rotations : bool; Whether rotations are to be projected out of the displacements. molecule : dict; The reference molecule, in MolSSI schema. See; https://molssi-qc-schema.readthedocs.io/en/latest/auto_topology.html. displacements : dict; A dictionary mapping labels specifying the displacement to data about; the geometry. Labels are of the form ""A: a, B: b"" where A and B index the; basis vector in displacement space and A < B, and a and b index the step; magnitude. For instance, ""0: 1, 1: -1"" specifies displacing +1 in; displacement vector 0 and -1 in displacement vector 1. ""1: -1, 0: 1"" is; forbidden for breaking ordering. Generalizes to arbitrary numbers of; simultaneous displacements in the obvious way. The possible geometry data is as follows:. geometry: list of floats; (3 * nat) The molecular geometry as a flat list in bohr. All coordinates; are given for one atom before proceeding to the next atom. energy: int; The last computed electronic energy at the geometry. gradient: list of floats; (3 * nat) The last computed gradient of energy with respect to changes in; geometry at the geometry, as a flat list. All coordinates are given for; displacing one atom before proceeding to the next atom. reference : dict; A geometry data dict, as described above, for the reference geometry.; """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:303,Performance,perform,perform,303,"""""""; Generate geometries for the specified molecule and derivative levels.; You probably want to instead use one of the convenience functions:; gradient_from_energies_geometries, hessian_from_energies_geometries,; hessian_from_gradients_geometries. Parameters; ----------; mol; The molecule on which to perform a finite difference calculation.; freq_irrep_only; The Cotton ordered irrep to get frequencies for. Choose -1 for all; irreps. Irrelevant for ""1_0"".; mode; {""1_0"", ""2_0"", ""2_1""}; The first number specifies the targeted derivative level. The; second number is the compute derivative level. E.g., ""2_0""; is hessian from energies.; stencil_size; {3, 5}; Number of points to evaluate for each displacement basis vector inclusive of central reference geometry.; step_size; Displacement size [a0]. Returns; -------; findifrec; Dictionary of finite difference data, specified below.; The dictionary makes findifrec _extensible_. If you need a new field; in the record, just add it.; All fields should be present at all times, with two exceptions:; 1. Fields for computed quantities will not be available until; after they are computed.; 2. Displacement specific overrides for globals will not be; available unless the user specified the overrides.; (Such overrides are not implemented at time of writing. An example; is giving a displacement its own step dict.). step : dict; A descriptor for the finite difference step.; In future, this can be overriden by step fields for individual displacements. units : {'Bohr'}; The units for the displacement. The code currently assumes ""bohr,"" per MolSSI standards.; size : float; The step size for the displacement. stencil_size : {3, 5}; Number of points to evaluate at for each displacement basis vector. Count; includes the central reference point. displacement_space : {'CdSalc'}; A string specifying the vector space in which displacements are performed.; Currently, only CdSalc is supported. project_translations : bool; Whether translations are to ",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:1895,Performance,perform,performed,1895,"e difference data, specified below.; The dictionary makes findifrec _extensible_. If you need a new field; in the record, just add it.; All fields should be present at all times, with two exceptions:; 1. Fields for computed quantities will not be available until; after they are computed.; 2. Displacement specific overrides for globals will not be; available unless the user specified the overrides.; (Such overrides are not implemented at time of writing. An example; is giving a displacement its own step dict.). step : dict; A descriptor for the finite difference step.; In future, this can be overriden by step fields for individual displacements. units : {'Bohr'}; The units for the displacement. The code currently assumes ""bohr,"" per MolSSI standards.; size : float; The step size for the displacement. stencil_size : {3, 5}; Number of points to evaluate at for each displacement basis vector. Count; includes the central reference point. displacement_space : {'CdSalc'}; A string specifying the vector space in which displacements are performed.; Currently, only CdSalc is supported. project_translations : bool; Whether translations are to be projected out of the displacements. project_rotations : bool; Whether rotations are to be projected out of the displacements. molecule : dict; The reference molecule, in MolSSI schema. See; https://molssi-qc-schema.readthedocs.io/en/latest/auto_topology.html. displacements : dict; A dictionary mapping labels specifying the displacement to data about; the geometry. Labels are of the form ""A: a, B: b"" where A and B index the; basis vector in displacement space and A < B, and a and b index the step; magnitude. For instance, ""0: 1, 1: -1"" specifies displacing +1 in; displacement vector 0 and -1 in displacement vector 1. ""1: -1, 0: 1"" is; forbidden for breaking ordering. Generalizes to arbitrary numbers of; simultaneous displacements in the obvious way. The possible geometry data is as follows:. geometry: list of floats; (3 * nat) The molec",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:59,Performance,perform,perform,59,"""""""; Parameters; ----------; mol; The molecule on which to perform a finite difference calculation.; freq_irrep_only; The Cotton ordered irrep to get frequencies for. Choose -1 for all; irreps. Irrelevant for ""1_0"".; stencil_size; {3, 5}; Number of points to evaluate for each displacement basis vector inclusive of central reference geometry.; step_size; Displacement size [a0]. Returns; -------; findifrec : dict; Dictionary of finite difference data, specified in _geom_generator docstring. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:7,Availability,error,error,7,"# This error SHOULD have already been caught, but just in case...",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:74,Availability,error,errors,74,"# Symmetrize our Hessian block.; # The symmetric structure is lost due to errors in the computation",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:58,Performance,perform,perform,58,"# We have the Hessian in each irrep! The final task is to perform coordinate transforms.",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:52,Energy Efficiency,energy,energy,52,"# Step One: Diagonals; # For asymmetric irreps, the energy at a + disp is the same as at a - disp; # Just reuse the - disp energy for the + disp energy",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:123,Energy Efficiency,energy,energy,123,"# Step One: Diagonals; # For asymmetric irreps, the energy at a + disp is the same as at a - disp; # Just reuse the - disp energy for the + disp energy",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:145,Energy Efficiency,energy,energy,145,"# Step One: Diagonals; # For asymmetric irreps, the energy at a + disp is the same as at a - disp; # Just reuse the - disp energy for the + disp energy",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:265,Energy Efficiency,energy,energy,265,"# TODO: It's a bit ugly to use the salc indices to grab the off-diagonals but the indices; # within the irrep to grab the diagonals. Is there a better way to do this?; # Step Two: Off-diagonals; # We need off-diagonal energies, diagonal energies, AND the reference energy; # Grabbing off-diagonal energies is a pain, so once we know our SALCs...; # ...define offdiag_en to do that for us.",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:22,Safety,safe,safe,22,"# unknown, so F to be safe",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:18,Modifiability,variab,variables,18,"# var_dict = core.variables()",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:114,Energy Efficiency,energy,energy,114,"# for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; # _process_displacement(energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs)",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:2,Performance,load,load,2,"# load AtomicComputer results into findifrec[reference]",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:2,Performance,load,load,2,"# load AtomicComputer results into findifrec[displacements]",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:39,Performance,load,load,39,"# apply finite difference formulas and load derivatives into findifrec[reference]",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:425,Availability,error,error,425,"# TODO: this happens properly when the requested symmetry block; # of displacements don't have the totally symmetric displacements; # needed for gradient. For both this case; # and distributed computing are-we-there-yet? queries,; # should have a probe as to whether all the; # findif[displacement] labels are present and whether; # all the findif[displacement][energy-or-gradient] values; # are ready. Not sure what type of error/query is best,; # so deferring for now. Also, possibly need to check if; # step size matches before using values from one findifrec; # to construct another quantity.",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:362,Energy Efficiency,energy,energy-or-gradient,362,"# TODO: this happens properly when the requested symmetry block; # of displacements don't have the totally symmetric displacements; # needed for gradient. For both this case; # and distributed computing are-we-there-yet? queries,; # should have a probe as to whether all the; # findif[displacement] labels are present and whether; # all the findif[displacement][energy-or-gradient] values; # are ready. Not sure what type of error/query is best,; # so deferring for now. Also, possibly need to check if; # step size matches before using values from one findifrec; # to construct another quantity.",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:23,Performance,load,load,23,"# assembled_results; # load QCVariables & properties",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:61,Energy Efficiency,energy,energy,61,"# if isinstance(lowername, str) and lowername in procedures['energy']:; # # this correctly filters out cbs fn and ""hf/cc-pvtz""; # # it probably incorrectly filters out mp5, but reconsider in DDD",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:140,Integrability,interface,interface,140,"""""""Called by driver to assemble results into FiniteDifference-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - undisplaced molecule; - compute basis if simple, else dummy basis def2-svp; - e/g/h member data; - QCVariables; - module. Returns; -------; ret; Gradient or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:394,Usability,simpl,simple,394,"""""""Called by driver to assemble results into FiniteDifference-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - undisplaced molecule; - compute basis if simple, else dummy basis def2-svp; - e/g/h member data; - QCVariables; - module. Returns; -------; ret; Gradient or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py:81,Energy Efficiency,energy,energy,81,"# new skeleton wavefunction w/mol, highest-SCF basis (just to choose one), & not energy",MatchSource.CODE_COMMENT,psi4/driver/driver_findif.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_findif.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:94,Availability,error,error,94,"""""""Plan, run, and assemble QC tasks to obtain many-body expansion and basis-set superposition error treatments. =============; ManyBody Flow; =============; Bullet points are major actions; Lines of dashes denote function calls; e/d/dd=dg/g/h := energy, dipole, dipole derivative = dipole gradient, gradient, Hessian; `mc_(frag, bas)` := a modelchem index, mc; indices of real fragments, frag; set(bas - frag) are indices of ghost fragments. see ""intermediates_energy"" in big table below for example.; note that there's a lot of natural 1-indexing (1, 2, 3) rather than 0-indexing (0, 1, 2) in manybody. e.g., 2-body energy, Molecule.extract_subsets(1, (1, 2)); note that a ""level"" can be n-body level (how many real molecular fragments) or a modelchem level (`mc_`; e.g., CC on 1-bodies, MP2 on 2-bodies; ""multilevel""). ---------------------------; ManyBodyComputer.__init__(); ---------------------------; * not an explicit function but pydantic handles some defaults and validation; * fields molecule, nfragments, bsse_type, return_total_data, and initial max_nbody set; * BaseComputer.__init__(). task_planner.py::task_planner(); -------------------------------; * computer gets modified from task_planner outside this file!; * modelchem (method and basis) treatment levels for each n-body level determined from user levels kwarg. fields nbodies_per_mc_level set and max_nbody reset; * for each modelchem treatment level, call build_tasks() below via one of four routes, depending on simple MB or layered MB(FD), MB(CBS), or MB(FD(CBS)). ------------------------------; ManyBodyComputer.build_tasks(); ------------------------------; * if supersystem requested as a modelchem level, request (frag, bas) indices for full nbody range of nocp treatment from build_nbody_compute_list(); * otherwise, request (frag, bas) indices for specified nbody range covering specified bsse treatments from build_nbody_compute_list(). build_nbody_compute_list(); --------------------------; * initializes dicts for",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:3616,Availability,avail,available,3616,"orm `mc_(frag, bas)`; * construct a molecule appropriately real/ghosted from active-fragment info in (frag, bas); * if embedding_charges active, prepare external_potentials array for atoms not in bas fragments; * for any new `mc_(frag, bas)` index, append a new computer to self.task_list. --------------------------; ManyBodyComputer.compute(); --------------------------; * compute() for each job in self.task_list. ----------------------------------; ManyBodyComputer.get_psi_results(); ----------------------------------. Computer.get_results(); ----------------------. Computer._prepare_results(); ---------------------------; * if multiple modelchems (multilevel):. multilevel.prepare_results(); ----------------------------; * from the pool of calcs, partition them by modelchem treatment and call _prepare_results on each subpool; * sums modelchem levels and returns small dict back to get_results(). * call get_results() for each job in task list; * assemble all the computed energies, all the computed gradients, and all the computed hessians; * for each available derivative, call:. assemble_nbody_components(); ---------------------------; * re-call build_nbody_compute_list to get the cp/nocp/vmfc lists again. build_nbody_compute_list(); --------------------------. * slice up the supersystem mol into fragment atom ranges to help g/h arrays build piecemeal; * prepare empty {bsse_type}_by_level and {bsse_type}_body_dict structs. the former have different contents for vmfc; * for cp and nocp, resort the build_nbody_compute_list returns into per-body lists suitable for summing; * note that nb loops often run over more than active nbodies_per_mc_level item due to 1-body for subtraction and multilevel complications; * for each possibly active n-body level and each active bsse_type, call _sum_cluster_ptype_data to build by_level structs. _sum_cluster_ptype_data(); -------------------------; * sum up ene, grad, or Hess in per-fragment pieces based on list of (frag, bas) subjobs ac",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:5420,Availability,avail,available,5420," the former have different contents for vmfc; * for cp and nocp, resort the build_nbody_compute_list returns into per-body lists suitable for summing; * note that nb loops often run over more than active nbodies_per_mc_level item due to 1-body for subtraction and multilevel complications; * for each possibly active n-body level and each active bsse_type, call _sum_cluster_ptype_data to build by_level structs. _sum_cluster_ptype_data(); -------------------------; * sum up ene, grad, or Hess in per-fragment pieces based on list of (frag, bas) subjobs active for that bsse treatment. * compute special case of monomers in monomer basis; * for each of cp/nocp/vmfc, apply appropriate formula to build each n-body level of cumulative total energy into body_dict; * for driver=energy, set several qcvars and call:. _print_nbody_energy(); ---------------------; * prints and logs formatted energy output. called separately for cp, nocp, vmfc. * collect qcvars and summed levels into a return dictionary with some extra aliases for target bsse_type and target driver. * merge all the assemble_nbody_components return dictionaries; * in struct[""intermediates""], store dict of `""N-BODY (?)@(?) TOTAL ENERGY"" = return_energy` for all in task_list or results kwarg; * in struct[""intermediates_{ptype}""], store dict of `task_list key = return_{ptype}` for all in task_list or results kwarg. ptype=e/g/h; always for ptype=energy, as available for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_results""]. * collect ManyBody-flavored AtomicResult from self.get_results(); * build wfn from nbody mol and basis (always def2-svp); * push qcvars to P::e and wfn. push various internal dicts to qcvars, too; * convert result to psi4.core.Matrix (non-energy) and set g/h on wfn; * return e/g/h and wfn. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:5537,Availability,avail,available,5537," the former have different contents for vmfc; * for cp and nocp, resort the build_nbody_compute_list returns into per-body lists suitable for summing; * note that nb loops often run over more than active nbodies_per_mc_level item due to 1-body for subtraction and multilevel complications; * for each possibly active n-body level and each active bsse_type, call _sum_cluster_ptype_data to build by_level structs. _sum_cluster_ptype_data(); -------------------------; * sum up ene, grad, or Hess in per-fragment pieces based on list of (frag, bas) subjobs active for that bsse treatment. * compute special case of monomers in monomer basis; * for each of cp/nocp/vmfc, apply appropriate formula to build each n-body level of cumulative total energy into body_dict; * for driver=energy, set several qcvars and call:. _print_nbody_energy(); ---------------------; * prints and logs formatted energy output. called separately for cp, nocp, vmfc. * collect qcvars and summed levels into a return dictionary with some extra aliases for target bsse_type and target driver. * merge all the assemble_nbody_components return dictionaries; * in struct[""intermediates""], store dict of `""N-BODY (?)@(?) TOTAL ENERGY"" = return_energy` for all in task_list or results kwarg; * in struct[""intermediates_{ptype}""], store dict of `task_list key = return_{ptype}` for all in task_list or results kwarg. ptype=e/g/h; always for ptype=energy, as available for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_results""]. * collect ManyBody-flavored AtomicResult from self.get_results(); * build wfn from nbody mol and basis (always def2-svp); * push qcvars to P::e and wfn. push various internal dicts to qcvars, too; * convert result to psi4.core.Matrix (non-energy) and set g/h on wfn; * return e/g/h and wfn. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:246,Energy Efficiency,energy,energy,246,"""""""Plan, run, and assemble QC tasks to obtain many-body expansion and basis-set superposition error treatments. =============; ManyBody Flow; =============; Bullet points are major actions; Lines of dashes denote function calls; e/d/dd=dg/g/h := energy, dipole, dipole derivative = dipole gradient, gradient, Hessian; `mc_(frag, bas)` := a modelchem index, mc; indices of real fragments, frag; set(bas - frag) are indices of ghost fragments. see ""intermediates_energy"" in big table below for example.; note that there's a lot of natural 1-indexing (1, 2, 3) rather than 0-indexing (0, 1, 2) in manybody. e.g., 2-body energy, Molecule.extract_subsets(1, (1, 2)); note that a ""level"" can be n-body level (how many real molecular fragments) or a modelchem level (`mc_`; e.g., CC on 1-bodies, MP2 on 2-bodies; ""multilevel""). ---------------------------; ManyBodyComputer.__init__(); ---------------------------; * not an explicit function but pydantic handles some defaults and validation; * fields molecule, nfragments, bsse_type, return_total_data, and initial max_nbody set; * BaseComputer.__init__(). task_planner.py::task_planner(); -------------------------------; * computer gets modified from task_planner outside this file!; * modelchem (method and basis) treatment levels for each n-body level determined from user levels kwarg. fields nbodies_per_mc_level set and max_nbody reset; * for each modelchem treatment level, call build_tasks() below via one of four routes, depending on simple MB or layered MB(FD), MB(CBS), or MB(FD(CBS)). ------------------------------; ManyBodyComputer.build_tasks(); ------------------------------; * if supersystem requested as a modelchem level, request (frag, bas) indices for full nbody range of nocp treatment from build_nbody_compute_list(); * otherwise, request (frag, bas) indices for specified nbody range covering specified bsse treatments from build_nbody_compute_list(). build_nbody_compute_list(); --------------------------; * initializes dicts for",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:617,Energy Efficiency,energy,energy,617,"""""""Plan, run, and assemble QC tasks to obtain many-body expansion and basis-set superposition error treatments. =============; ManyBody Flow; =============; Bullet points are major actions; Lines of dashes denote function calls; e/d/dd=dg/g/h := energy, dipole, dipole derivative = dipole gradient, gradient, Hessian; `mc_(frag, bas)` := a modelchem index, mc; indices of real fragments, frag; set(bas - frag) are indices of ghost fragments. see ""intermediates_energy"" in big table below for example.; note that there's a lot of natural 1-indexing (1, 2, 3) rather than 0-indexing (0, 1, 2) in manybody. e.g., 2-body energy, Molecule.extract_subsets(1, (1, 2)); note that a ""level"" can be n-body level (how many real molecular fragments) or a modelchem level (`mc_`; e.g., CC on 1-bodies, MP2 on 2-bodies; ""multilevel""). ---------------------------; ManyBodyComputer.__init__(); ---------------------------; * not an explicit function but pydantic handles some defaults and validation; * fields molecule, nfragments, bsse_type, return_total_data, and initial max_nbody set; * BaseComputer.__init__(). task_planner.py::task_planner(); -------------------------------; * computer gets modified from task_planner outside this file!; * modelchem (method and basis) treatment levels for each n-body level determined from user levels kwarg. fields nbodies_per_mc_level set and max_nbody reset; * for each modelchem treatment level, call build_tasks() below via one of four routes, depending on simple MB or layered MB(FD), MB(CBS), or MB(FD(CBS)). ------------------------------; ManyBodyComputer.build_tasks(); ------------------------------; * if supersystem requested as a modelchem level, request (frag, bas) indices for full nbody range of nocp treatment from build_nbody_compute_list(); * otherwise, request (frag, bas) indices for specified nbody range covering specified bsse treatments from build_nbody_compute_list(). build_nbody_compute_list(); --------------------------; * initializes dicts for",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:4736,Energy Efficiency,energy,energy,4736,"------; * re-call build_nbody_compute_list to get the cp/nocp/vmfc lists again. build_nbody_compute_list(); --------------------------. * slice up the supersystem mol into fragment atom ranges to help g/h arrays build piecemeal; * prepare empty {bsse_type}_by_level and {bsse_type}_body_dict structs. the former have different contents for vmfc; * for cp and nocp, resort the build_nbody_compute_list returns into per-body lists suitable for summing; * note that nb loops often run over more than active nbodies_per_mc_level item due to 1-body for subtraction and multilevel complications; * for each possibly active n-body level and each active bsse_type, call _sum_cluster_ptype_data to build by_level structs. _sum_cluster_ptype_data(); -------------------------; * sum up ene, grad, or Hess in per-fragment pieces based on list of (frag, bas) subjobs active for that bsse treatment. * compute special case of monomers in monomer basis; * for each of cp/nocp/vmfc, apply appropriate formula to build each n-body level of cumulative total energy into body_dict; * for driver=energy, set several qcvars and call:. _print_nbody_energy(); ---------------------; * prints and logs formatted energy output. called separately for cp, nocp, vmfc. * collect qcvars and summed levels into a return dictionary with some extra aliases for target bsse_type and target driver. * merge all the assemble_nbody_components return dictionaries; * in struct[""intermediates""], store dict of `""N-BODY (?)@(?) TOTAL ENERGY"" = return_energy` for all in task_list or results kwarg; * in struct[""intermediates_{ptype}""], store dict of `task_list key = return_{ptype}` for all in task_list or results kwarg. ptype=e/g/h; always for ptype=energy, as available for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_resul",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:4772,Energy Efficiency,energy,energy,4772,"------; * re-call build_nbody_compute_list to get the cp/nocp/vmfc lists again. build_nbody_compute_list(); --------------------------. * slice up the supersystem mol into fragment atom ranges to help g/h arrays build piecemeal; * prepare empty {bsse_type}_by_level and {bsse_type}_body_dict structs. the former have different contents for vmfc; * for cp and nocp, resort the build_nbody_compute_list returns into per-body lists suitable for summing; * note that nb loops often run over more than active nbodies_per_mc_level item due to 1-body for subtraction and multilevel complications; * for each possibly active n-body level and each active bsse_type, call _sum_cluster_ptype_data to build by_level structs. _sum_cluster_ptype_data(); -------------------------; * sum up ene, grad, or Hess in per-fragment pieces based on list of (frag, bas) subjobs active for that bsse treatment. * compute special case of monomers in monomer basis; * for each of cp/nocp/vmfc, apply appropriate formula to build each n-body level of cumulative total energy into body_dict; * for driver=energy, set several qcvars and call:. _print_nbody_energy(); ---------------------; * prints and logs formatted energy output. called separately for cp, nocp, vmfc. * collect qcvars and summed levels into a return dictionary with some extra aliases for target bsse_type and target driver. * merge all the assemble_nbody_components return dictionaries; * in struct[""intermediates""], store dict of `""N-BODY (?)@(?) TOTAL ENERGY"" = return_energy` for all in task_list or results kwarg; * in struct[""intermediates_{ptype}""], store dict of `task_list key = return_{ptype}` for all in task_list or results kwarg. ptype=e/g/h; always for ptype=energy, as available for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_resul",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:4884,Energy Efficiency,energy,energy,4884,"stem mol into fragment atom ranges to help g/h arrays build piecemeal; * prepare empty {bsse_type}_by_level and {bsse_type}_body_dict structs. the former have different contents for vmfc; * for cp and nocp, resort the build_nbody_compute_list returns into per-body lists suitable for summing; * note that nb loops often run over more than active nbodies_per_mc_level item due to 1-body for subtraction and multilevel complications; * for each possibly active n-body level and each active bsse_type, call _sum_cluster_ptype_data to build by_level structs. _sum_cluster_ptype_data(); -------------------------; * sum up ene, grad, or Hess in per-fragment pieces based on list of (frag, bas) subjobs active for that bsse treatment. * compute special case of monomers in monomer basis; * for each of cp/nocp/vmfc, apply appropriate formula to build each n-body level of cumulative total energy into body_dict; * for driver=energy, set several qcvars and call:. _print_nbody_energy(); ---------------------; * prints and logs formatted energy output. called separately for cp, nocp, vmfc. * collect qcvars and summed levels into a return dictionary with some extra aliases for target bsse_type and target driver. * merge all the assemble_nbody_components return dictionaries; * in struct[""intermediates""], store dict of `""N-BODY (?)@(?) TOTAL ENERGY"" = return_energy` for all in task_list or results kwarg; * in struct[""intermediates_{ptype}""], store dict of `task_list key = return_{ptype}` for all in task_list or results kwarg. ptype=e/g/h; always for ptype=energy, as available for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_results""]. * collect ManyBody-flavored AtomicResult from self.get_results(); * build wfn from nbody mol and basis (always def2-svp); * push qcvars to P::e and wfn. ",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:5409,Energy Efficiency,energy,energy,5409," the former have different contents for vmfc; * for cp and nocp, resort the build_nbody_compute_list returns into per-body lists suitable for summing; * note that nb loops often run over more than active nbodies_per_mc_level item due to 1-body for subtraction and multilevel complications; * for each possibly active n-body level and each active bsse_type, call _sum_cluster_ptype_data to build by_level structs. _sum_cluster_ptype_data(); -------------------------; * sum up ene, grad, or Hess in per-fragment pieces based on list of (frag, bas) subjobs active for that bsse treatment. * compute special case of monomers in monomer basis; * for each of cp/nocp/vmfc, apply appropriate formula to build each n-body level of cumulative total energy into body_dict; * for driver=energy, set several qcvars and call:. _print_nbody_energy(); ---------------------; * prints and logs formatted energy output. called separately for cp, nocp, vmfc. * collect qcvars and summed levels into a return dictionary with some extra aliases for target bsse_type and target driver. * merge all the assemble_nbody_components return dictionaries; * in struct[""intermediates""], store dict of `""N-BODY (?)@(?) TOTAL ENERGY"" = return_energy` for all in task_list or results kwarg; * in struct[""intermediates_{ptype}""], store dict of `task_list key = return_{ptype}` for all in task_list or results kwarg. ptype=e/g/h; always for ptype=energy, as available for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_results""]. * collect ManyBody-flavored AtomicResult from self.get_results(); * build wfn from nbody mol and basis (always def2-svp); * push qcvars to P::e and wfn. push various internal dicts to qcvars, too; * convert result to psi4.core.Matrix (non-energy) and set g/h on wfn; * return e/g/h and wfn. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:5940,Energy Efficiency,energy,energy,5940," the former have different contents for vmfc; * for cp and nocp, resort the build_nbody_compute_list returns into per-body lists suitable for summing; * note that nb loops often run over more than active nbodies_per_mc_level item due to 1-body for subtraction and multilevel complications; * for each possibly active n-body level and each active bsse_type, call _sum_cluster_ptype_data to build by_level structs. _sum_cluster_ptype_data(); -------------------------; * sum up ene, grad, or Hess in per-fragment pieces based on list of (frag, bas) subjobs active for that bsse treatment. * compute special case of monomers in monomer basis; * for each of cp/nocp/vmfc, apply appropriate formula to build each n-body level of cumulative total energy into body_dict; * for driver=energy, set several qcvars and call:. _print_nbody_energy(); ---------------------; * prints and logs formatted energy output. called separately for cp, nocp, vmfc. * collect qcvars and summed levels into a return dictionary with some extra aliases for target bsse_type and target driver. * merge all the assemble_nbody_components return dictionaries; * in struct[""intermediates""], store dict of `""N-BODY (?)@(?) TOTAL ENERGY"" = return_energy` for all in task_list or results kwarg; * in struct[""intermediates_{ptype}""], store dict of `task_list key = return_{ptype}` for all in task_list or results kwarg. ptype=e/g/h; always for ptype=energy, as available for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_results""]. * collect ManyBody-flavored AtomicResult from self.get_results(); * build wfn from nbody mol and basis (always def2-svp); * push qcvars to P::e and wfn. push various internal dicts to qcvars, too; * convert result to psi4.core.Matrix (non-energy) and set g/h on wfn; * return e/g/h and wfn. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1467,Integrability,rout,routes,1467,"nts. see ""intermediates_energy"" in big table below for example.; note that there's a lot of natural 1-indexing (1, 2, 3) rather than 0-indexing (0, 1, 2) in manybody. e.g., 2-body energy, Molecule.extract_subsets(1, (1, 2)); note that a ""level"" can be n-body level (how many real molecular fragments) or a modelchem level (`mc_`; e.g., CC on 1-bodies, MP2 on 2-bodies; ""multilevel""). ---------------------------; ManyBodyComputer.__init__(); ---------------------------; * not an explicit function but pydantic handles some defaults and validation; * fields molecule, nfragments, bsse_type, return_total_data, and initial max_nbody set; * BaseComputer.__init__(). task_planner.py::task_planner(); -------------------------------; * computer gets modified from task_planner outside this file!; * modelchem (method and basis) treatment levels for each n-body level determined from user levels kwarg. fields nbodies_per_mc_level set and max_nbody reset; * for each modelchem treatment level, call build_tasks() below via one of four routes, depending on simple MB or layered MB(FD), MB(CBS), or MB(FD(CBS)). ------------------------------; ManyBodyComputer.build_tasks(); ------------------------------; * if supersystem requested as a modelchem level, request (frag, bas) indices for full nbody range of nocp treatment from build_nbody_compute_list(); * otherwise, request (frag, bas) indices for specified nbody range covering specified bsse treatments from build_nbody_compute_list(). build_nbody_compute_list(); --------------------------; * initializes dicts for each of nocp, cp, vmfc (2 for this one) with keys requested n-body levels and values empty sets; * use combinatorics formulas to fill each key with (frag, bas) indices (what fragments are active and what fragments have basis functions); needed to compute the requested bsse treatments at the requested n-body levels.; * merge by n-body level the sets of indices for each bsse treatment into an ""all"" dict. return this and all the per-bs",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1475,Integrability,depend,depending,1475,"nts. see ""intermediates_energy"" in big table below for example.; note that there's a lot of natural 1-indexing (1, 2, 3) rather than 0-indexing (0, 1, 2) in manybody. e.g., 2-body energy, Molecule.extract_subsets(1, (1, 2)); note that a ""level"" can be n-body level (how many real molecular fragments) or a modelchem level (`mc_`; e.g., CC on 1-bodies, MP2 on 2-bodies; ""multilevel""). ---------------------------; ManyBodyComputer.__init__(); ---------------------------; * not an explicit function but pydantic handles some defaults and validation; * fields molecule, nfragments, bsse_type, return_total_data, and initial max_nbody set; * BaseComputer.__init__(). task_planner.py::task_planner(); -------------------------------; * computer gets modified from task_planner outside this file!; * modelchem (method and basis) treatment levels for each n-body level determined from user levels kwarg. fields nbodies_per_mc_level set and max_nbody reset; * for each modelchem treatment level, call build_tasks() below via one of four routes, depending on simple MB or layered MB(FD), MB(CBS), or MB(FD(CBS)). ------------------------------; ManyBodyComputer.build_tasks(); ------------------------------; * if supersystem requested as a modelchem level, request (frag, bas) indices for full nbody range of nocp treatment from build_nbody_compute_list(); * otherwise, request (frag, bas) indices for specified nbody range covering specified bsse treatments from build_nbody_compute_list(). build_nbody_compute_list(); --------------------------; * initializes dicts for each of nocp, cp, vmfc (2 for this one) with keys requested n-body levels and values empty sets; * use combinatorics formulas to fill each key with (frag, bas) indices (what fragments are active and what fragments have basis functions); needed to compute the requested bsse treatments at the requested n-body levels.; * merge by n-body level the sets of indices for each bsse treatment into an ""all"" dict. return this and all the per-bs",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:974,Security,validat,validation,974,"""""""Plan, run, and assemble QC tasks to obtain many-body expansion and basis-set superposition error treatments. =============; ManyBody Flow; =============; Bullet points are major actions; Lines of dashes denote function calls; e/d/dd=dg/g/h := energy, dipole, dipole derivative = dipole gradient, gradient, Hessian; `mc_(frag, bas)` := a modelchem index, mc; indices of real fragments, frag; set(bas - frag) are indices of ghost fragments. see ""intermediates_energy"" in big table below for example.; note that there's a lot of natural 1-indexing (1, 2, 3) rather than 0-indexing (0, 1, 2) in manybody. e.g., 2-body energy, Molecule.extract_subsets(1, (1, 2)); note that a ""level"" can be n-body level (how many real molecular fragments) or a modelchem level (`mc_`; e.g., CC on 1-bodies, MP2 on 2-bodies; ""multilevel""). ---------------------------; ManyBodyComputer.__init__(); ---------------------------; * not an explicit function but pydantic handles some defaults and validation; * fields molecule, nfragments, bsse_type, return_total_data, and initial max_nbody set; * BaseComputer.__init__(). task_planner.py::task_planner(); -------------------------------; * computer gets modified from task_planner outside this file!; * modelchem (method and basis) treatment levels for each n-body level determined from user levels kwarg. fields nbodies_per_mc_level set and max_nbody reset; * for each modelchem treatment level, call build_tasks() below via one of four routes, depending on simple MB or layered MB(FD), MB(CBS), or MB(FD(CBS)). ------------------------------; ManyBodyComputer.build_tasks(); ------------------------------; * if supersystem requested as a modelchem level, request (frag, bas) indices for full nbody range of nocp treatment from build_nbody_compute_list(); * otherwise, request (frag, bas) indices for specified nbody range covering specified bsse treatments from build_nbody_compute_list(). build_nbody_compute_list(); --------------------------; * initializes dicts for",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:4869,Testability,log,logs,4869,"stem mol into fragment atom ranges to help g/h arrays build piecemeal; * prepare empty {bsse_type}_by_level and {bsse_type}_body_dict structs. the former have different contents for vmfc; * for cp and nocp, resort the build_nbody_compute_list returns into per-body lists suitable for summing; * note that nb loops often run over more than active nbodies_per_mc_level item due to 1-body for subtraction and multilevel complications; * for each possibly active n-body level and each active bsse_type, call _sum_cluster_ptype_data to build by_level structs. _sum_cluster_ptype_data(); -------------------------; * sum up ene, grad, or Hess in per-fragment pieces based on list of (frag, bas) subjobs active for that bsse treatment. * compute special case of monomers in monomer basis; * for each of cp/nocp/vmfc, apply appropriate formula to build each n-body level of cumulative total energy into body_dict; * for driver=energy, set several qcvars and call:. _print_nbody_energy(); ---------------------; * prints and logs formatted energy output. called separately for cp, nocp, vmfc. * collect qcvars and summed levels into a return dictionary with some extra aliases for target bsse_type and target driver. * merge all the assemble_nbody_components return dictionaries; * in struct[""intermediates""], store dict of `""N-BODY (?)@(?) TOTAL ENERGY"" = return_energy` for all in task_list or results kwarg; * in struct[""intermediates_{ptype}""], store dict of `task_list key = return_{ptype}` for all in task_list or results kwarg. ptype=e/g/h; always for ptype=energy, as available for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_results""]. * collect ManyBody-flavored AtomicResult from self.get_results(); * build wfn from nbody mol and basis (always def2-svp); * push qcvars to P::e and wfn. ",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1488,Usability,simpl,simple,1488,"nts. see ""intermediates_energy"" in big table below for example.; note that there's a lot of natural 1-indexing (1, 2, 3) rather than 0-indexing (0, 1, 2) in manybody. e.g., 2-body energy, Molecule.extract_subsets(1, (1, 2)); note that a ""level"" can be n-body level (how many real molecular fragments) or a modelchem level (`mc_`; e.g., CC on 1-bodies, MP2 on 2-bodies; ""multilevel""). ---------------------------; ManyBodyComputer.__init__(); ---------------------------; * not an explicit function but pydantic handles some defaults and validation; * fields molecule, nfragments, bsse_type, return_total_data, and initial max_nbody set; * BaseComputer.__init__(). task_planner.py::task_planner(); -------------------------------; * computer gets modified from task_planner outside this file!; * modelchem (method and basis) treatment levels for each n-body level determined from user levels kwarg. fields nbodies_per_mc_level set and max_nbody reset; * for each modelchem treatment level, call build_tasks() below via one of four routes, depending on simple MB or layered MB(FD), MB(CBS), or MB(FD(CBS)). ------------------------------; ManyBodyComputer.build_tasks(); ------------------------------; * if supersystem requested as a modelchem level, request (frag, bas) indices for full nbody range of nocp treatment from build_nbody_compute_list(); * otherwise, request (frag, bas) indices for specified nbody range covering specified bsse treatments from build_nbody_compute_list(). build_nbody_compute_list(); --------------------------; * initializes dicts for each of nocp, cp, vmfc (2 for this one) with keys requested n-body levels and values empty sets; * use combinatorics formulas to fill each key with (frag, bas) indices (what fragments are active and what fragments have basis functions); needed to compute the requested bsse treatments at the requested n-body levels.; * merge by n-body level the sets of indices for each bsse treatment into an ""all"" dict. return this and all the per-bs",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:36,Energy Efficiency,energy,energy,36,"""""""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized universal function for computing interaction and total quantities. :returns: *return type of func* |w--w| The data. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| data and wavefunction with energy/gradient/hessian set appropriately when **return_wfn** specified. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpoise correction. If a list is provided, the first string in; the list determines which interaction or total energies/gradients/Hessians are; returned by this function. By default, many-body treatments are inactive. :type max_nbody: int; :param max_nbody: ``3`` || etc. Maximum n-body to compute, cannot exceed the number of fragments in the molecule. :type return_total_data: :ref:`boolean <op_py_boolean>`; :param return_total_data: ``'on'`` || |dl| ``'off'`` |dr|. If True returns the total data (energy/gradient/Hessian) of the system,; otherwise returns interaction data. Default is ``'off'`` for energies,; ``'on'`` for gradients and Hessians. Note that the calculation of total; counterpoise corrected energies implies the calculation of the energies of; monomers in the monomer basis, hence specifying ``return_total_data = True``; may carry out more computations than ``return_total_data = False``.; For gradients and Hessians, ``return_total_data = False`` is rare",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:315,Energy Efficiency,energy,energy,315,"""""""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized universal function for computing interaction and total quantities. :returns: *return type of func* |w--w| The data. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| data and wavefunction with energy/gradient/hessian set appropriately when **return_wfn** specified. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpoise correction. If a list is provided, the first string in; the list determines which interaction or total energies/gradients/Hessians are; returned by this function. By default, many-body treatments are inactive. :type max_nbody: int; :param max_nbody: ``3`` || etc. Maximum n-body to compute, cannot exceed the number of fragments in the molecule. :type return_total_data: :ref:`boolean <op_py_boolean>`; :param return_total_data: ``'on'`` || |dl| ``'off'`` |dr|. If True returns the total data (energy/gradient/Hessian) of the system,; otherwise returns interaction data. Default is ``'off'`` for energies,; ``'on'`` for gradients and Hessians. Note that the calculation of total; counterpoise corrected energies implies the calculation of the energies of; monomers in the monomer basis, hence specifying ``return_total_data = True``; may carry out more computations than ``return_total_data = False``.; For gradients and Hessians, ``return_total_data = False`` is rare",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:976,Energy Efficiency,energy,energy,976,"""""""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized universal function for computing interaction and total quantities. :returns: *return type of func* |w--w| The data. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| data and wavefunction with energy/gradient/hessian set appropriately when **return_wfn** specified. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpoise correction. If a list is provided, the first string in; the list determines which interaction or total energies/gradients/Hessians are; returned by this function. By default, many-body treatments are inactive. :type max_nbody: int; :param max_nbody: ``3`` || etc. Maximum n-body to compute, cannot exceed the number of fragments in the molecule. :type return_total_data: :ref:`boolean <op_py_boolean>`; :param return_total_data: ``'on'`` || |dl| ``'off'`` |dr|. If True returns the total data (energy/gradient/Hessian) of the system,; otherwise returns interaction data. Default is ``'off'`` for energies,; ``'on'`` for gradients and Hessians. Note that the calculation of total; counterpoise corrected energies implies the calculation of the energies of; monomers in the monomer basis, hence specifying ``return_total_data = True``; may carry out more computations than ``return_total_data = False``.; For gradients and Hessians, ``return_total_data = False`` is rare",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1527,Energy Efficiency,energy,energy,1527,":`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpoise correction. If a list is provided, the first string in; the list determines which interaction or total energies/gradients/Hessians are; returned by this function. By default, many-body treatments are inactive. :type max_nbody: int; :param max_nbody: ``3`` || etc. Maximum n-body to compute, cannot exceed the number of fragments in the molecule. :type return_total_data: :ref:`boolean <op_py_boolean>`; :param return_total_data: ``'on'`` || |dl| ``'off'`` |dr|. If True returns the total data (energy/gradient/Hessian) of the system,; otherwise returns interaction data. Default is ``'off'`` for energies,; ``'on'`` for gradients and Hessians. Note that the calculation of total; counterpoise corrected energies implies the calculation of the energies of; monomers in the monomer basis, hence specifying ``return_total_data = True``; may carry out more computations than ``return_total_data = False``.; For gradients and Hessians, ``return_total_data = False`` is rarely useful. :type levels: dict; :param levels: ``{1: 'ccsd(t)', 2: 'mp2', 'supersystem': 'scf'}`` || ``{1: 2, 2: 'ccsd(t)', 3: 'mp2'}`` || etc. Dictionary of different levels of theory for different levels of expansion; Note that method_string is not used in this case. ``supersystem`` computes; all higher order n-body effects up to the number of fragments. :type embedding_charges: dict; :param embedding_charges: ``{1: [-0.834, 0.417, 0.417], ..}``. Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of char",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:2487,Energy Efficiency,charge,charges,2487,"psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpoise correction. If a list is provided, the first string in; the list determines which interaction or total energies/gradients/Hessians are; returned by this function. By default, many-body treatments are inactive. :type max_nbody: int; :param max_nbody: ``3`` || etc. Maximum n-body to compute, cannot exceed the number of fragments in the molecule. :type return_total_data: :ref:`boolean <op_py_boolean>`; :param return_total_data: ``'on'`` || |dl| ``'off'`` |dr|. If True returns the total data (energy/gradient/Hessian) of the system,; otherwise returns interaction data. Default is ``'off'`` for energies,; ``'on'`` for gradients and Hessians. Note that the calculation of total; counterpoise corrected energies implies the calculation of the energies of; monomers in the monomer basis, hence specifying ``return_total_data = True``; may carry out more computations than ``return_total_data = False``.; For gradients and Hessians, ``return_total_data = False`` is rarely useful. :type levels: dict; :param levels: ``{1: 'ccsd(t)', 2: 'mp2', 'supersystem': 'scf'}`` || ``{1: 2, 2: 'ccsd(t)', 3: 'mp2'}`` || etc. Dictionary of different levels of theory for different levels of expansion; Note that method_string is not used in this case. ``supersystem`` computes; all higher order n-body effects up to the number of fragments. :type embedding_charges: dict; :param embedding_charges: ``{1: [-0.834, 0.417, 0.417], ..}``. Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of charges for each fragment.; Add atom-centered point charges for fragments whose basis sets are not included in the computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:2545,Energy Efficiency,charge,charges,2545,"psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpoise correction. If a list is provided, the first string in; the list determines which interaction or total energies/gradients/Hessians are; returned by this function. By default, many-body treatments are inactive. :type max_nbody: int; :param max_nbody: ``3`` || etc. Maximum n-body to compute, cannot exceed the number of fragments in the molecule. :type return_total_data: :ref:`boolean <op_py_boolean>`; :param return_total_data: ``'on'`` || |dl| ``'off'`` |dr|. If True returns the total data (energy/gradient/Hessian) of the system,; otherwise returns interaction data. Default is ``'off'`` for energies,; ``'on'`` for gradients and Hessians. Note that the calculation of total; counterpoise corrected energies implies the calculation of the energies of; monomers in the monomer basis, hence specifying ``return_total_data = True``; may carry out more computations than ``return_total_data = False``.; For gradients and Hessians, ``return_total_data = False`` is rarely useful. :type levels: dict; :param levels: ``{1: 'ccsd(t)', 2: 'mp2', 'supersystem': 'scf'}`` || ``{1: 2, 2: 'ccsd(t)', 3: 'mp2'}`` || etc. Dictionary of different levels of theory for different levels of expansion; Note that method_string is not used in this case. ``supersystem`` computes; all higher order n-body effects up to the number of fragments. :type embedding_charges: dict; :param embedding_charges: ``{1: [-0.834, 0.417, 0.417], ..}``. Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of charges for each fragment.; Add atom-centered point charges for fragments whose basis sets are not included in the computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:2597,Energy Efficiency,charge,charges,2597,"psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpoise correction. If a list is provided, the first string in; the list determines which interaction or total energies/gradients/Hessians are; returned by this function. By default, many-body treatments are inactive. :type max_nbody: int; :param max_nbody: ``3`` || etc. Maximum n-body to compute, cannot exceed the number of fragments in the molecule. :type return_total_data: :ref:`boolean <op_py_boolean>`; :param return_total_data: ``'on'`` || |dl| ``'off'`` |dr|. If True returns the total data (energy/gradient/Hessian) of the system,; otherwise returns interaction data. Default is ``'off'`` for energies,; ``'on'`` for gradients and Hessians. Note that the calculation of total; counterpoise corrected energies implies the calculation of the energies of; monomers in the monomer basis, hence specifying ``return_total_data = True``; may carry out more computations than ``return_total_data = False``.; For gradients and Hessians, ``return_total_data = False`` is rarely useful. :type levels: dict; :param levels: ``{1: 'ccsd(t)', 2: 'mp2', 'supersystem': 'scf'}`` || ``{1: 2, 2: 'ccsd(t)', 3: 'mp2'}`` || etc. Dictionary of different levels of theory for different levels of expansion; Note that method_string is not used in this case. ``supersystem`` computes; all higher order n-body effects up to the number of fragments. :type embedding_charges: dict; :param embedding_charges: ``{1: [-0.834, 0.417, 0.417], ..}``. Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of charges for each fragment.; Add atom-centered point charges for fragments whose basis sets are not included in the computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:65,Integrability,depend,depending,65,"""""""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized universal function for computing interaction and total quantities. :returns: *return type of func* |w--w| The data. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| data and wavefunction with energy/gradient/hessian set appropriately when **return_wfn** specified. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpoise correction. If a list is provided, the first string in; the list determines which interaction or total energies/gradients/Hessians are; returned by this function. By default, many-body treatments are inactive. :type max_nbody: int; :param max_nbody: ``3`` || etc. Maximum n-body to compute, cannot exceed the number of fragments in the molecule. :type return_total_data: :ref:`boolean <op_py_boolean>`; :param return_total_data: ``'on'`` || |dl| ``'off'`` |dr|. If True returns the total data (energy/gradient/Hessian) of the system,; otherwise returns interaction data. Default is ``'off'`` for energies,; ``'on'`` for gradients and Hessians. Note that the calculation of total; counterpoise corrected energies implies the calculation of the energies of; monomers in the monomer basis, hence specifying ``return_total_data = True``; may carry out more computations than ``return_total_data = False``.; For gradients and Hessians, ``return_total_data = False`` is rare",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:37,Availability,error,error,37,"""""""Available basis-set superposition error (BSSE) treatments.""""""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:35,Energy Efficiency,energy,energy,35,"# plain supramolecular interaction energy",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:213,Energy Efficiency,energy,energy,213,"""""""; Sum arrays from n-body computations to obtain the BSSE corrected or uncorrected scalar or array. Parameters; ----------; ptype; Hint to shape of array data to sum.; ptype_dict; Dictionary containing computed energy, gradient, or Hessian obtained from each subsystem computation; compute_list; A list of (frag, bas) tuples notating all the required computations.; fragment_slice_dict; Dictionary containing slices that index the gradient or Hessian matrix for each of the 1-indexed fragments.; For He--HOOH--Me cluster, `{1: slice(0, 1, None), 2: slice(1, 5, None), 3: slice(5, 10, None)}`.; fragment_size_dict; Dictionary containing the number of atoms of each 1-indexed fragment.; For He--HOOH--Me cluster, `{1: 1, 2: 4, 3: 5}`.; vmfc; Is it a VMFC calculation?; nb; n-body level; required for VMFC calculations.; mc_level_lbl; User label for what modelchem level results should be pulled out of *ptype_dict*.; This is the 1-indexed counterpart to 0-indexed mc_level_idx. Returns; -------; ret; Scalar or array containing the summed energy, gradient, or Hessian result.; Formerly, passed in and modified in place and only called for g/h. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1039,Energy Efficiency,energy,energy,1039,"""""""; Sum arrays from n-body computations to obtain the BSSE corrected or uncorrected scalar or array. Parameters; ----------; ptype; Hint to shape of array data to sum.; ptype_dict; Dictionary containing computed energy, gradient, or Hessian obtained from each subsystem computation; compute_list; A list of (frag, bas) tuples notating all the required computations.; fragment_slice_dict; Dictionary containing slices that index the gradient or Hessian matrix for each of the 1-indexed fragments.; For He--HOOH--Me cluster, `{1: slice(0, 1, None), 2: slice(1, 5, None), 3: slice(5, 10, None)}`.; fragment_size_dict; Dictionary containing the number of atoms of each 1-indexed fragment.; For He--HOOH--Me cluster, `{1: 1, 2: 4, 3: 5}`.; vmfc; Is it a VMFC calculation?; nb; n-body level; required for VMFC calculations.; mc_level_lbl; User label for what modelchem level results should be pulled out of *ptype_dict*.; This is the 1-indexed counterpart to 0-indexed mc_level_idx. Returns; -------; ret; Scalar or array containing the summed energy, gradient, or Hessian result.; Formerly, passed in and modified in place and only called for g/h. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:78,Testability,log,logger,78,"""""""Format output string for user for a single bsse_type. Prints to output and logger.; Called repeatedly by assemble_nbody_component.""""""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:577,Energy Efficiency,energy,energy,577,"""""""Generates lists of N-Body computations needed for requested BSSE treatments. Parameters; ----------; bsse_type; Requested BSSE treatments.; nbodies; List of n-body levels (e.g., `[2]` or `[1, 2]` or `[""supersystem""]`) for which to generate tasks.; Often this value is an element of self.nbodies_per_mc_level.; Note the natural 1-indexing, so `[1]` covers one-body contributions.; Formerly nbody; nfragments; Number of distinct fragments comprising the full molecular supersystem. Usually self.nfragments.; Formerly max_frag; return_total_data; Whether the total data (True; energy/gradient/Hessian) of the molecular system has been requested, as opposed to interaction data (False).; verbose; Control volume of printing. Returns; -------; compute_dict; Dictionary containing subdicts enumerating compute lists for each possible BSSE treatment.; Subdict keys are n-body levels and values are sets of all the `mc_(frag, bas)` indices; needed to compute that n-body level. A given index can appear multiple times within a; subdict and among subdicts.; Formerly, the subdict values were sets of indices needed for given BSSE treatment _of_ given; n-body level. See current (left) and former (right) definitions below for CP dimer. compute_dict[""cp""] = { compute_dict[""cp""] = {; 1: set(), 1: {((1,), (1, 2)),; 2: {((1,), (1, 2)), ((2,), (1, 2))},; ((2,), (1, 2)), 2: {((1, 2), (1, 2))}; ((1, 2), (1, 2))} }; }. Subdicts below are always returned. Any may be empty if not requested through *bsse_type*. * ``'all'`` |w---w| full list of computations required; * ``'cp'`` |w---w| list of computations required for CP procedure; * ``'nocp'`` |w---w| list of computations required for non-CP procedure; * ``'vmfc_compute'`` |w---w| list of computations required for VMFC procedure; * ``'vmfc_levels'`` |w---w| list of levels required for VMFC procedure. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:90,Security,validat,validated,90,"# Need to sum something slightly different; # Verify proper passing of bsse_type. already validated in Computer",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:657,Energy Efficiency,energy,energy,657,"""""""Assembles N-body components for a single derivative level and a single model chemistry level into interaction quantities according to requested BSSE treatment(s). Parameters; ----------; ptype; Derivative level of component results to assemble. Matters mostly for scalar vs. array and array dimensions.; component_results; Dictionary with keys ""mc_(frag, bas)"" and values e/g/H computed component results according to *ptype*.; metadata; Dictionary of N-body metadata. Items described below.; Later, assemble_nbody_components should become a class function and the below are simply class member data.; quiet : bool; See class field. Whether to print/log energy summaries. Default True. False used by multilevel to suppress per-mc-level printing.; nfragments : int; See class field. Number of distinct fragments comprising the full molecular supersystem.; Formerly max_frag; return_total_data : bool; See class field. Whether the total data (e/g/H) of the molecular system has been requested, as opposed to interaction data.; max_nbody : int; See class field. Maximum number of bodies to include in the many-body treatment.""; embedding_charges : bool; Whether embedding charges are present. Used to NaN the output printing rather than print bad numbers.; molecule : psi4.core.Molecule; See class field. Used to count atoms in fragments.; nbodies_per_mc_level: List[List[Union[int, Literal[""supersystem""]]]]; See class field. Distribution of active n-body levels among model chemistry levels.; Formerly nbody_list; bsse_type : List[BsseEnum]; See class field. Requested BSSE treatments. First in list determines which interaction or total energy/gradient/Hessian returned.; Note that this is the only arg that gets RESET. Happens for supersystem ""nbody"". Returns; -------; results; Dictionary of all N-body results. See contents at ManyBodyComputer.prepare_results docstring. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1172,Energy Efficiency,charge,charges,1172,"""""""Assembles N-body components for a single derivative level and a single model chemistry level into interaction quantities according to requested BSSE treatment(s). Parameters; ----------; ptype; Derivative level of component results to assemble. Matters mostly for scalar vs. array and array dimensions.; component_results; Dictionary with keys ""mc_(frag, bas)"" and values e/g/H computed component results according to *ptype*.; metadata; Dictionary of N-body metadata. Items described below.; Later, assemble_nbody_components should become a class function and the below are simply class member data.; quiet : bool; See class field. Whether to print/log energy summaries. Default True. False used by multilevel to suppress per-mc-level printing.; nfragments : int; See class field. Number of distinct fragments comprising the full molecular supersystem.; Formerly max_frag; return_total_data : bool; See class field. Whether the total data (e/g/H) of the molecular system has been requested, as opposed to interaction data.; max_nbody : int; See class field. Maximum number of bodies to include in the many-body treatment.""; embedding_charges : bool; Whether embedding charges are present. Used to NaN the output printing rather than print bad numbers.; molecule : psi4.core.Molecule; See class field. Used to count atoms in fragments.; nbodies_per_mc_level: List[List[Union[int, Literal[""supersystem""]]]]; See class field. Distribution of active n-body levels among model chemistry levels.; Formerly nbody_list; bsse_type : List[BsseEnum]; See class field. Requested BSSE treatments. First in list determines which interaction or total energy/gradient/Hessian returned.; Note that this is the only arg that gets RESET. Happens for supersystem ""nbody"". Returns; -------; results; Dictionary of all N-body results. See contents at ManyBodyComputer.prepare_results docstring. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1640,Energy Efficiency,energy,energy,1640,"""""""Assembles N-body components for a single derivative level and a single model chemistry level into interaction quantities according to requested BSSE treatment(s). Parameters; ----------; ptype; Derivative level of component results to assemble. Matters mostly for scalar vs. array and array dimensions.; component_results; Dictionary with keys ""mc_(frag, bas)"" and values e/g/H computed component results according to *ptype*.; metadata; Dictionary of N-body metadata. Items described below.; Later, assemble_nbody_components should become a class function and the below are simply class member data.; quiet : bool; See class field. Whether to print/log energy summaries. Default True. False used by multilevel to suppress per-mc-level printing.; nfragments : int; See class field. Number of distinct fragments comprising the full molecular supersystem.; Formerly max_frag; return_total_data : bool; See class field. Whether the total data (e/g/H) of the molecular system has been requested, as opposed to interaction data.; max_nbody : int; See class field. Maximum number of bodies to include in the many-body treatment.""; embedding_charges : bool; Whether embedding charges are present. Used to NaN the output printing rather than print bad numbers.; molecule : psi4.core.Molecule; See class field. Used to count atoms in fragments.; nbodies_per_mc_level: List[List[Union[int, Literal[""supersystem""]]]]; See class field. Distribution of active n-body levels among model chemistry levels.; Formerly nbody_list; bsse_type : List[BsseEnum]; See class field. Requested BSSE treatments. First in list determines which interaction or total energy/gradient/Hessian returned.; Note that this is the only arg that gets RESET. Happens for supersystem ""nbody"". Returns; -------; results; Dictionary of all N-body results. See contents at ManyBodyComputer.prepare_results docstring. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:653,Testability,log,log,653,"""""""Assembles N-body components for a single derivative level and a single model chemistry level into interaction quantities according to requested BSSE treatment(s). Parameters; ----------; ptype; Derivative level of component results to assemble. Matters mostly for scalar vs. array and array dimensions.; component_results; Dictionary with keys ""mc_(frag, bas)"" and values e/g/H computed component results according to *ptype*.; metadata; Dictionary of N-body metadata. Items described below.; Later, assemble_nbody_components should become a class function and the below are simply class member data.; quiet : bool; See class field. Whether to print/log energy summaries. Default True. False used by multilevel to suppress per-mc-level printing.; nfragments : int; See class field. Number of distinct fragments comprising the full molecular supersystem.; Formerly max_frag; return_total_data : bool; See class field. Whether the total data (e/g/H) of the molecular system has been requested, as opposed to interaction data.; max_nbody : int; See class field. Maximum number of bodies to include in the many-body treatment.""; embedding_charges : bool; Whether embedding charges are present. Used to NaN the output printing rather than print bad numbers.; molecule : psi4.core.Molecule; See class field. Used to count atoms in fragments.; nbodies_per_mc_level: List[List[Union[int, Literal[""supersystem""]]]]; See class field. Distribution of active n-body levels among model chemistry levels.; Formerly nbody_list; bsse_type : List[BsseEnum]; See class field. Requested BSSE treatments. First in list determines which interaction or total energy/gradient/Hessian returned.; Note that this is the only arg that gets RESET. Happens for supersystem ""nbody"". Returns; -------; results; Dictionary of all N-body results. See contents at ManyBodyComputer.prepare_results docstring. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:578,Usability,simpl,simply,578,"""""""Assembles N-body components for a single derivative level and a single model chemistry level into interaction quantities according to requested BSSE treatment(s). Parameters; ----------; ptype; Derivative level of component results to assemble. Matters mostly for scalar vs. array and array dimensions.; component_results; Dictionary with keys ""mc_(frag, bas)"" and values e/g/H computed component results according to *ptype*.; metadata; Dictionary of N-body metadata. Items described below.; Later, assemble_nbody_components should become a class function and the below are simply class member data.; quiet : bool; See class field. Whether to print/log energy summaries. Default True. False used by multilevel to suppress per-mc-level printing.; nfragments : int; See class field. Number of distinct fragments comprising the full molecular supersystem.; Formerly max_frag; return_total_data : bool; See class field. Whether the total data (e/g/H) of the molecular system has been requested, as opposed to interaction data.; max_nbody : int; See class field. Maximum number of bodies to include in the many-body treatment.""; embedding_charges : bool; Whether embedding charges are present. Used to NaN the output printing rather than print bad numbers.; molecule : psi4.core.Molecule; See class field. Used to count atoms in fragments.; nbodies_per_mc_level: List[List[Union[int, Literal[""supersystem""]]]]; See class field. Distribution of active n-body levels among model chemistry levels.; Formerly nbody_list; bsse_type : List[BsseEnum]; See class field. Requested BSSE treatments. First in list determines which interaction or total energy/gradient/Hessian returned.; Note that this is the only arg that gets RESET. Happens for supersystem ""nbody"". Returns; -------; results; Dictionary of all N-body results. See contents at ManyBodyComputer.prepare_results docstring. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:12,Security,validat,validation,12,"# Note that validation of user fields happens through typing and validator functions, so no class __init__ needed.",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:65,Security,validat,validator,65,"# Note that validation of user fields happens through typing and validator functions, so no class __init__ needed.",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:443,Integrability,wrap,wrappers,443,"""""""Adds to the task_list as many new unique tasks as necessary to treat a single model chemistry level at one or several n-body levels.; New tasks are of type *mb_computer* with model chemistry level specified in *kwargs* and n-body levels accessed through *mc_level_idx*. Parameters; ----------; mb_computer; Class of task computers to instantiate and add to self.task_list. Usually :class:`~psi4.driver.AtomicComputer` but may be other when wrappers are layered.; mc_level_idx; Position in field self.nbodies_per_mc_level used to obtain ``nbodies``, the list of n-body; levels (e.g., `[1]` or `[1, 2]` or `[""supersystem""]`) to which the modelchem specified in **kwargs** applies.; That is, `nbodies = self.nbodies_per_mc_level[mc_level_idx]`.; Note the natural 1-indexing of ``nbodies`` _contents_, so `[1]` covers one-body contributions.; The corresponding user label is the 1-indexed counterpart, `mc_level_lbl = mc_level_idx + 1`; Formerly nlevel as in `nbody = self.nbody_list[nbody_level=nlevel]`.; kwargs; Other arguments for initializing **mb_computer**. In particular, specifies model chemistry. Returns; -------; count : int; Number of new tasks planned by this call.; Formerly, didn't include supersystem in count. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:240,Security,access,accessed,240,"""""""Adds to the task_list as many new unique tasks as necessary to treat a single model chemistry level at one or several n-body levels.; New tasks are of type *mb_computer* with model chemistry level specified in *kwargs* and n-body levels accessed through *mc_level_idx*. Parameters; ----------; mb_computer; Class of task computers to instantiate and add to self.task_list. Usually :class:`~psi4.driver.AtomicComputer` but may be other when wrappers are layered.; mc_level_idx; Position in field self.nbodies_per_mc_level used to obtain ``nbodies``, the list of n-body; levels (e.g., `[1]` or `[1, 2]` or `[""supersystem""]`) to which the modelchem specified in **kwargs** applies.; That is, `nbodies = self.nbodies_per_mc_level[mc_level_idx]`.; Note the natural 1-indexing of ``nbodies`` _contents_, so `[1]` covers one-body contributions.; The corresponding user label is the 1-indexed counterpart, `mc_level_lbl = mc_level_idx + 1`; Formerly nlevel as in `nbody = self.nbody_list[nbody_level=nlevel]`.; kwargs; Other arguments for initializing **mb_computer**. In particular, specifies model chemistry. Returns; -------; count : int; Number of new tasks planned by this call.; Formerly, didn't include supersystem in count. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:5675,Availability,avail,available,5675,Y THROUGH 2-BODY | |em| 1 | when cp in bsse_type & max_nbody>=2 | MBE sum of subsystems of 2-body or fewer (cumulative); summed are total energies with cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED TOTAL ENERGY THROUGH {nb}-BODY | |em| 1 | when cp in bsse_type | MBE sum of subsystems of {max_nbody}-body or fewer (cumulative); summed are total energies w/ cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED TOTAL ENERGY | |em| 1 | when cp in bsse_type & rtd=T | best available total energy with cp treatment: CP-CORRECTED TOTAL ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED INTERACTION ENERGY THROUGH 2-BODY | |em| 1 | when cp in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies with cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when cp in bsse_type | {max_nbody}-body total data less 1-body total data for c,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:7095,Availability,avail,available,7095, | |em| 1 | when cp in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies with cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when cp in bsse_type | {max_nbody}-body total data less 1-body total data for cumulative IE; inputs are total energies with cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED INTERACTION ENERGY | |em| 1 | when cp in bsse_type | best available interaction energy with cp treatment: CP-CORRECTED INTERACTION ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED 2-BODY CONTRIBUTION TO ENERGY | |em| 1 | when cp in bsse_type & max_nbody>=2 | 2-body total data less (2-1)-body total data for partial IE; inputs are total energies w/ cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED {nb}-BODY CONTRIBUTION TO ENERGY | |em| 1 | when cp in bsse_type | {max_nbody}-body total data less ({max_nbody}-1)-body,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:10206,Availability,avail,available,10206,UGH 2-BODY | |em| 1 | when nocp in bsse_type & max_nbody>=2 | MBE sum of subsystems of 2-body or fewer (cumulative); summed are total energies without cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED TOTAL ENERGY THROUGH {nb}-BODY | |em| 1 | when nocp in bsse_type | MBE sum of subsystems of {max_nbody}-body or fewer (cumulative); summed are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED TOTAL ENERGY | |em| 1 | when nocp in bsse_type | best available total energy without cp treatment: NOCP-CORRECTED TOTAL ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED INTERACTION ENERGY THROUGH 2-BODY | |em| 1 | when nocp in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when nocp in bsse_type | {max_nbody}-body total data less 1-body tota,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:11641,Availability,avail,available,11641,1 | when nocp in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when nocp in bsse_type | {max_nbody}-body total data less 1-body total data for cumulative IE; inputs are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED INTERACTION ENERGY | |em| 1 | when nocp in bsse_type | best available interaction energy without cp treatment: NOCP-CORRECTED INTERACTION ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED 2-BODY CONTRIBUTION TO ENERGY | |em| 1 | when nocp in bsse_type & max_nbody>=2 | 2-body total data less (2-1)-body total data for partial IE; inputs are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED {nb}-BODY CONTRIBUTION TO ENERGY | |em| 1 | when nocp in bsse_type | {max_nbody}-body total data less ({max_,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:14766,Availability,avail,available,14766,UGH 2-BODY | |em| 1 | when vmfc in bsse_type & max_nbody>=2 | MBE sum of subsystems of 2-body or fewer (cumulative); summed are total energies with vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED TOTAL ENERGY THROUGH {nb}-BODY | |em| 1 | when vmfc in bsse_type | MBE sum of subsystems of {max_nbody}-body or fewer (cumulative); summed are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED TOTAL ENERGY | |em| 1 | when vmfc in bsse_type | best available total energy with vmfc treatment: VMFC-CORRECTED TOTAL ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED INTERACTION ENERGY THROUGH 2-BODY | |em| 1 | when vmfc in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when vmfc in bsse_type | {max_nbody}-body total data less 1-body tota,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:16202,Availability,avail,available,16202,| when vmfc in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when vmfc in bsse_type | {max_nbody}-body total data less 1-body total data for cumulative IE; inputs are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED INTERACTION ENERGY | |em| 1 | when vmfc in bsse_type | best available interaction energy with vmfc treatment: VMFC-CORRECTED INTERACTION ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED 2-BODY CONTRIBUTION TO ENERGY | |em| 1 | when vmfc in bsse_type & max_nbody>=2 | 2-body total data less (2-1)-body total data for partial IE; inputs are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED {nb}-BODY CONTRIBUTION TO ENERGY | |em| 1 | when vmfc in bsse_type | {max_nbody}-body total data less ({max_,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1043,Energy Efficiency,energy,energy,1043,"ponent molecular systems and model chemistry levels into final quantities. Parameters; ----------; results; A set of tasks to process instead of self.task_list. Used in multilevel processing to pass a subset of; self.task_list filtered to only one modelchem level.; client; QCFractal client if using QCArchive for distributed compute. Returns; -------; nbody_results; When the ManyBodyComputer specifies a single model chemistry level (see self.nbodies_per_mc_level), the; return is a dictionary, nbody_results, described in the table below. Many of the items are actually filled; by successive calls to assemble_nbody_components(). When multiple model chemistry levels are specified, this; function diverts its return to driver_nbody_multilevel.prepare_results() wherein each mc level calls this; function again and collects separate nbody_results dictionaries and processes them into a final return that; is a small subset of the table below. ptype_size = (1,)/(nat, 3)/(3 * nat, 3 * nat); e/g/h := energy or gradient or Hessian; rtd := return_total_data. .. |em| unicode:: U+02003 .. em space. .. _`table:nbody_return`:. +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | item | size | present / zeroed | contents / interpretation |; +===============================================================+======================+====================================================================+====================================================================================================================+; | ret_ptype | ptype_size | always | interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver) |; | | | | with cp/nocp/vmfc treatment (depending on 1st of bsse_type) |; +-------------------------------------------------",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:2309,Energy Efficiency,energy,energy,2309,"dy_multilevel.prepare_results() wherein each mc level calls this; function again and collects separate nbody_results dictionaries and processes them into a final return that; is a small subset of the table below. ptype_size = (1,)/(nat, 3)/(3 * nat, 3 * nat); e/g/h := energy or gradient or Hessian; rtd := return_total_data. .. |em| unicode:: U+02003 .. em space. .. _`table:nbody_return`:. +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | item | size | present / zeroed | contents / interpretation |; +===============================================================+======================+====================================================================+====================================================================================================================+; | ret_ptype | ptype_size | always | interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver) |; | | | | with cp/nocp/vmfc treatment (depending on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_energy | 1 | always | interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_gradient | (nat, 3) | when driver is g/h | interaction gradient: IE or total (",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:3896,Energy Efficiency,energy,energy,3896,"a) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type|; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_hessian | (nat * 3, nat * 3) | when driver is h | interaction Hessian: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type)|; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | | | | |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | nbody | >=1 | always | energy n-body QCVariables to be set |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED TOTAL ENERGY THROUGH 1-BODY | |em| 1 | when cp in bsse_type | MBE sum of subsystems of 1-body. summed are total energies with cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED TOTAL ENERGY THROUGH 2-BODY | |em| 1 | when cp in bsse_type & max_nbody>=2 | MBE sum of subsystems of 2-body or fewer (cumulative); summ",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:5691,Energy Efficiency,energy,energy,5691,DY | |em| 1 | when cp in bsse_type & max_nbody>=2 | MBE sum of subsystems of 2-body or fewer (cumulative); summed are total energies with cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED TOTAL ENERGY THROUGH {nb}-BODY | |em| 1 | when cp in bsse_type | MBE sum of subsystems of {max_nbody}-body or fewer (cumulative); summed are total energies w/ cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED TOTAL ENERGY | |em| 1 | when cp in bsse_type & rtd=T | best available total energy with cp treatment: CP-CORRECTED TOTAL ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED INTERACTION ENERGY THROUGH 2-BODY | |em| 1 | when cp in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies with cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when cp in bsse_type | {max_nbody}-body total data less 1-body total data for cumulative IE; i,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:7117,Energy Efficiency,energy,energy,7117,in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies with cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when cp in bsse_type | {max_nbody}-body total data less 1-body total data for cumulative IE; inputs are total energies with cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED INTERACTION ENERGY | |em| 1 | when cp in bsse_type | best available interaction energy with cp treatment: CP-CORRECTED INTERACTION ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED 2-BODY CONTRIBUTION TO ENERGY | |em| 1 | when cp in bsse_type & max_nbody>=2 | 2-body total data less (2-1)-body total data for partial IE; inputs are total energies w/ cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| CP-CORRECTED {nb}-BODY CONTRIBUTION TO ENERGY | |em| 1 | when cp in bsse_type | {max_nbody}-body total data less ({max_nbody}-1)-body data for partial IE;,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:10222,Energy Efficiency,energy,energy,10222,em| 1 | when nocp in bsse_type & max_nbody>=2 | MBE sum of subsystems of 2-body or fewer (cumulative); summed are total energies without cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED TOTAL ENERGY THROUGH {nb}-BODY | |em| 1 | when nocp in bsse_type | MBE sum of subsystems of {max_nbody}-body or fewer (cumulative); summed are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED TOTAL ENERGY | |em| 1 | when nocp in bsse_type | best available total energy without cp treatment: NOCP-CORRECTED TOTAL ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED INTERACTION ENERGY THROUGH 2-BODY | |em| 1 | when nocp in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when nocp in bsse_type | {max_nbody}-body total data less 1-body total data for cumu,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:11663,Energy Efficiency,energy,energy,11663,e_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when nocp in bsse_type | {max_nbody}-body total data less 1-body total data for cumulative IE; inputs are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED INTERACTION ENERGY | |em| 1 | when nocp in bsse_type | best available interaction energy without cp treatment: NOCP-CORRECTED INTERACTION ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED 2-BODY CONTRIBUTION TO ENERGY | |em| 1 | when nocp in bsse_type & max_nbody>=2 | 2-body total data less (2-1)-body total data for partial IE; inputs are total energies w/o cp treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| NOCP-CORRECTED {nb}-BODY CONTRIBUTION TO ENERGY | |em| 1 | when nocp in bsse_type | {max_nbody}-body total data less ({max_nbody}-1)-body data f,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:14782,Energy Efficiency,energy,energy,14782,em| 1 | when vmfc in bsse_type & max_nbody>=2 | MBE sum of subsystems of 2-body or fewer (cumulative); summed are total energies with vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED TOTAL ENERGY THROUGH {nb}-BODY | |em| 1 | when vmfc in bsse_type | MBE sum of subsystems of {max_nbody}-body or fewer (cumulative); summed are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED TOTAL ENERGY | |em| 1 | when vmfc in bsse_type | best available total energy with vmfc treatment: VMFC-CORRECTED TOTAL ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED INTERACTION ENERGY THROUGH 2-BODY | |em| 1 | when vmfc in bsse_type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when vmfc in bsse_type | {max_nbody}-body total data less 1-body total data for cumu,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:16224,Energy Efficiency,energy,energy,16224,type & max_nbody>=2 | 2-body total data less 1-body total data for cumulative IE; inputs are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY | |em| 1 | when vmfc in bsse_type | {max_nbody}-body total data less 1-body total data for cumulative IE; inputs are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED INTERACTION ENERGY | |em| 1 | when vmfc in bsse_type | best available interaction energy with vmfc treatment: VMFC-CORRECTED INTERACTION ENERGY THROUGH {max_nbody}-BODY |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED 2-BODY CONTRIBUTION TO ENERGY | |em| 1 | when vmfc in bsse_type & max_nbody>=2 | 2-body total data less (2-1)-body total data for partial IE; inputs are total energies w/ vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| VMFC-CORRECTED {nb}-BODY CONTRIBUTION TO ENERGY | |em| 1 | when vmfc in bsse_type | {max_nbody}-body total data less ({max_nbody}-1)-body data f,MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:39733,Energy Efficiency,energy,energy,39733,"----------------------------------------------------------+; | |em| {max_nbody}vmfc | |em| (nat*3, nat*3) | when driver is h; zeroed if vmfc not in bsse_type | cumulative through {max_nbody}-body total Hessians with vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | | | | |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | intermediates | ntasks | always | all individual energies with nice labels |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| N-BODY (1, 2)@(1, 2) TOTAL ENERGY | |em| 1 | always | total energy for 1st modelchem, 1st & 2nd fragments in basis of 1st & 2nd fragments |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| N-BODY (3)@(2, 3) TOTAL ENERGY | |em| 1 | always | total energy for 2nd modelchem, 3rd fragment in basis of 2nd and 3rd fragments |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| .",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:40154,Energy Efficiency,energy,energy,40154,"----------------------------------------------------------+; | |em| {max_nbody}vmfc | |em| (nat*3, nat*3) | when driver is h; zeroed if vmfc not in bsse_type | cumulative through {max_nbody}-body total Hessians with vmfc treatment |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | | | | |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | intermediates | ntasks | always | all individual energies with nice labels |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| N-BODY (1, 2)@(1, 2) TOTAL ENERGY | |em| 1 | always | total energy for 1st modelchem, 1st & 2nd fragments in basis of 1st & 2nd fragments |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| N-BODY (3)@(2, 3) TOTAL ENERGY | |em| 1 | always | total energy for 2nd modelchem, 3rd fragment in basis of 2nd and 3rd fragments |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| .",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:41487,Energy Efficiency,energy,energy,41487,"-+--------------------------------------------------------------------------------------------------------------------+; | |em| ... | | | |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | | | | |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | intermediates_energy | ntasks | always | all individual energies |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| 1_((1, 2), (1, 2)) | |em| 1 | always | total energy for 1st modelchem, 1st & 2nd fragments in basis of 1st & 2nd fragments |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| 2_((3,), (2, 3)) | |em| 1 | always | total energy for 2nd modelchem, 3rd fragment in basis of 2nd and 3rd fragments |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| ... | | | |; +---------------------------------------------------------------+----------------------+-------------------------------",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:41894,Energy Efficiency,energy,energy,41894,"-+--------------------------------------------------------------------------------------------------------------------+; | |em| ... | | | |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | | | | |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | intermediates_energy | ntasks | always | all individual energies |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| 1_((1, 2), (1, 2)) | |em| 1 | always | total energy for 1st modelchem, 1st & 2nd fragments in basis of 1st & 2nd fragments |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| 2_((3,), (2, 3)) | |em| 1 | always | total energy for 2nd modelchem, 3rd fragment in basis of 2nd and 3rd fragments |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | |em| ... | | | |; +---------------------------------------------------------------+----------------------+-------------------------------",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1859,Integrability,depend,depending,1859,"dy_multilevel.prepare_results() wherein each mc level calls this; function again and collects separate nbody_results dictionaries and processes them into a final return that; is a small subset of the table below. ptype_size = (1,)/(nat, 3)/(3 * nat, 3 * nat); e/g/h := energy or gradient or Hessian; rtd := return_total_data. .. |em| unicode:: U+02003 .. em space. .. _`table:nbody_return`:. +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | item | size | present / zeroed | contents / interpretation |; +===============================================================+======================+====================================================================+====================================================================================================================+; | ret_ptype | ptype_size | always | interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver) |; | | | | with cp/nocp/vmfc treatment (depending on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_energy | 1 | always | interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_gradient | (nat, 3) | when driver is g/h | interaction gradient: IE or total (",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1898,Integrability,depend,depending,1898,"dy_multilevel.prepare_results() wherein each mc level calls this; function again and collects separate nbody_results dictionaries and processes them into a final return that; is a small subset of the table below. ptype_size = (1,)/(nat, 3)/(3 * nat, 3 * nat); e/g/h := energy or gradient or Hessian; rtd := return_total_data. .. |em| unicode:: U+02003 .. em space. .. _`table:nbody_return`:. +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | item | size | present / zeroed | contents / interpretation |; +===============================================================+======================+====================================================================+====================================================================================================================+; | ret_ptype | ptype_size | always | interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver) |; | | | | with cp/nocp/vmfc treatment (depending on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_energy | 1 | always | interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_gradient | (nat, 3) | when driver is g/h | interaction gradient: IE or total (",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:1959,Integrability,depend,depending,1959,"dy_multilevel.prepare_results() wherein each mc level calls this; function again and collects separate nbody_results dictionaries and processes them into a final return that; is a small subset of the table below. ptype_size = (1,)/(nat, 3)/(3 * nat, 3 * nat); e/g/h := energy or gradient or Hessian; rtd := return_total_data. .. |em| unicode:: U+02003 .. em space. .. _`table:nbody_return`:. +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | item | size | present / zeroed | contents / interpretation |; +===============================================================+======================+====================================================================+====================================================================================================================+; | ret_ptype | ptype_size | always | interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver) |; | | | | with cp/nocp/vmfc treatment (depending on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_energy | 1 | always | interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_gradient | (nat, 3) | when driver is g/h | interaction gradient: IE or total (",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:2330,Integrability,depend,depending,2330,"dy_multilevel.prepare_results() wherein each mc level calls this; function again and collects separate nbody_results dictionaries and processes them into a final return that; is a small subset of the table below. ptype_size = (1,)/(nat, 3)/(3 * nat, 3 * nat); e/g/h := energy or gradient or Hessian; rtd := return_total_data. .. |em| unicode:: U+02003 .. em space. .. _`table:nbody_return`:. +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | item | size | present / zeroed | contents / interpretation |; +===============================================================+======================+====================================================================+====================================================================================================================+; | ret_ptype | ptype_size | always | interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver) |; | | | | with cp/nocp/vmfc treatment (depending on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_energy | 1 | always | interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_gradient | (nat, 3) | when driver is g/h | interaction gradient: IE or total (",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:2775,Integrability,depend,depending,2775,"=====================================================+====================================================================================================================+; | ret_ptype | ptype_size | always | interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver) |; | | | | with cp/nocp/vmfc treatment (depending on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_energy | 1 | always | interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_gradient | (nat, 3) | when driver is g/h | interaction gradient: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type|; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_hessian | (nat * 3, nat * 3) | when driver is h | interaction Hessian: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type)|; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | | | | |; +--------------",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:3224,Integrability,depend,depending,3224,"-+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_energy | 1 | always | interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_gradient | (nat, 3) | when driver is g/h | interaction gradient: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type|; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_hessian | (nat * 3, nat * 3) | when driver is h | interaction Hessian: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type)|; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | | | | |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | nbody | >=1 | always | energy n-body QCVariables to be set |; +---------------------------------------------------------------+----------------------+----------------------------------",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:2,Performance,load,load,2,"# load QCVariables",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:132,Integrability,interface,interface,132,"""""""Called by driver to assemble results into ManyBody-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - supersystem molecule; - dummy basis, def2-svp; - e/g/h member data; - QCVariables. Returns; -------; ret; Energy, gradient, or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:74,Energy Efficiency,energy,energy,74,"# TODO all besides nbody may be better candidates for extras than qcvars. energy/gradient/hessian_body_dict in particular are too simple for qcvars (e.g., ""2"")",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py:130,Usability,simpl,simple,130,"# TODO all besides nbody may be better candidates for extras than qcvars. energy/gradient/hessian_body_dict in particular are too simple for qcvars (e.g., ""2"")",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody_multilevel.py:15,Availability,recover,recovers,15,"# Super system recovers higher order effects at a lower level",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody_multilevel.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody_multilevel.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody_multilevel.py:15,Safety,recover,recovers,15,"# Super system recovers higher order effects at a lower level",MatchSource.CODE_COMMENT,psi4/driver/driver_nbody_multilevel.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_nbody_multilevel.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:63,Energy Efficiency,energy,energy,63,"# Set method-dependent scf convergence criteria, check against energy routines; # Set post-scf convergence criteria (global will cover all correlated modules)",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:13,Integrability,depend,dependent,13,"# Set method-dependent scf convergence criteria, check against energy routines; # Set post-scf convergence criteria (global will cover all correlated modules)",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:70,Integrability,rout,routines,70,"# Set method-dependent scf convergence criteria, check against energy routines; # Set post-scf convergence criteria (global will cover all correlated modules)",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:10,Security,validat,validated,10,"""""""Return validated Cotton ordering index of `irrep` within `point_group`. Parameters; ----------; irrep; Irreducible representation. Either label (case-insensitive) or 1-based index (int or str).; point_group; Molecular point group label (case-insensitive). Returns; -------; int; 1-based index for **irrep** within **point_group** in Cotton ordering. Raises; ------; ValidationError; If **irrep** out-of-bounds or invalid or if **point_group** doesn't exist. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:10,Availability,error,error,10,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:47,Availability,avail,available,47,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:229,Availability,error,error,229,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:419,Availability,avail,available,419,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:282,Energy Efficiency,energy,energy,282,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:16,Integrability,message,message,16,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:196,Integrability,message,messages,196,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:326,Integrability,message,message,326,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:537,Integrability,message,messages,537,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:563,Integrability,message,message,563,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:86,Usability,simpl,simply,86,"""""""Format error message when *method_name* not available, whether at all in *proc* or simply not under current conditions. Parameters; ----------; method_name; See caller.; dertype; Always ""any""; messages; Dictionary of returned error statistics from ManagedMethodError.; Entry for energy (key `0`) used if present. Alternate message composed if empty dict.; proc; See caller. Returns; -------; str; Message saying not available and suggesting some alternatives in case of typo. If the; method was probed under conditions and rejected (*messages* non-empty), the message; includes the conditions and a link to docs table. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:145,Availability,avail,available,145,"""""""Find the highest dertype program can provide for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; int; Highest available analytic derivative for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:208,Availability,avail,available,208,"""""""Find the highest dertype program can provide for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; int; Highest available analytic derivative for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:267,Availability,avail,available,267,"""""""Find the highest dertype program can provide for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; int; Highest available analytic derivative for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:609,Availability,avail,available,609,"""""""Find the highest dertype program can provide for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; int; Highest available analytic derivative for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:669,Availability,error,error,669,"""""""Find the highest dertype program can provide for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; int; Highest available analytic derivative for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:828,Availability,avail,available,828,"""""""Find the highest dertype program can provide for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; int; Highest available analytic derivative for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:675,Integrability,message,messages,675,"""""""Find the highest dertype program can provide for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; int; Highest available analytic derivative for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:430,Testability,test,testing,430,"""""""Find the highest dertype program can provide for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; int; Highest available analytic derivative for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:302,Deployability,configurat,configuration,302,"# If psi4 is build against a Libint without Hessian ERI integrals ([""eri""][2] is None), that's; # ok, fall back to finite difference. This is the current state of Windows packages from; # conda-forge, due to the 6h build limit. But, don't leap to finite difference just because; # Libint can't provide configuration information ([""eri""][0] is None means no energy ERI ints).; # This can happen if psi4 is linked against a Libint generated with libtool and not patched.",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:460,Deployability,patch,patched,460,"# If psi4 is build against a Libint without Hessian ERI integrals ([""eri""][2] is None), that's; # ok, fall back to finite difference. This is the current state of Windows packages from; # conda-forge, due to the 6h build limit. But, don't leap to finite difference just because; # Libint can't provide configuration information ([""eri""][0] is None means no energy ERI ints).; # This can happen if psi4 is linked against a Libint generated with libtool and not patched.",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:357,Energy Efficiency,energy,energy,357,"# If psi4 is build against a Libint without Hessian ERI integrals ([""eri""][2] is None), that's; # ok, fall back to finite difference. This is the current state of Windows packages from; # conda-forge, due to the 6h build limit. But, don't leap to finite difference just because; # Libint can't provide configuration information ([""eri""][0] is None means no energy ERI ints).; # This can happen if psi4 is linked against a Libint generated with libtool and not patched.",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:302,Modifiability,config,configuration,302,"# If psi4 is build against a Libint without Hessian ERI integrals ([""eri""][2] is None), that's; # ok, fall back to finite difference. This is the current state of Windows packages from; # conda-forge, due to the 6h build limit. But, don't leap to finite difference just because; # Libint can't provide configuration information ([""eri""][0] is None means no energy ERI ints).; # This can happen if psi4 is linked against a Libint generated with libtool and not patched.",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:51,Availability,avail,available,51,"#core.print_out("" Warning: Analytical Hessians not available with this Libint2 library. Falling back to finite difference. Setting `points=5` may be needed for precision.\n"")",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:154,Availability,avail,available,154,"""""""Find whether propgram can provide analytic properties for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; str; ""prop"" if analytic properties available for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:217,Availability,avail,available,217,"""""""Find whether propgram can provide analytic properties for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; str; ""prop"" if analytic properties available for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:276,Availability,avail,available,276,"""""""Find whether propgram can provide analytic properties for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; str; ""prop"" if analytic properties available for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:640,Availability,avail,available,640,"""""""Find whether propgram can provide analytic properties for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; str; ""prop"" if analytic properties available for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:680,Availability,error,error,680,"""""""Find whether propgram can provide analytic properties for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; str; ""prop"" if analytic properties available for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:839,Availability,avail,available,839,"""""""Find whether propgram can provide analytic properties for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; str; ""prop"" if analytic properties available for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:686,Integrability,message,messages,686,"""""""Find whether propgram can provide analytic properties for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; str; ""prop"" if analytic properties available for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:439,Testability,test,testing,439,"""""""Find whether propgram can provide analytic properties for method, as encoded in procedures and managed methods. Managed methods return finer grain ""is available"" info. For example, ""is analytic ROHF DF HF gradient available?""; from managed method, not just ""is HF gradient available?"" from procedures. Parameters; ----------; method; Quantum chemistry method targeted by driver. Should be correct case for procedures lookup.; proc; For testing only! Procedures table to look up `method`. Default is psi4.driver.procedures .; managed_keywords; Keywords that influence managed methods. Returns; -------; str; ""prop"" if analytic properties available for `method`.; dict; Detailed error messages to be passed along. Keys are dertype. Raises; ------; MissingMethodError; When `method` is unavailable at all. When `user_dertype` exceeds what available for `method`. """"""",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py:166,Availability,down,downgrade,166,"# Negotiations. In particular:; # * don't return higher derivative than targeted by driver; # * don't return higher derivative than spec'd by user. that is, user can downgrade derivative; # * alert user to conflict between driver and user_dertype",MatchSource.CODE_COMMENT,psi4/driver/driver_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/driver_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py:10,Modifiability,plugin,plugins,10,"""""""Import plugins eligible to be accessible in input files if detected.""""""",MatchSource.CODE_COMMENT,psi4/driver/endorsed_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py:62,Safety,detect,detected,62,"""""""Import plugins eligible to be accessible in input files if detected.""""""",MatchSource.CODE_COMMENT,psi4/driver/endorsed_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py:33,Security,access,accessible,33,"""""""Import plugins eligible to be accessible in input files if detected.""""""",MatchSource.CODE_COMMENT,psi4/driver/endorsed_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py:24,Availability,avail,available,24,"""""""Psi4 plugin 'snsmp2' available, but scipy missing. Try `conda install scipy` or `pip install scipy`.""""""",MatchSource.CODE_COMMENT,psi4/driver/endorsed_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py:65,Deployability,install,install,65,"""""""Psi4 plugin 'snsmp2' available, but scipy missing. Try `conda install scipy` or `pip install scipy`.""""""",MatchSource.CODE_COMMENT,psi4/driver/endorsed_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py:88,Deployability,install,install,88,"""""""Psi4 plugin 'snsmp2' available, but scipy missing. Try `conda install scipy` or `pip install scipy`.""""""",MatchSource.CODE_COMMENT,psi4/driver/endorsed_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py:8,Modifiability,plugin,plugin,8,"""""""Psi4 plugin 'snsmp2' available, but scipy missing. Try `conda install scipy` or `pip install scipy`.""""""",MatchSource.CODE_COMMENT,psi4/driver/endorsed_plugins.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/endorsed_plugins.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py:162,Performance,optimiz,optimized,162,"""""""Scan electron occupancy from +1 electron to -1. Parameters; ----------; name; DFT functional string name or function defining functional; whose omega is to be optimized.; molecule : :ref:`molecule <op_py_molecule>`, optional; Target molecule (neutral) for which omega is to be tuned, if not last defined.; cation_mult : Optional[int]; Multiplicity of cation, if not neutral multiplicity + 1.; anion_mult : Optional[int]; Multiplicity of anion, if not neutral multiplicity + 1.; frac_start : Optional[int]; Iteration at which to start frac procedure when not reading previous; guess. Defaults to 25.; HOMO_occs : Optional[List]; Occupations to step through for cation, by default `[1 - 0.1 * x for x in range(11)]`.; LUMO_occs : Optional[List]; Occupations to step through for anion, by default `[1 - 0.1 * x for x in range(11)]`.; HOMO : Optional[int]; Index of HOMO.; LUMO : Optional[int]; Index of LUMO.; frac_diis : Optional[bool]; Do use DIIS for non-1.0-occupied points?; neutral_guess : Optional[bool]; Do use neutral orbitals as guess for the anion?; hf_guess: Optional[bool]; Do use UHF guess before UKS?; continuous_guess : Optional[bool]; Do carry along guess rather than reguessing at each occupation?; filename : Optional[str]; Result filename, if not name of molecule. Returns; -------; ~typing.Dict[float, float]; Dictionary associating SCF energies with occupations. """"""",MatchSource.CODE_COMMENT,psi4/driver/frac.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py:280,Performance,tune,tuned,280,"""""""Scan electron occupancy from +1 electron to -1. Parameters; ----------; name; DFT functional string name or function defining functional; whose omega is to be optimized.; molecule : :ref:`molecule <op_py_molecule>`, optional; Target molecule (neutral) for which omega is to be tuned, if not last defined.; cation_mult : Optional[int]; Multiplicity of cation, if not neutral multiplicity + 1.; anion_mult : Optional[int]; Multiplicity of anion, if not neutral multiplicity + 1.; frac_start : Optional[int]; Iteration at which to start frac procedure when not reading previous; guess. Defaults to 25.; HOMO_occs : Optional[List]; Occupations to step through for cation, by default `[1 - 0.1 * x for x in range(11)]`.; LUMO_occs : Optional[List]; Occupations to step through for anion, by default `[1 - 0.1 * x for x in range(11)]`.; HOMO : Optional[int]; Index of HOMO.; LUMO : Optional[int]; Index of LUMO.; frac_diis : Optional[bool]; Do use DIIS for non-1.0-occupied points?; neutral_guess : Optional[bool]; Do use neutral orbitals as guess for the anion?; hf_guess: Optional[bool]; Do use UHF guess before UKS?; continuous_guess : Optional[bool]; Do carry along guess rather than reguessing at each occupation?; filename : Optional[str]; Result filename, if not name of molecule. Returns; -------; ~typing.Dict[float, float]; Dictionary associating SCF energies with occupations. """"""",MatchSource.CODE_COMMENT,psi4/driver/frac.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py:15,Energy Efficiency,charge,charge,15,"# Set the next charge/mult",MatchSource.CODE_COMMENT,psi4/driver/frac.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py:165,Performance,optimiz,optimized,165,"""""""Optimize DFT omega parameter for molecular system. Parameters; ----------; name; DFT functional string name or function defining functional; whose omega is to be optimized.; omega_l; Minimum omega to be considered during fitting.; omega_r; Maximum omega to be considered during fitting.; molecule : :ref:`molecule <op_py_molecule>`, optional; Target molecule (neutral) for which omega is to be tuned, if not last defined.; omega_convergence; Threshold below which to consider omega converged. (formerly omega_tolerance); maxiter; Maximum number of iterations towards omega convergence. Returns; -------; float; Optimal omega parameter. """"""",MatchSource.CODE_COMMENT,psi4/driver/frac.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py:397,Performance,tune,tuned,397,"""""""Optimize DFT omega parameter for molecular system. Parameters; ----------; name; DFT functional string name or function defining functional; whose omega is to be optimized.; omega_l; Minimum omega to be considered during fitting.; omega_r; Maximum omega to be considered during fitting.; molecule : :ref:`molecule <op_py_molecule>`, optional; Target molecule (neutral) for which omega is to be tuned, if not last defined.; omega_convergence; Threshold below which to consider omega converged. (formerly omega_tolerance); maxiter; Maximum number of iterations towards omega convergence. Returns; -------; float; Optimal omega parameter. """"""",MatchSource.CODE_COMMENT,psi4/driver/frac.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py:19,Performance,optimiz,optimize,19,"""""""Not sensible to optimize omega for non-long-range-correction functional.""""""",MatchSource.CODE_COMMENT,psi4/driver/frac.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/frac.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/gaussian_n.py:2,Performance,optimiz,optimize,2,"# optimize geometry at scf level",MatchSource.CODE_COMMENT,psi4/driver/gaussian_n.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/gaussian_n.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/gaussian_n.py:95,Availability,fault,fault,95,"# scf frequencies for zpe; # NOTE This line should not be needed, but without it there's a seg fault",MatchSource.CODE_COMMENT,psi4/driver/gaussian_n.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/gaussian_n.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/gaussian_n.py:2,Performance,optimiz,optimize,2,"# optimize geometry at mp2 (no frozen core) level; # note: freeze_core isn't an option in MP2",MatchSource.CODE_COMMENT,psi4/driver/gaussian_n.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/gaussian_n.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:136,Security,access,access,136,"""""""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """"""",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:43,Integrability,wrap,wrapping,43,"""""""Function to determine if argument needs wrapping in quotes as string.""""""",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:19,Modifiability,variab,variable,19,"# This is a python variable, make sure that it starts with a letter",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:31,Integrability,wrap,wrap,31,"# This must be a number, don't wrap it in quotes",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:18,Integrability,wrap,wrapped,18,"# This is already wrapped in quotes, do nothing",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:15,Integrability,wrap,wrap,15,"""""""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:112,Modifiability,variab,variables,112,"""""""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:7,Integrability,wrap,wraps,7,"# This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:106,Modifiability,variab,variables,106,"# This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:14,Energy Efficiency,charge,charge,14,"# 4. Look for charge lines Z x y z, convert according to unit convention",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py:82,Security,validat,validate,82,"""""""Function to preprocess *raw input*, the text of the input file, then parse it, validate it for format, and convert it into legitimate Python. Does a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user's .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed *raw_input*. Parameters; ----------; raw_input; Input in a mixture of Python and PSIthon syntax.; print_level; *raw_input* is printed to the output file unless *print_level* =0. """"""",MatchSource.CODE_COMMENT,psi4/driver/inputparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/inputparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/ipi_broker.py:26,Testability,test,testing,26,"# Define Client to enable testing of the Broker in the unittests",MatchSource.CODE_COMMENT,psi4/driver/ipi_broker.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/ipi_broker.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/ipi_broker.py:16,Energy Efficiency,energy,energy,16,"""""""Fetch force, energy of PSI. Arguments:; - pos: positions of the atoms as array. If None, the positions of the current active; molecule is used.; """"""",MatchSource.CODE_COMMENT,psi4/driver/ipi_broker.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/ipi_broker.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/ipi_broker.py:63,Energy Efficiency,energy,energy,63,"""""""Calculate the gradient with @LOT. When bypass_scf=True a hf energy calculation has been done before.; """"""",MatchSource.CODE_COMMENT,psi4/driver/ipi_broker.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/ipi_broker.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:325,Energy Efficiency,energy,energy,325,""""""" Initialize an MDIEngine object for communication with MDI (MolSSI driver interface). Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:77,Integrability,interface,interface,77,""""""" Initialize an MDIEngine object for communication with MDI (MolSSI driver interface). Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:27,Energy Efficiency,energy,energy,27,"# Additional arguments for energy, gradient, or optimization calculations",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:48,Performance,optimiz,optimization,48,"# Additional arguments for energy, gradient, or optimization calculations",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:34,Performance,perform,performed,34,"# Molecule all MDI operations are performed on",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:18,Energy Efficiency,energy,energy,18,"# Most recent SCF energy",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:50,Energy Efficiency,charge,charges,50,"# Variables used when MDI sets a lattice of point charges",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:26,Energy Efficiency,charge,charges,26,"# number of lattice point charges",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:18,Energy Efficiency,charge,charges,18,"# list of lattice charges",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:7,Energy Efficiency,charge,chargefield,7,"# Psi4 chargefield; # MPI variables",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:26,Modifiability,variab,variables,26,"# Psi4 chargefield; # MPI variables",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:33,Energy Efficiency,charge,charges,33,"# Flag for if a lattice of point charges has been set",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:21,Energy Efficiency,charge,charges,21,""""""" Send the nuclear charges through MDI. :returns: *charges* Atomic charges; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:53,Energy Efficiency,charge,charges,53,""""""" Send the nuclear charges through MDI. :returns: *charges* Atomic charges; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:69,Energy Efficiency,charge,charges,69,""""""" Send the nuclear charges through MDI. :returns: *charges* Atomic charges; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:19,Energy Efficiency,energy,energy,19,""""""" Send the total energy through MDI. :returns: *energy* Energy of the system; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:50,Energy Efficiency,energy,energy,50,""""""" Send the total energy through MDI. :returns: *energy* Energy of the system; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:29,Energy Efficiency,charge,charges,29,""""""" Receive a set of nuclear charges through MDI and assign them to the atoms in the current molecule. Arguments:; charges: New nuclear charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:115,Energy Efficiency,charge,charges,115,""""""" Receive a set of nuclear charges through MDI and assign them to the atoms in the current molecule. Arguments:; charges: New nuclear charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:136,Energy Efficiency,charge,charges,136,""""""" Receive a set of nuclear charges through MDI and assign them to the atoms in the current molecule. Arguments:; charges: New nuclear charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:13,Energy Efficiency,charge,charge,13,"# Assign the charge of all atoms, taking care to avoid ghost atoms",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:49,Safety,avoid,avoid,49,"# Assign the charge of all atoms, taking care to avoid ghost atoms",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:47,Safety,avoid,avoid,47,"# Assign the mass of all atoms, taking care to avoid ghost atoms",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:25,Energy Efficiency,charge,charges,25,"# Set a lattice of point charges",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:33,Energy Efficiency,charge,charges,33,""""""" Set a field of lattice point charges using information received through MDI; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:40,Energy Efficiency,charge,charges,40,""""""" Receive the number of lattice point charges through MDI. Arguments:; nlattice: New number of point charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:103,Energy Efficiency,charge,charges,103,""""""" Receive the number of lattice point charges through MDI. Arguments:; nlattice: New number of point charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:54,Energy Efficiency,charge,charges,54,""""""" Receive the coordinates of a set of lattice point charges through MDI. Arguments:; clattice: New coordinates of the lattice of point charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:137,Energy Efficiency,charge,charges,137,""""""" Receive the coordinates of a set of lattice point charges through MDI. Arguments:; clattice: New coordinates of the lattice of point charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:16,Energy Efficiency,charge,charges,16,""""""" Receive the charges of a set of lattice point charges through MDI. Arguments:; lattice: New charges of the lattice of point charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:50,Energy Efficiency,charge,charges,50,""""""" Receive the charges of a set of lattice point charges through MDI. Arguments:; lattice: New charges of the lattice of point charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:96,Energy Efficiency,charge,charges,96,""""""" Receive the charges of a set of lattice point charges through MDI. Arguments:; lattice: New charges of the lattice of point charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:128,Energy Efficiency,charge,charges,128,""""""" Receive the charges of a set of lattice point charges through MDI. Arguments:; lattice: New charges of the lattice of point charges. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:11,Energy Efficiency,energy,energy,11,""""""" Run an energy calculation; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:26,Energy Efficiency,charge,charge,26,""""""" Send the total system charge through MDI. :returns: *charge* Total charge of the system; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:57,Energy Efficiency,charge,charge,57,""""""" Send the total system charge through MDI. :returns: *charge* Total charge of the system; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:71,Energy Efficiency,charge,charge,71,""""""" Send the total system charge through MDI. :returns: *charge* Total charge of the system; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:29,Energy Efficiency,charge,charge,29,""""""" Receive the total system charge through MDI. Arguments:; charge: New charge of the system. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:61,Energy Efficiency,charge,charge,61,""""""" Receive the total system charge through MDI. Arguments:; charge: New charge of the system. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:73,Energy Efficiency,charge,charge,73,""""""" Receive the total system charge through MDI. Arguments:; charge: New charge of the system. If None, receive through MDI.; """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:24,Energy Efficiency,charge,charges,24,"# If a lattice of point charges was set, unset it now",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:75,Deployability,configurat,configuration,75,""""""" Initialize the MDI Library. Parameters; ----------; mdi_arguments; MDI configuration options. """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:75,Modifiability,config,configuration,75,""""""" Initialize the MDI Library. Parameters; ----------; mdi_arguments; MDI configuration options. """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:302,Energy Efficiency,energy,energy,302,""""""" Begin functioning as an MDI (MolSSI driver interface) engine. Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py:47,Integrability,interface,interface,47,""""""" Begin functioning as an MDI (MolSSI driver interface) engine. Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/mdi_engine.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/mdi_engine.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py:67,Integrability,wrap,wrapper,67,"""""""Construct Molecule from unvalidated arrays and variables. Light wrapper around :py:func:`~qcelemental.molparse.from_arrays`; that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance. Parameters; ----------; See :py:func:`~qcelemental.molparse.from_arrays`. Returns; -------; :py:class:`psi4.core.Molecule`. """"""",MatchSource.CODE_COMMENT,psi4/driver/molutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py:50,Modifiability,variab,variables,50,"""""""Construct Molecule from unvalidated arrays and variables. Light wrapper around :py:func:`~qcelemental.molparse.from_arrays`; that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance. Parameters; ----------; See :py:func:`~qcelemental.molparse.from_arrays`. Returns; -------; :py:class:`psi4.core.Molecule`. """"""",MatchSource.CODE_COMMENT,psi4/driver/molutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py:50,Integrability,wrap,wrapper,50,"""""""Construct Molecule from non-Psi4 schema. Light wrapper around :py:func:`~psi4.core.Molecule.from_arrays`. Parameters; ----------; molschema; Dictionary form of Molecule following known schema.; return_dict; Additionally return Molecule dictionary intermediate.; nonphysical; Do allow masses outside an element's natural range to pass validation?; verbose; Amount of printing. Returns; -------; mol : :py:class:`psi4.core.Molecule`; molrec : dict; Dictionary representation of instance.; Only provided if `return_dict` is True. """"""",MatchSource.CODE_COMMENT,psi4/driver/molutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py:337,Security,validat,validation,337,"""""""Construct Molecule from non-Psi4 schema. Light wrapper around :py:func:`~psi4.core.Molecule.from_arrays`. Parameters; ----------; molschema; Dictionary form of Molecule following known schema.; return_dict; Additionally return Molecule dictionary intermediate.; nonphysical; Do allow masses outside an element's natural range to pass validation?; verbose; Amount of printing. Returns; -------; mol : :py:class:`psi4.core.Molecule`; molrec : dict; Dictionary representation of instance.; Only provided if `return_dict` is True. """"""",MatchSource.CODE_COMMENT,psi4/driver/molutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py:53,Deployability,install,install,53,"""""""Install pylibefp to use EFP functionality. `conda install pylibefp -c psi4` Or build with `-DENABLE_libefp=ON`""""""",MatchSource.CODE_COMMENT,psi4/driver/molutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/molutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/pluginutil.py:218,Security,sanitiz,sanitized,218,"""""""Function to return *name* in coded form, stripped of; characters that confuse filenames, characters into lowercase,; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, ``-``,; & ``,`` into ``_``. Also checks the sanitized name against a list of restricted C++ keywords.; """"""",MatchSource.CODE_COMMENT,psi4/driver/pluginutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/pluginutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/pluginutil.py:16,Availability,avail,available,16,"# Determine the available plugins",MatchSource.CODE_COMMENT,psi4/driver/pluginutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/pluginutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/pluginutil.py:26,Modifiability,plugin,plugins,26,"# Determine the available plugins",MatchSource.CODE_COMMENT,psi4/driver/pluginutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/pluginutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/pluginutil.py:32,Modifiability,plugin,plugin,32,"# Create, but do not overwrite, plugin directory",MatchSource.CODE_COMMENT,psi4/driver/pluginutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/pluginutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/psifiles.py:11,Performance,optimiz,optimization,11,"# geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad",MatchSource.CODE_COMMENT,psi4/driver/psifiles.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/psifiles.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/psifiles.py:32,Integrability,contract,contractions,32,"# intermediates just for single contractions",MatchSource.CODE_COMMENT,psi4/driver/psifiles.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/psifiles.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/psifiles.py:10,Availability,error,error,10,"# CEPA/CC error vectors for diis",MatchSource.CODE_COMMENT,psi4/driver/psifiles.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/psifiles.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:26,Deployability,integrat,integrate,26,"""""""Module with classes to integrate MM charges into; a QM calculation. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:39,Energy Efficiency,charge,charges,39,"""""""Module with classes to integrate MM charges into; a QM calculation. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:26,Integrability,integrat,integrate,26,"""""""Module with classes to integrate MM charges into; a QM calculation. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:51,Energy Efficiency,charge,charges,51,"""""""Function to run scf and fit a system of diffuse charges to; resulting density. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:48,Energy Efficiency,charge,charges,48,"""""""Function to perform a general fit of diffuse charges; to wavefunction density. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:15,Performance,perform,perform,15,"""""""Function to perform a general fit of diffuse charges; to wavefunction density. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:8,Energy Efficiency,charge,charges,8,"""""""Hold charges and :py:class:`psi4.core.ExternalPotential`. Use :py:class:`psi4.driver.QMMMbohr` instead.""""""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:8,Energy Efficiency,charge,charges,8,"""""""Hold charges and :py:class:`psi4.core.ExternalPotential`. To add external charges to a calculation, prefer; passing the array of charges with kwarg ``external_potentials``, as in extern2 example.""""""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:77,Energy Efficiency,charge,charges,77,"""""""Hold charges and :py:class:`psi4.core.ExternalPotential`. To add external charges to a calculation, prefer; passing the array of charges with kwarg ``external_potentials``, as in extern2 example.""""""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:132,Energy Efficiency,charge,charges,132,"""""""Hold charges and :py:class:`psi4.core.ExternalPotential`. To add external charges to a calculation, prefer; passing the array of charges with kwarg ``external_potentials``, as in extern2 example.""""""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:29,Energy Efficiency,charge,charge,29,"""""""Function to add a diffuse charge field *diffuse*.""""""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:27,Energy Efficiency,charge,charge,27,"""""""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:27,Energy Efficiency,charge,charge,27,"""""""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:24,Energy Efficiency,charge,charge,24,"""""""Function to define a charge field external to the; molecule through point and diffuse charges. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py:89,Energy Efficiency,charge,charges,89,"""""""Function to define a charge field external to the; molecule through point and diffuse charges. """"""",MatchSource.CODE_COMMENT,psi4/driver/qmmm.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qmmm.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:32,Modifiability,variab,variables,32,"# ""nuclear_repulsion_energy"": {""variables"": ""NUCLEAR REPULSION ENERGY""}, # use mol instead",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:6,Modifiability,variab,variables,6,"# SCF variables",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:62,Modifiability,variab,variables,62,"# SCF Properties (experimental); # ""scf_quadrupole_moment"": {""variables"": [""SCF QUADRUPOLE "" + x for x in [""XX"", ""XY"", ""XZ"", ""YY"", ""YZ"", ""ZZ""]], ""skip_null"": True},; # ""scf_mulliken_charges"": {""variables"": ""MULLIKEN_CHARGES"", ""skip_null"": True},; # ""scf_lowdin_charges"": {""variables"": ""LOWDIN_CHARGES"", ""skip_null"": True},; # ""scf_wiberg_lowdin_indices"": {""variables"": ""WIBERG_LOWDIN_INDICES"", ""skip_null"": True},; # ""scf_mayer_indices"": {""variables"": ""MAYER_INDICES"", ""skip_null"": True},",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:194,Modifiability,variab,variables,194,"# SCF Properties (experimental); # ""scf_quadrupole_moment"": {""variables"": [""SCF QUADRUPOLE "" + x for x in [""XX"", ""XY"", ""XZ"", ""YY"", ""YZ"", ""ZZ""]], ""skip_null"": True},; # ""scf_mulliken_charges"": {""variables"": ""MULLIKEN_CHARGES"", ""skip_null"": True},; # ""scf_lowdin_charges"": {""variables"": ""LOWDIN_CHARGES"", ""skip_null"": True},; # ""scf_wiberg_lowdin_indices"": {""variables"": ""WIBERG_LOWDIN_INDICES"", ""skip_null"": True},; # ""scf_mayer_indices"": {""variables"": ""MAYER_INDICES"", ""skip_null"": True},",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:273,Modifiability,variab,variables,273,"# SCF Properties (experimental); # ""scf_quadrupole_moment"": {""variables"": [""SCF QUADRUPOLE "" + x for x in [""XX"", ""XY"", ""XZ"", ""YY"", ""YZ"", ""ZZ""]], ""skip_null"": True},; # ""scf_mulliken_charges"": {""variables"": ""MULLIKEN_CHARGES"", ""skip_null"": True},; # ""scf_lowdin_charges"": {""variables"": ""LOWDIN_CHARGES"", ""skip_null"": True},; # ""scf_wiberg_lowdin_indices"": {""variables"": ""WIBERG_LOWDIN_INDICES"", ""skip_null"": True},; # ""scf_mayer_indices"": {""variables"": ""MAYER_INDICES"", ""skip_null"": True},",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:357,Modifiability,variab,variables,357,"# SCF Properties (experimental); # ""scf_quadrupole_moment"": {""variables"": [""SCF QUADRUPOLE "" + x for x in [""XX"", ""XY"", ""XZ"", ""YY"", ""YZ"", ""ZZ""]], ""skip_null"": True},; # ""scf_mulliken_charges"": {""variables"": ""MULLIKEN_CHARGES"", ""skip_null"": True},; # ""scf_lowdin_charges"": {""variables"": ""LOWDIN_CHARGES"", ""skip_null"": True},; # ""scf_wiberg_lowdin_indices"": {""variables"": ""WIBERG_LOWDIN_INDICES"", ""skip_null"": True},; # ""scf_mayer_indices"": {""variables"": ""MAYER_INDICES"", ""skip_null"": True},",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:440,Modifiability,variab,variables,440,"# SCF Properties (experimental); # ""scf_quadrupole_moment"": {""variables"": [""SCF QUADRUPOLE "" + x for x in [""XX"", ""XY"", ""XZ"", ""YY"", ""YZ"", ""ZZ""]], ""skip_null"": True},; # ""scf_mulliken_charges"": {""variables"": ""MULLIKEN_CHARGES"", ""skip_null"": True},; # ""scf_lowdin_charges"": {""variables"": ""LOWDIN_CHARGES"", ""skip_null"": True},; # ""scf_wiberg_lowdin_indices"": {""variables"": ""WIBERG_LOWDIN_INDICES"", ""skip_null"": True},; # ""scf_mayer_indices"": {""variables"": ""MAYER_INDICES"", ""skip_null"": True},",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:6,Modifiability,variab,variables,6,"# MP2 variables",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:27,Modifiability,variab,variables,27,"# ""ccsd_singles_energy"": {""variables"": ""NYI"", ""default"": 0.0},; # """": {""variables"": },",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:72,Modifiability,variab,variables,72,"# ""ccsd_singles_energy"": {""variables"": ""NYI"", ""default"": 0.0},; # """": {""variables"": },",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:30,Modifiability,variab,variables,30,"""""""; Converts dictionaries of variables based on translation metadata; """"""",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:17,Modifiability,variab,variables,17,"# Get the actual variables",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:29,Energy Efficiency,energy,energy,29,"# get occupations in orbital-energy ordering",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:76,Modifiability,variab,variables,76,"""""""Reset work environment to new Psi4 instance state.; This includes global variables (P::e.globals, P::e.arrays, P::e.options) and any; non-explicitly-retained PSIO-managed scratch files. """"""",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:29,Integrability,depend,depending,29,"""""""Reset primary output file depending on run mode.; When ``True``, remove the output file; when ``False``, close the output file.; The latter is appropriate when calling :py:func:`psi4.run_qcschema` *from a Psi4 Python session*; as otherwise, the parent session's own files could get cleaned away. """"""",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:50,Availability,error,error,50,"""""""; Destroy the created at file at exit, pass if error.; """"""",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:749,Availability,failure,failure,749,"""""""Run a quantum chemistry job specified by :py:class:`qcelemental.models.AtomicInput` **input_data** in |PSIfour|. Parameters; ----------; input_data; Quantum chemistry job in either AtomicInput class or dictionary form.; clean; Reset global QCVariables, options, and scratch files to default state.; postclean; When ``False``, *remove* the output file since absorbed into AtomicResult.; When ``True``, simply *close* the output file. True is useful when calling; from a Psi4 session to avoid removing the parent Psi4's output file. Returns; -------; qcelemental.models.AtomicResult; Full record of quantum chemistry calculation, including output text. Returned upon job success.; qcelemental.models.FailedOperation; Record to diagnose calculation failure, including output text and input specification. Returned upon job failure. """"""",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:823,Availability,failure,failure,823,"""""""Run a quantum chemistry job specified by :py:class:`qcelemental.models.AtomicInput` **input_data** in |PSIfour|. Parameters; ----------; input_data; Quantum chemistry job in either AtomicInput class or dictionary form.; clean; Reset global QCVariables, options, and scratch files to default state.; postclean; When ``False``, *remove* the output file since absorbed into AtomicResult.; When ``True``, simply *close* the output file. True is useful when calling; from a Psi4 session to avoid removing the parent Psi4's output file. Returns; -------; qcelemental.models.AtomicResult; Full record of quantum chemistry calculation, including output text. Returned upon job success.; qcelemental.models.FailedOperation; Record to diagnose calculation failure, including output text and input specification. Returned upon job failure. """"""",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:488,Safety,avoid,avoid,488,"""""""Run a quantum chemistry job specified by :py:class:`qcelemental.models.AtomicInput` **input_data** in |PSIfour|. Parameters; ----------; input_data; Quantum chemistry job in either AtomicInput class or dictionary form.; clean; Reset global QCVariables, options, and scratch files to default state.; postclean; When ``False``, *remove* the output file since absorbed into AtomicResult.; When ``True``, simply *close* the output file. True is useful when calling; from a Psi4 session to avoid removing the parent Psi4's output file. Returns; -------; qcelemental.models.AtomicResult; Full record of quantum chemistry calculation, including output text. Returned upon job success.; qcelemental.models.FailedOperation; Record to diagnose calculation failure, including output text and input specification. Returned upon job failure. """"""",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:404,Usability,simpl,simply,404,"""""""Run a quantum chemistry job specified by :py:class:`qcelemental.models.AtomicInput` **input_data** in |PSIfour|. Parameters; ----------; input_data; Quantum chemistry job in either AtomicInput class or dictionary form.; clean; Reset global QCVariables, options, and scratch files to default state.; postclean; When ``False``, *remove* the output file since absorbed into AtomicResult.; When ``True``, simply *close* the output file. True is useful when calling; from a Psi4 session to avoid removing the parent Psi4's output file. Returns; -------; qcelemental.models.AtomicResult; Full record of quantum chemistry calculation, including output text. Returned upon job success.; qcelemental.models.FailedOperation; Record to diagnose calculation failure, including output text and input specification. Returned upon job failure. """"""",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py:28,Modifiability,plugin,plugin,28,"# Set options; ## The Forte plugin needs special treatment.",MatchSource.CODE_COMMENT,psi4/driver/schema_wrapper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/schema_wrapper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_base.py:34,Availability,error,errored,34,"# NOTE: The following will re-run errored jobs by default",MatchSource.CODE_COMMENT,psi4/driver/task_base.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_base.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_base.py:46,Testability,test,test,46,"""""""Don't mess up the widespread ``grep beer`` test of Psi4 doneness by printing multiple drinks per outfile.""""""",MatchSource.CODE_COMMENT,psi4/driver/task_base.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_base.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_planner.py:14,Safety,detect,detected,14,"# Single call detected",MatchSource.CODE_COMMENT,psi4/driver/task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_planner.py:619,Modifiability,config,configure,619,"""""""Plans a task graph of a complex computation. Canonical Task layering:; - ManyBody - BSSE treatment, many-body expansion; - FiniteDifference - derivatives through stencils; - Composite - basis set extrapolation, focal-point methods; - Atomic - analytic single-points. Parameters; ----------; driver; The resulting type of computation: e/g/h. Note for finite difference; that this should be the target driver, not the means driver.; method; A string representation of the method such as ""HF"" or ""B3LYP"". Special; cases are: ""cbs"".; molecule; A Psi4 base molecule to use.; kwargs; User keyword arguments, often used to configure task computers. Returns; -------; Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]; A simple (:class:`~psi4.driver.AtomicComputer`) or layered (:class:`~psi4.driver.driver_cbs.CompositeComputer`, :class:`~psi4.driver.driver_findif.FiniteDifferenceComputer`, :class:`~psi4.driver.driver_nbody.ManyBodyComputer`) task object. Layered objects contain many and multiple types of computers in a graph. """"""",MatchSource.CODE_COMMENT,psi4/driver/task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_planner.py:751,Usability,simpl,simple,751,"""""""Plans a task graph of a complex computation. Canonical Task layering:; - ManyBody - BSSE treatment, many-body expansion; - FiniteDifference - derivatives through stencils; - Composite - basis set extrapolation, focal-point methods; - Atomic - analytic single-points. Parameters; ----------; driver; The resulting type of computation: e/g/h. Note for finite difference; that this should be the target driver, not the means driver.; method; A string representation of the method such as ""HF"" or ""B3LYP"". Special; cases are: ""cbs"".; molecule; A Psi4 base molecule to use.; kwargs; User keyword arguments, often used to configure task computers. Returns; -------; Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]; A simple (:class:`~psi4.driver.AtomicComputer`) or layered (:class:`~psi4.driver.driver_cbs.CompositeComputer`, :class:`~psi4.driver.driver_findif.FiniteDifferenceComputer`, :class:`~psi4.driver.driver_nbody.ManyBodyComputer`) task object. Layered objects contain many and multiple types of computers in a graph. """"""",MatchSource.CODE_COMMENT,psi4/driver/task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_planner.py:166,Testability,log,logic,166,"# Tell the task builder which level to add a task list for; # * see https://github.com/psi4/psi4/pull/1351#issuecomment-549948276 for discussion of where build_tasks logic should live",MatchSource.CODE_COMMENT,psi4/driver/task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:66,Integrability,wrap,wrappers,66,"# Wrap any positional arguments into kwargs (for intercalls among wrappers)",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:73,Performance,load,load,73,"# TODO this should be modernized a la interface_cfour; # Define path and load module for requested database",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:47,Energy Efficiency,energy,energy,47,"# Option counterpoise- whether for interaction energy databases run in bsse-corrected or not",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:61,Energy Efficiency,energy,energy,61,"# Option relaxed- whether for non-frozen-monomer interaction energy databases include deformation correction or not?",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:28,Availability,error,error,28,"# Option benchmark- whether error statistics computed wrt alternate reference energies",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:9,Testability,benchmark,benchmark,9,"# Option benchmark- whether error statistics computed wrt alternate reference energies",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:66,Energy Efficiency,energy,energy,66,"# Option tabulate- whether tables of variables other than primary energy method are formed; # TODO db(func=cbs,tabulate=[non-current-energy]) # broken",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:133,Energy Efficiency,energy,energy,133,"# Option tabulate- whether tables of variables other than primary energy method are formed; # TODO db(func=cbs,tabulate=[non-current-energy]) # broken",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:37,Modifiability,variab,variables,37,"# Option tabulate- whether tables of variables other than primary energy method are formed; # TODO db(func=cbs,tabulate=[non-current-energy]) # broken",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:30,Availability,avail,available,30,"""""""Special subset 'small' not available for database %s.""""""",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:30,Availability,avail,available,30,"""""""Special subset 'large' not available for database %s.""""""",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:36,Availability,avail,available,36,"""""""Special subset 'equilibrium' not available for database %s.""""""",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:27,Availability,avail,available,27,"""""""Special subset '%s' not available for database %s.""""""",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:72,Deployability,continuous,continuous,72,"""""""\n The database single-job procedure has been selected through mode='continuous'.\n""""""",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:42,Modifiability,variab,variables,42,"# tabulate requested process::environment variables",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:35,Modifiability,variab,variable,35,""""""" Depending on the nature of the variable, this may or may not make any physical sense.\n""""""",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:29,Energy Efficiency,energy,energy,29,"# tabulate primary requested energy variable with statistics",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py:36,Modifiability,variab,variable,36,"# tabulate primary requested energy variable with statistics",MatchSource.CODE_COMMENT,psi4/driver/wrapper_database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/wrapper_database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:43,Integrability,message,message,43,"""""""Input specification has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:214,Integrability,message,message,214,"""""""Input specification has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:57,Availability,error,error,57,"""""""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:63,Integrability,message,message,63,"""""""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:95,Integrability,message,message,95,"""""""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -------; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:266,Integrability,message,message,266,"""""""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -------; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:351,Availability,error,error,351,"""""""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:160,Deployability,release,release,160,"""""""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:817,Deployability,release,release,817,"""""""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:873,Integrability,message,message,873,"""""""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:65,Usability,simpl,simple,65,"""""""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:605,Usability,guid,guide,605,"""""""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:118,Integrability,rout,routine,118,"""""""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:207,Integrability,rout,routine,207,"""""""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:256,Integrability,message,message,256,"""""""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:299,Integrability,message,message,299,"""""""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:394,Integrability,rout,routine,394,"""""""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:154,Performance,optimiz,optimization,154,"""""""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:106,Integrability,rout,routine,106,"""""""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:199,Integrability,rout,routine,199,"""""""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:280,Integrability,message,message,280,"""""""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:375,Integrability,rout,routine,375,"""""""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:43,Performance,optimiz,optimizer,43,"""""""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:146,Performance,optimiz,optimization,146,"""""""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:267,Energy Efficiency,energy,energy,267,"""""""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:540,Energy Efficiency,energy,energy,540,"""""""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:102,Integrability,rout,routine,102,"""""""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:191,Integrability,rout,routine,191,"""""""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:369,Integrability,message,message,369,"""""""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:464,Integrability,rout,routine,464,"""""""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:781,Integrability,message,message,781,"""""""Error called for problems with TDSCF iterations. Parameters; ----------; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats; Dictionary of convergence statistics of last iteration.; Keys are:. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge.; stats; Dictionary of convergence statistics of last iteration. See keys above. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:876,Integrability,rout,routine,876,"""""""Error called for problems with TDSCF iterations. Parameters; ----------; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats; Dictionary of convergence statistics of last iteration.; Keys are:. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge.; stats; Dictionary of convergence statistics of last iteration. See keys above. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:618,Performance,perform,performed,618,"""""""Error called for problems with TDSCF iterations. Parameters; ----------; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats; Dictionary of convergence statistics of last iteration.; Keys are:. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge.; stats; Dictionary of convergence statistics of last iteration. See keys above. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:702,Performance,perform,performed,702,"""""""Error called for problems with TDSCF iterations. Parameters; ----------; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats; Dictionary of convergence statistics of last iteration.; Keys are:. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge.; stats; Dictionary of convergence statistics of last iteration. See keys above. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:10,Integrability,message,message,10,"# prepare message, including excitation energies and residual norm",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:76,Availability,avail,available,76,"""""""Error called when requested level or theory or derivative level are not; available. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:188,Integrability,message,message,188,"""""""Error called when requested level or theory or derivative level are not; available. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:85,Availability,avail,available,85,"""""""Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters; ----------; circs; List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. Attributes; ----------; message; Human readable string describing the exception.; stats; Dictionary of conditions for which method request was made.; Keys are:. - driver : {""energy"", ""gradient"", ""hessian"", ""properties""}; - derivative_int : {0, 1, 2, ""prop""}, integer representation of driver; - method : str, model/method/level-of-theory; - link : str, link address to table in docs; - method_type : (str, str), raw value and str repr of governing variable and algorithm; - reference : (str, str), raw value and str repr of reference type; - qc_module : (str, str), raw value and str repr of targeted implementation; - fcae : (str, str), raw value and str repr of all-electron/frozen-core status. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:553,Energy Efficiency,energy,energy,553,"""""""Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters; ----------; circs; List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. Attributes; ----------; message; Human readable string describing the exception.; stats; Dictionary of conditions for which method request was made.; Keys are:. - driver : {""energy"", ""gradient"", ""hessian"", ""properties""}; - derivative_int : {0, 1, 2, ""prop""}, integer representation of driver; - method : str, model/method/level-of-theory; - link : str, link address to table in docs; - method_type : (str, str), raw value and str repr of governing variable and algorithm; - reference : (str, str), raw value and str repr of reference type; - qc_module : (str, str), raw value and str repr of targeted implementation; - fcae : (str, str), raw value and str repr of all-electron/frozen-core status. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:403,Integrability,message,message,403,"""""""Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters; ----------; circs; List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. Attributes; ----------; message; Human readable string describing the exception.; stats; Dictionary of conditions for which method request was made.; Keys are:. - driver : {""energy"", ""gradient"", ""hessian"", ""properties""}; - derivative_int : {0, 1, 2, ""prop""}, integer representation of driver; - method : str, model/method/level-of-theory; - link : str, link address to table in docs; - method_type : (str, str), raw value and str repr of governing variable and algorithm; - reference : (str, str), raw value and str repr of reference type; - qc_module : (str, str), raw value and str repr of targeted implementation; - fcae : (str, str), raw value and str repr of all-electron/frozen-core status. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:827,Modifiability,variab,variable,827,"""""""Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters; ----------; circs; List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. Attributes; ----------; message; Human readable string describing the exception.; stats; Dictionary of conditions for which method request was made.; Keys are:. - driver : {""energy"", ""gradient"", ""hessian"", ""properties""}; - derivative_int : {0, 1, 2, ""prop""}, integer representation of driver; - method : str, model/method/level-of-theory; - link : str, link address to table in docs; - method_type : (str, str), raw value and str repr of governing variable and algorithm; - reference : (str, str), raw value and str repr of reference type; - qc_module : (str, str), raw value and str repr of targeted implementation; - fcae : (str, str), raw value and str repr of all-electron/frozen-core status. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:38,Availability,avail,available,38,"# use QCSchema AtomicInput keys where available",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:214,Availability,avail,availability,214,"# Note on fcae: most select_* functions don't consider this circumstance. Index 0 of tuple documents this.; # Index 1 of tuple always returns the circumstance, regardless of whether considered, so user can look up availability in table.",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:17,Integrability,message,message,17,"# Note that this message is not generally seen, as driver_util catches and edits it from `stats`",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:69,Availability,reliab,reliable,69,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:78,Deployability,install,install,78,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:164,Deployability,install,install,164,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:219,Deployability,install,installation,219,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:481,Deployability,install,install,481,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:501,Deployability,install,install,501,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:535,Deployability,install,install,535,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:543,Deployability,install,install,543,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:619,Deployability,install,install,619,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:692,Deployability,install,install,692,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py:563,Safety,detect,detected,563,"""""""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:58,Availability,checkpoint,checkpoint,58,"""""""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:291,Availability,avail,available,291,"""""""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:807,Availability,toler,tolerance,807,"""""""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:1147,Availability,error,error,1147,"""""""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:1153,Integrability,message,messages,1153,"""""""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:440,Testability,log,logical,440,"""""""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:491,Testability,test,test,491,"""""""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:94,Integrability,depend,dependence,94,"# Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:119,Testability,test,tested,119,"# Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:230,Availability,avail,available,230,"""""""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected; Path to reference Molden file against which `computed` is compared.; computed; Path to input Molden file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:519,Availability,toler,tolerance,519,"""""""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected; Path to reference Molden file against which `computed` is compared.; computed; Path to input Molden file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:859,Availability,error,error,859,"""""""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected; Path to reference Molden file against which `computed` is compared.; computed; Path to input Molden file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py:865,Integrability,message,messages,865,"""""""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected; Path to reference Molden file against which `computed` is compared.; computed; Path to input Molden file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fchk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fchk.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:744,Energy Efficiency,energy,energy,744,"""""""Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters; ----------; wfn; Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname; Name of the integrals file, defaults to INTDUMP.; oe_ints; List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises; ------; ValidationError; When SCF wavefunction is not RHF. Examples; --------. >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:874,Energy Efficiency,energy,energy,874,"""""""Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters; ----------; wfn; Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname; Name of the integrals file, defaults to INTDUMP.; oe_ints; List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises; ------; ValidationError; When SCF wavefunction is not RHF. Examples; --------. >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:7,Safety,sanity check,sanity checks,7,"# Some sanity checks",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:268,Energy Efficiency,energy,energy,268,"# Dipole integrals; #core.print_out('Writing dipole moment OEI in FCIDUMP format to ' + fname + '\n'); # Traceless quadrupole integrals; #core.print_out('Writing traceless quadrupole moment OEI in FCIDUMP format to ' + fname + '\n'); # Frozen core + nuclear repulsion energy",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:411,Energy Efficiency,energy,energy,411,"""""""Function to read in a FCIDUMP file. :returns: a dictionary with FCIDUMP header and integrals. - 'norb' : number of basis functions; - 'nelec' : number of electrons; - 'ms2' : spin polarization of the system; - 'isym' : symmetry of state (if present in FCIDUMP); - 'orbsym' : list of symmetry labels of each orbital; - 'uhf' : whether restricted or unrestricted; - 'enuc' : nuclear repulsion plus frozen core energy; - 'epsilon' : orbital energies; - 'hcore' : core Hamiltonian; - 'eri' : electron-repulsion integrals. :param fname: FCIDUMP file name. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:453,Energy Efficiency,energy,energy,453,"""""""Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. - 'norb' : number of basis functions; - 'nelec' : number of electrons; - 'ms2' : spin polarization of the system; - 'isym' : symmetry of state (if present in FCIDUMP); - 'orbsym' : list of symmetry labels of each orbital; - 'uhf' : whether restricted or unrestricted; - 'ONE-ELECTRON ENERGY' : SCF one-electron energy; - 'TWO-ELECTRON ENERGY' : SCF two-electron energy; - 'SCF TOTAL ENERGY' : SCF total energy; - 'MP2 CORRELATION ENERGY' : MP2 correlation energy. :param expected: Reference FCIDUMP file against which `computed` is compared.; :param computed: Input FCIDUMP file to compare against `expected`.; :param label: string labeling the test; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:504,Energy Efficiency,energy,energy,504,"""""""Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. - 'norb' : number of basis functions; - 'nelec' : number of electrons; - 'ms2' : spin polarization of the system; - 'isym' : symmetry of state (if present in FCIDUMP); - 'orbsym' : list of symmetry labels of each orbital; - 'uhf' : whether restricted or unrestricted; - 'ONE-ELECTRON ENERGY' : SCF one-electron energy; - 'TWO-ELECTRON ENERGY' : SCF two-electron energy; - 'SCF TOTAL ENERGY' : SCF total energy; - 'MP2 CORRELATION ENERGY' : MP2 correlation energy. :param expected: Reference FCIDUMP file against which `computed` is compared.; :param computed: Input FCIDUMP file to compare against `expected`.; :param label: string labeling the test; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:545,Energy Efficiency,energy,energy,545,"""""""Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. - 'norb' : number of basis functions; - 'nelec' : number of electrons; - 'ms2' : spin polarization of the system; - 'isym' : symmetry of state (if present in FCIDUMP); - 'orbsym' : list of symmetry labels of each orbital; - 'uhf' : whether restricted or unrestricted; - 'ONE-ELECTRON ENERGY' : SCF one-electron energy; - 'TWO-ELECTRON ENERGY' : SCF two-electron energy; - 'SCF TOTAL ENERGY' : SCF total energy; - 'MP2 CORRELATION ENERGY' : MP2 correlation energy. :param expected: Reference FCIDUMP file against which `computed` is compared.; :param computed: Input FCIDUMP file to compare against `expected`.; :param label: string labeling the test; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:598,Energy Efficiency,energy,energy,598,"""""""Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. - 'norb' : number of basis functions; - 'nelec' : number of electrons; - 'ms2' : spin polarization of the system; - 'isym' : symmetry of state (if present in FCIDUMP); - 'orbsym' : list of symmetry labels of each orbital; - 'uhf' : whether restricted or unrestricted; - 'ONE-ELECTRON ENERGY' : SCF one-electron energy; - 'TWO-ELECTRON ENERGY' : SCF two-electron energy; - 'SCF TOTAL ENERGY' : SCF total energy; - 'MP2 CORRELATION ENERGY' : MP2 correlation energy. :param expected: Reference FCIDUMP file against which `computed` is compared.; :param computed: Input FCIDUMP file to compare against `expected`.; :param label: string labeling the test; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:787,Testability,test,test,787,"""""""Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. - 'norb' : number of basis functions; - 'nelec' : number of electrons; - 'ms2' : spin polarization of the system; - 'isym' : symmetry of state (if present in FCIDUMP); - 'orbsym' : list of symmetry labels of each orbital; - 'uhf' : whether restricted or unrestricted; - 'ONE-ELECTRON ENERGY' : SCF one-electron energy; - 'TWO-ELECTRON ENERGY' : SCF two-electron energy; - 'SCF TOTAL ENERGY' : SCF total energy; - 'MP2 CORRELATION ENERGY' : MP2 correlation energy. :param expected: Reference FCIDUMP file against which `computed` is compared.; :param computed: Input FCIDUMP file to compare against `expected`.; :param label: string labeling the test; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:14,Energy Efficiency,energy,energy,14,"# Compute SCF energy",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py:30,Energy Efficiency,energy,energy,30,"# yapf: enable; # Compute MP2 energy",MatchSource.CODE_COMMENT,psi4/driver/p4util/fcidump.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/fcidump.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:37,Integrability,interface,interface,37,"""""""; Array function, including NumPy interface and Python extensions to core array; classes:. - Matrix (constructor, view, access, serialization); - Vector (constructor, view, access, serialization); - Dimension (constructor); - CIVector (view); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:123,Security,access,access,123,"""""""; Array function, including NumPy interface and Python extensions to core array; classes:. - Matrix (constructor, view, access, serialization); - Vector (constructor, view, access, serialization); - Dimension (constructor); - CIVector (view); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:176,Security,access,access,176,"""""""; Array function, including NumPy interface and Python extensions to core array; classes:. - Matrix (constructor, view, access, serialization); - Vector (constructor, view, access, serialization); - Dimension (constructor); - CIVector (view); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:10,Usability,simpl,simple,10,"""""""; Gets simple raw view of the passed in object.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:501,Integrability,depend,depending,501,"""""""; Converts a |PSIfour| Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters; ----------; matrix; Pointers to which Psi4 core class should be used in the construction.; copy; Copy the data if `True`, return a view otherwise; dense; Converts irrepped Psi4 objects to diagonally blocked dense arrays if; `True`. Returns a list of arrays otherwise. Returns; -------; ~numpy.ndarray or ~typing.List[~numpy.ndarray]; Returns a single or list of NumPy arrays depending on options. Notes; -----; This is a generalized function to convert a Psi4 object to a NumPy array. Examples; --------. >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:88,Usability,simpl,simply,88,"""""""; Converts a |PSIfour| Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters; ----------; matrix; Pointers to which Psi4 core class should be used in the construction.; copy; Copy the data if `True`, return a view otherwise; dense; Converts irrepped Psi4 objects to diagonally blocked dense arrays if; `True`. Returns a list of arrays otherwise. Returns; -------; ~numpy.ndarray or ~typing.List[~numpy.ndarray]; Returns a single or list of NumPy arrays depending on options. Notes; -----; This is a generalized function to convert a Psi4 object to a NumPy array. Examples; --------. >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:24,Integrability,interface,interface,24,"""""""; Provides the array interface to simply classes so that np.array(core.Matrix(5, 5)) works flawlessly.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:37,Usability,simpl,simply,37,"""""""; Provides the array interface to simply classes so that np.array(core.Matrix(5, 5)) works flawlessly.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:82,Performance,load,load,82,"""""""Reads the data from a NumPy compressed or uncompressed file using :func:`numpy.load`. Parameters; ----------; self; Pointer to which class to be constructed.; filename; File name to read.; prefix; Name under which array was saved for NumPy.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:40,Security,access,accessor,40,"""""""; Converts an object with a ``.nph`` accessor to a serialized dictionary. Parameters; ----------; self; Matrix or Vector instance. Returns; -------; ~typing.Dict[str, ~typing.Any]; Serialized dictionary with keys:. - shape; - data : List[str]; - type : {'matrix', 'vector'}. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py:31,Security,access,accessing,31,"""""""; Warns user when iterating/accessing an irrepped object.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/numpy_helper.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/numpy_helper.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:54,Security,sanitiz,sanitized,54,"""""""Function to rebuild and return *kwargs* dictionary sanitized. Should be; called by every function that could be called directly by the user. Parameters; ----------; kwargs; Input kwargs for any user-facing function. Returns; -------; lowered : Dict[str, Any]; Sanitized kwargs with all keys made lowercase. Also turns boolean-like; values into actual booleans. Also turns values lowercase if sensible. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:135,Availability,avail,available,135,"# save_string_for_psi4 is the more detailed choice as it includes fragment; # (and possibly no_com/no_reorient) info. but this is only available; # for qcdb Molecules. Since save_string_xyz was added to libmints just; # for the sow/reap purpose, may want to unify these fns sometime.; # the time for unification is nigh",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:56,Availability,avail,available,56,"""""""Extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Parameters; ----------; module; Object on which to seek `attr`.; attr; Name of attribute with uncertain case. Returns; -------; attribute : Any; Module attribute returned if available. None if not. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:280,Availability,avail,available,280,"""""""Extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Parameters; ----------; module; Object on which to seek `attr`.; attr; Name of attribute with uncertain case. Returns; -------; attribute : Any; Module attribute returned if available. None if not. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:10,Performance,load,loader,10,"""""""Import loader for *module* in any possible lettercase permutation. Parameters; ----------; module; Name of module with uncertain case. Returns; -------; types.ModuleType; Module object. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:135,Usability,clear,clear,135,"""""""Return a context manager that will collect the current state of; ``Process:environment.options`` on entry to the with-statement and clear; and restore the collected keywords state when exiting the with-statement. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:47,Usability,clear,clear,47,"""""""Acts on ``Process::environment.options`` to clear it, then set it to; state encoded in `pofm`. Parameters; ----------; pofm; Result of :py:func:`prepare_options_for_modules` with; ``changedOnly=True``, ``commandsInsteadDict=False``, and; ``stateInsteadMediated=True``. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:821,Integrability,mediat,mediated,821,"""""""Capture current state of :py:class:`psi4.core.Options` information. Parameters; ----------; changedOnly; Record info only for options that have been set (may still be default).; When False, records values for every option.; commandsInsteadDict; Return string of commands to exec to reset options in current form.; When False, return nested dictionary with globals in 'GLOBALS' subdictionary; and locals in subdictionaries by module.; globalsOnly; Record only global options to save time querying the; :py:class:`~psi4.core.Options` object.; When False, record module-level options, too.; stateInsteadMediated; When ``True``, querying this function for options to be later *reset* into the same; state -- the raw values and has_changed status at the global and local levels.; When ``False``, querying this function for mediated options to be *used* -- the results; of the globals/locals handshake as computed by the Options object itself. Here,; ``dict[module][option][value]`` is the value to be used by module. Returns; -------; Dict; When `commandsInsteadDict` is False.; str; When `commandsInsteadDict` is True. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - command return doesn't revoke has_changed setting for unchanged with changedOnly=False. - not all kwargs are independent. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:34,Modifiability,plugin,plugin,34,"# The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack.",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:136,Modifiability,rewrite,rewrite,136,"# The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack.",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:113,Energy Efficiency,energy,energy,113,"""""""Form a QCSchema for job input from the current state of |PSIfour| settings. Parameters; ----------; driver; {'energy', 'gradient', 'hessian'}; Target derivative level.; method; Level of theory for job.; basis; Basis set for job, if not to be extracted from :term:`BASIS <BASIS (MINTS)>`.; molecule; Molecule for job, if not the active one from; :py:func:`~psi4.core.get_active_molecule`.; function_kwargs; Additional keyword arguments to pass to the driver function. Returns; -------; ~qcelemental.models.AtomicInput; QCSchema instance including current keyword set and provenance. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:106,Availability,avail,available,106,"""""""From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters; ----------; pvdefs; Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: 'args', the QCVariables that contribute to; the key and 'func', a function (or lambda) to combine them.; verbose; Control print level. If unspecified (None), value taken from; :term:`PRINT <PRINT (GLOBALS)>`. Status printing when verbose > 2. Examples; --------; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:59,Modifiability,variab,variables,59,"""""""From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters; ----------; pvdefs; Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: 'args', the QCVariables that contribute to; the key and 'func', a function (or lambda) to combine them.; verbose; Control print level. If unspecified (None), value taken from; :term:`PRINT <PRINT (GLOBALS)>`. Status printing when verbose > 2. Examples; --------; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py:83,Integrability,rout,routine,83,"""""""Prepare QCSchema Provenance with |PSIfour| credentials. Parameters; ----------; routine; Name of driver function generating the QCSchema.; module; Primary contributing |PSIfour| library, like ``ccenergy`` or ``dfmp2``. Returns; -------; provenance : Dict[str, str]; Dictionary satisfying QCSchema, with |PSIfour| credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/procutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/procutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/prop_util.py:446,Integrability,rout,routine,446,""""""" ; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables, :psivar:`MBIS FREE ATOM n VOLUME`.; Free-atom densities are computed at the same level of theory as the molecule, ; and we use unrestricted references as needed in computing the ground-state. . The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters; ----------; wfn; The wave function associated with the molecule, method, and basis for ; atomic computations; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/prop_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/prop_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/prop_util.py:182,Modifiability,variab,variables,182,""""""" ; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables, :psivar:`MBIS FREE ATOM n VOLUME`.; Free-atom densities are computed at the same level of theory as the molecule, ; and we use unrestricted references as needed in computing the ground-state. . The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters; ----------; wfn; The wave function associated with the molecule, method, and basis for ; atomic computations; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/prop_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/prop_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/prop_util.py:41,Safety,avoid,avoid,41,"# If we're already a free atom, break to avoid recursion; # We don't ever need volume ratios for free atoms since they; # are by definition 1.0",MatchSource.CODE_COMMENT,psi4/driver/p4util/prop_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/prop_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/prop_util.py:31,Modifiability,variab,variables,31,"# set the atomic widths as wfn variables",MatchSource.CODE_COMMENT,psi4/driver/p4util/prop_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/prop_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:359,Availability,avail,avail,359,"""""""; Module with PsiAPI helpers for PSIthon `{...}` syntax.; Also, many Python extensions to core classes:. - core (variable-related, gradient, python option),; - Wavefunction (variable-related, freq, Lagrangian, constructor, scratch file, serialization),; - Matrix (doublet, triplet),; - BasisSet (constructor); - JK (constructor); - VBase (grid); - OEProp (avail prop); - ERISieve (constructor); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:116,Modifiability,variab,variable-related,116,"""""""; Module with PsiAPI helpers for PSIthon `{...}` syntax.; Also, many Python extensions to core classes:. - core (variable-related, gradient, python option),; - Wavefunction (variable-related, freq, Lagrangian, constructor, scratch file, serialization),; - Matrix (doublet, triplet),; - BasisSet (constructor); - JK (constructor); - VBase (grid); - OEProp (avail prop); - ERISieve (constructor); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:177,Modifiability,variab,variable-related,177,"""""""; Module with PsiAPI helpers for PSIthon `{...}` syntax.; Also, many Python extensions to core classes:. - core (variable-related, gradient, python option),; - Wavefunction (variable-related, freq, Lagrangian, constructor, scratch file, serialization),; - Matrix (doublet, triplet),; - BasisSet (constructor); - JK (constructor); - VBase (grid); - OEProp (avail prop); - ERISieve (constructor); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:723,Availability,avail,available,723,"""""""Build a primary or auxiliary basis set. Parameters; ----------; mol; Molecule for which to build the basis set instance.; key; {'BASIS', 'ORBITAL', 'DF_BASIS_SCF', 'DF_BASIS_MP2', 'DF_BASIS_CC', 'BASIS_RELATIVISTIC', 'DF_BASIS_SAD'}; Label (effectively Psi4 keyword) to append the basis on the molecule.; The primary basis set is indicated by any of values None or; ``""ORBITAL""`` or ``""BASIS""``.; target; Defines the basis set to be constructed. Can be a string (naming a; basis file) or a callable (providing shells or multiple basis files).; For auxiliary bases to be built entirely from primary default, can be; an empty string. If None, value taken from `key` in global options. If; a user-defined-basis callable is available at string `target`, `target`; value will be set to it. In practice, setting this argument to a; |PSIfour| keyword (e.g., ``core.get_option(""SCF"", ""DF_BASIS_SCF"")`` or; ``core.get_global_option(""BASIS"")``) works to handle both simple and; user-defined bases.; fitrole; {'ORBITAL', 'JKFIT', 'RIFIT', 'DECON'}; Role for which to build basis. Only used when `key` indicates auxiliary; (i.e., *is not* ``""BASIS""``) and auxiliary spec from processing `target`; can't complete the `mol`. Then, primary spec from `other` can be used; to complete the auxiliary basis by looking up suitable default basis; according to `fitrole`.; other; Only used when building auxiliary basis sets. Defines the primary basis through a string or callable like `target`.; puream; Whether to override the native spherical/cartesian-ness of `target` for; returned basis? Value ``1`` forces spherical, value ``0`` forces; Cartesian, value ``-1`` (default) uses native puream. Note that; explicitly setting :term:`PUREAM <PUREAM (GLOBALS)>` trumps both native; puream and this `puream` argument.; return_atomlist; Build one-atom basis sets (e.g., for SAD) rather than one whole-`mol`; basis set.; quiet; When True, do not print to the output file. Returns; -------; BasisSet or ~typing.List[BasisSet",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:959,Usability,simpl,simple,959,"""""""Build a primary or auxiliary basis set. Parameters; ----------; mol; Molecule for which to build the basis set instance.; key; {'BASIS', 'ORBITAL', 'DF_BASIS_SCF', 'DF_BASIS_MP2', 'DF_BASIS_CC', 'BASIS_RELATIVISTIC', 'DF_BASIS_SAD'}; Label (effectively Psi4 keyword) to append the basis on the molecule.; The primary basis set is indicated by any of values None or; ``""ORBITAL""`` or ``""BASIS""``.; target; Defines the basis set to be constructed. Can be a string (naming a; basis file) or a callable (providing shells or multiple basis files).; For auxiliary bases to be built entirely from primary default, can be; an empty string. If None, value taken from `key` in global options. If; a user-defined-basis callable is available at string `target`, `target`; value will be set to it. In practice, setting this argument to a; |PSIfour| keyword (e.g., ``core.get_option(""SCF"", ""DF_BASIS_SCF"")`` or; ``core.get_global_option(""BASIS"")``) works to handle both simple and; user-defined bases.; fitrole; {'ORBITAL', 'JKFIT', 'RIFIT', 'DECON'}; Role for which to build basis. Only used when `key` indicates auxiliary; (i.e., *is not* ``""BASIS""``) and auxiliary spec from processing `target`; can't complete the `mol`. Then, primary spec from `other` can be used; to complete the auxiliary basis by looking up suitable default basis; according to `fitrole`.; other; Only used when building auxiliary basis sets. Defines the primary basis through a string or callable like `target`.; puream; Whether to override the native spherical/cartesian-ness of `target` for; returned basis? Value ``1`` forces spherical, value ``0`` forces; Cartesian, value ``-1`` (default) uses native puream. Note that; explicitly setting :term:`PUREAM <PUREAM (GLOBALS)>` trumps both native; puream and this `puream` argument.; return_atomlist; Build one-atom basis sets (e.g., for SAD) rather than one whole-`mol`; basis set.; quiet; When True, do not print to the output file. Returns; -------; BasisSet or ~typing.List[BasisSet",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:2,Performance,load,load,2,"# load the wavefunction from file",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:43,Performance,load,load,43,"# Could be path-like or file-like, let `np.load` handle it",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:2,Modifiability,variab,variable,2,"# variable type specific dictionaries to be passed into C++ constructor",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:14,Modifiability,variab,variables,14,"# change some variables to psi4 specific data types (Matrix, Vector, Dimension)",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:29,Modifiability,variab,variables,29,"# some of the wavefunction's variables can be changed directly",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:137,Modifiability,inherit,inherited,137,"""""""Serialize a Wavefunction object. Opposite of; :meth:`~psi4.core.Wavefunction.from_file`. Parameters; ----------; wfn; Wavefunction or inherited class instance.; filename; An optional filename to which to write the data. Returns; -------; ~typing.Dict[str, ~typing.Dict[str, ~typing.Any]]; A dictionary and NumPy representation of the Wavefunction. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:29,Modifiability,variab,variables,29,"# collect the wavefunction's variables in a dictionary indexed by varaible type; # some of the data types have to be made numpy-friendly first",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:349,Testability,test,test,349,"""""""Helper to specify a custom basis set in PsiAPI mode. This function forms a basis specification function from *block*; and associates it with keyword *key* under handle *name*. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see :srcsample:`mints2`, :srcsample:`mints9`, and; :srcsample:`cc54` test cases. Parameters; ----------; block; Text that goes in a PSIthon ``basis {...}`` block.; name; Name label to associated with basis specified by `block`.; key; Basis keyword specified by `block`.; set_option; When True, execute the equivalent of ``set key name`` or ``set_option({key: name})``. When False, skip execution. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:80,Integrability,rout,routing,80,"""""""; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:21,Deployability,release,release,21,"# old: (replacement, release after next)",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:50,Deployability,upgrade,upgrade,50,"""""""Intercept QCVariable keys to issue warnings or upgrade hints. Otherwise,; pass through. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:420,Energy Efficiency,charge,charges,420,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from global memory. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:321,Modifiability,variab,variables,321,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from global memory. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:364,Modifiability,variab,variables,364,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from global memory. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:512,Modifiability,variab,variables,512,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from global memory. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:742,Modifiability,variab,variable,742,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from global memory. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:800,Modifiability,variab,variable,800,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from global memory. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:870,Modifiability,variab,variable,870,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from global memory. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:951,Modifiability,variab,variable,951,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from global memory. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:440,Energy Efficiency,charge,charges,440,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:341,Modifiability,variab,variables,341,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:384,Modifiability,variab,variables,384,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:532,Modifiability,variab,variables,532,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:787,Modifiability,variab,variable,787,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:844,Modifiability,variab,variable,844,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:913,Modifiability,variab,variable,913,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:993,Modifiability,variab,variable,993,"""""""Return copy of scalar or array :ref:`QCVariable <sec:appendices:qcvars>`; *key* from *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :py:class:`~psi4.core.Matrix`; storage maps. Returns; -------; float or ~numpy.ndarray or Matrix; Requested QCVariable from `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. Raises; ------; KeyError; If `key` not set on `self`. Example; -------; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:345,Energy Efficiency,charge,charge,345,"""""""Sets scalar or array :ref:`QCVariable <sec:appendices:qcvars>` *key* to *val* in global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps.; val; Scalar or array to be stored in `key`. If :class:`~numpy.ndarray` and; data `key` does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; :class:`~numpy.ndarray` are stored as :class:`~psi4.core.Matrix`. Raises; ------; ValidationError; If `val` is a scalar but `key` already exists as an array variable. Or; if `val` is an array but `key` already exists as a scalar variable. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:567,Modifiability,variab,variable,567,"""""""Sets scalar or array :ref:`QCVariable <sec:appendices:qcvars>` *key* to *val* in global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps.; val; Scalar or array to be stored in `key`. If :class:`~numpy.ndarray` and; data `key` does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; :class:`~numpy.ndarray` are stored as :class:`~psi4.core.Matrix`. Raises; ------; ValidationError; If `val` is a scalar but `key` already exists as an array variable. Or; if `val` is an array but `key` already exists as a scalar variable. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:639,Modifiability,variab,variable,639,"""""""Sets scalar or array :ref:`QCVariable <sec:appendices:qcvars>` *key* to *val* in global memory. Parameters; ----------; key; Case-insensitive key to global double or :py:class:`~psi4.core.Matrix`; storage maps.; val; Scalar or array to be stored in `key`. If :class:`~numpy.ndarray` and; data `key` does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; :class:`~numpy.ndarray` are stored as :class:`~psi4.core.Matrix`. Raises; ------; ValidationError; If `val` is a scalar but `key` already exists as an array variable. Or; if `val` is an array but `key` already exists as a scalar variable. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:534,Energy Efficiency,charge,charge,534,"""""""Sets scalar or array :ref:`QCVariable <sec:appendices:qcvars>` *key* to *val* on *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :class:`~psi4.core.Matrix`; storage maps. - If ``CURRENT ENERGY``, syncs with ``self.energy_``.; - If ``CURRENT GRADIENT``, syncs with ``gradient_``.; - If ``CURRENT HESSIAN``, syncs with ``self.hessian_``.; val; Scalar or array to be stored in `key`. If :class:`~numpy.ndarray` and; data `key` does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; :class:`~numpy.ndarray` are stored as :class:`~psi4.core.Matrix`. Raises; ------; ~psi4.driver.ValidationError; If `val` is a scalar but `key` already exists as an array variable. Or; if `val` is an array but `key` already exists as a scalar variable. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:769,Modifiability,variab,variable,769,"""""""Sets scalar or array :ref:`QCVariable <sec:appendices:qcvars>` *key* to *val* on *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :class:`~psi4.core.Matrix`; storage maps. - If ``CURRENT ENERGY``, syncs with ``self.energy_``.; - If ``CURRENT GRADIENT``, syncs with ``gradient_``.; - If ``CURRENT HESSIAN``, syncs with ``self.hessian_``.; val; Scalar or array to be stored in `key`. If :class:`~numpy.ndarray` and; data `key` does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; :class:`~numpy.ndarray` are stored as :class:`~psi4.core.Matrix`. Raises; ------; ~psi4.driver.ValidationError; If `val` is a scalar but `key` already exists as an array variable. Or; if `val` is an array but `key` already exists as a scalar variable. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:841,Modifiability,variab,variable,841,"""""""Sets scalar or array :ref:`QCVariable <sec:appendices:qcvars>` *key* to *val* on *self*. Parameters; ----------; self; Wavefunction instance.; key; Case-insensitive key to instance's double or :class:`~psi4.core.Matrix`; storage maps. - If ``CURRENT ENERGY``, syncs with ``self.energy_``.; - If ``CURRENT GRADIENT``, syncs with ``gradient_``.; - If ``CURRENT HESSIAN``, syncs with ``self.hessian_``.; val; Scalar or array to be stored in `key`. If :class:`~numpy.ndarray` and; data `key` does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; :class:`~numpy.ndarray` are stored as :class:`~psi4.core.Matrix`. Raises; ------; ~psi4.driver.ValidationError; If `val` is a scalar but `key` already exists as an array variable. Or; if `val` is an array but `key` already exists as a scalar variable. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:443,Energy Efficiency,charge,charges,443,"""""""Return all scalar or array :ref:`QCVariables <sec:appendices:qcvars>`; from global memory. Parameters; ----------; include_deprecated_keys; Also return duplicate entries with keys that have been deprecated. Returns; -------; ~typing.Dict[str, ~typing.Union[float, ~numpy.ndarray, Matrix]; Map of all QCVariables that have been set. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:344,Modifiability,variab,variables,344,"""""""Return all scalar or array :ref:`QCVariables <sec:appendices:qcvars>`; from global memory. Parameters; ----------; include_deprecated_keys; Also return duplicate entries with keys that have been deprecated. Returns; -------; ~typing.Dict[str, ~typing.Union[float, ~numpy.ndarray, Matrix]; Map of all QCVariables that have been set. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:387,Modifiability,variab,variables,387,"""""""Return all scalar or array :ref:`QCVariables <sec:appendices:qcvars>`; from global memory. Parameters; ----------; include_deprecated_keys; Also return duplicate entries with keys that have been deprecated. Returns; -------; ~typing.Dict[str, ~typing.Union[float, ~numpy.ndarray, Matrix]; Map of all QCVariables that have been set. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:535,Modifiability,variab,variables,535,"""""""Return all scalar or array :ref:`QCVariables <sec:appendices:qcvars>`; from global memory. Parameters; ----------; include_deprecated_keys; Also return duplicate entries with keys that have been deprecated. Returns; -------; ~typing.Dict[str, ~typing.Union[float, ~numpy.ndarray, Matrix]; Map of all QCVariables that have been set. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:476,Energy Efficiency,charge,charges,476,"""""""Return all scalar or array :ref:`QCVariables <sec:appendices:qcvars>`; from *self*. Parameters; ----------; self; Wavefunction instance.; include_deprecated_keys; Also return duplicate entries with keys that have been deprecated. Returns; -------; ~typing.Dict[str, ~typing.Union[float, ~numpy.ndarray, Matrix]; Map of all QCVariables that have been set on `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:377,Modifiability,variab,variables,377,"""""""Return all scalar or array :ref:`QCVariables <sec:appendices:qcvars>`; from *self*. Parameters; ----------; self; Wavefunction instance.; include_deprecated_keys; Also return duplicate entries with keys that have been deprecated. Returns; -------; ~typing.Dict[str, ~typing.Union[float, ~numpy.ndarray, Matrix]; Map of all QCVariables that have been set on `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:420,Modifiability,variab,variables,420,"""""""Return all scalar or array :ref:`QCVariables <sec:appendices:qcvars>`; from *self*. Parameters; ----------; self; Wavefunction instance.; include_deprecated_keys; Also return duplicate entries with keys that have been deprecated. Returns; -------; ~typing.Dict[str, ~typing.Union[float, ~numpy.ndarray, Matrix]; Map of all QCVariables that have been set on `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:568,Modifiability,variab,variables,568,"""""""Return all scalar or array :ref:`QCVariables <sec:appendices:qcvars>`; from *self*. Parameters; ----------; self; Wavefunction instance.; include_deprecated_keys; Also return duplicate entries with keys that have been deprecated. Returns; -------; ~typing.Dict[str, ~typing.Union[float, ~numpy.ndarray, Matrix]; Map of all QCVariables that have been set on `self`. - Scalar variables are returned as floats.; - Array variables not naturally 2D (like multipoles or per-atom charges); are returned as :class:`~numpy.ndarray` of natural dimensionality.; - Other array variables are returned as :py:class:`~psi4.core.Matrix` and; may have an extra dimension with symmetry information. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:50,Modifiability,variab,variable,50,"""""""; .. deprecated:: 1.4; Use :py:func:`psi4.core.variable` instead.; .. versionchanged:: 1.9; Errors rather than warn-and-forward. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:50,Modifiability,variab,variables,50,"""""""; .. deprecated:: 1.4; Use :py:func:`psi4.core.variables` instead.; .. versionchanged:: 1.9; Errors rather than warn-and-forward. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:50,Modifiability,variab,variable,50,"""""""; .. deprecated:: 1.4; Use :py:func:`psi4.core.variable` instead.; .. versionchanged:: 1.9; Errors rather than warn-and-forward. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:50,Modifiability,variab,variables,50,"""""""; .. deprecated:: 1.4; Use :py:func:`psi4.core.variables` instead.; .. versionchanged:: 1.9; Errors rather than warn-and-forward. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:63,Modifiability,variab,variable,63,"""""""; .. deprecated:: 1.4; Use :py:func:`psi4.core.Wavefunction.variable` instead.; .. versionchanged:: 1.9; Errors rather than warn-and-forward. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:63,Modifiability,variab,variable,63,"""""""; .. deprecated:: 1.4; Use :py:func:`psi4.core.Wavefunction.variable` instead.; .. versionchanged:: 1.9; Errors rather than warn-and-forward. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py:63,Modifiability,variab,variables,63,"""""""; .. deprecated:: 1.4; Use :py:func:`psi4.core.Wavefunction.variables` instead.; .. versionchanged:: 1.9; Errors rather than warn-and-forward. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/python_helpers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/python_helpers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:281,Availability,mask,mask,281,"""""""; Solves the :math:`Ax = b` linear equations via Conjugate Gradient. The `A` matrix must be a hermitian, positive definite matrix. Parameters; ----------; rhs_vec; The RHS vector in the Ax=b equation.; hx_function; Takes in a list of :py:class:`~psi4.core.Matrix` objects and a mask of active indices. Returns the Hessian-vector product.; preconditioner; Takes in a list of :py:class:`~psi4.core.Matrix` objects and a mask of active indices. Returns the preconditioned value.; guess; Starting vectors. If None, use a preconditioner (rhs) guess; printer; Takes in a list of current x and residual vectors and provides a print function. This function can also; return a value that represents the current residual.; printlvl; The level of printing provided by this function.; maxiter; The maximum number of iterations this function will take.; rcond; The residual norm for convergence. Returns; -------; ret : List[Matrix]; Solved `x` vectors and `r` vectors. Notes; -----; This is a generalized cg solver that can also take advantage of solving multiple RHS's simultaneously when; it is advantageous to do so. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:421,Availability,mask,mask,421,"""""""; Solves the :math:`Ax = b` linear equations via Conjugate Gradient. The `A` matrix must be a hermitian, positive definite matrix. Parameters; ----------; rhs_vec; The RHS vector in the Ax=b equation.; hx_function; Takes in a list of :py:class:`~psi4.core.Matrix` objects and a mask of active indices. Returns the Hessian-vector product.; preconditioner; Takes in a list of :py:class:`~psi4.core.Matrix` objects and a mask of active indices. Returns the preconditioned value.; guess; Starting vectors. If None, use a preconditioner (rhs) guess; printer; Takes in a list of current x and residual vectors and provides a print function. This function can also; return a value that represents the current residual.; printlvl; The level of printing provided by this function.; maxiter; The maximum number of iterations this function will take.; rcond; The residual norm for convergence. Returns; -------; ret : List[Matrix]; Solved `x` vectors and `r` vectors. Notes; -----; This is a generalized cg solver that can also take advantage of solving multiple RHS's simultaneously when; it is advantageous to do so. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:35,Availability,mask,mask,35,"# Figure out active updated active mask",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:20,Deployability,update,updated,20,"# Figure out active updated active mask",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:116,Availability,error,error,116,"""""""; An object to assist in the DIIS extrpolation procedure. Parameters; ----------; max_vec; The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy; {""OLDEST"", ""LARGEST""}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:254,Availability,error,error,254,"""""""; An object to assist in the DIIS extrpolation procedure. Parameters; ----------; max_vec; The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy; {""OLDEST"", ""LARGEST""}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:27,Availability,error,error,27,"""""""; Adds a DIIS state and error vector to the DIIS object. Parameters; ----------; state; The current state vector.; error; The current error vector. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:118,Availability,error,error,118,"""""""; Adds a DIIS state and error vector to the DIIS object. Parameters; ----------; state; The current state vector.; error; The current error vector. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:137,Availability,error,error,137,"""""""; Adds a DIIS state and error vector to the DIIS object. Parameters; ----------; state; The current state vector.; error; The current error vector. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:70,Availability,error,error,70,"""""""; Extrapolates next state vector from the current set of state and error vectors. Parameters; ----------; out; A array in which to place the next state vector. Returns; -------; ret : Matrix; Returns the next state vector. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:8,Availability,error,error,8,"# Build error matrix B",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:11,Integrability,message,message,11,"""""""Print a message to the output file when the solver has processed all options and is ready to begin""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:11,Integrability,message,message,11,"""""""Print a message to the output file at each iteration""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:11,Integrability,message,message,11,"""""""Print a message to the output file when the solver is converged.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:336,Modifiability,inherit,inherit,336,"""""""Abstract Base Class defining the API for a matrix-vector product object; required by solvers. Engines implement the correct product functions for iterative solvers that; do not require the target matrix be stored directly.; Classes intended to be used as an `engine` for :func:`davidson_solver` or; :func:`hamiltonian_solver` should inherit from this base class to ensure; that the required methods are defined. .. note:: The `vector` referred to here is intentionally vague, the solver; does not care what it is and only holds individual or sets of; them. In fact an individual `vector` could be split across two; elements in a list, such as for different spin.; Whatever data type is used and individual vector should be a; single element in a list such that len(list) returns the number; of vector-like objects.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:332,Deployability,update,updated,332,"""""""Compute scaled `vector` addition operation `a*X + Y`. Parameters; ----------; a; The scale factor applied to `X`; X : singlet `vector`; The `vector` which will be scaled and added to `Y`; Y : single `vector`; The `vector` which the result of `a*X` is added to. Returns; -------; Y : single `vector`; The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:364,Safety,safe,safe,364,"""""""Compute scaled `vector` addition operation `a*X + Y`. Parameters; ----------; a; The scale factor applied to `X`; X : singlet `vector`; The `vector` which will be scaled and added to `Y`; Y : single `vector`; The `vector` which the result of `a*X` is added to. Returns; -------; Y : single `vector`; The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:373,Safety,avoid,avoid,373,"""""""Compute scaled `vector` addition operation `a*X + Y`. Parameters; ----------; a; The scale factor applied to `X`; X : singlet `vector`; The `vector` which will be scaled and added to `Y`; Y : single `vector`; The `vector` which the result of `a*X` is added to. Returns; -------; Y : single `vector`; The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:242,Safety,avoid,avoid,242,"""""""Scale a vector by some factor. Parameters; ----------; a; The scale facor; X : single `vector`; The vector that will be scaled. Returns; -------; X : single `vector`; The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:448,Availability,down,down,448,"""""""Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine. If the large matrix `A` has dimension `{NxN}` and N is very large, and only; a small number of roots, `k` are desired this algorithm is preferable to; standard methods as uses on the order of `N * k` memory. One only needs to; have the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running tot",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:923,Availability,toler,tolerance,923,"""""""Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine. If the large matrix `A` has dimension `{NxN}` and N is very large, and only; a small number of roots, `k` are desired this algorithm is preferable to; standard methods as uses on the order of `N * k` memory. One only needs to; have the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running tot",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:2289,Availability,failure,failure,2289,"e the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:808,Integrability,depend,dependent,808,"""""""Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine. If the large matrix `A` has dimension `{NxN}` and N is very large, and only; a small number of roots, `k` are desired this algorithm is preferable to; standard methods as uses on the order of `N * k` memory. One only needs to; have the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running tot",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:1952,Performance,perform,performed,1952,"e the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:2036,Performance,perform,performed,2036,"e the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:2205,Performance,perform,performed,2205,"e the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:1145,Testability,log,logging,1145,"d only; a small number of roots, `k` are desired this algorithm is preferable to; standard methods as uses on the order of `N * k` memory. One only needs to; have the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even ",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:2,Deployability,update,update,2,"# update best_solution",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:19,Deployability,update,update,19,"# Regular subspace update, orthonormalize preconditioned residuals and add to the trial set",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:1554,Availability,toler,tolerance,1554," is positive definite, we can transform the problem to arrive at the hermitian NxN EVP:; :math:`(A-B)^{1/2}(A+B)(A-B)^{1/2} = w^2 T`. Where :math:`T = (A-B)^{-1/2}(X+Y)`. We use a Davidson like iteration where we transform :math:`(A+B)` (H1) and :math:`(A-B)`; (H2) in to the subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left :math:`(X-Y)`; and right :math:`(X+Y)` eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998]_ . Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue correspond",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:3042,Availability,failure,failure,3042,"ave at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly. References; ----------; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, ""An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules."" J. Chem. Phys.,; 109, 8218 (1998); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:3165,Energy Efficiency,efficient,efficient,3165,"ave at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly. References; ----------; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, ""An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules."" J. Chem. Phys.,; 109, 8218 (1998); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:1439,Integrability,depend,dependent,1439," is positive definite, we can transform the problem to arrive at the hermitian NxN EVP:; :math:`(A-B)^{1/2}(A+B)(A-B)^{1/2} = w^2 T`. Where :math:`T = (A-B)^{-1/2}(X+Y)`. We use a Davidson like iteration where we transform :math:`(A+B)` (H1) and :math:`(A-B)`; (H2) in to the subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left :math:`(X-Y)`; and right :math:`(X+Y)` eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998]_ . Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue correspond",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:3199,Integrability,depend,dependent,3199,"ave at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly. References; ----------; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, ""An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules."" J. Chem. Phys.,; 109, 8218 (1998); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:2705,Performance,perform,performed,2705,"ave at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly. References; ----------; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, ""An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules."" J. Chem. Phys.,; 109, 8218 (1998); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:2789,Performance,perform,performed,2789,"ave at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly. References; ----------; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, ""An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules."" J. Chem. Phys.,; 109, 8218 (1998); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:2958,Performance,perform,performed,2958,"ave at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly. References; ----------; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, ""An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules."" J. Chem. Phys.,; 109, 8218 (1998); """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:1776,Testability,log,logging,1776,"d :math:`(A-B)`; (H2) in to the subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left :math:`(X-Y)`; and right :math:`(X+Y)` eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998]_ . Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that ",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:43,Availability,failure,failure,43,"# Check H2 is PD; # NOTE: If this triggers failure the SCF solution is not stable. A few ways to handle this; # 1. Use davidson solver where product function evaluates (H2 * (H1 * X)); # - Poor convergence; # 2. Switch to CIS/TDA; # - User would probably not expect this; # 3. Perform Stability update and restart with new reference",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:295,Deployability,update,update,295,"# Check H2 is PD; # NOTE: If this triggers failure the SCF solution is not stable. A few ways to handle this; # 1. Use davidson solver where product function evaluates (H2 * (H1 * X)); # - Poor convergence; # 2. Switch to CIS/TDA; # - User would probably not expect this; # 3. Perform Stability update and restart with new reference",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py:19,Deployability,update,update,19,"# Regular subspace update, orthonormalize preconditioned residuals and add to the trial set",MatchSource.CODE_COMMENT,psi4/driver/p4util/solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/spectrum.py:250,Integrability,depend,depends,250,"""""""Lineshape ABC. Attributes; ----------; domain; Domain of the spectral band.; gamma; A function returning the broadening factor. Notes; -----; Why do we use a callable broadening factor?; For plots in the *wavelength domain*, the broadening factor depends on the location of the band's maximum.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/spectrum.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/spectrum.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:48,Modifiability,config,configured,48,"""""""Module with comparison functions with output configured for Psi4.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:49,Integrability,interface,interfaces,49,"""""""Shim allowing Psi4-style or QCA-style testing interfaces for cube files.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:41,Testability,test,testing,41,"""""""Shim allowing Psi4-style or QCA-style testing interfaces for cube files.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:49,Integrability,interface,interfaces,49,"""""""Shim allowing Psi4-style or QCA-style testing interfaces for :py:class:`psi4.core.Vector`.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:41,Testability,test,testing,41,"""""""Shim allowing Psi4-style or QCA-style testing interfaces for :py:class:`psi4.core.Vector`.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:49,Integrability,interface,interfaces,49,"""""""Shim allowing Psi4-style or QCA-style testing interfaces for :py:class:`psi4.core.Matrix`.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:41,Testability,test,testing,41,"""""""Shim allowing Psi4-style or QCA-style testing interfaces for :py:class:`psi4.core.Matrix`.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:49,Integrability,interface,interfaces,49,"""""""Shim allowing Psi4-style or QCA-style testing interfaces for :py:class:`psi4.core.Wavefunction`.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:41,Testability,test,testing,41,"""""""Shim allowing Psi4-style or QCA-style testing interfaces for :py:class:`psi4.core.Wavefunction`.""""""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:251,Availability,toler,tolerance,251,"""""""; Handles both Psi4-style signatures (``(expected, computed, atol_exponent, label)``; see **atol_exponent** parameter below) and QCA-style signatures (``(expected, computed, label)``). Parameters; ----------; atol_exponent : int or float; Absolute tolerance (see formula in :py:func:`qcelemental.testing.compare_values` notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:299,Testability,test,testing,299,"""""""; Handles both Psi4-style signatures (``(expected, computed, atol_exponent, label)``; see **atol_exponent** parameter below) and QCA-style signatures (``(expected, computed, label)``). Parameters; ----------; atol_exponent : int or float; Absolute tolerance (see formula in :py:func:`qcelemental.testing.compare_values` notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:97,Testability,test,testing,97,"""""""Comparison function for float or float array-like data structures.; See :py:func:`qcelemental.testing.compare_values` for details. ``psi4.compare_arrays`` is an old comparison function for float NumPy arrays that is now an alias to this. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:122,Testability,test,testing,122,"""""""Comparison function for integers, strings, booleans, or integer array-like data structures.; See :py:func:`qcelemental.testing.compare` for details. ``psi4.compare_strings`` is an alias to this. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:312,Availability,avail,available,312,"""""""Comparison function for volumetric data in cube file format.; Compares only the volumetric data, not the voxel data or molecular geometry or other header contents.; The volumetric data is passed to :py:func:`qcelemental.testing.compare_values`. Note only QCA-style signature (``(expected, computed, label)``) available. Parameters; ----------; expected; Reference cube file against which `computed` is compared.; Read by :func:`numpy.genfromtxt` so `expected` can be any of file, str,; pathlib.Path, list of str, generator.; computed; Input cube file to compare against `expected`.; Read by :func:`numpy.genfromtxt` so `computed` can be any of file, str,; pathlib.Path, list of str, generator. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:223,Testability,test,testing,223,"""""""Comparison function for volumetric data in cube file format.; Compares only the volumetric data, not the voxel data or molecular geometry or other header contents.; The volumetric data is passed to :py:func:`qcelemental.testing.compare_values`. Note only QCA-style signature (``(expected, computed, label)``) available. Parameters; ----------; expected; Reference cube file against which `computed` is compared.; Read by :func:`numpy.genfromtxt` so `expected` can be any of file, str,; pathlib.Path, list of str, generator.; computed; Input cube file to compare against `expected`.; Read by :func:`numpy.genfromtxt` so `computed` can be any of file, str,; pathlib.Path, list of str, generator. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:308,Testability,test,testing,308,"""""""Comparison function for :py:class:`psi4.core.Vector` objects.; Compares Vector properties of ``name`` (optional through **check_name**), ``nirrep``, and dimension of each irrep.; For comparing actual numerical contents, the vectors are serialized to NumPy array format and passed to :py:func:`qcelemental.testing.compare_recursive`.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:341,Testability,test,testing,341,"""""""Comparison function for :py:class:`psi4.core.Matrix` objects.; Compares Matrix properties of ``name`` (optional through **check_name**), ``nirrep``, ``symmetry``, and number of rows and columns for each irrep.; For comparing actual numerical contents, the matrices are serialized to NumPy array format and passed to :py:func:`qcelemental.testing.compare_recursive`.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:141,Testability,test,testing,141,"""""""Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See :py:func:`qcelemental.testing.compare_recursive` for details. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:203,Availability,avail,available,203,"""""""Comparison function for :py:func:`psi4.core.Molecule.to_dict` objects.; See :py:func:`qcelemental.testing.compare_molrecs` for details. Note only QCA-style signature (``(expected, computed, label)``) available. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py:101,Testability,test,testing,101,"""""""Comparison function for :py:func:`psi4.core.Molecule.to_dict` objects.; See :py:func:`qcelemental.testing.compare_molrecs` for details. Note only QCA-style signature (``(expected, computed, label)``) available. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/text.py:9,Integrability,message,message,9,"""""""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/text.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/text.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/text.py:80,Integrability,message,message,80,"""""""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/text.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/text.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/text.py:255,Integrability,message,message,255,"""""""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/text.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/text.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py:408,Energy Efficiency,energy,energy,408,"""""""Evaluate one-electron properties. :returns: None. :param wfn: set of molecule, basis, orbitals from which to compute properties. :param args:. Arbitrary-number of properties to be computed from *wfn*.; See :ref:`Available One-Electron Properties <table:oe_features>`. :type title: str; :param title: label prepended to all psivars computed. :examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py:276,Energy Efficiency,energy,energy,276,"""""""Evaluate properties on a grid and generate cube files. .. versionadded:: 0.5; *wfn* parameter passed explicitly. :returns: None. :param wfn: set of molecule, basis, orbitals from which to generate cube files. :examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py:540,Energy Efficiency,energy,energy,540,"""""""Evaluate properties on a grid and generate cube files. .. versionadded:: 0.5; *wfn* parameter passed explicitly. :returns: None. :param wfn: set of molecule, basis, orbitals from which to generate cube files. :examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py:219,Deployability,configurat,configuration,219,"""""""Returns information on integral classes, derivatives, and AM from currently linked Libint2. Returns; -------; Dictionary of integrals classes with values an array of max angular momentum per derivative level.; Usual configuration returns:; `{'eri': [5, 4, 3], 'eri2': [6, 5, 4], 'eri3': [6, 5, 4], 'onebody': [6, 5, 4]}`. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py:219,Modifiability,config,configuration,219,"""""""Returns information on integral classes, derivatives, and AM from currently linked Libint2. Returns; -------; Dictionary of integrals classes with values an array of max angular momentum per derivative level.; Usual configuration returns:; `{'eri': [5, 4, 3], 'eri2': [6, 5, 4], 'eri3': [6, 5, 4], 'onebody': [6, 5, 4]}`. """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py:11,Integrability,contract,contraction,11,"# Populate contraction information.Start with exponents.",MatchSource.CODE_COMMENT,psi4/driver/p4util/writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py:11,Integrability,contract,contraction,11,"# Populate contraction coefficients.Because some basis sets(Poples with S and P) use the same; # coefficients for multiple angular momenta, we must supply coefficients for all primitives, for all; # angular momenta.This leads to many zero elements.",MatchSource.CODE_COMMENT,psi4/driver/p4util/writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py:159,Usability,guid,guidelines,159,"# That finishes most of the basis information. Next is the overlap. It would be great if we could just dump Psi's AO; # overlap matrix, but we can 't. Per CCA guidelines, Psi' s Cartesian d and higher AM AOs aren't normalized to 1.; # While NBO can ""fix"" this itself, it changes other AO quantities to match and gets the Fock matrix wrong.; # Let's normalize ourselves instead.",MatchSource.CODE_COMMENT,psi4/driver/p4util/writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py:13,Integrability,depend,dependencies,13,"# Pad linear dependencies",MatchSource.CODE_COMMENT,psi4/driver/p4util/writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py:251,Energy Efficiency,energy,energy,251,"""""""Writes wavefunction information in *wfn* to *filename* in; molden format. Will write natural orbitals from *density* (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. .. versionadded:: 0.5; *wfn* parameter passed explicitly. :returns: None. :type filename:; :param filename:. Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name. :type do_virtual:; :param do_virtual:. Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO's. If unspecified (None), value taken from; :term:`MOLDEN_WITH_VIRTUAL <MOLDEN_WITH_VIRTUAL (GLOBALS)>`. :type use_natural:; :param use_natural:. Write natural orbitals determined from density on wavefunction. :examples:. 1. Molden file with the Kohn-Sham orbitals of a DFT calculation. >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). 2. Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; ""properties"" or ""gradient"" must be called. >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). 3. To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a ``CIWavefunction`` computation, e.g., ``detci``, ``fci``, ``casscf``.; The first two arguments of :py:meth:`~psi4.core.CIWavefunction.get_opdm`; can be set to ``n, n`` where n => 0 selects the root to; write out, provided these roots were computed, see :term:`NUM_ROOTS <NUM_ROOTS (DETCI)>`. The; third argument controls the spin (``""A""``, ``""B""`` or ``""SUM""``) and the final; boolean option determine",MatchSource.CODE_COMMENT,psi4/driver/p4util/writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py:1080,Energy Efficiency,energy,energy,1080,"l orbitals from *density* (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. .. versionadded:: 0.5; *wfn* parameter passed explicitly. :returns: None. :type filename:; :param filename:. Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name. :type do_virtual:; :param do_virtual:. Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO's. If unspecified (None), value taken from; :term:`MOLDEN_WITH_VIRTUAL <MOLDEN_WITH_VIRTUAL (GLOBALS)>`. :type use_natural:; :param use_natural:. Write natural orbitals determined from density on wavefunction. :examples:. 1. Molden file with the Kohn-Sham orbitals of a DFT calculation. >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). 2. Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; ""properties"" or ""gradient"" must be called. >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). 3. To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a ``CIWavefunction`` computation, e.g., ``detci``, ``fci``, ``casscf``.; The first two arguments of :py:meth:`~psi4.core.CIWavefunction.get_opdm`; can be set to ``n, n`` where n => 0 selects the root to; write out, provided these roots were computed, see :term:`NUM_ROOTS <NUM_ROOTS (DETCI)>`. The; third argument controls the spin (``""A""``, ``""B""`` or ``""SUM""``) and the final; boolean option determines whether inactive orbitals are included. >>> E, wfn = energy('detci', return_wfn=True); >>> ",MatchSource.CODE_COMMENT,psi4/driver/p4util/writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py:1238,Energy Efficiency,energy,energy,1238,"ly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. .. versionadded:: 0.5; *wfn* parameter passed explicitly. :returns: None. :type filename:; :param filename:. Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name. :type do_virtual:; :param do_virtual:. Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO's. If unspecified (None), value taken from; :term:`MOLDEN_WITH_VIRTUAL <MOLDEN_WITH_VIRTUAL (GLOBALS)>`. :type use_natural:; :param use_natural:. Write natural orbitals determined from density on wavefunction. :examples:. 1. Molden file with the Kohn-Sham orbitals of a DFT calculation. >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). 2. Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; ""properties"" or ""gradient"" must be called. >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). 3. To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a ``CIWavefunction`` computation, e.g., ``detci``, ``fci``, ``casscf``.; The first two arguments of :py:meth:`~psi4.core.CIWavefunction.get_opdm`; can be set to ``n, n`` where n => 0 selects the root to; write out, provided these roots were computed, see :term:`NUM_ROOTS <NUM_ROOTS (DETCI)>`. The; third argument controls the spin (``""A""``, ``""B""`` or ``""SUM""``) and the final; boolean option determines whether inactive orbitals are included. >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py:2056,Energy Efficiency,energy,energy,2056,"ly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. .. versionadded:: 0.5; *wfn* parameter passed explicitly. :returns: None. :type filename:; :param filename:. Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name. :type do_virtual:; :param do_virtual:. Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO's. If unspecified (None), value taken from; :term:`MOLDEN_WITH_VIRTUAL <MOLDEN_WITH_VIRTUAL (GLOBALS)>`. :type use_natural:; :param use_natural:. Write natural orbitals determined from density on wavefunction. :examples:. 1. Molden file with the Kohn-Sham orbitals of a DFT calculation. >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). 2. Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; ""properties"" or ""gradient"" must be called. >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). 3. To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a ``CIWavefunction`` computation, e.g., ``detci``, ``fci``, ``casscf``.; The first two arguments of :py:meth:`~psi4.core.CIWavefunction.get_opdm`; can be set to ``n, n`` where n => 0 selects the root to; write out, provided these roots were computed, see :term:`NUM_ROOTS <NUM_ROOTS (DETCI)>`. The; third argument controls the spin (``""A""``, ``""B""`` or ``""SUM""``) and the final; boolean option determines whether inactive orbitals are included. >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). """"""",MatchSource.CODE_COMMENT,psi4/driver/p4util/writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py:20,Energy Efficiency,energy,energy,20,"# Sort mos based on energy",MatchSource.CODE_COMMENT,psi4/driver/p4util/writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/writer.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py:98,Usability,simpl,simple,98,"# The template matches each entry key to the expected dimensions of each of its items.; # For the simple DIIS case, there are functions to populate this. (Useful C-side.); # For all other cases, this is set automatically the first time an entry is added.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/diis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py:22,Performance,cache,cache,22,"# At present, we only cache for DIIS, not EDIIS or ADIIS. In principle, we could, but; # their quantities are N^2, so we assume the savings are negligible.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/diis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py:8,Performance,cache,cache,8,"# Never cache a _number_.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/diis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py:34,Availability,error,error,34,""""""" Set the template for the DIIS error. Kept mainly for backwards compatibility. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/diis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py:40,Performance,cache,cache,40,"# Purge imminently-outdated values from cache.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/diis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py:53,Energy Efficiency,energy,energy,53,""""""" Fills linear and quadratic coefficients in ADIIS energy estimate. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/diis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py:16,Energy Efficiency,energy,energy,16,""""""" Gradient of energy estimate w.r.t. input coefficient """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/diis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py:42,Energy Efficiency,energy,energy,42,""""""" Fills quadratic coefficients in ADIIS energy estimate. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/diis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py:48,Availability,error,error,48,""""""" Perform extrapolation. Must be passed in an error metric to decide how to handle hybrid algorithms. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/diis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/diis.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py:202,Availability,avail,available,202,"""""""Invert _engine_can_do dictionary and check program detection. Returns a dictionary with keys all dispersion levels and values a list of all; capable engines, where the engine in the first element is available, if any are. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/empirical_dispersion.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py:54,Safety,detect,detection,54,"""""""Invert _engine_can_do dictionary and check program detection. Returns a dictionary with keys all dispersion levels and values a list of all; capable engines, where the engine in the first element is available, if any are. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/empirical_dispersion.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py:2947,Availability,error,error,2947,"ersion_resources.from_arrays`. Used; here to ""bless"" the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; `qcengine.programs.empirical_dispersion_resources.dashcoeff` itself for purposes of; validating :py:attr:`fctldash`.; engine : str; {'libdisp', ""s-dftd3"", 'dftd3', 'nl', 'mp2d', ""dftd4""}; Compute engine for dispersion. One of Psi4's internal libdisp; library, external Grimme or Beran projects, or nl.; disp : Dispersion; Only present for :py:attr:`engine` `=libdisp`. Psi4 class instance prepared; to compute dispersion.; ordered_params : list; Fixed-order list of relevant parameters for :py:attr:`dashlevel`. Matches; :rst:psivar:`DISPERSION CORRECTION ENERGY` ordering. Used for printing. Parameters; ----------; name_hint; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; ``dashcoeff[dashlevel][functional-without-dashlevel]`` or; ``dashcoeff_supplement[dashlevel][functional-with-dashlevel]``; can be overwritten via `param_tweaks`.; level_hint; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to one.; param_tweaks; Values for the same keys as `dashcoeff[dashlevel]['default']`; (and same order if list) used to override any or all values; initialized by `name_hint`. Extra parameters will error.; engine; Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine; Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp; Whether to request atomic pairwise analysis. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/empirical_dispersion.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py:495,Modifiability,flexible,flexible,495,"""""""Lightweight unification of empirical dispersion calculation modes. Attributes; ----------; dashlevel : str; {""d1"", ""d2"", ""chg"", ""das2009"", ""das2010"", ""nl"", ""dmp2"", ""d3zero2b"", ""d3bj2b"", ""d3mzero2b"", ""d3mbj2b"", ""d3zeroatm"", ""d3bjatm"", ""d3mzeroatm"", ""d3mbjatm"", ""d4bjeeqatm""}; Name of dispersion correction to be applied. Resolved; from `name_hint` and/or `level_hint` into a key of; `empirical_dispersion_resources.dashcoeff`.; dashparams : dict; Complete set of parameter values defining the flexible parts; of :py:attr:`dashlevel`. Number and parameter names vary by; :py:attr:`dashlevel`. Resolved into a complete set (keys of; dashcoeff[dashlevel]['default']) from `name_hint` and/or; `dashcoeff_supplement` and/or user `param_tweaks`.; fctldash : str; If :py:attr:`dashparams` for :py:attr:`dashlevel` corresponds to a defined,; named, untweaked ""functional-dashlevel"" set, then that; functional. Otherwise, empty string.; description : str; Tagline for dispersion :py:attr:`dashlevel`.; dashlevel_citation : str; Literature reference for dispersion :py:attr:`dashlevel` in general,; *not necessarily* for :py:attr:`dashparams`.; dashparams_citation : str; Literature reference for dispersion parameters, if :py:attr:`dashparams`; corresponds to a defined, named, untweaked ""functional-dashlevel""; set with a citation. Otherwise, empty string.; dashcoeff_supplement : dict; See description in `qcengine.programs.empirical_dispersion_resources.from_arrays`. Used; here to ""bless"" the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; `qcengine.programs.empirical_dispersion_resources.dashcoeff` itself for purposes of; validating :py:attr:`fctldash`.; engine : str; {'libdisp', ""s-dftd3"", 'dftd3', 'nl', 'mp2d', ""dftd4""}; Compute engine for dispersion. One of Psi4's internal libdisp; library, external Grimme or Beran projects, or nl.; disp : Dispersion; Only present for :py:attr:`engine` `=libdisp`",MatchSource.CODE_COMMENT,psi4/driver/procrouting/empirical_dispersion.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py:1719,Security,validat,validating,1719,"/or user `param_tweaks`.; fctldash : str; If :py:attr:`dashparams` for :py:attr:`dashlevel` corresponds to a defined,; named, untweaked ""functional-dashlevel"" set, then that; functional. Otherwise, empty string.; description : str; Tagline for dispersion :py:attr:`dashlevel`.; dashlevel_citation : str; Literature reference for dispersion :py:attr:`dashlevel` in general,; *not necessarily* for :py:attr:`dashparams`.; dashparams_citation : str; Literature reference for dispersion parameters, if :py:attr:`dashparams`; corresponds to a defined, named, untweaked ""functional-dashlevel""; set with a citation. Otherwise, empty string.; dashcoeff_supplement : dict; See description in `qcengine.programs.empirical_dispersion_resources.from_arrays`. Used; here to ""bless"" the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; `qcengine.programs.empirical_dispersion_resources.dashcoeff` itself for purposes of; validating :py:attr:`fctldash`.; engine : str; {'libdisp', ""s-dftd3"", 'dftd3', 'nl', 'mp2d', ""dftd4""}; Compute engine for dispersion. One of Psi4's internal libdisp; library, external Grimme or Beran projects, or nl.; disp : Dispersion; Only present for :py:attr:`engine` `=libdisp`. Psi4 class instance prepared; to compute dispersion.; ordered_params : list; Fixed-order list of relevant parameters for :py:attr:`dashlevel`. Matches; :rst:psivar:`DISPERSION CORRECTION ENERGY` ordering. Used for printing. Parameters; ----------; name_hint; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; ``dashcoeff[dashlevel][functional-without-dashlevel]`` or; ``dashcoeff_supplement[dashlevel][functional-with-dashlevel]``; can be overwritten via `param_tweaks`.; level_hint; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `da",MatchSource.CODE_COMMENT,psi4/driver/procrouting/empirical_dispersion.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py:3224,Usability,simpl,simple-,3224,"ersion_resources.from_arrays`. Used; here to ""bless"" the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; `qcengine.programs.empirical_dispersion_resources.dashcoeff` itself for purposes of; validating :py:attr:`fctldash`.; engine : str; {'libdisp', ""s-dftd3"", 'dftd3', 'nl', 'mp2d', ""dftd4""}; Compute engine for dispersion. One of Psi4's internal libdisp; library, external Grimme or Beran projects, or nl.; disp : Dispersion; Only present for :py:attr:`engine` `=libdisp`. Psi4 class instance prepared; to compute dispersion.; ordered_params : list; Fixed-order list of relevant parameters for :py:attr:`dashlevel`. Matches; :rst:psivar:`DISPERSION CORRECTION ENERGY` ordering. Used for printing. Parameters; ----------; name_hint; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; ``dashcoeff[dashlevel][functional-without-dashlevel]`` or; ``dashcoeff_supplement[dashlevel][functional-with-dashlevel]``; can be overwritten via `param_tweaks`.; level_hint; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to one.; param_tweaks; Values for the same keys as `dashcoeff[dashlevel]['default']`; (and same order if list) used to override any or all values; initialized by `name_hint`. Extra parameters will error.; engine; Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine; Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp; Whether to request atomic pairwise analysis. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/empirical_dispersion.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py:22,Energy Efficiency,energy,energy,22,"""""""Compute dispersion energy based on engine, dispersion level, and parameters in `self`. Parameters; ----------; molecule; System for which to compute empirical dispersion correction.; wfn; Location to set QCVariables. Returns; -------; float; Dispersion energy [Eh]. Notes; -----; :psivar:`DISPERSION CORRECTION ENERGY`; Disp always set. Overridden in SCF finalization, but that only changes for ""-3C"" methods.; :psivar:`fctl DISPERSION CORRECTION ENERGY`; Set if :py:attr:`fctldash` nonempty. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/empirical_dispersion.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py:256,Energy Efficiency,energy,energy,256,"""""""Compute dispersion energy based on engine, dispersion level, and parameters in `self`. Parameters; ----------; molecule; System for which to compute empirical dispersion correction.; wfn; Location to set QCVariables. Returns; -------; float; Dispersion energy [Eh]. Notes; -----; :psivar:`DISPERSION CORRECTION ENERGY`; Disp always set. Overridden in SCF finalization, but that only changes for ""-3C"" methods.; :psivar:`fctl DISPERSION CORRECTION ENERGY`; Set if :py:attr:`fctldash` nonempty. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/empirical_dispersion.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/empirical_dispersion.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:40,Integrability,interface,interface,40,"""""""Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:23,Integrability,wrap,wrappers,23,"# never import driver, wrappers, or aliases into this file",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:246,Energy Efficiency,energy,energy,246,"""""""Function that prepares environment and input files; for a calculation calling Stanton and Gauss's CFOUR code.; Also processes results back into Psi4 format. This function is not called directly but is instead called by; :py:func:`~psi4.driver.energy` or :py:func:`~psi4.driver.optimize` when a Cfour; method is requested (through *name* argument). In order to function; correctly, the Cfour executable ``xcfour`` must be present in; :envvar:`PATH` or :envvar:`PSIPATH`. .. hlist::; :columns: 1. * Many :ref:`PSI Variables <apdx:cfour_psivar>` extracted from the Cfour output; * Python dictionary of associated file constants accessible as ``P4C4_INFO['zmat']``, ``P4C4_INFO['output']``, ``P4C4_INFO['grd']``, *etc.*. :type name: str; :param name: ``'c4-scf'`` || ``'c4-ccsd(t)'`` || ``'cfour'`` || etc. First argument, usually unlabeled. Indicates the computational; method to be applied to the system. :type keep: :ref:`boolean <op_py_boolean>`; :param keep: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. :type path: str; :param path:. Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory. If specified, GENBAS and/or ZMAT within will be used. :type genbas: str; :param genbas:. Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; |Psifours| BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser's; aggression, blank lines need to be replaced by the text blan",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:280,Performance,optimiz,optimize,280,"""""""Function that prepares environment and input files; for a calculation calling Stanton and Gauss's CFOUR code.; Also processes results back into Psi4 format. This function is not called directly but is instead called by; :py:func:`~psi4.driver.energy` or :py:func:`~psi4.driver.optimize` when a Cfour; method is requested (through *name* argument). In order to function; correctly, the Cfour executable ``xcfour`` must be present in; :envvar:`PATH` or :envvar:`PSIPATH`. .. hlist::; :columns: 1. * Many :ref:`PSI Variables <apdx:cfour_psivar>` extracted from the Cfour output; * Python dictionary of associated file constants accessible as ``P4C4_INFO['zmat']``, ``P4C4_INFO['output']``, ``P4C4_INFO['grd']``, *etc.*. :type name: str; :param name: ``'c4-scf'`` || ``'c4-ccsd(t)'`` || ``'cfour'`` || etc. First argument, usually unlabeled. Indicates the computational; method to be applied to the system. :type keep: :ref:`boolean <op_py_boolean>`; :param keep: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. :type path: str; :param path:. Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory. If specified, GENBAS and/or ZMAT within will be used. :type genbas: str; :param genbas:. Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; |Psifours| BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser's; aggression, blank lines need to be replaced by the text blan",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:628,Security,access,accessible,628,"""""""Function that prepares environment and input files; for a calculation calling Stanton and Gauss's CFOUR code.; Also processes results back into Psi4 format. This function is not called directly but is instead called by; :py:func:`~psi4.driver.energy` or :py:func:`~psi4.driver.optimize` when a Cfour; method is requested (through *name* argument). In order to function; correctly, the Cfour executable ``xcfour`` must be present in; :envvar:`PATH` or :envvar:`PSIPATH`. .. hlist::; :columns: 1. * Many :ref:`PSI Variables <apdx:cfour_psivar>` extracted from the Cfour output; * Python dictionary of associated file constants accessible as ``P4C4_INFO['zmat']``, ``P4C4_INFO['output']``, ``P4C4_INFO['grd']``, *etc.*. :type name: str; :param name: ``'c4-scf'`` || ``'c4-ccsd(t)'`` || ``'cfour'`` || etc. First argument, usually unlabeled. Indicates the computational; method to be applied to the system. :type keep: :ref:`boolean <op_py_boolean>`; :param keep: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. :type path: str; :param path:. Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory. If specified, GENBAS and/or ZMAT within will be used. :type genbas: str; :param genbas:. Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; |Psifours| BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser's; aggression, blank lines need to be replaced by the text blan",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:59,Modifiability,variab,variables,59,"# Find environment by merging PSIPATH and PATH environment variables",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:44,Availability,fault,fault,44,"# Filter out None values as subprocess will fault on them",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:27,Integrability,interface,interface,27,"""""""; GENBAS file for CFOUR interface not found. Either:; [1] Supply a GENBAS by placing it in PATH or PSIPATH; [1a] Use cfour {} block with molecule and basis directives.; [1b] Use molecule {} block and CFOUR_BASIS keyword.; [2] Allow Psi4's internal basis sets to convert to GENBAS; [2a] Use molecule {} block and BASIS keyword. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:22,Availability,error,error,22,"# Quit if Cfour threw error",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:81,Energy Efficiency,energy,energy,81,"# new skeleton wavefunction w/mol, highest-SCF basis (just to choose one), & not energy; # Feb 2017 hack. Could get proper basis in skel wfn even if not through p4 basis kw",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py:40,Energy Efficiency,energy,energy,40,"""""""Form list of Cfour :py:func:`~driver.energy` arguments.""""""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/interface_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/interface_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:108,Energy Efficiency,energy,energy,108,"""""""Module with functions that encode the sequence of PSI module; calls for each of the *name* values of the energy(), optimize(),; response(), and frequency() function. *name* can be assumed lowercase by here. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:118,Performance,optimiz,optimize,118,"""""""Module with functions that encode the sequence of PSI module; calls for each of the *name* values of the energy(), optimize(),; response(), and frequency() function. *name* can be assumed lowercase by here. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:23,Integrability,wrap,wrappers,23,"# never import driver, wrappers, or aliases into this file; # ADVICE on new additions:; # * two choices: basic `def run` or managed `def select`; # * consult http://psicode.org/psi4manual/master/proc_py.html --or-- <psi4-repo>/doc/sphinxman/source/proc_py.rst",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:97,Performance,perform,performance,97,"""""""Function selecting the algorithm for an SCF gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:28,Safety,avoid,avoids,28,"# `""scf""` instead of `name` avoids adding every functional to governing dict in proc_data.py",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:120,Integrability,message,message,120,"# manifestation of `""""""No analytic derivatives for SCF_TYPE CD.""""""`.; # here, only hits upon `gradient(""scf"")` so above message also present in driver.py to catch e.g., mp2 gradient atop a cd reference.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:46,Energy Efficiency,energy,energy,46,"""""""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:94,Performance,perform,performance,94,"""""""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:50,Availability,avail,available,50,"""""""\nDETCI is ill-advised for method MP2 as it is available inefficiently as a """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:96,Performance,perform,performance,96,"""""""Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:96,Performance,perform,performance,96,"""""""Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:48,Energy Efficiency,energy,energy,48,"""""""Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:96,Performance,perform,performance,96,"""""""Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:98,Performance,perform,performance,98,"""""""Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:98,Performance,perform,performance,98,"""""""Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:100,Performance,perform,performance,100,"""""""Function selecting the algorithm for an OMP2.5 property call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:98,Performance,perform,performance,98,"""""""Function selecting the algorithm for an OMP3 property call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:99,Performance,perform,performance,99,"""""""Function selecting the algorithm for an OLCCD property call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:46,Energy Efficiency,energy,energy,46,"""""""Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:94,Performance,perform,performance,94,"""""""Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:50,Availability,avail,available,50,"""""""\nDETCI is ill-advised for method MP3 as it is available inefficiently as a """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:96,Performance,perform,performance,96,"""""""Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:48,Energy Efficiency,energy,energy,48,"""""""Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:96,Performance,perform,performance,96,"""""""Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:98,Performance,perform,performance,98,"""""""Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:48,Energy Efficiency,energy,energy,48,"""""""Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:96,Performance,perform,performance,96,"""""""Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:98,Performance,perform,performance,98,"""""""Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:50,Energy Efficiency,energy,energy,50,"""""""Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:98,Performance,perform,performance,98,"""""""Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:100,Performance,perform,performance,100,"""""""Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:47,Energy Efficiency,energy,energy,47,"""""""Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:95,Performance,perform,performance,95,"""""""Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:97,Performance,perform,performance,97,"""""""Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:49,Energy Efficiency,energy,energy,49,"""""""Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:97,Performance,perform,performance,97,"""""""Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:99,Performance,perform,performance,99,"""""""Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:51,Energy Efficiency,energy,energy,51,"""""""Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:99,Performance,perform,performance,99,"""""""Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:47,Energy Efficiency,energy,energy,47,"""""""Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:95,Performance,perform,performance,95,"""""""Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:97,Performance,perform,performance,97,"""""""Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:54,Energy Efficiency,energy,energy,54,"""""""Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:102,Performance,perform,performance,102,"""""""Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:50,Energy Efficiency,energy,energy,50,"""""""Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:98,Performance,perform,performance,98,"""""""Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:100,Performance,perform,performance,100,"""""""Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:52,Energy Efficiency,energy,energy,52,"""""""Function selecting the algorithm for a a-CCSD(T) energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:100,Performance,perform,performance,100,"""""""Function selecting the algorithm for a a-CCSD(T) energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:47,Energy Efficiency,energy,energy,47,"""""""Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:95,Performance,perform,performance,95,"""""""Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:46,Energy Efficiency,energy,energy,46,"""""""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:94,Performance,perform,performance,94,"""""""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:50,Availability,avail,available,50,"""""""\nDETCI is ill-advised for method MP4 as it is available inefficiently as a """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:48,Energy Efficiency,energy,energy,48,"""""""Function selecting the algorithm for a REMP2 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:96,Performance,perform,performance,96,"""""""Function selecting the algorithm for a REMP2 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:46,Energy Efficiency,energy,energy,46,"""""""Function selecting the algorithm for a CCD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:94,Performance,perform,performance,94,"""""""Function selecting the algorithm for a CCD energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:24,Availability,avail,available,24,"""""""\nThis method is not available with conventional integrals. Add ""set """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:47,Security,access,access,47,"""""""cc_type df"" or ""set cc_type cd"" to input to access this method.\n""""""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:96,Performance,perform,performance,96,"""""""Function selecting the algorithm for a CCD gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:24,Availability,avail,available,24,"""""""\nThis method is not available with conventional integrals. Add ""set """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:47,Security,access,access,47,"""""""cc_type df"" or ""set cc_type cd"" to input to access this method.\n""""""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:46,Energy Efficiency,energy,energy,46,"""""""Function selecting the algorithm for a CC2 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:94,Performance,perform,performance,94,"""""""Function selecting the algorithm for a CC2 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:46,Integrability,rout,route,46,"# [LAB Aug 2022] I'm leaving MRCC CC2 in as a route, but my c.2014 MRCC consistently yields:; # ""Approximate CC methods are not implemented for excitation level 2!""; # [LAB Aug 2022] DF CC2 enabled for test_gradient but only by deliberate `set qc_module ccenergy`; # since not advertised. See #2710.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:96,Performance,perform,performance,96,"""""""Function selecting the algorithm for a CC2 gradient call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:46,Energy Efficiency,energy,energy,46,"""""""Function selecting the algorithm for a CC3 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:94,Performance,perform,performance,94,"""""""Function selecting the algorithm for a CC3 energy call; and directing to specified or best-performance default modules. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:384,Availability,error,error,384,"""""""Function selecting the algorithm for a CC* energy call; and directing to specified MRCC module. This function is unusual among ""select"" functions in that it services multiple methods and a; single module. This function could have been skipped and the methods associated directly with; run_rmcc; however, routing through this function screens for conv only while; providing uniform error messages with other select functions. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:46,Energy Efficiency,energy,energy,46,"""""""Function selecting the algorithm for a CC* energy call; and directing to specified MRCC module. This function is unusual among ""select"" functions in that it services multiple methods and a; single module. This function could have been skipped and the methods associated directly with; run_rmcc; however, routing through this function screens for conv only while; providing uniform error messages with other select functions. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:307,Integrability,rout,routing,307,"""""""Function selecting the algorithm for a CC* energy call; and directing to specified MRCC module. This function is unusual among ""select"" functions in that it services multiple methods and a; single module. This function could have been skipped and the methods associated directly with; run_rmcc; however, routing through this function screens for conv only while; providing uniform error messages with other select functions. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:390,Integrability,message,messages,390,"""""""Function selecting the algorithm for a CC* energy call; and directing to specified MRCC module. This function is unusual among ""select"" functions in that it services multiple methods and a; single module. This function could have been skipped and the methods associated directly with; run_rmcc; however, routing through this function screens for conv only while; providing uniform error messages with other select functions. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:69,Energy Efficiency,charge,charges,69,"""""""Initialize :py:class:`psi4.core.ExternalPotential` object(s) from charges and locations and set on **wfn**. Parameters; ----------; external_potential; List-like structure where each row corresponds to a charge. Lines can be composed of ``q, [x, y, z]`` or; ``q, x, y, z``. Locations are in [a0].; Or, dictionary where keys are FI-SAPT fragments A, B, or C and values are as above. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:207,Energy Efficiency,charge,charge,207,"""""""Initialize :py:class:`psi4.core.ExternalPotential` object(s) from charges and locations and set on **wfn**. Parameters; ----------; external_potential; List-like structure where each row corresponds to a charge. Lines can be composed of ``q, [x, y, z]`` or; ``q, x, y, z``. Locations are in [a0].; Or, dictionary where keys are FI-SAPT fragments A, B, or C and values are as above. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:24,Availability,checkpoint,checkpoint,24,"# decide if we keep the checkpoint file",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:20,Integrability,rout,routine,20,"# The wfn from_file routine adds the npy suffix if needed, but we add it here so that; # we can use os.path.isfile to query whether the file exists before attempting to read",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Availability,checkpoint,checkpoint,8,"# Write checkpoint file (orbitals and basis); Can be disabled, e.g., for findif displacements",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:110,Performance,optimiz,optimized,110,"""""""Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:69,Testability,log,logic,69,"# throw exception for CONV (approximately). run reference defaulting logic",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:86,Performance,optimiz,optimized,86,"""""""Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:86,Performance,optimiz,optimized,86,"""""""Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:73,Deployability,update,update,73,"# Shove variables into global space; # TODO: Make other methods in DFOCC update all variables, then add them to the list. Adding now, risks setting outdated information.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space; # TODO: Make other methods in DFOCC update all variables, then add them to the list. Adding now, risks setting outdated information.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:84,Modifiability,variab,variables,84,"# Shove variables into global space; # TODO: Make other methods in DFOCC update all variables, then add them to the list. Adding now, risks setting outdated information.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:134,Safety,risk,risks,134,"# Shove variables into global space; # TODO: Make other methods in DFOCC update all variables, then add them to the list. Adding now, risks setting outdated information.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:32,Modifiability,variab,variables,32,"# Custom spin component scaling variables are meaningless if custom scalings hasn't been set. Delete them.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:116,Availability,avail,avail,116,"# locking out SCS through explicit keyword setting; # * so that current energy must match call; # * since grads not avail for scs",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:72,Energy Efficiency,energy,energy,72,"# locking out SCS through explicit keyword setting; # * so that current energy must match call; # * since grads not avail for scs",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:32,Modifiability,variab,variables,32,"# Custom spin component scaling variables are meaningless if custom scalings hasn't been set. Delete them.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:15,Energy Efficiency,energy,energy,15,"# Call a plain energy('ccenergy') and have full control over options, incl. wfn",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:9,Integrability,rout,routine,9,"# Bypass routine scf if user did something special to get it to converge",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:9,Integrability,rout,routine,9,"# Bypass routine scf if user did something special to get it to converge",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:41,Energy Efficiency,energy,energy,41,"# Notes; # * BCCD or BCCD(T) correlation energy is total energy of last Brueckner iteration minus HF energy of first Brueckner iteration",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:57,Energy Efficiency,energy,energy,57,"# Notes; # * BCCD or BCCD(T) correlation energy is total energy of last Brueckner iteration minus HF energy of first Brueckner iteration",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:101,Energy Efficiency,energy,energy,101,"# Notes; # * BCCD or BCCD(T) correlation energy is total energy of last Brueckner iteration minus HF energy of first Brueckner iteration",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:7,Safety,sanity check,sanity checks,7,"# some sanity checks",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:83,Usability,simpl,simple,83,"""""""Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to :py:func:`~proc.run_scf`; since SCF properties all handled through oeprop. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:226,Availability,down,down,226,"# WARNING!!! A one-particle property computed _with_ a two-particle property will differ; # from a one-particle property computed by itself. There are no two-particle properties at; # present, so we can kick the issue further down the road.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:57,Deployability,configurat,configuration,57,"""""""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:57,Modifiability,config,configuration,57,"""""""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:33,Integrability,interface,interface,33,"# Hack to direct the stream-like interface adcc expects to the string interface of Psi4 core",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:70,Integrability,interface,interface,70,"# Hack to direct the stream-like interface adcc expects to the string interface of Psi4 core",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Energy Efficiency,energy,energy,8,"# MP(3) energy for CVS-ADC(3) calculations is still a missing feature in adcc; # ... we store this variant here to be able to fall back to MP(2) energies.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:14,Availability,avail,available,14,"# TODO Things available in ADCC, but not yet implemented here:; # Export of difference and transition density matrices for all states",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:57,Deployability,configurat,configuration,57,"""""""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:57,Modifiability,config,configuration,57,"""""""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:57,Energy Efficiency,charge,charge-transfer,57,"""""""Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:59,Modifiability,variab,variables,59,"# Find environment by merging PSIPATH and PATH environment variables",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:44,Availability,fault,fault,44,"# Filter out None values as subprocess will fault on them",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:36,Energy Efficiency,energy,energy,36,"# Scan iface file and grab the file energy.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:118,Energy Efficiency,energy,energy,118,"""""""Function encoding sequence of PSI module calls for; a [FNO-](DF|CD)-CCSD[(T)] computation. >>> set cc_type df; >>> energy('fno-ccsd(t)'). """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:61,Testability,log,logic,61,"# throw exception for CONV (approximately). after defaulting logic, throw exception for SCF_TYPE CONV (approximately)",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:113,Energy Efficiency,energy,energy,113,"""""""Function encoding sequence of PSI module calls for; a QCISD(T), CCSD(T), MP2.5, MP3, and MP4 computation. >>> energy('fno-ccsd(t)'). """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:26,Energy Efficiency,energy,energy,26,"# set current correlation energy and total energy. only need to treat mpn here.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:43,Energy Efficiency,energy,energy,43,"# set current correlation energy and total energy. only need to treat mpn here.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:84,Energy Efficiency,energy,energy,84,"""""""Function encoding sequence of PSI module calls for; a cepa-like calculation. >>> energy('cepa(1)'). """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:8,Modifiability,variab,variables,8,"# Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:20,Availability,avail,available,20,"""""""Method 'efp' not available without EFP fragments in molecule""""""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py:93,Deployability,release,release,93,"# set options; # * 'chtr', 'qm_exch', 'qm_disp', 'qm_chtr' may be enabled in a future libefp release",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_data.py:63,Integrability,rout,routing,63,"""""""Here do stash raw data structures used to support procedure routing and small access functions.; Avoid importing from psi4 into here. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_data.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_data.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_data.py:81,Security,access,access,81,"""""""Here do stash raw data structures used to support procedure routing and small access functions.; Avoid importing from psi4 into here. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_data.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_data.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:52,Availability,avail,available,52,"""""""Module with a *procedures* dictionary specifying available quantum; chemical methods.; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:350,Energy Efficiency,energy,energy,350,"# never import wrappers or aliases into this file; # ADVICE upon adding to the `procedures` dict:; # * (1) add entry to `procedures` below. See ADVICE in psi4/driver/procrouting/proc.py on run_ vs. select_; # * (2) add entry to `method_governing_type_keywords` in psi4/driver/procrouting/proc_data.py; # * (3) add entry to table in docstring of `def energy`, etc. in psi4/driver/driver.py; # * (4) add entry to capabilities table in doc/sphinxman/source/introduction.rst; # * aliases discouraged but allowed. See `lccsd` and `a-ccsd(t)` for examples; # * for `hessian` entries, program up and set DIPOLE GRADIENT, too, otherwise IR intensities logic will fail; # Procedure lookup tables",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:15,Integrability,wrap,wrappers,15,"# never import wrappers or aliases into this file; # ADVICE upon adding to the `procedures` dict:; # * (1) add entry to `procedures` below. See ADVICE in psi4/driver/procrouting/proc.py on run_ vs. select_; # * (2) add entry to `method_governing_type_keywords` in psi4/driver/procrouting/proc_data.py; # * (3) add entry to table in docstring of `def energy`, etc. in psi4/driver/driver.py; # * (4) add entry to capabilities table in doc/sphinxman/source/introduction.rst; # * aliases discouraged but allowed. See `lccsd` and `a-ccsd(t)` for examples; # * for `hessian` entries, program up and set DIPOLE GRADIENT, too, otherwise IR intensities logic will fail; # Procedure lookup tables",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:644,Testability,log,logic,644,"# never import wrappers or aliases into this file; # ADVICE upon adding to the `procedures` dict:; # * (1) add entry to `procedures` below. See ADVICE in psi4/driver/procrouting/proc.py on run_ vs. select_; # * (2) add entry to `method_governing_type_keywords` in psi4/driver/procrouting/proc_data.py; # * (3) add entry to table in docstring of `def energy`, etc. in psi4/driver/driver.py; # * (4) add entry to capabilities table in doc/sphinxman/source/introduction.rst; # * aliases discouraged but allowed. See `lccsd` and `a-ccsd(t)` for examples; # * for `hessian` entries, program up and set DIPOLE GRADIENT, too, otherwise IR intensities logic will fail; # Procedure lookup tables",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:2,Integrability,interface,interface,2,"# interface to Kallay's MRCC program # Aug 2022 deprecated",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:35,Energy Efficiency,energy,energy,35,"# yapf: disable; # Will only allow energy to be run for the following methods",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:11,Availability,avail,available,11,"# Grab the available -Ds from HF, since that's what SAPT0-D calls",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:40,Integrability,rout,routines,40,"# Integrate arbitrary order with driver routines",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:29,Integrability,rout,routines,29,"# Integrate MRCC with driver routines",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:21,Integrability,rout,routines,21,"# covered by select_ routines above",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:28,Integrability,rout,routines,28,"# Integrate DFT with driver routines",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:30,Integrability,rout,routines,30,"# Integrate CFOUR with driver routines",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py:64,Integrability,rout,routines,64,"# dictionary to register pre- and post-compute hooks for driver routines",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_table.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_table.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py:77,Integrability,rout,routine,77,"""""""; Ensure non-symmetric density matrices are supported for the selected JK routine.; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py:14,Energy Efficiency,energy,energy,14,"# Print total energy",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py:16,Modifiability,variab,variables,16,"## Set SAPT0-D3 variables",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py:139,Energy Efficiency,energy,energy,139,"# fisapt-d was designed with classic dftd3 pairwise that was too large by a factor of 2 (satisfied sum(pairwise) = 2 * two-body-dispersion-energy); # by QCEngine v0.26.0, dftd3 interface corrected to match s-dftd3 and dftd4, so file dropped here changes, and fsapt.py script compensates",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py:177,Integrability,interface,interface,177,"# fisapt-d was designed with classic dftd3 pairwise that was too large by a factor of 2 (satisfied sum(pairwise) = 2 * two-body-dispersion-energy); # by QCEngine v0.26.0, dftd3 interface corrected to match s-dftd3 and dftd4, so file dropped here changes, and fsapt.py script compensates",MatchSource.CODE_COMMENT,psi4/driver/procrouting/proc_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/proc_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:40,Integrability,interface,interface,40,"""""""Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:59,Modifiability,variab,variables,59,"# Find environment by merging PSIPATH and PATH environment variables",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:44,Availability,fault,fault,44,"# Filter out None values as subprocess will fault on them",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:820,Availability,error,error,820,"""""""Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. :type c4full: :ref:`boolean <op_py_boolean>`; :param c4full: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether when *name* indicates a Cfour method and *mode*; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Presently uses all gradients. Could mix in analytic 2nd-derivs. - Collect resutls. - Manage scratch / subdir better. - Allow CFOUR_BASIS. - Consider forcing some tighter convcrit, c4 and p4. - mixed ang/bohr signals. - error by converting to ang in psi?. - Expand CURRENT DIPOLE XYZ beyond SCF. - Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE. - switch C --> S/R with recovery using shelf. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:987,Availability,recover,recovery,987,"""""""Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. :type c4full: :ref:`boolean <op_py_boolean>`; :param c4full: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether when *name* indicates a Cfour method and *mode*; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Presently uses all gradients. Could mix in analytic 2nd-derivs. - Collect resutls. - Manage scratch / subdir better. - Allow CFOUR_BASIS. - Consider forcing some tighter convcrit, c4 and p4. - mixed ang/bohr signals. - error by converting to ang in psi?. - Expand CURRENT DIPOLE XYZ beyond SCF. - Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE. - switch C --> S/R with recovery using shelf. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:987,Safety,recover,recovery,987,"""""""Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. :type c4full: :ref:`boolean <op_py_boolean>`; :param c4full: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether when *name* indicates a Cfour method and *mode*; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Presently uses all gradients. Could mix in analytic 2nd-derivs. - Collect resutls. - Manage scratch / subdir better. - Allow CFOUR_BASIS. - Consider forcing some tighter convcrit, c4 and p4. - mixed ang/bohr signals. - error by converting to ang in psi?. - Expand CURRENT DIPOLE XYZ beyond SCF. - Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE. - switch C --> S/R with recovery using shelf. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:42,Deployability,continuous,continuous,42,"# Switches for route through code- S/R or continuous & Psi4 or Cfour gradients",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:15,Integrability,rout,route,15,"# Switches for route through code- S/R or continuous & Psi4 or Cfour gradients",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:50,Availability,checkpoint,checkpoint,50,"# Open data persistence shelf- vital for sowreap, checkpoint for continuouw",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:314,Security,validat,validated,314,"""""""Evaluate the output file status of jobs in *zmats* which should; exist at *dir* + '/' + prefix + '-' + job + '.out'. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean *isOk* signals whether all *zmats* have completed and,; if *validate_func* present, are validated. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:375,Availability,error,error,375,"""""""For a given output file whose path is constructed with; *dir* + '/' + *prefix* + '-' + *item* + '.out', tests that the file; exists and has *prefix* RESULTS lines for each piece of information; requested in list *keys* and that those lines correspond to the; appropriate *linkage* and *item*. Returns *keys* along with their; scanned values in dict *reapings*, along with error and success; messages in *instructions* and a boolean *isOk* indicating whether; all *keys* reaped sucessfully. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:394,Integrability,message,messages,394,"""""""For a given output file whose path is constructed with; *dir* + '/' + *prefix* + '-' + *item* + '.out', tests that the file; exists and has *prefix* RESULTS lines for each piece of information; requested in list *keys* and that those lines correspond to the; appropriate *linkage* and *item*. Returns *keys* along with their; scanned values in dict *reapings*, along with error and success; messages in *instructions* and a boolean *isOk* indicating whether; all *keys* reaped sucessfully. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py:107,Testability,test,tests,107,"""""""For a given output file whose path is constructed with; *dir* + '/' + *prefix* + '-' + *item* + '.out', tests that the file; exists and has *prefix* RESULTS lines for each piece of information; requested in list *keys* and that those lines correspond to the; appropriate *linkage* and *item*. Returns *keys* along with their; scanned values in dict *reapings*, along with error and success; messages in *instructions* and a boolean *isOk* indicating whether; all *keys* reaped sucessfully. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/wrappers_cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/wrappers_cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py:2127,Testability,log,logical,2127," method in the standard indented format, printed in output. ""description"": """", description of the method, printed in output. ""xc_functionals"": { definition of a full XC functional from LibXC; ""XC_METHOD_NAME"": {} must match a LibXC method, see libxc_functionals.py for examples; }, if present, the x/c_functionals and x_hf/c_mp2 parameters are not read!. ""x_functionals"": { definition of X contributions; ""X_METHOD_NAME"": { must match a LibXC method; ""alpha"": 1.0, coefficient for (global) GGA exchange, by default 1.0; ""omega"": 0.0, range-separation parameter; ""use_libxc"": False whether ""x_hf"" parameters should be set from LibXC values for this method; ""tweak"": {}, tweak the underlying functional; },. ""x_hf"": { definition of HF exchange for hybrid functionals; ""alpha"": 0.0, coefficient for (global) HF exchange, by default none; ""beta"": 0.0, coefficient for long range HF exchange; ""omega"": 0.0, range separation parameters; ""use_libxc"": ""X_METHOD_NAME"" reads the above 3 values from specified X functional; },. ""c_functionals"": { definition of C contributions; ""C_METHOD_NAME"": { must match a LibXC method; ""alpha"": 1.0, coefficient for (global) GGA correlation, by default 1.0; ""tweak"": {}, tweak the underlying functional; },. ""c_mp2"": { definition of MP2 correlation double hybrid functionals; ""alpha"": 0.0, coefficient for MP2 correlation, by default none; ""ss"": 0.0, coefficient for same spin correlation in SCS methods, forces alpha = 1.0; ""os"": 0.0, coefficient for opposite spin correlation in SCS methods, forces alpha = 1.0; },. ""dispersion"": { definition of dispersion corrections; ""type"": """", dispersion type - ""d2"", ""d3zero"", ""d3bj"" etc., see empirical_dispersion.py; ""params"": {}, parameters for the dispersion correction; ""nlc"": False (optional) logical switch to turn off nlc (e.g. VV10) correction defined by LibXC; ""citation"": """", special reference for the dispersion correction parameters, appended to output; (if defined in driver, not if defined in input file); },; }; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/dft/dft_builder.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py:34,Testability,log,logic,34,"# if not, build it from dashparam logic if possible",MatchSource.CODE_COMMENT,psi4/driver/procrouting/dft/dft_builder.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py:121,Safety,detect,detecting,121,"""""""; This checks the consistency of the definitions of exchange and correlation components; of the functional, including detecting duplicate requests for LibXC params, inconsistent; requests for HF exchange and missing correlation. It also makes sure that names of methods; passed in using dft_functional={} syntax have a non-implemented name.; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/dft/dft_builder.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py:6,Safety,sanity check,sanity checks,6,"# 1a) sanity checks definition of xc_functionals",MatchSource.CODE_COMMENT,psi4/driver/procrouting/dft/dft_builder.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py:147,Testability,test,tests,147,"# 3) checks would be caught at runtime or involve only formatting.; # included here to preempt driver definition problems, if specific fctl not in tests.; # 3a) check formatting for citation",MatchSource.CODE_COMMENT,psi4/driver/procrouting/dft/dft_builder.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py:59,Safety,detect,detected,59,"# The value of alpha is locked to 1.0 C++-side when SCS is detected",MatchSource.CODE_COMMENT,psi4/driver/procrouting/dft/dft_builder.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/dft_builder.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/superfunctionals.py:9,Security,validat,validate,9,"# Can we validate dispersion?",MatchSource.CODE_COMMENT,psi4/driver/procrouting/dft/superfunctionals.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/superfunctionals.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/superfunctionals.py:156,Safety,detect,detected,156,"# add VV10 correlation to any functional or modify existing; # custom procedures using name 'scf' without any quadrature grid like HF will fail and are not detected",MatchSource.CODE_COMMENT,psi4/driver/procrouting/dft/superfunctionals.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/superfunctionals.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/libcubeprop/cubeprop.py:14,Integrability,wrap,wrapper,14,"""""""Filesystem wrapper for CubeProperties::raw_compute_properties.""""""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/libcubeprop/cubeprop.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/libcubeprop/cubeprop.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/augmented_hessian.py:174,Deployability,update,update,174,"""""""; Solve the generalized eigenvalue problem:; | 0, g.T | | 1/l | = | 1/l |; | g, H/l | | X | = e | X |. Where g is the gradient, H is the orbital Hessian, X is our orbital update step,; and l is the eigenvalue. In some ways this is the subspace reduction of the full MCSCF Hessian where the; CC part has been solved exactly. When this occurs the OC and CO elements collapse; to the above and the CC Hessian becomes diagonally dominant. We can solve this through Davidson iterations where we condition the edges. It's the; Pulay equations all over again, just iterative. Watch out for lambdas that are zero. Looking for the lambda that is ~1. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/mcscf/augmented_hessian.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/augmented_hessian.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py:17,Energy Efficiency,energy,energy,17,"# Start with SCF energy and other params",MatchSource.CODE_COMMENT,psi4/driver/procrouting/mcscf/mcscf_solver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py:18,Availability,error,error,18,"# Figure out DIIS error vector",MatchSource.CODE_COMMENT,psi4/driver/procrouting/mcscf/mcscf_solver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py:24,Deployability,continuous,continuous,24,"# Build the rotation by continuous updates",MatchSource.CODE_COMMENT,psi4/driver/procrouting/mcscf/mcscf_solver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py:35,Deployability,update,updates,35,"# Build the rotation by continuous updates",MatchSource.CODE_COMMENT,psi4/driver/procrouting/mcscf/mcscf_solver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py:29,Deployability,update,update,29,"# Retransform intragrals and update CI coeffs., OPDM, and TPDM",MatchSource.CODE_COMMENT,psi4/driver/procrouting/mcscf/mcscf_solver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py:12,Energy Efficiency,energy,energy,12,"# Set final energy",MatchSource.CODE_COMMENT,psi4/driver/procrouting/mcscf/mcscf_solver.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/mcscf_solver.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:146,Performance,cache,cache,146,"""""""Adds new elements to a given key. Parameters; ----------; pkey : str; Product label; new_elements : list of arrays; New products to add to the cache. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:30,Usability,clear,clearing,30,"""""""Resets the ProductCache by clearing all data.; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:24,Performance,cache,cached,24,"""""""Return the number of cached products; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:576,Energy Efficiency,adapt,adapted,576,"""""""Engine for R(HF/KS) products. Fulfills the API required by :class:`~psi4.driver.p4util.solvers.SolverEngine`. Parameters; ----------; wfn : :py:class:`psi4.core.Wavefunction`; The converged SCF wfn; ptype : {'rpa', 'tda'}; The product type to be evaluated. When ``ptype == 'rpa'``. The return of `compute_products` will be as; expected by :func:`~psi4.driver.p4util.solvers.hamiltonian_solver`, when ``ptype == 'tda'`` the return of; compute_products will be as expected by :func:`~psi4.driver.p4util.solvers.davidson_solver`.; triplet : bool , optional; Are products spin-adapted for triplet excitations?; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:576,Modifiability,adapt,adapted,576,"""""""Engine for R(HF/KS) products. Fulfills the API required by :class:`~psi4.driver.p4util.solvers.SolverEngine`. Parameters; ----------; wfn : :py:class:`psi4.core.Wavefunction`; The converged SCF wfn; ptype : {'rpa', 'tda'}; The product type to be evaluated. When ``ptype == 'rpa'``. The return of `compute_products` will be as; expected by :func:`~psi4.driver.p4util.solvers.hamiltonian_solver`, when ``ptype == 'tda'`` the return of; compute_products will be as expected by :func:`~psi4.driver.p4util.solvers.davidson_solver`.; triplet : bool , optional; Are products spin-adapted for triplet excitations?; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:52,Energy Efficiency,energy,energy,52,"""""""Generate a set of guess vectors based on orbital energy differences; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:10,Energy Efficiency,energy,energy,10,"""""""Builds energy denominator; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:10,Energy Efficiency,energy,energy,10,"# Orbital energy differences",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:52,Energy Efficiency,energy,energy,52,"""""""Generate a set of guess vectors based on orbital energy differences; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:11,Deployability,A/B,A/B,11,"""""""Pair up A/B from onel_Hx return""""""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py:10,Energy Efficiency,energy,energy,10,"""""""Builds energy denominator; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:98,Integrability,depend,dependent,98,"# TODO: Split this file into a CPSCF file (frequency-independent case) and TD-SCF file (frequency-dependent case).; # Neither ""half"" of the file uses any function from the other ""half"". The danger is what could happen to import paths...",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:34,Security,access,access,34,"# zip vectors, responses for easy access",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:187,Energy Efficiency,reduce,reduced,187,"# ret = {""eigvals"": ee, ""eigvecs"": (rvecs, rvecs), ""stats"": stats} (TDA); # ret = {""eigvals"": ee, ""eigvecs"": (rvecs, lvecs), ""stats"": stats} (RPA); # N.B.: Eigvecs and eigvals are of the reduced, non-Hermitian eigenvalue problem, not the; # original Hermitian pseudo-eigenvalue problem. To convert to quantities of original problem:; # ee = omega^2; # rvecs = X + Y; # lvecs = X - Y",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:8,Availability,error,error,8,"# raise error",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:44,Energy Efficiency,energy,energy,44,"# flatten dictionary: helps with sorting by energy; # also append state symmetry to return value",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:159,Energy Efficiency,charge,charge,159,"# NOTE The signs for rotatory strengths are opposite WRT the cited paper.; # This is because Psi4 defines length-gauge dipole integral to include the electron charge (-1.0); # length gauge rotatory strength",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:2,Security,validat,validate,2,"# validate states",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:34,Security,validat,validate,34,"# list of states per irrep given, validate it",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:106,Security,validat,validate,106,"# determine how many states per irrep to seek and apportion them between singlets/triplets and irreps.; # validate calculation",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:66,Availability,toler,tolerance,66,"# => Tie maximum number of vectors per root to requested residual tolerance <=; # This gives 200 vectors per root with default tolerance",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:127,Availability,toler,tolerance,127,"# => Tie maximum number of vectors per root to requested residual tolerance <=; # This gives 200 vectors per root with default tolerance",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:25,Energy Efficiency,energy,energy,25,"# sort excited states by energy <=",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py:12,Modifiability,variab,variables,12,"# All TDSCF variables sare saved to the wavefunction here. The driver pushes them to globals.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/response/scf_response.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/scf_response.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/fisapt_proc.py:22,Energy Efficiency,energy,energy,22,"""""""Computes the FSAPT energy. FISAPT::compute_energy""""""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/fisapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/fisapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/fisapt_proc.py:14,Integrability,wrap,wrapper,14,"""""""Filesystem wrapper for FISAPT::plot.""""""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/fisapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/fisapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_jk_terms.py:25,Performance,cache,cache,25,"""""""; Constructs the DCBS cache data required to compute ELST/EXCH/IND; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_jk_terms.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_jk_terms.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_jk_terms.py:2,Performance,cache,cache,2,"# cache[""V_A""].axpy(1.0, wfn_A.Va())",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_jk_terms.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_jk_terms.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_jk_terms.py:2,Performance,cache,cache,2,"# cache[""V_B""].axpy(1.0, wfn_B.Va()); # Anything else we might need",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_jk_terms.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_jk_terms.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_jk_terms.py:57,Performance,cache,cache,57,"""""""; Compute Ind20 and Exch-Ind20 quantities from a SAPT cache and JK object.; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_jk_terms.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_jk_terms.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py:8,Performance,cache,cache,8,"# Build cache",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py:64,Energy Efficiency,energy,energy,64,"""""""; The primary SAPT(DFT) algorithm to compute the interaction energy once the wavefunctions have been built. Example; -------. dimer = psi4.geometry('''; Ne; --; Ar 1 6.5; units bohr; '''). psi4.set_options({""BASIS"": ""aug-cc-pVDZ""}). # Prepare the fragments; sapt_dimer, monomerA, monomerB = psi4.proc_util.prepare_sapt_molecule(sapt_dimer, ""dimer""). # Run the first monomer; set DFT_GRAC_SHIFT 0.203293; wfnA, energyA = psi4.energy(""PBE0"", monomer=monomerA, return_wfn=True). # Run the second monomer; set DFT_GRAC_SHIFT 0.138264; wfnB, energyB = psi4.energy(""PBE0"", monomer=monomerB, return_wfn=True). # Build the dimer wavefunction; wfnD = psi4.core.Wavefunction.build(sapt_dimer). # Compute SAPT(DFT) from the provided wavefunctions; data = psi4.procrouting.sapt.sapt_dft(wfnD, wfnA, wfnB); """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py:413,Energy Efficiency,energy,energyA,413,"""""""; The primary SAPT(DFT) algorithm to compute the interaction energy once the wavefunctions have been built. Example; -------. dimer = psi4.geometry('''; Ne; --; Ar 1 6.5; units bohr; '''). psi4.set_options({""BASIS"": ""aug-cc-pVDZ""}). # Prepare the fragments; sapt_dimer, monomerA, monomerB = psi4.proc_util.prepare_sapt_molecule(sapt_dimer, ""dimer""). # Run the first monomer; set DFT_GRAC_SHIFT 0.203293; wfnA, energyA = psi4.energy(""PBE0"", monomer=monomerA, return_wfn=True). # Run the second monomer; set DFT_GRAC_SHIFT 0.138264; wfnB, energyB = psi4.energy(""PBE0"", monomer=monomerB, return_wfn=True). # Build the dimer wavefunction; wfnD = psi4.core.Wavefunction.build(sapt_dimer). # Compute SAPT(DFT) from the provided wavefunctions; data = psi4.procrouting.sapt.sapt_dft(wfnD, wfnA, wfnB); """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py:428,Energy Efficiency,energy,energy,428,"""""""; The primary SAPT(DFT) algorithm to compute the interaction energy once the wavefunctions have been built. Example; -------. dimer = psi4.geometry('''; Ne; --; Ar 1 6.5; units bohr; '''). psi4.set_options({""BASIS"": ""aug-cc-pVDZ""}). # Prepare the fragments; sapt_dimer, monomerA, monomerB = psi4.proc_util.prepare_sapt_molecule(sapt_dimer, ""dimer""). # Run the first monomer; set DFT_GRAC_SHIFT 0.203293; wfnA, energyA = psi4.energy(""PBE0"", monomer=monomerA, return_wfn=True). # Run the second monomer; set DFT_GRAC_SHIFT 0.138264; wfnB, energyB = psi4.energy(""PBE0"", monomer=monomerB, return_wfn=True). # Build the dimer wavefunction; wfnD = psi4.core.Wavefunction.build(sapt_dimer). # Compute SAPT(DFT) from the provided wavefunctions; data = psi4.procrouting.sapt.sapt_dft(wfnD, wfnA, wfnB); """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py:540,Energy Efficiency,energy,energyB,540,"""""""; The primary SAPT(DFT) algorithm to compute the interaction energy once the wavefunctions have been built. Example; -------. dimer = psi4.geometry('''; Ne; --; Ar 1 6.5; units bohr; '''). psi4.set_options({""BASIS"": ""aug-cc-pVDZ""}). # Prepare the fragments; sapt_dimer, monomerA, monomerB = psi4.proc_util.prepare_sapt_molecule(sapt_dimer, ""dimer""). # Run the first monomer; set DFT_GRAC_SHIFT 0.203293; wfnA, energyA = psi4.energy(""PBE0"", monomer=monomerA, return_wfn=True). # Run the second monomer; set DFT_GRAC_SHIFT 0.138264; wfnB, energyB = psi4.energy(""PBE0"", monomer=monomerB, return_wfn=True). # Build the dimer wavefunction; wfnD = psi4.core.Wavefunction.build(sapt_dimer). # Compute SAPT(DFT) from the provided wavefunctions; data = psi4.procrouting.sapt.sapt_dft(wfnD, wfnA, wfnB); """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py:555,Energy Efficiency,energy,energy,555,"""""""; The primary SAPT(DFT) algorithm to compute the interaction energy once the wavefunctions have been built. Example; -------. dimer = psi4.geometry('''; Ne; --; Ar 1 6.5; units bohr; '''). psi4.set_options({""BASIS"": ""aug-cc-pVDZ""}). # Prepare the fragments; sapt_dimer, monomerA, monomerB = psi4.proc_util.prepare_sapt_molecule(sapt_dimer, ""dimer""). # Run the first monomer; set DFT_GRAC_SHIFT 0.203293; wfnA, energyA = psi4.energy(""PBE0"", monomer=monomerA, return_wfn=True). # Run the second monomer; set DFT_GRAC_SHIFT 0.138264; wfnB, energyB = psi4.energy(""PBE0"", monomer=monomerB, return_wfn=True). # Build the dimer wavefunction; wfnD = psi4.core.Wavefunction.build(sapt_dimer). # Compute SAPT(DFT) from the provided wavefunctions; data = psi4.procrouting.sapt.sapt_dft(wfnD, wfnA, wfnB); """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py:13,Performance,cache,cache,13,"# Build SAPT cache",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py:6,Modifiability,variab,variables,6,"# Set variables",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_proc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_proc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_sf_terms.py:35,Integrability,contract,contract,35,"# Figure out the small MO index to contract to",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_sf_terms.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_sf_terms.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_sf_terms.py:7,Usability,simpl,simple,7,"""""""; A simple chain dot function unpacked from *args.; """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_sf_terms.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_sf_terms.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_util.py:8,Energy Efficiency,energy,energy,8,"# Total energy",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_util.py:8,Energy Efficiency,energy,energy,8,"# Total energy",MatchSource.CODE_COMMENT,psi4/driver/procrouting/sapt/sapt_util.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/sapt_util.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:8,Testability,log,logging,8,"#import logging; #logger = logging.getLogger(""scf.scf_iterator""); #logger.setLevel(logging.DEBUG); # Q: I expect more local settings of options for part of SCF.; # For convcrit, do we want:; # (A) easy to grep; # with p4util.OptionsStateCM(['SCF', 'E_CONVERGENCE'], ['SCF', 'D_CONVERGENCE']):; # core.set_local_option('SCF', 'E_CONVERGENCE', 1.e-5); # core.set_local_option('SCF', 'D_CONVERGENCE', 1.e-4); # self.iterations(); #; # or (B) functional. options never touched; # self.iterations(e_conv=1.e-5, d_conv=1.e-4)",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:18,Testability,log,logger,18,"#import logging; #logger = logging.getLogger(""scf.scf_iterator""); #logger.setLevel(logging.DEBUG); # Q: I expect more local settings of options for part of SCF.; # For convcrit, do we want:; # (A) easy to grep; # with p4util.OptionsStateCM(['SCF', 'E_CONVERGENCE'], ['SCF', 'D_CONVERGENCE']):; # core.set_local_option('SCF', 'E_CONVERGENCE', 1.e-5); # core.set_local_option('SCF', 'D_CONVERGENCE', 1.e-4); # self.iterations(); #; # or (B) functional. options never touched; # self.iterations(e_conv=1.e-5, d_conv=1.e-4)",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:27,Testability,log,logging,27,"#import logging; #logger = logging.getLogger(""scf.scf_iterator""); #logger.setLevel(logging.DEBUG); # Q: I expect more local settings of options for part of SCF.; # For convcrit, do we want:; # (A) easy to grep; # with p4util.OptionsStateCM(['SCF', 'E_CONVERGENCE'], ['SCF', 'D_CONVERGENCE']):; # core.set_local_option('SCF', 'E_CONVERGENCE', 1.e-5); # core.set_local_option('SCF', 'D_CONVERGENCE', 1.e-4); # self.iterations(); #; # or (B) functional. options never touched; # self.iterations(e_conv=1.e-5, d_conv=1.e-4)",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:67,Testability,log,logger,67,"#import logging; #logger = logging.getLogger(""scf.scf_iterator""); #logger.setLevel(logging.DEBUG); # Q: I expect more local settings of options for part of SCF.; # For convcrit, do we want:; # (A) easy to grep; # with p4util.OptionsStateCM(['SCF', 'E_CONVERGENCE'], ['SCF', 'D_CONVERGENCE']):; # core.set_local_option('SCF', 'E_CONVERGENCE', 1.e-5); # core.set_local_option('SCF', 'D_CONVERGENCE', 1.e-4); # self.iterations(); #; # or (B) functional. options never touched; # self.iterations(e_conv=1.e-5, d_conv=1.e-4)",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:83,Testability,log,logging,83,"#import logging; #logger = logging.getLogger(""scf.scf_iterator""); #logger.setLevel(logging.DEBUG); # Q: I expect more local settings of options for part of SCF.; # For convcrit, do we want:; # (A) easy to grep; # with p4util.OptionsStateCM(['SCF', 'E_CONVERGENCE'], ['SCF', 'D_CONVERGENCE']):; # core.set_local_option('SCF', 'E_CONVERGENCE', 1.e-5); # core.set_local_option('SCF', 'D_CONVERGENCE', 1.e-4); # self.iterations(); #; # or (B) functional. options never touched; # self.iterations(e_conv=1.e-5, d_conv=1.e-4)",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:154,Energy Efficiency,energy,energy,154,"""""""Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:72,Integrability,wrap,wrapper,72,"""""""Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:63,Usability,simpl,simply,63,"""""""Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:2,Energy Efficiency,energy,energy,2,"# energy = 0.0; # A P::e fn to either throw or protest upon nonconvergence; # die_if_not_converged()",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:31,Performance,perform,perform,31,"# Initialize all integrals and perform the first guess",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:48,Performance,cache,cache,48,"# EFP: Add in permanent moment contribution and cache",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:31,Availability,redundant,redundant,31,"#self.MOM_performed_ = False # redundant from common_init()",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:31,Safety,redund,redundant,31,"#self.MOM_performed_ = False # redundant from common_init()",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:31,Energy Efficiency,energy,energy,31,"# EFP: Add efp contribution to energy",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:40,Deployability,update,update,40,"# After we've built the new D, damp the update",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:12,Performance,cache,cached,12,"# clear any cached matrices associated with incremental fock construction; # the change in the screening spoils the linearity in the density matrix",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:2,Usability,clear,clear,2,"# clear any cached matrices associated with incremental fock construction; # the change in the screening spoils the linearity in the density matrix",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:93,Energy Efficiency,energy,energy,93,"""""""Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:161,Energy Efficiency,energy,energy,161,"""""""Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:361,Testability,log,logic,361,"#psio = core.IO.shared_object(); #psio.open(constants.PSIF_SO_TEI, 1) # PSIO_OPEN_OLD; #try:; # psio.tocscan(constants.PSIF_SO_TEI, ""IWL Buffers""); #except TypeError:; # # ""IWL Buffers"" actually found but psio_tocentry can't be returned to Py; # psio.close(constants.PSIF_SO_TEI, 1); #else:; # # tocscan returned None; # psio.close(constants.PSIF_SO_TEI, 1); # logic above foiled by psio_tocentry not returning None<--nullptr in pb11 2.2.1; # so forcibly recomputing for now until stability revamp",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:33,Modifiability,layers,layers,33,"# Q: Not worth exporting all the layers of psio, right?",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:96,Modifiability,variab,variables,96,"# Orbitals are always saved, in case an MO guess is requested later; # save_orbitals(); # Shove variables into global space",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:46,Modifiability,variab,variables,46,"#if abs(ed) > 1.0e-14:; # for pv, pvv in self.variables().items():; # if abs(pvv - ed) < 1.0e-14:; # if pv.endswith('DISPERSION CORRECTION ENERGY') and pv.startswith(self.functional().name()):; # fctl_plus_disp_name = pv.split()[0]; # self.set_variable(fctl_plus_disp_name + ' TOTAL ENERGY', dft_energy) # overwritten later for DH; #else:; # self.set_variable(self.functional().name() + ' TOTAL ENERGY', dft_energy) # overwritten later for DH",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py:98,Availability,avail,available,98,"# small version does not print Nalpha,Nbeta,Ndocc,Nsocc, e.g. for SAD guess where they are not; # available",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/scf_iterator.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/scf_iterator.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py:63,Availability,redundant,redundant,63,"# Only the inact-act, inact-vir, and act-vir rotations are non-redundant",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/subclass_methods.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py:63,Safety,redund,redundant,63,"# Only the inact-act, inact-vir, and act-vir rotations are non-redundant",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/subclass_methods.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py:478,Security,validat,validate,478,"# => Validate options <=; # TODO: Stability analysis is supported for any functional UKS functional where its one-; # and two-body Hamiltonian matrix-vector products are implemented. This is true for LDA; # at least, but probably not other functionals. This restriction exists for now because; # we've always had it, but we should lift it as much as we can and implement more matrix-; # vector products so we can lift it further.; # TODO: It should be up to the SolverEngine to validate whether it can do Hx products for the input wfn.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/subclass_methods.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py:798,Energy Efficiency,energy,energy,798,"# => Follow instability or print out that there's nothing left to do <=; # Legacy instability took orbital steps based on the following algorithm:; # * Normalize the orbital eigenvector X to 1; # * Apply exp(t(X-X^)) for t = lambda pi / 2 (defaults to lambda = 0.5); # * If that step returns to the same minimum, increment lambda (defaulting to 0.2) and repeat previous step; # Rigorous mathematical analysis on the true minimum is hard to come by: the rotated orbitals need not even be periodic in t.; # (See DOI 10.1063/1.467504 eq. 8 for explicit formulas. You can show non-periodicity in general in the simple case that P^1/2 is 2-by-2 diagonal.); # As such, this algorithm is best regarded as a first attempt open to improvements.; # Example improvement: if the orbital rotation increases the energy, take a smaller step, not a larger.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/subclass_methods.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py:607,Usability,simpl,simple,607,"# => Follow instability or print out that there's nothing left to do <=; # Legacy instability took orbital steps based on the following algorithm:; # * Normalize the orbital eigenvector X to 1; # * Apply exp(t(X-X^)) for t = lambda pi / 2 (defaults to lambda = 0.5); # * If that step returns to the same minimum, increment lambda (defaulting to 0.2) and repeat previous step; # Rigorous mathematical analysis on the true minimum is hard to come by: the rotated orbitals need not even be periodic in t.; # (See DOI 10.1063/1.467504 eq. 8 for explicit formulas. You can show non-periodicity in general in the simple case that P^1/2 is 2-by-2 diagonal.); # As such, this algorithm is best regarded as a first attempt open to improvements.; # Example improvement: if the orbital rotation increases the energy, take a smaller step, not a larger.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/scf_proc/subclass_methods.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/subclass_methods.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/ddx.py:101,Safety,safe,safe,101,"# This overrides some DFT grid parameters just for the integrals; # needed for DDX. The defaults are safe to avoid people from falling; # into traps if they change their DFT grid setup.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/solvent/ddx.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/ddx.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/ddx.py:109,Safety,avoid,avoid,109,"# This overrides some DFT grid parameters just for the integrals; # needed for DDX. The defaults are safe to avoid people from falling; # into traps if they change their DFT grid setup.",MatchSource.CODE_COMMENT,psi4/driver/procrouting/solvent/ddx.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/ddx.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/ddx.py:22,Availability,avail,available,22,"# Non-equilibrium not available",MatchSource.CODE_COMMENT,psi4/driver/procrouting/solvent/ddx.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/ddx.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/ddx.py:20,Energy Efficiency,energy,energy,20,"# Compute solvation energy",MatchSource.CODE_COMMENT,psi4/driver/procrouting/solvent/ddx.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/ddx.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py:93,Deployability,release,release,93,"# set options; # * 'chtr', 'qm_exch', 'qm_disp', 'qm_chtr' may be enabled in a future libefp release",MatchSource.CODE_COMMENT,psi4/driver/procrouting/solvent/efp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py:515,Energy Efficiency,charge,charges,515,"""""""Computes array of the EFP contribution to the potential felt by; QM atoms due to permanent EFP moments. Used for SCF procedure. Parameters; ----------; mol : :py:class:`psi4.core.Molecule`; Source of quantum mechanical atoms. As its `EFP` member data, contains; a :py:class:`pylibefp.core.efp` object that is the source and computer; of EFP fragments.; mints : `psi4.core.MintsHelper`; Integral computer.; verbose : int, optional; Whether to print out multipole coordinates and values. 0: no printing.; 1: print charges and dipoles. 2: additionally print quadrupoles and octupoles. Returns; -------; ndarray; (nbf, nbf) EFP charge through octupole contribution to the potential. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/solvent/efp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py:627,Energy Efficiency,charge,charge,627,"""""""Computes array of the EFP contribution to the potential felt by; QM atoms due to permanent EFP moments. Used for SCF procedure. Parameters; ----------; mol : :py:class:`psi4.core.Molecule`; Source of quantum mechanical atoms. As its `EFP` member data, contains; a :py:class:`pylibefp.core.efp` object that is the source and computer; of EFP fragments.; mints : `psi4.core.MintsHelper`; Integral computer.; verbose : int, optional; Whether to print out multipole coordinates and values. 0: no printing.; 1: print charges and dipoles. 2: additionally print quadrupoles and octupoles. Returns; -------; ndarray; (nbf, nbf) EFP charge through octupole contribution to the potential. """"""",MatchSource.CODE_COMMENT,psi4/driver/procrouting/solvent/efp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py:53,Energy Efficiency,charge,charge,53,"# get multipoles count, pos'n, values from libefp; # charge + dipoles + quadrupoles + octupoles = 20",MatchSource.CODE_COMMENT,psi4/driver/procrouting/solvent/efp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py:33,Energy Efficiency,charge,charge,33,"# add frag atom Z into multipole charge (when pos'n of atom matches mp)",MatchSource.CODE_COMMENT,psi4/driver/procrouting/solvent/efp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/efp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/align.py:581,Security,hash,hashes,581,"""""""Use Kabsch algorithm to find best alignment of geometry `cgeom` onto; `rgeom` while sampling atom mappings restricted by `runiq` and `cuniq`. Parameters; ----------; rgeom : ndarray of float; (nat, 3) array of reference/target/unchanged geometry. Assumed [a0]; for RMSD purposes.; cgeom : ndarray of float; (nat, 3) array of concern/changeable geometry. Assumed [a0] for RMSD; purposes. Must have same nat, units, and atom content as rgeom.; runiq : ndarray of str; (nat,) array indicating which rows (atoms) in `rgeom` are shuffleable; without changing the molecule. Generally hashes of element symbol and; mass are used, but could be as simple as ['C', 'H', 'H', 'D', 'H'] for; monodeuterated methane.; cuniq : ndarray of str; (nat,) array indicating which rows (atoms) in `cgeom` are shuffleable.; See `runiq` for more details. Strings and count in `cuniq` must match; `runiq`. That is, `sorted(cuniq) == sorted(runiq)`.; do_plot : bool, optional; Pops up a mpl plot showing before, after, and ref geometries.; verbose : int, optional; Quantity of printing. 0 to silence.; atoms_map : bool, optional; Whether atom1 of rgeom already corresponds to atom1 of cgeom and so on.; If `True`, no resorting will be run, parameters `runiq` and `cuniq`; may be passed as `None`, and much time will be saved.; run_resorting : bool, optional; Run the resorting machinery even if unnecessary because `atoms_map=True`.; mols_align : bool or float, optional; Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If `True`, procedure is truncated when RMSD condition met, saving time.; If float, convcrit at which search for minimium truncates.; run_to_completion : bool, optional; Run reorderings to completion (past RMSD = 0) even if unnecessary because; `mols_align=True`. Used to test worst-case timings.; uno_cutoff : float, optional; TODO; run_mirror : bool, optional; Run alternate geometries potentially allowing best match",MatchSource.CODE_COMMENT,psi4/driver/qcdb/align.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/align.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/align.py:1854,Testability,test,test,1854,"and atom content as rgeom.; runiq : ndarray of str; (nat,) array indicating which rows (atoms) in `rgeom` are shuffleable; without changing the molecule. Generally hashes of element symbol and; mass are used, but could be as simple as ['C', 'H', 'H', 'D', 'H'] for; monodeuterated methane.; cuniq : ndarray of str; (nat,) array indicating which rows (atoms) in `cgeom` are shuffleable.; See `runiq` for more details. Strings and count in `cuniq` must match; `runiq`. That is, `sorted(cuniq) == sorted(runiq)`.; do_plot : bool, optional; Pops up a mpl plot showing before, after, and ref geometries.; verbose : int, optional; Quantity of printing. 0 to silence.; atoms_map : bool, optional; Whether atom1 of rgeom already corresponds to atom1 of cgeom and so on.; If `True`, no resorting will be run, parameters `runiq` and `cuniq`; may be passed as `None`, and much time will be saved.; run_resorting : bool, optional; Run the resorting machinery even if unnecessary because `atoms_map=True`.; mols_align : bool or float, optional; Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If `True`, procedure is truncated when RMSD condition met, saving time.; If float, convcrit at which search for minimium truncates.; run_to_completion : bool, optional; Run reorderings to completion (past RMSD = 0) even if unnecessary because; `mols_align=True`. Used to test worst-case timings.; uno_cutoff : float, optional; TODO; run_mirror : bool, optional; Run alternate geometries potentially allowing best match to `rgeom`; from mirror image of `cgeom`. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns; -------; float, tuple; First item is RMSD [A] between `rgeom` and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from `cgeom` and the optimally aligned geometry. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/align.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/align.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/align.py:642,Usability,simpl,simple,642,"""""""Use Kabsch algorithm to find best alignment of geometry `cgeom` onto; `rgeom` while sampling atom mappings restricted by `runiq` and `cuniq`. Parameters; ----------; rgeom : ndarray of float; (nat, 3) array of reference/target/unchanged geometry. Assumed [a0]; for RMSD purposes.; cgeom : ndarray of float; (nat, 3) array of concern/changeable geometry. Assumed [a0] for RMSD; purposes. Must have same nat, units, and atom content as rgeom.; runiq : ndarray of str; (nat,) array indicating which rows (atoms) in `rgeom` are shuffleable; without changing the molecule. Generally hashes of element symbol and; mass are used, but could be as simple as ['C', 'H', 'H', 'D', 'H'] for; monodeuterated methane.; cuniq : ndarray of str; (nat,) array indicating which rows (atoms) in `cgeom` are shuffleable.; See `runiq` for more details. Strings and count in `cuniq` must match; `runiq`. That is, `sorted(cuniq) == sorted(runiq)`.; do_plot : bool, optional; Pops up a mpl plot showing before, after, and ref geometries.; verbose : int, optional; Quantity of printing. 0 to silence.; atoms_map : bool, optional; Whether atom1 of rgeom already corresponds to atom1 of cgeom and so on.; If `True`, no resorting will be run, parameters `runiq` and `cuniq`; may be passed as `None`, and much time will be saved.; run_resorting : bool, optional; Run the resorting machinery even if unnecessary because `atoms_map=True`.; mols_align : bool or float, optional; Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If `True`, procedure is truncated when RMSD condition met, saving time.; If float, convcrit at which search for minimium truncates.; run_to_completion : bool, optional; Run reorderings to completion (past RMSD = 0) even if unnecessary because; `mols_align=True`. Used to test worst-case timings.; uno_cutoff : float, optional; TODO; run_mirror : bool, optional; Run alternate geometries potentially allowing best match",MatchSource.CODE_COMMENT,psi4/driver/qcdb/align.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/align.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py:101,Deployability,install,installed,101,"""""""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislist.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py:15,Performance,load,load,15,"""""""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislist.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py:149,Deployability,install,installed,149,"""""""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislist.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py:99,Deployability,install,installed,99,"""""""Function to validate if the orbital basis *name* in coded or; ornate form is in Psi4's standard installed bases list. ``None``; is returned if the orbital basis is not found. Return triplet of name for mol hash key, gbs file, post-processing function. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislist.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py:15,Security,validat,validate,15,"""""""Function to validate if the orbital basis *name* in coded or; ornate form is in Psi4's standard installed bases list. ``None``; is returned if the orbital basis is not found. Return triplet of name for mol hash key, gbs file, post-processing function. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislist.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py:209,Security,hash,hash,209,"""""""Function to validate if the orbital basis *name* in coded or; ornate form is in Psi4's standard installed bases list. ``None``; is returned if the orbital basis is not found. Return triplet of name for mol hash key, gbs file, post-processing function. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislist.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislist.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py:26,Security,validat,validated,26,"# Here lie practical (non-validated) fitting bases for; # Jensen orbital basis sets",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislistother.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py:26,Security,validat,validated,26,"# Here lie practical (non-validated) fitting bases for; # Pople orbital basis sets",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislistother.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py:144,Availability,error,error,144,"# fitting sets for nZaPa-NR; # Dunnings zeta+1 to be safe, tested on water dimer; # the full aug-JKFIT is possibly too much; #--------SCF-JKFIT error for nZaPa-NR ; # results for GS energies of water dimer:; # delta_jk = E_conv - E_DFJK; # ZaPa zeta 2 : delta_jk = -0.000009 ; # ZaPa zeta 3 : delta_jk = -0.000002 ; # ZaPa zeta 4 : delta_jk = -0.000002 ; # ZaPa zeta 5 : delta_jk = -0.000002 ; # ZaPa zeta 6 : delta_jk = 0.000000 ; # ZaPa zeta 7 : delta_jk = 0.000000 ",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislistother.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py:53,Safety,safe,safe,53,"# fitting sets for nZaPa-NR; # Dunnings zeta+1 to be safe, tested on water dimer; # the full aug-JKFIT is possibly too much; #--------SCF-JKFIT error for nZaPa-NR ; # results for GS energies of water dimer:; # delta_jk = E_conv - E_DFJK; # ZaPa zeta 2 : delta_jk = -0.000009 ; # ZaPa zeta 3 : delta_jk = -0.000002 ; # ZaPa zeta 4 : delta_jk = -0.000002 ; # ZaPa zeta 5 : delta_jk = -0.000002 ; # ZaPa zeta 6 : delta_jk = 0.000000 ; # ZaPa zeta 7 : delta_jk = 0.000000 ",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislistother.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py:59,Testability,test,tested,59,"# fitting sets for nZaPa-NR; # Dunnings zeta+1 to be safe, tested on water dimer; # the full aug-JKFIT is possibly too much; #--------SCF-JKFIT error for nZaPa-NR ; # results for GS energies of water dimer:; # delta_jk = E_conv - E_DFJK; # ZaPa zeta 2 : delta_jk = -0.000009 ; # ZaPa zeta 3 : delta_jk = -0.000002 ; # ZaPa zeta 4 : delta_jk = -0.000002 ; # ZaPa zeta 5 : delta_jk = -0.000002 ; # ZaPa zeta 6 : delta_jk = 0.000000 ; # ZaPa zeta 7 : delta_jk = 0.000000 ",MatchSource.CODE_COMMENT,psi4/driver/qcdb/basislistother.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/basislistother.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py:841,Availability,fault,faulty,841,"""""""Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters; ----------; geom : ndarray of float; (nat x 3) Cartesian coordinates [a0] of real atoms.; elem : ndarray of str or int; (nat) Either element symbols or atomic numbers corresponding to `geom`.; Used for selecting van der Waals radius.; seed_atoms : list (optional); List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: `[[1, 0], [2]]`.; bond_threshold : float (optional); Factor beyond average of covalent radii to determine bond cutoff. Returns; -------; list of lists; Array of atom indices (0-indexed) of detected fragments. See example; below for how to transform inputs. Notes; -----; Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. `seed_atoms` can help. Authors; -------; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Usage; -----; >>> # [1] BFS on large array of jumbled coordinates `geom` and element; >>> # symbols `elem`. Use the output `fragments` to form list of small; >>> # per-fragment arrays.; >>> fragments = BFS(geom, elem); >>> frag_geoms = [geom[fr] for fr in fragments]; >>> frag_elems = [elem[fr] for fr in fragments]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/bfs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py:720,Safety,detect,detected,720,"""""""Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters; ----------; geom : ndarray of float; (nat x 3) Cartesian coordinates [a0] of real atoms.; elem : ndarray of str or int; (nat) Either element symbols or atomic numbers corresponding to `geom`.; Used for selecting van der Waals radius.; seed_atoms : list (optional); List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: `[[1, 0], [2]]`.; bond_threshold : float (optional); Factor beyond average of covalent radii to determine bond cutoff. Returns; -------; list of lists; Array of atom indices (0-indexed) of detected fragments. See example; below for how to transform inputs. Notes; -----; Relies upon van der Waals radii and so faulty for close (especially; hydrogen-bonded) fragments. `seed_atoms` can help. Authors; -------; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Usage; -----; >>> # [1] BFS on large array of jumbled coordinates `geom` and element; >>> # symbols `elem`. Use the output `fragments` to form list of small; >>> # per-fragment arrays.; >>> fragments = BFS(geom, elem); >>> frag_geoms = [geom[fr] for fr in fragments]; >>> frag_elems = [elem[fr] for fr in fragments]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/bfs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py:7,Performance,queue,queues,7,"# bare queues",MatchSource.CODE_COMMENT,psi4/driver/qcdb/bfs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py:7,Performance,queue,queues,7,"# seed queues from intrafrag atom hints",MatchSource.CODE_COMMENT,psi4/driver/qcdb/bfs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py:2,Performance,perform,perform,2,"# perform BFS",MatchSource.CODE_COMMENT,psi4/driver/qcdb/bfs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/bfs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:44,Testability,test,tests,44,"# TODO: BCC; # CI; # QCISD(T); # other ROHF tests; # vcc/ecc",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:39,Energy Efficiency,charge,charge,39,"# Rather a dinky Molecule as no ghost, charge, or multiplicity",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:10,Availability,error,error,10,"# Process error codes",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:171,Energy Efficiency,charge,charge,171,"""""""Parses the contents *grd* of the Cfour GRD file into the gradient; array and coordinate information. The coordinate info is converted; into a rather dinky Molecule (no charge, multiplicity, or fragment),; but this is these coordinates that govern the reading of molecule; orientation by Cfour. Return qcdb.Molecule and gradient array. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:177,Energy Efficiency,charge,charge,177,"""""""Parses the contents of the Cfour ZMAT file into array and; coordinate information. The coordinate info is converted into a; rather dinky Molecule (no fragment, but does read charge, mult,; unit). Return qcdb.Molecule. Written for findif zmat* where; geometry always Cartesian and Bohr. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:173,Integrability,interface,interface,173,"# Ways of modifying a computation; # global: set global c-side option; # local: set local c-side option; # kwarg: set kwarg; # i-local: set global=local c-side option to an interface module; # ro-def: code uses default entirely specified by read_options; # module-def: code uses default that is complex mixture of read_options settings; # i-def: interfaced code uses defaults not entirely expressed in read_options; # driver-def: driver code sets complex defaults; #; # Pure psi4 operation; # kwarg ~= local > global > driver-def > module-def > ro-def; #; # Interfaced psi4 operation; # kwarg ~= i-local > local > global > driver-def > i-def; # P4 infrastructure replacing interfaced infrastructure (mol, basis, mem) where unavoidable overlap in how things are specified (mult in mol{} vs keyword) is treated as a clobber & complain if conflict VS P4 infrastructure as an aliased/convenient leak into interfaced infrastructure (psi) and is strictly no clobber or complain.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:346,Integrability,interface,interfaced,346,"# Ways of modifying a computation; # global: set global c-side option; # local: set local c-side option; # kwarg: set kwarg; # i-local: set global=local c-side option to an interface module; # ro-def: code uses default entirely specified by read_options; # module-def: code uses default that is complex mixture of read_options settings; # i-def: interfaced code uses defaults not entirely expressed in read_options; # driver-def: driver code sets complex defaults; #; # Pure psi4 operation; # kwarg ~= local > global > driver-def > module-def > ro-def; #; # Interfaced psi4 operation; # kwarg ~= i-local > local > global > driver-def > i-def; # P4 infrastructure replacing interfaced infrastructure (mol, basis, mem) where unavoidable overlap in how things are specified (mult in mol{} vs keyword) is treated as a clobber & complain if conflict VS P4 infrastructure as an aliased/convenient leak into interfaced infrastructure (psi) and is strictly no clobber or complain.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:673,Integrability,interface,interfaced,673,"# Ways of modifying a computation; # global: set global c-side option; # local: set local c-side option; # kwarg: set kwarg; # i-local: set global=local c-side option to an interface module; # ro-def: code uses default entirely specified by read_options; # module-def: code uses default that is complex mixture of read_options settings; # i-def: interfaced code uses defaults not entirely expressed in read_options; # driver-def: driver code sets complex defaults; #; # Pure psi4 operation; # kwarg ~= local > global > driver-def > module-def > ro-def; #; # Interfaced psi4 operation; # kwarg ~= i-local > local > global > driver-def > i-def; # P4 infrastructure replacing interfaced infrastructure (mol, basis, mem) where unavoidable overlap in how things are specified (mult in mol{} vs keyword) is treated as a clobber & complain if conflict VS P4 infrastructure as an aliased/convenient leak into interfaced infrastructure (psi) and is strictly no clobber or complain.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:901,Integrability,interface,interfaced,901,"# Ways of modifying a computation; # global: set global c-side option; # local: set local c-side option; # kwarg: set kwarg; # i-local: set global=local c-side option to an interface module; # ro-def: code uses default entirely specified by read_options; # module-def: code uses default that is complex mixture of read_options settings; # i-def: interfaced code uses defaults not entirely expressed in read_options; # driver-def: driver code sets complex defaults; #; # Pure psi4 operation; # kwarg ~= local > global > driver-def > module-def > ro-def; #; # Interfaced psi4 operation; # kwarg ~= i-local > local > global > driver-def > i-def; # P4 infrastructure replacing interfaced infrastructure (mol, basis, mem) where unavoidable overlap in how things are specified (mult in mol{} vs keyword) is treated as a clobber & complain if conflict VS P4 infrastructure as an aliased/convenient leak into interfaced infrastructure (psi) and is strictly no clobber or complain.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:715,Energy Efficiency,energy,energy,715,"# Philosophy break:; # Specification options; # Massaging options; # * No program's defaults should be tampered with w/o provokation; # want all defaults applied to all programs, so p4 scf_conv is 5 and c4 scf_conv is 5; # want separate regimes, so conv 6 covers all the p4 parts and cfour_conv = 8 covers the c4 parts; # want mixture, so basis gets applied to c4 but others don't; # first case, when options specified explicitly; # [scf][d_convergence] [cfour][cfour_scf_conv] what happens?; # 8 from opt() 7 by default; # 6 from set {...} 7 by default 6 (guideline that psi4 format converts when clear); # 8 from opt() 5 from set {...} 5 (local trumps); # 6 from set {...} 5 from set {...} 5 (local trumps); #; # energy(name) [cfour][cfour_calc_level]; # c4-scf SCF by default; # c4-scf CCSD from set {...}",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:557,Usability,guid,guideline,557,"# Philosophy break:; # Specification options; # Massaging options; # * No program's defaults should be tampered with w/o provokation; # want all defaults applied to all programs, so p4 scf_conv is 5 and c4 scf_conv is 5; # want separate regimes, so conv 6 covers all the p4 parts and cfour_conv = 8 covers the c4 parts; # want mixture, so basis gets applied to c4 but others don't; # first case, when options specified explicitly; # [scf][d_convergence] [cfour][cfour_scf_conv] what happens?; # 8 from opt() 7 by default; # 6 from set {...} 7 by default 6 (guideline that psi4 format converts when clear); # 8 from opt() 5 from set {...} 5 (local trumps); # 6 from set {...} 5 from set {...} 5 (local trumps); #; # energy(name) [cfour][cfour_calc_level]; # c4-scf SCF by default; # c4-scf CCSD from set {...}",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:598,Usability,clear,clear,598,"# Philosophy break:; # Specification options; # Massaging options; # * No program's defaults should be tampered with w/o provokation; # want all defaults applied to all programs, so p4 scf_conv is 5 and c4 scf_conv is 5; # want separate regimes, so conv 6 covers all the p4 parts and cfour_conv = 8 covers the c4 parts; # want mixture, so basis gets applied to c4 but others don't; # first case, when options specified explicitly; # [scf][d_convergence] [cfour][cfour_scf_conv] what happens?; # 8 from opt() 7 by default; # 6 from set {...} 7 by default 6 (guideline that psi4 format converts when clear); # 8 from opt() 5 from set {...} 5 (local trumps); # 6 from set {...} 5 from set {...} 5 (local trumps); #; # energy(name) [cfour][cfour_calc_level]; # c4-scf SCF by default; # c4-scf CCSD from set {...}",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:37,Availability,avail,available,37,"""""""Requested Cfour dertype %d is not available.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:51,Availability,avail,available,51,"""""""Requested Cfour computational methods %d is not available.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:76,Energy Efficiency,energy,energy,76,"""""""Return an array of Cfour methods with energies. Appended; to procedures['energy']. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:135,Integrability,wrap,wrapper,135,"""""""Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to ``VARH``. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:146,Safety,avoid,avoid,146,"""""""Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to ``VARH``. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py:55,Energy Efficiency,energy,energy,55,"""""""Takes the key results from a gradient computation (*energy*,; element Z list *elem*, *coordinates*, *gradient*,; *dipole*, and atom ordering *map*) and writes a string *fja*; that exactly mimics the contents of a Cfour FJOBARC file. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/cfour.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/cfour.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbproc.py:179,Testability,benchmark,benchmark,179,"# print '\ngeneral\n\n', DSD[basename]['general']; # print '\ncp\n\n', DSD[basename]['cp']; # print '\nrlxd\n\n', DSD[basename]['rlxd']; # print '\nbenchmark\n\n', DSD[basename]['benchmark']; # print '\nsubset\n\n', DSD[basename]['subset']; #print ' %-12s %s' % ('[' + basename + ']', DSD[basename]['general'][0]); #print 'DSD2\n', DSD['S22']['subset']",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbproc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbproc.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:36,Availability,error,error,36,"""""""Each item in *args* should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in *args*. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:119,Availability,error,error,119,"""""""Each item in *args* should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in *args*. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:198,Availability,error,error,198,"""""""Each item in *args* should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in *args*. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:8,Availability,error,error,8,"""""""From error dictionary *err*, returns a LaTeX-formatted string,; after handling None entries. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:28,Testability,benchmark,benchmark,28,"""""""; :param refeq: value of benchmark for equilibrium Reaction; :param rrat: ratio of intermonomer separation for Reaction to equilibrium Reaction; :param xi: parameter; :return: weight for CURE. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:2,Energy Efficiency,energy,energy,2,"# energy unit attached to value, defaults to kcal/mol",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:164,Energy Efficiency,charge,charge,164,"# # addl comments; # self.comment = comment; # # fragmentation; # self.fragments = mol.fragments; # # frag activation; # self.frtype = mol.fragment_types; # # frag charge; # self.frchg = mol.fragment_charges; # # frag multiplicity; # self.frmult = mol.fragment_multiplicities",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:2,Testability,benchmark,benchmark,2,"# benchmark qcdb.ReactionDatum",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:68,Availability,error,errors,68,"""""""For all data or modelchem subset *mcset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:139,Availability,error,error,139,"""""""For all data or modelchem subset *mcset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:309,Availability,error,error,309,"""""""For all data or modelchem subset *mcset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:100,Testability,benchmark,benchmark,100,"""""""For all data or modelchem subset *mcset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:23,Testability,benchmark,benchmark,23,"""""""Reaction %s missing benchmark datum %s.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:23,Availability,error,errors,23,"""""""Computes individual errors over model chemistries in *mcset* (which; may be default or an array or a function generating an array) versus; *benchmark*. Thread *color* can be 'rgb' for old coloring, a color; name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:659,Availability,avail,available,659,"""""""Computes individual errors over model chemistries in *mcset* (which; may be default or an array or a function generating an array) versus; *benchmark*. Thread *color* can be 'rgb' for old coloring, a color; name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:351,Security,access,accessible,351,"""""""Computes individual errors over model chemistries in *mcset* (which; may be default or an array or a function generating an array) versus; *benchmark*. Thread *color* can be 'rgb' for old coloring, a color; name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:143,Testability,benchmark,benchmark,143,"""""""Computes individual errors over model chemistries in *mcset* (which; may be default or an array or a function generating an array) versus; *benchmark*. Thread *color* can be 'rgb' for old coloring, a color; name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:3,Availability,error,errors,3,"# [errors[ix][self.dbse]['mae'] for ix in index]",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:9,Availability,error,errors,9,"# [100 * errors[ix][self.dbse]['mape'] for ix in index]; # form unique filename; # ixpre, ixsuf, ixmid = string_contrast(index); # title = self.dbse + ' ' + ixpre + '[]' + ixsuf",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:155,Availability,error,error,155,"""""""Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly-- see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities. >>> asdf = qcdb.WrappedDatabase('Nbc10'); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:62,Security,validat,validation,62,"""""""Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly-- see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities. >>> asdf = qcdb.WrappedDatabase('Nbc10'); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:111,Security,access,accessors,111,"""""""Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly-- see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities. >>> asdf = qcdb.WrappedDatabase('Nbc10'); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:34,Energy Efficiency,reduce,reduce,34,"# Removing hrxn, hrgt etc. do not reduce the size of the object.; # These attributes are stored for ease of access for adding qc info, etc.; #: object of defined reaction subsets.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:108,Security,access,access,108,"# Removing hrxn, hrgt etc. do not reduce the size of the object.; # These attributes are stored for ease of access for adding qc info, etc.; #: object of defined reaction subsets.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:2,Performance,load,load,2,"# load database",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:8,Security,validat,validation,8,"# gross validation of database",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:62,Availability,error,errors,62,"""""""For full database or subset *sset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:133,Availability,error,error,133,"""""""For full database or subset *sset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:303,Availability,error,error,303,"""""""For full database or subset *sset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:94,Testability,benchmark,benchmark,94,"""""""For full database or subset *sset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:47,Availability,avail,available,47,"# raise ValidationError(""""""Subset named %s not available"""""" % (str(e)))",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:23,Testability,benchmark,benchmark,23,"""""""Reaction %s missing benchmark""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:28,Availability,error,error,28,"# handle particulars of PEC error measures; # rxncureinfo = cureinfo[rxn]; # try:; # mcGreaterCrvmin = self.hrxn[rxncureinfo['eq']].data[lbench].value; # except KeyError as e:; # print """"""Reaction %s missing benchmark"""""" % (str(eqrxn)); # cure_denom = cure_weight(refrxn=mcGreater, refeq=mcGreaterCrvmin, rrat=rxncureinfo['Rrat']); # balanced_mask, balwt = balanced_error(refrxn=mcGreater, refeq=mcGreaterCrvmin, rrat=rxncureinfo['Rrat'])",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:208,Testability,benchmark,benchmark,208,"# handle particulars of PEC error measures; # rxncureinfo = cureinfo[rxn]; # try:; # mcGreaterCrvmin = self.hrxn[rxncureinfo['eq']].data[lbench].value; # except KeyError as e:; # print """"""Reaction %s missing benchmark"""""" % (str(eqrxn)); # cure_denom = cure_weight(refrxn=mcGreater, refeq=mcGreaterCrvmin, rrat=rxncureinfo['Rrat']); # balanced_mask, balwt = balanced_error(refrxn=mcGreater, refeq=mcGreaterCrvmin, rrat=rxncureinfo['Rrat'])",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:53,Availability,error,error,53,"""""""For full database or subset *sset*, computes many error; statistics between single *modelchem* and *benchmark* model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless *failoninc* set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:142,Availability,error,error,142,"""""""For full database or subset *sset*, computes many error; statistics between single *modelchem* and *benchmark* model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless *failoninc* set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:103,Testability,benchmark,benchmark,103,"""""""For full database or subset *sset*, computes many error; statistics between single *modelchem* and *benchmark* model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless *failoninc* set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:20,Availability,error,error,20,"# linear (absolute) error",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:24,Availability,error,error,24,"# fractional (relative) error",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:22,Availability,error,error,22,"# balanced (relative) error",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:18,Availability,error,errors,18,"# get math domain errors w/wt in denom math.sqrt((sum(map(lambda x: x ** 2, balanced)) - (sum(balanced) ** 2) / balwt) / balwt) #/ Nrxn) / Nrxn); # capped (relative) error",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:166,Availability,error,error,166,"# get math domain errors w/wt in denom math.sqrt((sum(map(lambda x: x ** 2, balanced)) - (sum(balanced) ** 2) / balwt) / balwt) #/ Nrxn) / Nrxn); # capped (relative) error",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:50,Performance,load,load,50,"""""""\nPython module for database data %s failed to load\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:17,Performance,load,loading,17,"""""""Python module loading problem for database data """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:37,Performance,load,loaded,37,"""""""WrappedDatabase %s: %s %s results loaded""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:5,Availability,error,error,5,"# no error checking for speed",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:167,Security,validat,validated,167,"""""""Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:63,Performance,load,loaded,63,"""""""Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; *union* is True or all modelchems that have data for all reactions; if *union* is False. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:56,Testability,benchmark,benchmark,56,"""""""Returns the model chemistry label for the database's benchmark.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:38,Testability,benchmark,benchmark,38,"# return next(self.hrxn.itervalues()).benchmark; # TODO all rxns have same bench in db module so all have same here in obj; # but the way things stored in Reactions, this doesn't have to be so",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:50,Performance,load,load,50,"""""""\nPython module for database data %s failed to load\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:39,Performance,load,loaded,39,"""""""WrappedDatabase %s: Defined subsets loaded""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:61,Testability,benchmark,benchmark,61,"# def table_simple1(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # rowplan = ['bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'S22', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'S22', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'S22', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'S22', 'TT', textables.val, {'sset': 'default'}],; # ]; #; # def table_simple2(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # rowplan = ['bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'MAE', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'MAE', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'MAE', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'MAE', 'TT', textables.val, {'sset': 'default'}],; # ['d', r'MA\%E', 'HB', textables.val, {'sset': 'hb', 'err': 'mape'}],; # ['d', r'MA\%E', 'MX', textables.val, {'sset': 'mx', 'err': 'mape'}],; # ['d', r'MA\%E', 'DD', textables.val, {'sset': 'dd', 'err': 'mape'}],; # ['d', r'MA\%E', 'TT', textables.val, {'sset': 'default', 'err': 'mape'}],; # ['d', r'maxE', 'TT ', textables.val, {'sset': 'default', 'err': 'maxe'}],; # ['d', r'min\%E', ' TT', textables.val, {'sset': 'default', 'err': 'minpe'}],; # ['d', r'rmsE', 'TT ', textables.val, {'sset': 'default', 'err': 'rmse'}],; # ['d', r'devE', ' TT', textables.val, {'sset': 'default', 'err': 'stde'}],; # ]; #; # def table_simple3(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # rowplan = ['err', 'bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'MAE', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'MAE', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'MAE', 'DD', textab",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:556,Testability,benchmark,benchmark,556,"# def table_simple1(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # rowplan = ['bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'S22', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'S22', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'S22', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'S22', 'TT', textables.val, {'sset': 'default'}],; # ]; #; # def table_simple2(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # rowplan = ['bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'MAE', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'MAE', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'MAE', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'MAE', 'TT', textables.val, {'sset': 'default'}],; # ['d', r'MA\%E', 'HB', textables.val, {'sset': 'hb', 'err': 'mape'}],; # ['d', r'MA\%E', 'MX', textables.val, {'sset': 'mx', 'err': 'mape'}],; # ['d', r'MA\%E', 'DD', textables.val, {'sset': 'dd', 'err': 'mape'}],; # ['d', r'MA\%E', 'TT', textables.val, {'sset': 'default', 'err': 'mape'}],; # ['d', r'maxE', 'TT ', textables.val, {'sset': 'default', 'err': 'maxe'}],; # ['d', r'min\%E', ' TT', textables.val, {'sset': 'default', 'err': 'minpe'}],; # ['d', r'rmsE', 'TT ', textables.val, {'sset': 'default', 'err': 'rmse'}],; # ['d', r'devE', ' TT', textables.val, {'sset': 'default', 'err': 'stde'}],; # ]; #; # def table_simple3(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # rowplan = ['err', 'bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'MAE', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'MAE', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'MAE', 'DD', textab",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:1655,Testability,benchmark,benchmark,1655,"['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'MAE', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'MAE', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'MAE', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'MAE', 'TT', textables.val, {'sset': 'default'}],; # ['d', r'MA\%E', 'HB', textables.val, {'sset': 'hb', 'err': 'mape'}],; # ['d', r'MA\%E', 'MX', textables.val, {'sset': 'mx', 'err': 'mape'}],; # ['d', r'MA\%E', 'DD', textables.val, {'sset': 'dd', 'err': 'mape'}],; # ['d', r'MA\%E', 'TT', textables.val, {'sset': 'default', 'err': 'mape'}],; # ['d', r'maxE', 'TT ', textables.val, {'sset': 'default', 'err': 'maxe'}],; # ['d', r'min\%E', ' TT', textables.val, {'sset': 'default', 'err': 'minpe'}],; # ['d', r'rmsE', 'TT ', textables.val, {'sset': 'default', 'err': 'rmse'}],; # ['d', r'devE', ' TT', textables.val, {'sset': 'default', 'err': 'stde'}],; # ]; #; # def table_simple3(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # rowplan = ['err', 'bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'MAE', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'MAE', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'MAE', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'MAE', 'TT', textables.val, {'sset': 'default'}],; # ]; #; # def table_simple4(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # plotpath = 'autogen' # TODO handle better; # rowplan = ['bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'S22', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'S22', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'S22', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'S22', 'TT', textables.val, {'sset': 'default'}],; # # ['l', r""""""Error Distribution\footnotemark[1]"""""", r""""""\includegrap",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:2157,Testability,benchmark,benchmark,2157,", 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'MAE', 'TT', textables.val, {'sset': 'default'}],; # ['d', r'MA\%E', 'HB', textables.val, {'sset': 'hb', 'err': 'mape'}],; # ['d', r'MA\%E', 'MX', textables.val, {'sset': 'mx', 'err': 'mape'}],; # ['d', r'MA\%E', 'DD', textables.val, {'sset': 'dd', 'err': 'mape'}],; # ['d', r'MA\%E', 'TT', textables.val, {'sset': 'default', 'err': 'mape'}],; # ['d', r'maxE', 'TT ', textables.val, {'sset': 'default', 'err': 'maxe'}],; # ['d', r'min\%E', ' TT', textables.val, {'sset': 'default', 'err': 'minpe'}],; # ['d', r'rmsE', 'TT ', textables.val, {'sset': 'default', 'err': 'rmse'}],; # ['d', r'devE', ' TT', textables.val, {'sset': 'default', 'err': 'stde'}],; # ]; #; # def table_simple3(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # rowplan = ['err', 'bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'MAE', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'MAE', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'MAE', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'MAE', 'TT', textables.val, {'sset': 'default'}],; # ]; #; # def table_simple4(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # plotpath = 'autogen' # TODO handle better; # rowplan = ['bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'S22', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'S22', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'S22', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'S22', 'TT', textables.val, {'sset': 'default'}],; # # ['l', r""""""Error Distribution\footnotemark[1]"""""", r""""""\includegraphics[width=6.67cm,height=3.5mm]{%s%s.pdf}"""""" % (plotpath, 'blank'), textables.graphics, {}],; # ['l', r""""""Error Distribution\footnotemark[1]"""""", r"""""""""""", textables.graphics, {}],; # ]",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:9,Security,validat,validation,9,"# slight validation, repackaging into dbnamelist",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:2,Performance,load,load,2,"# load databases",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:29,Testability,benchmark,benchmark,29,"# self.mcs['default'] = [odb.benchmark() for odb in self.dbdict.values()]",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:6,Testability,benchmark,benchmark,6,"# def benchmark(self):; # """"""Returns the model chemistry label for the database's benchmark.""""""; # return self.benchmark #TODO not sure if right way to go about this self.mcs['default']",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:82,Testability,benchmark,benchmark,82,"# def benchmark(self):; # """"""Returns the model chemistry label for the database's benchmark.""""""; # return self.benchmark #TODO not sure if right way to go about this self.mcs['default']",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:111,Testability,benchmark,benchmark,111,"# def benchmark(self):; # """"""Returns the model chemistry label for the database's benchmark.""""""; # return self.benchmark #TODO not sure if right way to go about this self.mcs['default']",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:32,Performance,load,loads,32,"""""""For each component database, loads qcdb.ReactionDatums from; standard location for *project* :module dbse_project and function; load_project. Module search path can be prepended with *pythonpath*. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:32,Performance,load,loads,32,"""""""For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:197,Security,validat,validated,197,"""""""For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:32,Performance,load,loads,32,"""""""For each component database, loads subsets from all functions; in module *modname*. Default *modname* usues standard generators. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:71,Availability,error,errors,71,"""""""Computes summary statistics and, if *returnindiv* True,; individual errors for single model chemistry *modelchem* versus; *benchmark* over subset *sset* over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless *failoninc* set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:271,Availability,error,error,271,"""""""Computes summary statistics and, if *returnindiv* True,; individual errors for single model chemistry *modelchem* versus; *benchmark* over subset *sset* over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless *failoninc* set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:126,Testability,benchmark,benchmark,126,"""""""Computes summary statistics and, if *returnindiv* True,; individual errors for single model chemistry *modelchem* versus; *benchmark* over subset *sset* over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless *failoninc* set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:76,Availability,error,error,76,"""""""For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; *modelchem* versus *benchmark* for all available subsets. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:167,Availability,avail,available,167,"""""""For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; *modelchem* versus *benchmark* for all available subsets. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:148,Testability,benchmark,benchmark,148,"""""""For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; *modelchem* versus *benchmark* for all available subsets. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# present errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:662,Availability,avail,available,662,"""""""Prepares 'grey bars' diagram for each model chemistry in array; *modelchem* versus *benchmark* over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the 'mae'; summary statistic of the four subsets in *sset*. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:356,Security,access,accessible,356,"""""""Prepares 'grey bars' diagram for each model chemistry in array; *modelchem* versus *benchmark* over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the 'mae'; summary statistic of the four subsets in *sset*. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:87,Testability,benchmark,benchmark,87,"""""""Prepares 'grey bars' diagram for each model chemistry in array; *modelchem* versus *benchmark* over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the 'mae'; summary statistic of the four subsets in *sset*. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:55,Integrability,wrap,wrappeddbs,55,"# TODO may need to make axis name distributable across wrappeddbs; # TODO not handling mc present bm absent",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:35,Performance,load,loads,35,"""""""This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:50,Performance,load,load,50,"""""""\nPython module for database data %s failed to load\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:35,Performance,load,loads,35,"""""""This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo, then formats it to plot a ternary diagram. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:23,Availability,error,errors,23,"""""""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Thread *color* can be; 'rgb' for old coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. asdf.plot_flat('CCSD-CP-atqzadz', failoninc=False); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:664,Availability,avail,available,664,"""""""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Thread *color* can be; 'rgb' for old coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. asdf.plot_flat('CCSD-CP-atqzadz', failoninc=False); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:358,Security,access,accessible,358,"""""""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Thread *color* can be; 'rgb' for old coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. asdf.plot_flat('CCSD-CP-atqzadz', failoninc=False); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:101,Testability,benchmark,benchmark,101,"""""""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Thread *color* can be; 'rgb' for old coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. asdf.plot_flat('CCSD-CP-atqzadz', failoninc=False); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:15,Availability,error,errors,15,"# mape = 100 * errors[self.dbse]['mape']",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:5,Performance,load,load,5,"""""""; load {xyzfile}; hide lines; show sticks; color grey, name c; cmd.set('''opaque_background''','''0''',quiet=0); reset; orient; cmd.zoom(buffer=0.3, complete=1); ray; png {pngfile}; reinitialize; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:138,Availability,avail,available,138,"""""""Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from *modelchem*, otherwise defaults to; all those available. Can modify subset *sset* and plotting; range *xlimit*. >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:20,Safety,avoid,avoid,20,"# TODO prob need to avoid duplicates or pass",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:259,Security,access,access,259,"""""""Collects the reactions present in *sset* from each WrappedDatabase,; checks that *modelchem* and *benchmark* ReactionDatum are present; (fails if *failoninc* True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; *modelchem*, the modelchem key needed to access *benchmark*, and; the Reaction object. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:308,Security,access,access,308,"""""""Collects the reactions present in *sset* from each WrappedDatabase,; checks that *modelchem* and *benchmark* ReactionDatum are present; (fails if *failoninc* True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; *modelchem*, the modelchem key needed to access *benchmark*, and; the Reaction object. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:101,Testability,benchmark,benchmark,101,"""""""Collects the reactions present in *sset* from each WrappedDatabase,; checks that *modelchem* and *benchmark* ReactionDatum are present; (fails if *failoninc* True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; *modelchem*, the modelchem key needed to access *benchmark*, and; the Reaction object. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:316,Testability,benchmark,benchmark,316,"""""""Collects the reactions present in *sset* from each WrappedDatabase,; checks that *modelchem* and *benchmark* ReactionDatum are present; (fails if *failoninc* True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; *modelchem*, the modelchem key needed to access *benchmark*, and; the Reaction object. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:224,Availability,avail,available,224,"""""""Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions *sset* should contain and the second being a list of; the reaction names (dbrxn) not available for *modelchem*. Absence; of benchmark not considered. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:263,Testability,benchmark,benchmark,263,"""""""Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions *sset* should contain and the second being a list of; the reaction names (dbrxn) not available for *modelchem*. Absence; of benchmark not considered. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:23,Availability,error,errors,23,"""""""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Computes histogram; of errors and gaussian distribution. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>>; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:185,Availability,error,errors,185,"""""""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Computes histogram; of errors and gaussian distribution. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>>; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:632,Availability,avail,available,632,"""""""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Computes histogram; of errors and gaussian distribution. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>>; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:322,Security,access,accessible,322,"""""""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Computes histogram; of errors and gaussian distribution. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>>; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:101,Testability,benchmark,benchmark,101,"""""""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Computes histogram; of errors and gaussian distribution. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>>; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:23,Availability,error,errors,23,"""""""Computes individual errors and summary statistics over all component; databases for each model chemistry in array *modelchem* versus *benchmark*; over subset *sset*. *mbenchmark* and *msset* are array options (same; length as *modelchem*) that override *benchmark* and *sset*, respectively,; for non-uniform specification. Thread *color* can be 'rgb' for old; coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:830,Availability,avail,available,830,"""""""Computes individual errors and summary statistics over all component; databases for each model chemistry in array *modelchem* versus *benchmark*; over subset *sset*. *mbenchmark* and *msset* are array options (same; length as *modelchem*) that override *benchmark* and *sset*, respectively,; for non-uniform specification. Thread *color* can be 'rgb' for old; coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:522,Security,access,accessible,522,"""""""Computes individual errors and summary statistics over all component; databases for each model chemistry in array *modelchem* versus *benchmark*; over subset *sset*. *mbenchmark* and *msset* are array options (same; length as *modelchem*) that override *benchmark* and *sset*, respectively,; for non-uniform specification. Thread *color* can be 'rgb' for old; coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:137,Testability,benchmark,benchmark,137,"""""""Computes individual errors and summary statistics over all component; databases for each model chemistry in array *modelchem* versus *benchmark*; over subset *sset*. *mbenchmark* and *msset* are array options (same; length as *modelchem*) that override *benchmark* and *sset*, respectively,; for non-uniform specification. Thread *color* can be 'rgb' for old; coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:257,Testability,benchmark,benchmark,257,"""""""Computes individual errors and summary statistics over all component; databases for each model chemistry in array *modelchem* versus *benchmark*; over subset *sset*. *mbenchmark* and *msset* are array options (same; length as *modelchem*) that override *benchmark* and *sset*, respectively,; for non-uniform specification. Thread *color* can be 'rgb' for old; coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:13,Testability,benchmark,benchmark,13,"# distribute benchmark",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:31,Security,access,access,31,""""""". Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible.; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:118,Security,access,accessible,118,""""""". Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible.; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:181,Security,access,accessible,181,""""""". Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible.; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:23,Availability,error,errors,23,"""""""Computes individual errors for single *modelchem* versus; *benchmark* over subset *sset*. Coloring green-to-purple with; maximum intensity at *xlimit*. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:227,Availability,avail,available,227,"""""""Computes individual errors for single *modelchem* versus; *benchmark* over subset *sset*. Coloring green-to-purple with; maximum intensity at *xlimit*. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:102,Energy Efficiency,green,green-to-purple,102,"""""""Computes individual errors for single *modelchem* versus; *benchmark* over subset *sset*. Coloring green-to-purple with; maximum intensity at *xlimit*. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:62,Testability,benchmark,benchmark,62,"""""""Computes individual errors for single *modelchem* versus; *benchmark* over subset *sset*. Coloring green-to-purple with; maximum intensity at *xlimit*. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:80,Testability,benchmark,benchmark,80,"""""""; *modelchem* is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:94,Testability,benchmark,benchmark,94,"""""""; *modelchem* is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:35,Availability,error,errors,35,"# prepare individual reactions and errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:18,Availability,error,errors,18,"# TODO redefining errors not good practice",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:26,Availability,error,errors,26,"""""""Prepares dictionary of errors for all combinations of *mtd*, *opt*,; *bas* with respect to model chemistry *benchmark*, mindful of *failoninc*.; The general plan for the table, as well as defaults for landscape,; footnotes, *title*, *indextitle, and *theme* are got from function; *tableplan*. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless *filename* is given,; in which case they're written to file and a filedict returned. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:302,Availability,error,error,302,"""""""Prepares dictionary of errors for all combinations of *mtd*, *opt*,; *bas* with respect to model chemistry *benchmark*, mindful of *failoninc*.; The general plan for the table, as well as defaults for landscape,; footnotes, *title*, *indextitle, and *theme* are got from function; *tableplan*. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless *filename* is given,; in which case they're written to file and a filedict returned. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:111,Testability,benchmark,benchmark,111,"""""""Prepares dictionary of errors for all combinations of *mtd*, *opt*,; *bas* with respect to model chemistry *benchmark*, mindful of *failoninc*.; The general plan for the table, as well as defaults for landscape,; footnotes, *title*, *indextitle, and *theme* are got from function; *tableplan*. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless *filename* is given,; in which case they're written to file and a filedict returned. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:10,Availability,error,errors,10,"# compute errors",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:4,Performance,load,load,4,"# # load up data and definitions; # self.load_qcdata_byproject('dft'); # self.load_qcdata_byproject('pt2'); # #self.load_qcdata_byproject('dhdft'); # self.load_subsets()",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:6,Testability,benchmark,benchmark,6,"# def benchmark(self):; # """"""Returns the model chemistry label for the database's benchmark.""""""; # return 'C2001BENCH'",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:82,Testability,benchmark,benchmark,82,"# def benchmark(self):; # """"""Returns the model chemistry label for the database's benchmark.""""""; # return 'C2001BENCH'",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:100,Testability,benchmark,benchmark,100,"""""""Plot all the graphics needed for the SAPT/DFT/WFN; comparison plot in Fig. 2 of DHDFT. Note that benchmark set as reminder, not necessity, since default. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py:2,Performance,load,load,2,"# load up data and definitions",MatchSource.CODE_COMMENT,psi4/driver/qcdb/dbwrap.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/dbwrap.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:61,Availability,error,error,61,"""""""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:67,Integrability,message,message,67,"""""""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:183,Availability,error,error,183,"""""""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:133,Integrability,message,message,133,"""""""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:29,Modifiability,variab,variables,29,"""""""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:72,Availability,error,error,72,"""""""Error called for problems with syntax from a QC output file. Prints; error message *msg* to standard output stream. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:78,Integrability,message,message,78,"""""""Error called for problems with syntax from a QC output file. Prints; error message *msg* to standard output stream. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:75,Availability,error,error,75,"""""""Error called molecule has wrong number of fragments for method.; Prints error message *msg* to standard output stream. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:81,Integrability,message,message,81,"""""""Error called molecule has wrong number of fragments for method.; Prints error message *msg* to standard output stream. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:86,Availability,error,error,86,"""""""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:92,Integrability,message,message,92,"""""""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:23,Testability,test,test,23,"""""""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:330,Availability,error,error,330,"""""""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning. For; cases where the syntax just has to jump, this can be used to trap; the old syntax at first error and suggest the new. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:160,Deployability,release,release,160,"""""""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning. For; cases where the syntax just has to jump, this can be used to trap; the old syntax at first error and suggest the new. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py:65,Usability,simpl,simple,65,"""""""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning. For; cases where the syntax just has to jump, this can be used to trap; the old syntax at first error and suggest the new. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/exceptions.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/exceptions.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py:25,Performance,load,loading,25,"# TODO: Include gradient loading feature, analagously to hessian loading.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/gradparse.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py:65,Performance,load,loading,65,"# TODO: Include gradient loading feature, analagously to hessian loading.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/gradparse.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py:332,Energy Efficiency,energy,energy,332,"""""""Writes gradient in various formats. Parameters; ----------; grad : ndarray; (nat, 3) gradient array.; handle : filename or file handle; If file handle, it must have been opened in binary, `wb`.; dtype : {'file11', 'GRD', 'minimal'}, optional; Format to write Hessian.; file11 is an old file format with the number of atoms, last energy and geometry, as well as gradient.; GRD is an ACESII file format with the number of atoms and geometry, as well as gradient.; minimal simply gives the number of atoms and the gradient.; mol : psi4.molecule or qcdb.molecule; The molecule the gradient is from. Needed only in file11 formatting.; energy : psi4.molecule or qcdb.molecule; The electronic energy of the molecule the gradient is evaluated from. Needed only in file11 format. Returns; -------; None. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/gradparse.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py:633,Energy Efficiency,energy,energy,633,"""""""Writes gradient in various formats. Parameters; ----------; grad : ndarray; (nat, 3) gradient array.; handle : filename or file handle; If file handle, it must have been opened in binary, `wb`.; dtype : {'file11', 'GRD', 'minimal'}, optional; Format to write Hessian.; file11 is an old file format with the number of atoms, last energy and geometry, as well as gradient.; GRD is an ACESII file format with the number of atoms and geometry, as well as gradient.; minimal simply gives the number of atoms and the gradient.; mol : psi4.molecule or qcdb.molecule; The molecule the gradient is from. Needed only in file11 formatting.; energy : psi4.molecule or qcdb.molecule; The electronic energy of the molecule the gradient is evaluated from. Needed only in file11 format. Returns; -------; None. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/gradparse.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py:689,Energy Efficiency,energy,energy,689,"""""""Writes gradient in various formats. Parameters; ----------; grad : ndarray; (nat, 3) gradient array.; handle : filename or file handle; If file handle, it must have been opened in binary, `wb`.; dtype : {'file11', 'GRD', 'minimal'}, optional; Format to write Hessian.; file11 is an old file format with the number of atoms, last energy and geometry, as well as gradient.; GRD is an ACESII file format with the number of atoms and geometry, as well as gradient.; minimal simply gives the number of atoms and the gradient.; mol : psi4.molecule or qcdb.molecule; The molecule the gradient is from. Needed only in file11 formatting.; energy : psi4.molecule or qcdb.molecule; The electronic energy of the molecule the gradient is evaluated from. Needed only in file11 format. Returns; -------; None. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/gradparse.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py:473,Usability,simpl,simply,473,"""""""Writes gradient in various formats. Parameters; ----------; grad : ndarray; (nat, 3) gradient array.; handle : filename or file handle; If file handle, it must have been opened in binary, `wb`.; dtype : {'file11', 'GRD', 'minimal'}, optional; Format to write Hessian.; file11 is an old file format with the number of atoms, last energy and geometry, as well as gradient.; GRD is an ACESII file format with the number of atoms and geometry, as well as gradient.; minimal simply gives the number of atoms and the gradient.; mol : psi4.molecule or qcdb.molecule; The molecule the gradient is from. Needed only in file11 formatting.; energy : psi4.molecule or qcdb.molecule; The electronic energy of the molecule the gradient is evaluated from. Needed only in file11 format. Returns; -------; None. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/gradparse.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py:27,Energy Efficiency,energy,energy,27,"# We can forgive a missing energy, but not a missing molecule.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/gradparse.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py:32,Energy Efficiency,charge,charge,32,"# The need to supply the atomic charge makes writing an actual array inconvenient.; # For consistency, save a dummy array.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/gradparse.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/gradparse.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/jajo.py:12,Energy Efficiency,charge,charge,12,"# atom/mol? charge taking into acct edp",MatchSource.CODE_COMMENT,psi4/driver/qcdb/jajo.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/jajo.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:57,Availability,checkpoint,checkpoint,57,"""""""Basis set container class; Reads the basis set from a checkpoint file object. Also reads the molecule; from the checkpoint file storing the information in an internal Molecule class; which can be accessed using molecule(). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:115,Availability,checkpoint,checkpoint,115,"""""""Basis set container class; Reads the basis set from a checkpoint file object. Also reads the molecule; from the checkpoint file storing the information in an internal Molecule class; which can be accessed using molecule(). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:199,Security,access,accessed,199,"""""""Basis set container class; Reads the basis set from a checkpoint file object. Also reads the molecule; from the checkpoint file storing the information in an internal Molecule class; which can be accessed using molecule(). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:32,Integrability,contract,contraction,32,"# The flattened lists of unique contraction coefficients (normalized)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:32,Integrability,contract,contraction,32,"# The flattened lists of unique contraction coefficients (as provided by the user)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:40,Integrability,contract,contraction,40,"# The flattened lists of ERD normalized contraction coefficients",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:18,Testability,test,test,18,"""""""Naive equality test. Haven't considered exp/coeff distribution among shells or AM""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:12,Testability,test,test,12,"""""""Equality test. Sorts the coefficients so handles different shell orderings. Print any failed exp/coeff differences if verbose > 1.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:146,Integrability,contract,contraction,146,"""""""Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:32,Usability,simpl,simply,32,"# In the new implementation, we simply call the default constructor",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:28,Deployability,update,update,28,"# Create (if necessary) and update qcdb.Molecule",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:2,Performance,load,load,2,"# load in the basis sets",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:28,Deployability,update,update,28,"# Create (if necessary) and update qcdb.Molecule",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:140,Availability,error,error,140,"# Apply requested basis set(s) to the molecule; # - basstrings only a temp object so using fitrole as dict key instead of psi4 keyword; # - error checking not needed since C-side already checked for NULL ptr",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:19,Usability,clear,clear,19,"# TODO now need to clear shells, too",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:33,Modifiability,config,configured,33,"""""""Returns a new BasisSet object configured from the *mol*; Molecule object for *key* (generally a Psi4 keyword: BASIS,; DF_BASIS_SCF, etc.). Fails utterly if a basis has not been set for; *key* for every atom in *mol*, unless *deffit* is set (JFIT,; JKFIT, or RIFIT), whereupon empty atoms are assigned to *key*; from the :py:class:`~BasisFamily`. This function is significantly; re-worked from its libmints analog. Parameters; ----------; mol : qcdb.Molecule; A molecule object for which every atom has had a basisset set for `key`. basstrings : dict, optional; Additional source for basis data. Keys are regularized basis names and values are gbs strings.; return_atomlist; Return list of one-atom BasisSet-s, rather than single whole-mol BasisSet.; ; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:40,Performance,load,load,40,"# If name is prefixed with ""bse:"", then load from basis set exchange library",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:16,Safety,detect,detected,16,"# If an ECP was detected, and we're building BASIS, process it now",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:74,Integrability,contract,contractions,74,"""""""Number of primitives.; * @return The total number of primitives in all contractions. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:238,Integrability,contract,contraction,238,"""""""Print basis set information according to the level of detail in print_level; @param out The file stream to use for printing. Defaults to outfile.; @param print_level: defaults to 2; * < 1: Nothing; * 1: Brief summary; * 2: Summary and contraction details; * > 2: Full details. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:108,Security,hash,hash,108,"""""""From complete BasisSet object, returns array where; triplets of elements are each unique atom label, the hash; of the string shells entry in gbs format and the; shells entry in gbs format for that label. This packaging is; intended for return to libmints BasisSet::construct_from_pydict for; instantiation of a libmints BasisSet clone of *self*. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:18,Integrability,contract,contracted,18,"# Write number of contracted basis functions for each shell",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:8,Integrability,contract,contraction,8,"# Write contraction coefficients for each shell",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:162,Integrability,contract,contraction,162,""""""" **NYI** Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:280,Deployability,update,updated,280,"""""""Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:27,Testability,test,test,27,"""""""Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:159,Testability,test,test,159,"""""""Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:181,Testability,benchmark,benchmarking,181,"""""""Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py:210,Testability,benchmark,benchmark,210,"""""""Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py:61,Performance,load,loading,61,"# If the parser needs to force spherical or cartesian (e.g., loading old guess)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasissetparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py:21,Integrability,contract,contraction,21,"# Match beginning of contraction",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasissetparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py:21,Availability,toler,tolerant,21,"# This parser is not tolerant of comments of blank lines. Perhaps the best strategy is to; # remove all comments/blank lines first before getting in here. This'll do for now.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasissetparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py:73,Integrability,contract,contraction,73,"""""""Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line %d: %s""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasissetparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py:12,Integrability,contract,contraction,12,"# Scale the contraction and save the information",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasissetparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py:12,Integrability,contract,contraction,12,"# Scale the contraction and save the information",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasissetparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py:15,Integrability,contract,contraction,15,"# Do the other contraction",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasissetparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py:12,Integrability,contract,contraction,12,"# Scale the contraction and save the information",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsbasissetparser.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsbasissetparser.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:111,Modifiability,variab,variables,111,"""""""An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. This class and its subclasses are used by `qcdb.Molecule` but not by users directly. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:154,Usability,simpl,simplifying,154,"""""""An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. This class and its subclasses are used by `qcdb.Molecule` but not by users directly. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:40,Usability,simpl,simply,40,"""""""Specialization of CoordValue that is simply a number to be stored.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:57,Integrability,depend,depends,57,"""""""Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:10,Modifiability,variab,variable,10,"# Name of variable",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:30,Modifiability,variab,variable,30,"# Dictionary from molecule of variable names and values",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:63,Modifiability,variab,variable,63,"# Whether the coordinate value is actually the negative of the variable value",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:69,Modifiability,variab,variable,69,"""""""Gets whether the coordinate value is actually the negative of the variable value""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:24,Modifiability,variab,variable,24,"""""""Gets the name of the variable""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:109,Availability,down,down,109,"""""""Whether this atom has the same mass and ghost status as atom *other*.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish's SAD guess in Psi4. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:15,Energy Efficiency,charge,charge,15,"""""""The nuclear charge of the current atom (0 if ghosted).""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:15,Energy Efficiency,charge,charge,15,"""""""The ""atomic charge"" of the current atom (for SAD purposes).""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:11,Security,hash,hash,11,"""""""Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:108,Security,hash,hash,108,"""""""Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:15,Security,hash,hash,15,"""""""Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:99,Security,hash,hash,99,"""""""Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:41,Deployability,update,updates,41,"""""""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:115,Integrability,depend,depend,115,"""""""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:96,Modifiability,variab,variables,96,"""""""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:14,Deployability,update,updated,14,"""""""Prints the updated geometry, in the format provided by the user.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:14,Deployability,update,updated,14,"""""""Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:14,Deployability,update,updated,14,"""""""Prints the updated geometry, in the format provided by the user""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:14,Deployability,update,updated,14,"""""""Prints the updated geometry, in the format provided by the user""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:41,Deployability,update,updates,41,"""""""Given the current set of coordinates, updates the values of this; atom's coordinates, and any variables that may depend on it. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:116,Integrability,depend,depend,116,"""""""Given the current set of coordinates, updates the values of this; atom's coordinates, and any variables that may depend on it. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:97,Modifiability,variab,variables,97,"""""""Given the current set of coordinates, updates the values of this; atom's coordinates, and any variables that may depend on it. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:27,Deployability,update,update,27,"# Check for NaN, and don't update if we find one; # what is this? proper py traslation?",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py:37,Safety,safe,safely,37,"# CB is not collinear with X, we can safely find X first",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintscoordentry.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintscoordentry.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:200,Energy Efficiency,efficient,efficient,200,"""""""This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param am Angular momentum.; @param c An array of contraction coefficients.; @param e An array of exponent values.; @param pure Pure spherical harmonics, or Cartesian.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?; @param rpowers For an ECP, the array of radial powers. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:657,Energy Efficiency,reduce,reduce,657,"""""""This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param am Angular momentum.; @param c An array of contraction coefficients.; @param e An array of exponent values.; @param pure Pure spherical harmonics, or Cartesian.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?; @param rpowers For an ECP, the array of radial powers. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:918,Energy Efficiency,power,powers,918,"""""""This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param am Angular momentum.; @param c An array of contraction coefficients.; @param e An array of exponent values.; @param pure Pure spherical harmonics, or Cartesian.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?; @param rpowers For an ECP, the array of radial powers. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:298,Integrability,contract,contraction,298,"""""""This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param am Angular momentum.; @param c An array of contraction coefficients.; @param e An array of exponent values.; @param pure Pure spherical harmonics, or Cartesian.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?; @param rpowers For an ECP, the array of radial powers. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:17,Integrability,contract,contraction,17,"# ERD normalized contraction coefficients (of length nprimitives_)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:27,Integrability,contract,contraction,27,"# Original (un-normalized) contraction coefficients (of length nprimitives)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:24,Integrability,contract,contraction,24,"""""""Normalizes an entire contraction set. Applies the normalization to the coefficients. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:44,Integrability,contract,contraction,44,"""""""Return the angular momentum of the given contraction""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:69,Integrability,contract,contraction,69,"""""""Return the character symbol for the angular momentum of the given contraction""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:69,Integrability,contract,contraction,69,"""""""Return the character symbol for the angular momentum of the given contraction (upper case)""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:19,Integrability,contract,contraction,19,"""""""Returns true if contraction is Cartesian""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:19,Integrability,contract,contraction,19,"""""""Returns true if contraction is pure""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:51,Integrability,contract,contraction,51,"""""""Return coefficient of pi'th primitive and ci'th contraction""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:64,Integrability,contract,contraction,64,"""""""Return unnormalized coefficient of pi'th primitive and ci'th contraction""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py:40,Energy Efficiency,power,powers,40,"# This is an ECP, so we tack the radial powers onto the end of the list",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsgshell.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsgshell.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:69,Energy Efficiency,charge,charge,69,"""""""Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4's libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Roughly, this class mirrors `psi4.core.Molecule`; however, it's never; used directly and instead serves as a base class for `qcdb.Molecule`; in alongside-file molecule.py. >>> H2OH2O = qcdb.Molecule(\""\""\""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; \""\""\""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:16,Energy Efficiency,charge,charge,16,"# The molecular charge",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:16,Modifiability,variab,variables,16,"# A list of all variables known, whether they have been set or not.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:19,Modifiability,variab,variables,19,"# A listing of the variables used to define the geometries",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:6,Energy Efficiency,charge,charge,6,"# The charge of each fragment",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:89,Integrability,rout,routine,89,"""""""Get molecule provenance. >>> print(H2OH2O.provenance()); {'creator': 'QCElemental',; 'routine': 'qcelemental.molparse.from_arrays',; 'version': 'v0.1.0a+8.g465f4e3'}. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:22,Energy Efficiency,charge,charge,22,"""""""Gets the molecular charge. >>> print(H2OH2O.molecular_charge()); -2. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:22,Energy Efficiency,charge,charge,22,"""""""Sets the molecular charge. >>> H2OH2O.set_molecular_charge(-2). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:11,Energy Efficiency,charge,charge,11,"""""""Nuclear charge of atom (0-indexed). >>> print(H2OH2O.Z(4)); 1. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:55,Energy Efficiency,charge,charge,55,"""""""WARNING: Obtaining masses from atom with fractional charge...may be incorrect!!!\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:11,Energy Efficiency,charge,charge,11,"""""""Returns charge of atom (0-indexed).; Related to SAD guess in libmints version. >>> print(H2OH2O.charge(4)); 1.0. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:99,Energy Efficiency,charge,charge,99,"""""""Returns charge of atom (0-indexed).; Related to SAD guess in libmints version. >>> print(H2OH2O.charge(4)); 1.0. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:11,Energy Efficiency,charge,charge,11,"""""""Nuclear charge of atom (includes dummies). >>> print(H2OH2O.fZ(4)); 8. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:11,Energy Efficiency,charge,charge,11,"""""""Returns charge of atom (0-indexed, includes dummies).; Related to SAD guess in libmints version. >>> print(H2OH2O.fcharge(4)); 8.0. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:7,Energy Efficiency,charge,charge,7,"""""""The charge of each fragment. Returns; -------; list; (nfr, ) actual member data, for constructor use only. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:108,Energy Efficiency,charge,charge,108,"""""""Print the molecule.; (method name in libmints is print). >>> H2OH2O.print_out(); Geometry (in Angstrom), charge = -2, multiplicity = 3:; Center X Y Z; ------------ ----------------- ----------------- -----------------; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:22,Energy Efficiency,charge,charge,22,""""""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:22,Energy Efficiency,charge,charge,22,""""""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:22,Energy Efficiency,charge,charge,22,""""""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:22,Energy Efficiency,charge,charge,22,""""""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:4,Energy Efficiency,charge,charge,4,""""""" charge %d\t\tspecified? NA\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:139,Energy Efficiency,charge,charges,139,"""""""Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction.; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:61,Energy Efficiency,charge,charge,61,"# append atoms and coordentries and fragment separators with charge and multiplicity",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:24,Modifiability,variab,variables,24,"# append any coordinate variables",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:72,Modifiability,variab,variable,72,"""""""Attempts to interpret a string as a double, if not it assumes it's a variable. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:9,Modifiability,variab,variable,9,"# handle variable values, whether defined or not",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:18,Modifiability,variab,variable,18,"# handle negative variable values (ignore leading '-' and return minus the value)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:16,Modifiability,variab,variable,16,"# handle normal variable values",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:197,Energy Efficiency,charge,charge,197,"""""""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symbol* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *label* extended symbol with user info; *A* mass number; *lineno* line number when taken from a string. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:205,Energy Efficiency,charge,charge,205,"""""""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symbol* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *label* extended symbol with user info; *A* mass number; *lineno* line number when taken from a string. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:244,Modifiability,extend,extended,244,"""""""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symbol* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *label* extended symbol with user info; *A* mass number; *lineno* line number when taken from a string. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:42,Modifiability,variab,variable,42,"# For use with atoms defined with ZMAT or variable values, i.e., not Cartesian and NumberValue",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:72,Availability,toler,tolerance,72,"""""""Tests to see if an atom is at the passed position *b* in Bohr with a tolerance *tol*. >>> print(H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)])); 3. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:24,Modifiability,variab,variable,24,"""""""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:24,Modifiability,variab,variable,24,"""""""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:32,Modifiability,variab,variable,32,"""""""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:82,Modifiability,variab,variables,82,"""""""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:20,Modifiability,variab,variable,20,"""""""Setting geometry variable %s to %f""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:65,Safety,safe,safe,65,"# Update geometry might have added some atoms, delete them to be safe.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:37,Modifiability,variab,variable,37,"""""""Plain assigns the vlue val to the variable labeled string in the list of geometry variables.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:85,Modifiability,variab,variables,85,"""""""Plain assigns the vlue val to the variable labeled string in the list of geometry variables.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:106,Availability,error,error,106,"""""""Attempts to interpret a string *vstr* as an atom specifier in; a zmatrix. Takes the current *line* for error message printing.; Returns the atom number (adjusted to zero-based counting). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:112,Integrability,message,message,112,"""""""Attempts to interpret a string *vstr* as an atom specifier in; a zmatrix. Takes the current *line* for error message printing.; Returns the atom number (adjusted to zero-based counting). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:180,Integrability,rout,routine,180,"""""""Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule. >>> H2 = qcdb.Molecule(""H\\nH 1 0.74\\n""); >>> print(H2.natom()); 0; >>> H2.update_geometry(); >>> print(H2.natom()); 2. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:116,Modifiability,variab,variables,116,"""""""Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule. >>> H2 = qcdb.Molecule(""H\\nH 1 0.74\\n""); >>> print(H2.natom()); 0; >>> H2.update_geometry(); >>> print(H2.natom()); 2. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:146,Usability,clear,cleared,146,"""""""Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule. >>> H2 = qcdb.Molecule(""H\\nH 1 0.74\\n""); >>> print(H2.natom()); 0; >>> H2.update_geometry(); >>> print(H2.natom()); 2. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:65,Deployability,update,updated,65,"# Recompute point group of the molecule, so the symmetry info is updated to the new frame",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:30,Energy Efficiency,energy,energy,30,"""""""Computes nuclear repulsion energy. >>> print(H2OH2O.nuclear_repulsion_energy()); 36.6628478528. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:30,Energy Efficiency,energy,energy,30,"""""""Computes nuclear repulsion energy derivatives. >>> print(H2OH2O.nuclear_repulsion_energy_deriv1()); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:39,Energy Efficiency,energy,energy,39,""""""" **NYI** Computes nuclear repulsion energy second derivatives""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:100,Availability,error,error,100,"# change from libmints to 0-indexing and to real/ghost numbering, dummies not included (libmints >= error)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:2,Deployability,release,release,2,"# release orientation to be free",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:32,Availability,checkpoint,checkpoint,32,""""""" **NYI** Save information to checkpoint file; (method name in libmints is save_to_chkpt). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:16,Safety,detect,detect,16,"# Only needs to detect the 8 symmetry operations",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:12,Safety,detect,detected,12,"""""""No atoms detected, returning\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:52,Deployability,update,updated,52,"# Set the geometry to ensure z-matrix variables get updated",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py:38,Modifiability,variab,variables,38,"# Set the geometry to ensure z-matrix variables get updated",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintsmolecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintsmolecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py:8,Performance,perform,performs,8,"""""""This performs the transform r * this * r~""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintspointgrp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py:8,Performance,perform,performs,8,"""""""This performs the transform r * this * r~. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintspointgrp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py:94,Safety,abort,abort,94,"# ExEnv::err0() << indent; # << ""make_table: uh oh, can't find inverse of "" << gi << endl;; # abort();",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintspointgrp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py:814,Usability,simpl,simple,814,"# def equiv(self, grp, tol=1.0e-6):; # """"""Returns 1 if the point groups *self* and *grp* are equivalent,; # 0 otherwise.; #; # """"""; # return 1 if self.symb == grp.symb else 0; #PointGroup::PointGroup(const PointGroup& pg); #{; # *this = pg;; #}; #; #PointGroup::PointGroup(const boost::shared_ptr<PointGroup>& pg); #{; # *this = *pg.get();; #}; #; # """"""The PointGroup KeyVal constructor looks for three keywords:; # symmetry, symmetry_frame, and origin. symmetry is a string; # containing the Schoenflies symbol of the point group. origin is an; # array of doubles which gives the x, y, and z coordinates of the; # origin of the symmetry frame. symmetry_frame is a 3 by 3 array of; # arrays of doubles which specify the principal axes for the; # transformation matrices as a unitary rotation.; #; # For example, a simple input which will use the default origin and; # symmetry_frame ((0,0,0) and the unit matrix, respectively), might; # look like this:; #; # <pre>; # pointgrp<PointGroup>: (; # symmetry = ""c2v""; # ); # </pre>; #; # By default, the principal rotation axis is taken to be the z axis.; # If you already have a set of coordinates which assume that the; # rotation axis is the x axis, then you'll have to rotate your frame; # of reference with symmetry_frame:; #; # <pre>; # pointgrp<PointGroup>: (; # symmetry = ""c2v""; # symmetry_frame = [; # [ 0 0 1 ]; # [ 0 1 0 ]; # [ 1 0 0 ]; # ]; # ); # </pre>; # """"""; # // PointGroup(const Ref<KeyVal>&);; #; # // PointGroup(StateIn&);; # PointGroup(const PointGroup&);; # PointGroup(const boost::shared_ptr<PointGroup>&);; # ~PointGroup();; #; # PointGroup& operator=(const PointGroup&);; #PointGroup& PointGroup::operator=(const PointGroup& pg); #{; # set_symbol(pg.symb);; # origin_ = pg.origin_;; # return *this;; #}; #; # <<< Methods for Printing >>>",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintspointgrp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py:61,Usability,simpl,simple,61,"""""""From bit representation of point group, returns string of simple; (non-directional) Schoenflies symbol. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/libmintspointgrp.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/libmintspointgrp.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/modelchems.py:61,Availability,error,error,61,"""""""Specialization of :py:class:`QCEssential` for measures of error. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/modelchems.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/modelchems.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:69,Energy Efficiency,charge,charge,69,"""""""Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4's libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major. This class extends `qcdb.LibmintsMolecule` and occasionally; `psi4.core.Molecule` itself. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:284,Modifiability,extend,extends,284,"""""""Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4's libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major. This class extends `qcdb.LibmintsMolecule` and occasionally; `psi4.core.Molecule` itself. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:62,Modifiability,variab,variable,62,"""""""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:84,Modifiability,variab,variable,84,"""""""Function to overload accessing attribute contents to allow; retrival of geometry variable values as if member data. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:24,Security,access,accessing,24,"""""""Function to overload accessing attribute contents to allow; retrival of geometry variable values as if member data. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:106,Availability,avail,available,106,"""""""Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; *no_com* and *no_reorient* can be used to turn off shift and; rotation. If *xyzfilename* is a string of the contents of an XYZ; file, rather than the name of a file, set *contentsNotFilename*; to ``True``. >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:175,Availability,avail,available,175,"""""""Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; *no_com* and *no_reorient* can be used to turn off shift and; rotation. If *xyzfilename* is a string of the contents of an XYZ; file, rather than the name of a file, set *contentsNotFilename*; to ``True``. >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:220,Energy Efficiency,charge,charge,220,"""""""Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; *no_com* and *no_reorient* can be used to turn off shift and; rotation. If *xyzfilename* is a string of the contents of an XYZ; file, rather than the name of a file, set *contentsNotFilename*; to ``True``. >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:55,Safety,detect,detected,55,"""""""Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; *no_com* and *no_reorient* can be used to turn off shift and; rotation. If *xyzfilename* is a string of the contents of an XYZ; file, rather than the name of a file, set *contentsNotFilename*; to ``True``. >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:106,Availability,avail,available,106,"""""""Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; *no_com* and *no_reorient* can be used to turn off shift and; rotation. If *xyzfilename* is a string of the contents of an XYZ; file, rather than the name of a file, set *contentsNotFilename*; to ``True``. NOTE: chg/mult NYI. >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:175,Availability,avail,available,175,"""""""Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; *no_com* and *no_reorient* can be used to turn off shift and; rotation. If *xyzfilename* is a string of the contents of an XYZ; file, rather than the name of a file, set *contentsNotFilename*; to ``True``. NOTE: chg/mult NYI. >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:220,Energy Efficiency,charge,charge,220,"""""""Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; *no_com* and *no_reorient* can be used to turn off shift and; rotation. If *xyzfilename* is a string of the contents of an XYZ; file, rather than the name of a file, set *contentsNotFilename*; to ``True``. NOTE: chg/mult NYI. >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:55,Safety,detect,detected,55,"""""""Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; *no_com* and *no_reorient* can be used to turn off shift and; rotation. If *xyzfilename* is a string of the contents of an XYZ; file, rather than the name of a file, set *contentsNotFilename*; to ``True``. NOTE: chg/mult NYI. >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:7,Energy Efficiency,charge,charge,7,"## now charge and multiplicity; # $chargem = 0 ; $multm = 1 ;; #while (<MOL>) {; #if (/CHARGE/) { $chargem = <MOL> ; chop($chargem) ;}; #if (/MULTIPLICITY/) { $multm = <MOL> ; chop($multm) }; # } # end while charge and multiplicity",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:35,Energy Efficiency,charge,chargem,35,"## now charge and multiplicity; # $chargem = 0 ; $multm = 1 ;; #while (<MOL>) {; #if (/CHARGE/) { $chargem = <MOL> ; chop($chargem) ;}; #if (/MULTIPLICITY/) { $multm = <MOL> ; chop($multm) }; # } # end while charge and multiplicity",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:99,Energy Efficiency,charge,chargem,99,"## now charge and multiplicity; # $chargem = 0 ; $multm = 1 ;; #while (<MOL>) {; #if (/CHARGE/) { $chargem = <MOL> ; chop($chargem) ;}; #if (/MULTIPLICITY/) { $multm = <MOL> ; chop($multm) }; # } # end while charge and multiplicity",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:123,Energy Efficiency,charge,chargem,123,"## now charge and multiplicity; # $chargem = 0 ; $multm = 1 ;; #while (<MOL>) {; #if (/CHARGE/) { $chargem = <MOL> ; chop($chargem) ;}; #if (/MULTIPLICITY/) { $multm = <MOL> ; chop($multm) }; # } # end while charge and multiplicity",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:208,Energy Efficiency,charge,charge,208,"## now charge and multiplicity; # $chargem = 0 ; $multm = 1 ;; #while (<MOL>) {; #if (/CHARGE/) { $chargem = <MOL> ; chop($chargem) ;}; #if (/MULTIPLICITY/) { $multm = <MOL> ; chop($multm) }; # } # end while charge and multiplicity",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:61,Energy Efficiency,charge,charge,61,"# append atoms and coordentries and fragment separators with charge and multiplicity",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:119,Modifiability,variab,variables,119,"""""""Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour's favorite kind) have already been; converted into cartesian. Next step, if this line was pursued; would be to shift any zmat internal values to external and any; cartesian external values to internal. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:196,Modifiability,variab,variables,196,"""""""Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour's favorite kind) have already been; converted into cartesian. Next step, if this line was pursued; would be to shift any zmat internal values to external and any; cartesian external values to internal. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:313,Energy Efficiency,charge,charge,313,"## append units and any other non-default molecule keywords; #text += "" units %-s\n"" % (""Angstrom"" if self.units() == 'Angstrom' else ""Bohr""); #if not self.PYmove_to_com:; # text += "" no_com\n""; #if self.PYfix_orientation:; # text += "" no_reorient\n""; # append atoms and coordentries and fragment separators with charge and multiplicity",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:24,Modifiability,variab,variables,24,"# append any coordinate variables",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:22,Energy Efficiency,charge,charge,22,"""""""Computes center of charge of molecule (does not translate molecule). >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:31,Energy Efficiency,charge,charge,31,"""""""Moves molecule to center of charge. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:421,Security,hash,hash,421,"""""""Exports coordinate info into NumPy arrays. Parameters; ----------; dummy; Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy; Whether or not to treat ghost atoms as dummies. Returns; -------; geom, mass, elem, elez, uniq : numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray; (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost. Usage; -----; geom, mass, elem, elez, uniq = molinstance.to_arrays(). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:67,Integrability,wrap,wrapper,67,"""""""Construct Molecule from unvalidated arrays and variables. Light wrapper around :py:func:`~qcelemental.molparse.from_arrays`; that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance. Parameters; ----------; See :py:func:`~qcelemental.molparse.from_arrays`.; return_dict : bool, optional; Additionally return Molecule dictionary intermediate. Returns; -------; mol : :py:class:`~qcdb.Molecule`; molrec : dict, optional; Dictionary representation of instance.; Only provided if `return_dict` is True. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:50,Modifiability,variab,variables,50,"""""""Construct Molecule from unvalidated arrays and variables. Light wrapper around :py:func:`~qcelemental.molparse.from_arrays`; that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance. Parameters; ----------; See :py:func:`~qcelemental.molparse.from_arrays`.; return_dict : bool, optional; Additionally return Molecule dictionary intermediate. Returns; -------; mol : :py:class:`~qcdb.Molecule`; molrec : dict, optional; Dictionary representation of instance.; Only provided if `return_dict` is True. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:640,Availability,error,error,640,"""""""Compute dispersion correction via Grimme's DFTD3 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from `dashcoeff[dashlvl][func]` can be overwritten via; `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to override any or all values initialized by `func`.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ~numpy.ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ~numpy.ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:727,Energy Efficiency,energy,energy-only,727,"""""""Compute dispersion correction via Grimme's DFTD3 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from `dashcoeff[dashlvl][func]` can be overwritten via; `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to override any or all values initialized by `func`.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ~numpy.ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ~numpy.ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:779,Energy Efficiency,efficient,efficient,779,"""""""Compute dispersion correction via Grimme's DFTD3 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from `dashcoeff[dashlvl][func]` can be overwritten via; `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to override any or all values initialized by `func`.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ~numpy.ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ~numpy.ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:875,Energy Efficiency,energy,energy,875,"""""""Compute dispersion correction via Grimme's DFTD3 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from `dashcoeff[dashlvl][func]` can be overwritten via; `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to override any or all values initialized by `func`.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ~numpy.ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ~numpy.ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:909,Energy Efficiency,energy,energy,909,"""""""Compute dispersion correction via Grimme's DFTD3 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from `dashcoeff[dashlvl][func]` can be overwritten via; `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to override any or all values initialized by `func`.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ~numpy.ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ~numpy.ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:997,Energy Efficiency,energy,energy,997,"""""""Compute dispersion correction via Grimme's DFTD3 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from `dashcoeff[dashlvl][func]` can be overwritten via; `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to override any or all values initialized by `func`.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ~numpy.ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ~numpy.ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1078,Energy Efficiency,energy,energy,1078,"""""""Compute dispersion correction via Grimme's DFTD3 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from `dashcoeff[dashlvl][func]` can be overwritten via; `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to override any or all values initialized by `func`.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ~numpy.ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ~numpy.ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:677,Availability,error,error,677,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:764,Energy Efficiency,energy,energy-only,764,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:816,Energy Efficiency,efficient,efficient,816,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:912,Energy Efficiency,energy,energy,912,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:946,Energy Efficiency,energy,energy,946,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1027,Energy Efficiency,energy,energy,1027,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1101,Energy Efficiency,energy,energy,1101,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1172,Integrability,wrap,wraps,1172,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1211,Integrability,wrap,wraps,1211,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1382,Modifiability,extend,extending,1382,"""""""Compute dispersion correction via Grimme's DFTD4 program. Parameters; ----------; func; Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:344,Energy Efficiency,energy,energy,344,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:413,Energy Efficiency,energy,energy,413,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1038,Energy Efficiency,energy,energy-only,1038,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1090,Energy Efficiency,efficient,efficient,1090,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1205,Energy Efficiency,energy,energy,1205,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1239,Energy Efficiency,energy,energy,1239,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1320,Energy Efficiency,energy,energy,1320,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1394,Energy Efficiency,energy,energy,1394,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:712,Integrability,interface,interface,712,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:664,Modifiability,extend,extended,664,"""""""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:50,Integrability,wrap,wrapper,50,"""""""Construct Molecule from non-Psi4 schema. Light wrapper around :py:func:`~qcdb.Molecule.from_arrays`. Parameters; ----------; molschema : dict; Dictionary form of Molecule following known schema.; return_dict : bool, optional; Additionally return Molecule dictionary intermediate.; verbose : int, optional; Amount of printing. Returns; -------; mol : :py:class:`~qcdb.Molecule`; molrec : dict, optional; Dictionary representation of instance.; Only provided if `return_dict` is True. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:18,Performance,perform,performed,18,"# do trimming not performed in Molecule class b/c fragment_* member data never directly exposed",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:88,Security,expose,exposed,88,"# do trimming not performed in Molecule class b/c fragment_* member data never directly exposed",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:34,Security,validat,validated,34,"""""""Constructs instance from fully validated and defaulted dictionary `molrec`.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:7,Energy Efficiency,charge,charge,7,"# TODO charge and 2nd elez site; # TODO real back to type Ghost?",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1803,Availability,fault,faulty,1803,"""""""Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters; ----------; self : qcdb.Molecule or psi4.core.Molecule; seed_atoms; List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: `[[1, 0], [2]]`; bond_threshold; Factor beyond average of covalent radii to determine bond cutoff.; return_arrays; If `True`, also return fragments as list of arrays.; return_molecules; If True, also return fragments as list of Molecules.; return_molecule; If True, also return one big Molecule with fragmentation encoded. Returns; -------; bfs_map : list of lists; Array of atom indices (0-indexed) of detected fragments.; bfs_arrays : tuple of lists of ndarray, optional; geom, mass, elem info per-fragment.; Only provided if `return_arrays` is True.; bfs_molecules : list of qcdb.Molecule or psi4.core.Molecule, optional; List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from `self` is; not lost. Loses chgmult and ghost/dummy info from `self` and contains; default chgmult.; Only provided if `return_molecules` is True.; Returned are of same type as `self`.; bfs_molecule : qcdb.Molecule or psi4.core.Molecule, optional; Single molecule with same number of real atoms as `self` with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from `self`; keeps total charge but not total mult.; Only provided if `return_molecule` is True.; Returned is of same type as `self`. Authors; -------; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Notes; -----; Relies upon van der Waals radii and so faulty for close (especially hydrogen-bonded) fragments. See` `seed_atoms``.; Any existing fragmentation info/chgmult encoded in ``self`` is lost. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1508,Energy Efficiency,charge,charge,1508,"""""""Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters; ----------; self : qcdb.Molecule or psi4.core.Molecule; seed_atoms; List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: `[[1, 0], [2]]`; bond_threshold; Factor beyond average of covalent radii to determine bond cutoff.; return_arrays; If `True`, also return fragments as list of arrays.; return_molecules; If True, also return fragments as list of Molecules.; return_molecule; If True, also return one big Molecule with fragmentation encoded. Returns; -------; bfs_map : list of lists; Array of atom indices (0-indexed) of detected fragments.; bfs_arrays : tuple of lists of ndarray, optional; geom, mass, elem info per-fragment.; Only provided if `return_arrays` is True.; bfs_molecules : list of qcdb.Molecule or psi4.core.Molecule, optional; List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from `self` is; not lost. Loses chgmult and ghost/dummy info from `self` and contains; default chgmult.; Only provided if `return_molecules` is True.; Returned are of same type as `self`.; bfs_molecule : qcdb.Molecule or psi4.core.Molecule, optional; Single molecule with same number of real atoms as `self` with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from `self`; keeps total charge but not total mult.; Only provided if `return_molecule` is True.; Returned is of same type as `self`. Authors; -------; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Notes; -----; Relies upon van der Waals radii and so faulty for close (especially hydrogen-bonded) fragments. See` `seed_atoms``.; Any existing fragmentation info/chgmult encoded in ``self`` is lost. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:737,Safety,detect,detected,737,"""""""Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters; ----------; self : qcdb.Molecule or psi4.core.Molecule; seed_atoms; List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: `[[1, 0], [2]]`; bond_threshold; Factor beyond average of covalent radii to determine bond cutoff.; return_arrays; If `True`, also return fragments as list of arrays.; return_molecules; If True, also return fragments as list of Molecules.; return_molecule; If True, also return one big Molecule with fragmentation encoded. Returns; -------; bfs_map : list of lists; Array of atom indices (0-indexed) of detected fragments.; bfs_arrays : tuple of lists of ndarray, optional; geom, mass, elem info per-fragment.; Only provided if `return_arrays` is True.; bfs_molecules : list of qcdb.Molecule or psi4.core.Molecule, optional; List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from `self` is; not lost. Loses chgmult and ghost/dummy info from `self` and contains; default chgmult.; Only provided if `return_molecules` is True.; Returned are of same type as `self`.; bfs_molecule : qcdb.Molecule or psi4.core.Molecule, optional; Single molecule with same number of real atoms as `self` with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from `self`; keeps total charge but not total mult.; Only provided if `return_molecule` is True.; Returned is of same type as `self`. Authors; -------; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped by Lori A. Burns. Notes; -----; Relies upon van der Waals radii and so faulty for close (especially hydrogen-bonded) fragments. See` `seed_atoms``.; Any existing fragmentation info/chgmult encoded in ``self`` is lost. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:11,Energy Efficiency,adapt,adapted,11,"""""""BFS not adapted for dummy atoms""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:11,Modifiability,adapt,adapted,11,"""""""BFS not adapted for dummy atoms""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1756,Energy Efficiency,charge,charge,1756,"""""""Finds shift, rotation, and atom reordering of `concern_mol` that best; aligns with `ref_mol`. Wraps :py:func:`qcelemental.molutil.B787` for :py:class:`psi4.driver.qcdb.Molecule` or; :py:class:`psi4.core.Molecule`. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters; ----------; concern_mol; Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with `ref_mol`.; ref_mol; Molecule to match.; atoms_map; Whether atom1 of `ref_mol` corresponds to atom1 of `concern_mol`, etc.; If true, specifying `True` can save much time.; mols_align; Whether `ref_mol` and `concern_mol` have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If `True`, procedure is truncated when RMSD condition met, saving time.; do_plot; Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion; Run reorderings to completion (past RMSD = 0) even if unnecessary because; `mols_align=True`. Used to test worst-case timings.; run_resorting; Run the resorting machinery even if unnecessary because `atoms_map=True`.; uno_cutoff; TODO; run_mirror; Run alternate geometries potentially allowing best match to `ref_mol`; from mirror image of `concern_mol`. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns; -------; float, tuple, qcdb.Molecule or psi4.core.Molecule; First item is RMSD [A] between `ref_mol` and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from `concern_mol` and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by `concern_mol` type. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1065,Testability,test,test,1065,"""""""Finds shift, rotation, and atom reordering of `concern_mol` that best; aligns with `ref_mol`. Wraps :py:func:`qcelemental.molutil.B787` for :py:class:`psi4.driver.qcdb.Molecule` or; :py:class:`psi4.core.Molecule`. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters; ----------; concern_mol; Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with `ref_mol`.; ref_mol; Molecule to match.; atoms_map; Whether atom1 of `ref_mol` corresponds to atom1 of `concern_mol`, etc.; If true, specifying `True` can save much time.; mols_align; Whether `ref_mol` and `concern_mol` have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If `True`, procedure is truncated when RMSD condition met, saving time.; do_plot; Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion; Run reorderings to completion (past RMSD = 0) even if unnecessary because; `mols_align=True`. Used to test worst-case timings.; run_resorting; Run the resorting machinery even if unnecessary because `atoms_map=True`.; uno_cutoff; TODO; run_mirror; Run alternate geometries potentially allowing best match to `ref_mol`; from mirror image of `concern_mol`. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns; -------; float, tuple, qcdb.Molecule or psi4.core.Molecule; First item is RMSD [A] between `ref_mol` and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from `concern_mol` and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by `concern_mol` type. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py:1204,Testability,test,test,1204,"""""""Tester for B787 by shifting, rotating, and atom shuffling `ref_mol` and; checking that the aligner returns the opposite transformation. Parameters; ----------; ref_mol; Molecule to perturb.; do_shift; Whether to generate a random atom shift on interval [-3, 3) in each; dimension (`True`) or leave at current origin. To shift by a specified; vector, supply a 3-element list.; do_rotate; Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort; Whether to shuffle atoms (`True`) or leave 1st atom 1st, etc. (`False`).; To specify shuffle, supply a nat-element list of indices.; deflection; If `do_rotate`, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror; Whether to construct the mirror image structure by inverting y-axis.; do_plot; Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion; By construction, scrambled systems are fully alignable (final RMSD=0).; Even so, `True` turns off the mechanism to stop when RMSD reaches zero; and instead proceed to worst possible time.; run_resorting; Even if atoms not shuffled, test the resorting machinery.; verbose; Print level. Returns; -------; None. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molecule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molecule.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:23,Safety,predict,predictable,23,"""""""Auxiliary basis not predictable from orbital basis '%s'""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:25,Energy Efficiency,charge,charges,25,"# format molecule, incl. charges and dummy atoms",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:523,Energy Efficiency,energy,energy,523,"#'mp2c': [ # this job computes one part [E_disp(TDDFT)] of the three parts of a MP2C calculation; # # check that nfrag = 2; # 'gdirect',; # 'ga=1101.2; gb=1102.2',; # 'ca=2101.2; cb=2102.2\n',; #; # $spin = $cgmp{MLPmol1} - 1;; # 'SET,CHARGE=$cgmp{CHGmol1}',; # 'SET,SPIN=$spin',; # 'dummy',; # foreach $at (@monoBreal) { print $handle "",$at""; }; # ''; # '{df-hf,basis=jkfit,locorb=0; start,atdens; save,$ga}',; # '{df-ks,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,1.0; start,$ga; save,$ca}',; # 'eehfa=energy; sapt; monomerA',; # '',; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-hf,basis=jkfit,locorb=0; start,atdens; save,\$gb}\n"";; # print $handle ""{df-ks,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,1.0; start,\$gb; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt,SAPT_LEVEL=3; intermol,ca=\$ca,cb=\$cb,icpks=0,fitlevel=3,nlexfac=0.0,cfac=0.0\n"";; # print $handle ""dfit,basis_coul=jkfit,basis_exch=jkfit,cfit_scf=3}\n"";; # print $handle ""eedisp=E2disp\n\n"";; #; # ],",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:934,Energy Efficiency,energy,energy,934,"#'mp2c': [ # this job computes one part [E_disp(TDDFT)] of the three parts of a MP2C calculation; # # check that nfrag = 2; # 'gdirect',; # 'ga=1101.2; gb=1102.2',; # 'ca=2101.2; cb=2102.2\n',; #; # $spin = $cgmp{MLPmol1} - 1;; # 'SET,CHARGE=$cgmp{CHGmol1}',; # 'SET,SPIN=$spin',; # 'dummy',; # foreach $at (@monoBreal) { print $handle "",$at""; }; # ''; # '{df-hf,basis=jkfit,locorb=0; start,atdens; save,$ga}',; # '{df-ks,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,1.0; start,$ga; save,$ca}',; # 'eehfa=energy; sapt; monomerA',; # '',; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-hf,basis=jkfit,locorb=0; start,atdens; save,\$gb}\n"";; # print $handle ""{df-ks,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,1.0; start,\$gb; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt,SAPT_LEVEL=3; intermol,ca=\$ca,cb=\$cb,icpks=0,fitlevel=3,nlexfac=0.0,cfac=0.0\n"";; # print $handle ""dfit,basis_coul=jkfit,basis_exch=jkfit,cfit_scf=3}\n"";; # print $handle ""eedisp=E2disp\n\n"";; #; # ],",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:454,Energy Efficiency,charge,charge,454,"#'dft-sapt-shift': [; #; # # this is written in an inflexible way (fixed basis, functional) so that it is computed; # # only once, then used when writing DFT-SAPT inputs, which we'll be more flexible with; #; # print $handle ""basis={\n"";; # print $handle ""set,orbital; default,aug-cc-pVQZ\n"";; # print $handle ""set,jkfit; default,avqz/jkfit\n"";; # print $handle ""set,dflhf; default,avqz/jkfit\n"";; # print $handle ""}\n"";; #; # if ($handle eq ""M1OUT"") { $charge = $cgmp{CHGmol1}; $spin = $cgmp{MLPmol1} - 1; }; # elsif ($handle eq ""M2OUT"") { $charge = $cgmp{CHGmol2}; $spin = $cgmp{MLPmol2} - 1; }; #; # print $handle ""\ngdirect\n"";; # print $handle ""{df-ks,pbex,pw91c,lhf; dftfac,0.75,1.0,0.25}\n"";; # print $handle ""basis=tzvpp\n"";; # print $handle ""{ks,pbe0; orbprint,0}\n"";; # print $handle ""eeneut=energy\n"";; # $charge += 1;; # $spin += 1;; # print $handle ""SET,CHARGE=$charge\nSET,SPIN=$spin\n"";; # print $handle ""{ks,pbe0}\n"";; # print $handle ""eecat=energy\n"";; # print $handle ""eeie=eecat-eeneut\n"";; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # ]; #'dft-sapt': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""gdirect\n"";; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dft",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:542,Energy Efficiency,charge,charge,542,"#'dft-sapt-shift': [; #; # # this is written in an inflexible way (fixed basis, functional) so that it is computed; # # only once, then used when writing DFT-SAPT inputs, which we'll be more flexible with; #; # print $handle ""basis={\n"";; # print $handle ""set,orbital; default,aug-cc-pVQZ\n"";; # print $handle ""set,jkfit; default,avqz/jkfit\n"";; # print $handle ""set,dflhf; default,avqz/jkfit\n"";; # print $handle ""}\n"";; #; # if ($handle eq ""M1OUT"") { $charge = $cgmp{CHGmol1}; $spin = $cgmp{MLPmol1} - 1; }; # elsif ($handle eq ""M2OUT"") { $charge = $cgmp{CHGmol2}; $spin = $cgmp{MLPmol2} - 1; }; #; # print $handle ""\ngdirect\n"";; # print $handle ""{df-ks,pbex,pw91c,lhf; dftfac,0.75,1.0,0.25}\n"";; # print $handle ""basis=tzvpp\n"";; # print $handle ""{ks,pbe0; orbprint,0}\n"";; # print $handle ""eeneut=energy\n"";; # $charge += 1;; # $spin += 1;; # print $handle ""SET,CHARGE=$charge\nSET,SPIN=$spin\n"";; # print $handle ""{ks,pbe0}\n"";; # print $handle ""eecat=energy\n"";; # print $handle ""eeie=eecat-eeneut\n"";; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # ]; #'dft-sapt': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""gdirect\n"";; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dft",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:802,Energy Efficiency,energy,energy,802,"#'dft-sapt-shift': [; #; # # this is written in an inflexible way (fixed basis, functional) so that it is computed; # # only once, then used when writing DFT-SAPT inputs, which we'll be more flexible with; #; # print $handle ""basis={\n"";; # print $handle ""set,orbital; default,aug-cc-pVQZ\n"";; # print $handle ""set,jkfit; default,avqz/jkfit\n"";; # print $handle ""set,dflhf; default,avqz/jkfit\n"";; # print $handle ""}\n"";; #; # if ($handle eq ""M1OUT"") { $charge = $cgmp{CHGmol1}; $spin = $cgmp{MLPmol1} - 1; }; # elsif ($handle eq ""M2OUT"") { $charge = $cgmp{CHGmol2}; $spin = $cgmp{MLPmol2} - 1; }; #; # print $handle ""\ngdirect\n"";; # print $handle ""{df-ks,pbex,pw91c,lhf; dftfac,0.75,1.0,0.25}\n"";; # print $handle ""basis=tzvpp\n"";; # print $handle ""{ks,pbe0; orbprint,0}\n"";; # print $handle ""eeneut=energy\n"";; # $charge += 1;; # $spin += 1;; # print $handle ""SET,CHARGE=$charge\nSET,SPIN=$spin\n"";; # print $handle ""{ks,pbe0}\n"";; # print $handle ""eecat=energy\n"";; # print $handle ""eeie=eecat-eeneut\n"";; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # ]; #'dft-sapt': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""gdirect\n"";; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dft",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:817,Energy Efficiency,charge,charge,817,"#'dft-sapt-shift': [; #; # # this is written in an inflexible way (fixed basis, functional) so that it is computed; # # only once, then used when writing DFT-SAPT inputs, which we'll be more flexible with; #; # print $handle ""basis={\n"";; # print $handle ""set,orbital; default,aug-cc-pVQZ\n"";; # print $handle ""set,jkfit; default,avqz/jkfit\n"";; # print $handle ""set,dflhf; default,avqz/jkfit\n"";; # print $handle ""}\n"";; #; # if ($handle eq ""M1OUT"") { $charge = $cgmp{CHGmol1}; $spin = $cgmp{MLPmol1} - 1; }; # elsif ($handle eq ""M2OUT"") { $charge = $cgmp{CHGmol2}; $spin = $cgmp{MLPmol2} - 1; }; #; # print $handle ""\ngdirect\n"";; # print $handle ""{df-ks,pbex,pw91c,lhf; dftfac,0.75,1.0,0.25}\n"";; # print $handle ""basis=tzvpp\n"";; # print $handle ""{ks,pbe0; orbprint,0}\n"";; # print $handle ""eeneut=energy\n"";; # $charge += 1;; # $spin += 1;; # print $handle ""SET,CHARGE=$charge\nSET,SPIN=$spin\n"";; # print $handle ""{ks,pbe0}\n"";; # print $handle ""eecat=energy\n"";; # print $handle ""eeie=eecat-eeneut\n"";; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # ]; #'dft-sapt': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""gdirect\n"";; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dft",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:875,Energy Efficiency,charge,charge,875,"#'dft-sapt-shift': [; #; # # this is written in an inflexible way (fixed basis, functional) so that it is computed; # # only once, then used when writing DFT-SAPT inputs, which we'll be more flexible with; #; # print $handle ""basis={\n"";; # print $handle ""set,orbital; default,aug-cc-pVQZ\n"";; # print $handle ""set,jkfit; default,avqz/jkfit\n"";; # print $handle ""set,dflhf; default,avqz/jkfit\n"";; # print $handle ""}\n"";; #; # if ($handle eq ""M1OUT"") { $charge = $cgmp{CHGmol1}; $spin = $cgmp{MLPmol1} - 1; }; # elsif ($handle eq ""M2OUT"") { $charge = $cgmp{CHGmol2}; $spin = $cgmp{MLPmol2} - 1; }; #; # print $handle ""\ngdirect\n"";; # print $handle ""{df-ks,pbex,pw91c,lhf; dftfac,0.75,1.0,0.25}\n"";; # print $handle ""basis=tzvpp\n"";; # print $handle ""{ks,pbe0; orbprint,0}\n"";; # print $handle ""eeneut=energy\n"";; # $charge += 1;; # $spin += 1;; # print $handle ""SET,CHARGE=$charge\nSET,SPIN=$spin\n"";; # print $handle ""{ks,pbe0}\n"";; # print $handle ""eecat=energy\n"";; # print $handle ""eeie=eecat-eeneut\n"";; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # ]; #'dft-sapt': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""gdirect\n"";; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dft",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:958,Energy Efficiency,energy,energy,958,"#'dft-sapt-shift': [; #; # # this is written in an inflexible way (fixed basis, functional) so that it is computed; # # only once, then used when writing DFT-SAPT inputs, which we'll be more flexible with; #; # print $handle ""basis={\n"";; # print $handle ""set,orbital; default,aug-cc-pVQZ\n"";; # print $handle ""set,jkfit; default,avqz/jkfit\n"";; # print $handle ""set,dflhf; default,avqz/jkfit\n"";; # print $handle ""}\n"";; #; # if ($handle eq ""M1OUT"") { $charge = $cgmp{CHGmol1}; $spin = $cgmp{MLPmol1} - 1; }; # elsif ($handle eq ""M2OUT"") { $charge = $cgmp{CHGmol2}; $spin = $cgmp{MLPmol2} - 1; }; #; # print $handle ""\ngdirect\n"";; # print $handle ""{df-ks,pbex,pw91c,lhf; dftfac,0.75,1.0,0.25}\n"";; # print $handle ""basis=tzvpp\n"";; # print $handle ""{ks,pbe0; orbprint,0}\n"";; # print $handle ""eeneut=energy\n"";; # $charge += 1;; # $spin += 1;; # print $handle ""SET,CHARGE=$charge\nSET,SPIN=$spin\n"";; # print $handle ""{ks,pbe0}\n"";; # print $handle ""eecat=energy\n"";; # print $handle ""eeie=eecat-eeneut\n"";; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # ]; #'dft-sapt': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""gdirect\n"";; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dft",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:1718,Energy Efficiency,energy,energy,1718,"spin += 1;; # print $handle ""SET,CHARGE=$charge\nSET,SPIN=$spin\n"";; # print $handle ""{ks,pbe0}\n"";; # print $handle ""eecat=energy\n"";; # print $handle ""eeie=eecat-eeneut\n"";; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # ]; #'dft-sapt': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""gdirect\n"";; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyB; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt,sapt_level=3; intermol,ca=\$ca,cb=\$cb,icpks=0,fitlevel=3,nlexfac=0.0\n"";; # print $handle ""dfit,basis_coul=jkfit,basis_exch=jkfit,basis_mp2=mp2fit,cfit_scf=3}\n"";; # print $handle ""eeelst=E1pol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; #; # ]; #'dft-sapt-pbe0ac': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # p",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:2072,Energy Efficiency,energy,energy,2072,"$asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""gdirect\n"";; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyB; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt,sapt_level=3; intermol,ca=\$ca,cb=\$cb,icpks=0,fitlevel=3,nlexfac=0.0\n"";; # print $handle ""dfit,basis_coul=jkfit,basis_exch=jkfit,basis_mp2=mp2fit,cfit_scf=3}\n"";; # print $handle ""eeelst=E1pol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; #; # ]; #'dft-sapt-pbe0ac': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spi",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:3115,Energy Efficiency,energy,energy,3115,"ol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; #; # ]; #'dft-sapt-pbe0ac': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyB; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt; intermol,ca=\$ca,cb=\$cb,icpks=0}\n"";; # print $handle ""eeelst=E1pol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; # ]; #'dft-sapt-pbe0acalda': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SP",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:3383,Energy Efficiency,energy,energy,3383,"ol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; #; # ]; #'dft-sapt-pbe0ac': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyB; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt; intermol,ca=\$ca,cb=\$cb,icpks=0}\n"";; # print $handle ""eeelst=E1pol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; # ]; #'dft-sapt-pbe0acalda': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SP",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:4302,Energy Efficiency,energy,energy,4302,"gmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyB; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt; intermol,ca=\$ca,cb=\$cb,icpks=0}\n"";; # print $handle ""eeelst=E1pol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; # ]; #'dft-sapt-pbe0acalda': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyB; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt,sapt_level=3; intermol,ca=\$ca,cb=\$cb,icpks=0,fitlevel=3,nlexfac=0.0\n"";; # print $handle ""dfit,basis_coul=jkfit,basis_exch=jkfit,basis_mp2=mp2fit,cfit_scf=3}\n"";; # print $handle ""eeelst=E1pol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; #; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # }; #",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:4570,Energy Efficiency,energy,energy,4570,"gmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyB; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt; intermol,ca=\$ca,cb=\$cb,icpks=0}\n"";; # print $handle ""eeelst=E1pol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; # ]; #'dft-sapt-pbe0acalda': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{ks,pbe0; asymp,$asyB; save,\$cb}\n"";; # print $handle ""eehfb=energy; sapt; monomerB\n\n"";; #; # $spin = $cgmp{MLPsyst} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGsyst}\nSET,SPIN=$spin\n"";; # print $handle ""{sapt,sapt_level=3; intermol,ca=\$ca,cb=\$cb,icpks=0,fitlevel=3,nlexfac=0.0\n"";; # print $handle ""dfit,basis_coul=jkfit,basis_exch=jkfit,basis_mp2=mp2fit,cfit_scf=3}\n"";; # print $handle ""eeelst=E1pol\n"";; # print $handle ""eeexch=E1ex\n"";; # print $handle ""eeind=E2ind\n"";; # print $handle ""eeexind=E2exind\n"";; # print $handle ""eedisp=E2disp\n"";; # print $handle ""eeexdisp=E2exdisp\n\n"";; #; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # }; #",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py:191,Modifiability,flexible,flexible,191,"#'dft-sapt-shift': [; #; # # this is written in an inflexible way (fixed basis, functional) so that it is computed; # # only once, then used when writing DFT-SAPT inputs, which we'll be more flexible with; #; # print $handle ""basis={\n"";; # print $handle ""set,orbital; default,aug-cc-pVQZ\n"";; # print $handle ""set,jkfit; default,avqz/jkfit\n"";; # print $handle ""set,dflhf; default,avqz/jkfit\n"";; # print $handle ""}\n"";; #; # if ($handle eq ""M1OUT"") { $charge = $cgmp{CHGmol1}; $spin = $cgmp{MLPmol1} - 1; }; # elsif ($handle eq ""M2OUT"") { $charge = $cgmp{CHGmol2}; $spin = $cgmp{MLPmol2} - 1; }; #; # print $handle ""\ngdirect\n"";; # print $handle ""{df-ks,pbex,pw91c,lhf; dftfac,0.75,1.0,0.25}\n"";; # print $handle ""basis=tzvpp\n"";; # print $handle ""{ks,pbe0; orbprint,0}\n"";; # print $handle ""eeneut=energy\n"";; # $charge += 1;; # $spin += 1;; # print $handle ""SET,CHARGE=$charge\nSET,SPIN=$spin\n"";; # print $handle ""{ks,pbe0}\n"";; # print $handle ""eecat=energy\n"";; # print $handle ""eeie=eecat-eeneut\n"";; # print $handle ""show[1,20f20.12],ee*,ce*,te*\n"";; # print $handle ""show[1,60f20.12],_E*\n"";; # ]; #'dft-sapt': [; #; # if ( ($asyA eq '') || ($asyB eq '') ) {; # print ""ERROR: asymptotic correction not defined for one or more monomers in index $system.\n"";; # close(DIOUT);; # unlink(""$pathDIOUT"");; # }; #; # print $handle ""gdirect\n"";; # print $handle ""ca=2101.2; cb=2102.2\n\n"";; #; # $spin = $cgmp{MLPmol1} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol1}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoBreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dftfac,0.75,1.0,0.25; asymp,$asyA; save,\$ca}\n"";; # print $handle ""eehfa=energy; sapt; monomerA\n\n"";; #; # $spin = $cgmp{MLPmol2} - 1;; # print $handle ""SET,CHARGE=$cgmp{CHGmol2}\nSET,SPIN=$spin\ndummy"";; # foreach $at (@monoAreal) { print $handle "",$at""; }; # print $handle ""\n{df-ks,pbex,pw91c,lhf,df_basis=dflhf,basis_coul=jkfitb,basis_exch=jkfitb; dft",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro2.py:23,Safety,predict,predictable,23,"""""""Auxiliary basis not predictable from orbital basis '%s'""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro2.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro2.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro2.py:23,Safety,predict,predictable,23,"""""""Auxiliary basis not predictable from orbital basis '%s'""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro2.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro2.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro2.py:36,Availability,avail,available,36,"""""""Requested Psi4 dertype %d is not available.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro2.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro2.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro2.py:51,Availability,avail,available,51,"""""""Requested Cfour computational methods %d is not available.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro2.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro2.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py:941,Performance,load,load,941,"#; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; # load jul-cc-pVDZ basis set; # load jun-cc-pVDZ basis set; # load jul-cc-pVTZ basis set; # load jun-cc-pVTZ basis set; # load may-cc-pVTZ basis set; # load jul-cc-pVQZ basis set; # load jun-cc-pVQZ basis set; # load may-cc-pVQZ basis set; # load apr-cc-pVQZ basis set",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro_basissets.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py:971,Performance,load,load,971,"#; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; # load jul-cc-pVDZ basis set; # load jun-cc-pVDZ basis set; # load jul-cc-pVTZ basis set; # load jun-cc-pVTZ basis set; # load may-cc-pVTZ basis set; # load jul-cc-pVQZ basis set; # load jun-cc-pVQZ basis set; # load may-cc-pVQZ basis set; # load apr-cc-pVQZ basis set",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro_basissets.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py:1001,Performance,load,load,1001,"#; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; # load jul-cc-pVDZ basis set; # load jun-cc-pVDZ basis set; # load jul-cc-pVTZ basis set; # load jun-cc-pVTZ basis set; # load may-cc-pVTZ basis set; # load jul-cc-pVQZ basis set; # load jun-cc-pVQZ basis set; # load may-cc-pVQZ basis set; # load apr-cc-pVQZ basis set",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro_basissets.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py:1031,Performance,load,load,1031,"#; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; # load jul-cc-pVDZ basis set; # load jun-cc-pVDZ basis set; # load jul-cc-pVTZ basis set; # load jun-cc-pVTZ basis set; # load may-cc-pVTZ basis set; # load jul-cc-pVQZ basis set; # load jun-cc-pVQZ basis set; # load may-cc-pVQZ basis set; # load apr-cc-pVQZ basis set",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro_basissets.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py:1061,Performance,load,load,1061,"#; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; # load jul-cc-pVDZ basis set; # load jun-cc-pVDZ basis set; # load jul-cc-pVTZ basis set; # load jun-cc-pVTZ basis set; # load may-cc-pVTZ basis set; # load jul-cc-pVQZ basis set; # load jun-cc-pVQZ basis set; # load may-cc-pVQZ basis set; # load apr-cc-pVQZ basis set",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro_basissets.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py:1091,Performance,load,load,1091,"#; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; # load jul-cc-pVDZ basis set; # load jun-cc-pVDZ basis set; # load jul-cc-pVTZ basis set; # load jun-cc-pVTZ basis set; # load may-cc-pVTZ basis set; # load jul-cc-pVQZ basis set; # load jun-cc-pVQZ basis set; # load may-cc-pVQZ basis set; # load apr-cc-pVQZ basis set",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro_basissets.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py:1121,Performance,load,load,1121,"#; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; # load jul-cc-pVDZ basis set; # load jun-cc-pVDZ basis set; # load jul-cc-pVTZ basis set; # load jun-cc-pVTZ basis set; # load may-cc-pVTZ basis set; # load jul-cc-pVQZ basis set; # load jun-cc-pVQZ basis set; # load may-cc-pVQZ basis set; # load apr-cc-pVQZ basis set",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro_basissets.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py:1151,Performance,load,load,1151,"#; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; # load jul-cc-pVDZ basis set; # load jun-cc-pVDZ basis set; # load jul-cc-pVTZ basis set; # load jun-cc-pVTZ basis set; # load may-cc-pVTZ basis set; # load jul-cc-pVQZ basis set; # load jun-cc-pVQZ basis set; # load may-cc-pVQZ basis set; # load apr-cc-pVQZ basis set",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro_basissets.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py:1181,Performance,load,load,1181,"#; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; # load jul-cc-pVDZ basis set; # load jun-cc-pVDZ basis set; # load jul-cc-pVTZ basis set; # load jun-cc-pVTZ basis set; # load may-cc-pVTZ basis set; # load jul-cc-pVQZ basis set; # load jun-cc-pVQZ basis set; # load may-cc-pVQZ basis set; # load apr-cc-pVQZ basis set",MatchSource.CODE_COMMENT,psi4/driver/qcdb/molpro_basissets.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/molpro_basissets.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:35,Integrability,rout,routines,35,"""""""Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:102,Availability,avail,availibility,102,"""""""Find appropriate color expression between overall color directive; *argcolor* and particular color availibility *rxncolor*. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:2,Security,validat,validate,2,"# validate any sapt color",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:25,Availability,avail,available,25,"# sapt color from rxn if available",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:34,Availability,avail,available,34,"# HB/MX/DD sapt color from rxn if available",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:66,Availability,error,error,66,"""""""Generates a 'gray-bars' diagram between model chemistries with error; statistics in list *data*, which is supplied as part of the dictionary; for each participating bar/modelchem, along with *mc* keys in argument; *data*. The plot is labeled with *title* and each bar with *mc* key and; plotted at a fixed scale to facilitate comparison across projects. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:59,Availability,error,errors,59,"""""""Generates a slat diagram between model chemistries with errors in; single-item list *data*, which is supplied as part of the dictionary; for each participating reaction, along with *dbse* and *rxn* keys in; argument *data*. Limits of plot are *xlimit* from the zero-line. If; *color* is None, slats are black, if 'sapt', colors are taken from; sapt_colors module. Summary statistic *mae* is plotted on the; overbound side and relative statistic *mape* on the underbound side.; Saves a file with name *title* and plots to screen if *view*. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:6,Deployability,patch,patch,6,"# fig.patch.set_visible(False); # ax.patch.set_visible(False)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:37,Deployability,patch,patch,37,"# fig.patch.set_visible(False); # ax.patch.set_visible(False)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:16,Availability,error,errors,16,"# plot reaction errors and threads",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:50,Energy Efficiency,energy,energy,50,"# equivalent to MAE for a 10 kcal/mol interaction energy",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:48,Deployability,integrat,integration,48,"# simple (not really unique) filename for LaTeX integration",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:48,Integrability,integrat,integration,48,"# simple (not really unique) filename for LaTeX integration",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:2,Usability,simpl,simple,2,"# simple (not really unique) filename for LaTeX integration",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:185,Availability,error,errors,185,"#def mpl_distslat_multiplot_files(pltfile, dbid, dbname, xmin, xmax, mcdats, labels, titles):; # """"""Saves a plot with basename *pltfile* with a slat representation; # of the modelchems errors in *mcdat*. Plot is in PNG, PDF, & EPS; # and suitable for download, no mouseover properties. Both labeled; # and labelless (for pub) figures are constructed.; #; # """"""; # import matplotlib as mpl; # from matplotlib.axes import Subplot; # import sapt_colors; # from matplotlib.figure import Figure; #; # nplots = len(mcdats); # fht = nplots * 0.8; # fig, axt = plt.subplots(figsize=(12.0, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); #; # axt.set_xticks([]); # axt.set_yticks([]); # plt.axis('off'); #; # for item in range(nplots):; # mcdat = mcdats[item]; # label = labels[item]; # title = titles[item]; #; # erdat = np.array(mcdat); # yvals = np.ones(len(mcdat)); # y = np.array([sapt_colors.sapt_colors[dbname][i] for i in label]); #; # ax = Subplot(fig, nplots, 1, item + 1); # fig.add_subplot(ax); # sc = ax.scatter(erdat, yvals, c=y, s=3000, marker=""|"", cmap=mpl.cm.jet, vmin=0, vmax=1); #; # ax.set_yticks([]); # ax.set_xticks([]); # ax.set_frame_on(False); # ax.set_xlim([xmin, xmax]); #; # # Write files with only slats; # plt.savefig('scratch/' + pltfile + '_plain' + '.png', transparent=True, format='PNG'); # plt.savefig('scratch/' + pltfile + '_plain' + '.pdf', transparent=True, format='PDF'); # plt.savefig('scratch/' + pltfile + '_plain' + '.eps', transparent=True, format='EPS'); #; # # Rewrite files with guides and labels; # for item in range(nplots):; # ax_again = fig.add_subplot(nplots, 1, item + 1); # ax_again.set_title(titles[item], fontsize=8); # ax_again.text(xmin + 0.3, 1.0, stats(np.array(mcdats[item])), fontsize=7, family='monospace', verticalalignment='center'); # ax_again.plot([0, 0], [0.9, 1.1], color='#cccc00', lw=2); # ax_again.set_frame_on(False); # ax_again.set_yticks([]); # ax_again.set_xticks([-12.0, -8.0, -4.0, -2.0, -1.0, 0.0, 1.0, 2.0, 4.0, ",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:251,Availability,down,download,251,"#def mpl_distslat_multiplot_files(pltfile, dbid, dbname, xmin, xmax, mcdats, labels, titles):; # """"""Saves a plot with basename *pltfile* with a slat representation; # of the modelchems errors in *mcdat*. Plot is in PNG, PDF, & EPS; # and suitable for download, no mouseover properties. Both labeled; # and labelless (for pub) figures are constructed.; #; # """"""; # import matplotlib as mpl; # from matplotlib.axes import Subplot; # import sapt_colors; # from matplotlib.figure import Figure; #; # nplots = len(mcdats); # fht = nplots * 0.8; # fig, axt = plt.subplots(figsize=(12.0, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); #; # axt.set_xticks([]); # axt.set_yticks([]); # plt.axis('off'); #; # for item in range(nplots):; # mcdat = mcdats[item]; # label = labels[item]; # title = titles[item]; #; # erdat = np.array(mcdat); # yvals = np.ones(len(mcdat)); # y = np.array([sapt_colors.sapt_colors[dbname][i] for i in label]); #; # ax = Subplot(fig, nplots, 1, item + 1); # fig.add_subplot(ax); # sc = ax.scatter(erdat, yvals, c=y, s=3000, marker=""|"", cmap=mpl.cm.jet, vmin=0, vmax=1); #; # ax.set_yticks([]); # ax.set_xticks([]); # ax.set_frame_on(False); # ax.set_xlim([xmin, xmax]); #; # # Write files with only slats; # plt.savefig('scratch/' + pltfile + '_plain' + '.png', transparent=True, format='PNG'); # plt.savefig('scratch/' + pltfile + '_plain' + '.pdf', transparent=True, format='PDF'); # plt.savefig('scratch/' + pltfile + '_plain' + '.eps', transparent=True, format='EPS'); #; # # Rewrite files with guides and labels; # for item in range(nplots):; # ax_again = fig.add_subplot(nplots, 1, item + 1); # ax_again.set_title(titles[item], fontsize=8); # ax_again.text(xmin + 0.3, 1.0, stats(np.array(mcdats[item])), fontsize=7, family='monospace', verticalalignment='center'); # ax_again.plot([0, 0], [0.9, 1.1], color='#cccc00', lw=2); # ax_again.set_frame_on(False); # ax_again.set_yticks([]); # ax_again.set_xticks([-12.0, -8.0, -4.0, -2.0, -1.0, 0.0, 1.0, 2.0, 4.0, ",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:1535,Usability,guid,guides,1535,"0.8; # fig, axt = plt.subplots(figsize=(12.0, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); #; # axt.set_xticks([]); # axt.set_yticks([]); # plt.axis('off'); #; # for item in range(nplots):; # mcdat = mcdats[item]; # label = labels[item]; # title = titles[item]; #; # erdat = np.array(mcdat); # yvals = np.ones(len(mcdat)); # y = np.array([sapt_colors.sapt_colors[dbname][i] for i in label]); #; # ax = Subplot(fig, nplots, 1, item + 1); # fig.add_subplot(ax); # sc = ax.scatter(erdat, yvals, c=y, s=3000, marker=""|"", cmap=mpl.cm.jet, vmin=0, vmax=1); #; # ax.set_yticks([]); # ax.set_xticks([]); # ax.set_frame_on(False); # ax.set_xlim([xmin, xmax]); #; # # Write files with only slats; # plt.savefig('scratch/' + pltfile + '_plain' + '.png', transparent=True, format='PNG'); # plt.savefig('scratch/' + pltfile + '_plain' + '.pdf', transparent=True, format='PDF'); # plt.savefig('scratch/' + pltfile + '_plain' + '.eps', transparent=True, format='EPS'); #; # # Rewrite files with guides and labels; # for item in range(nplots):; # ax_again = fig.add_subplot(nplots, 1, item + 1); # ax_again.set_title(titles[item], fontsize=8); # ax_again.text(xmin + 0.3, 1.0, stats(np.array(mcdats[item])), fontsize=7, family='monospace', verticalalignment='center'); # ax_again.plot([0, 0], [0.9, 1.1], color='#cccc00', lw=2); # ax_again.set_frame_on(False); # ax_again.set_yticks([]); # ax_again.set_xticks([-12.0, -8.0, -4.0, -2.0, -1.0, 0.0, 1.0, 2.0, 4.0, 8.0, 12.0]); # ax_again.tick_params(axis='both', which='major', labelbottom='off', bottom='off'); # ax_again.set_xticks([-12.0, -8.0, -4.0, -2.0, -1.0, 0.0, 1.0, 2.0, 4.0, 8.0, 12.0]); # ax_again.tick_params(axis='both', which='major', labelbottom='on', bottom='off'); #; # plt.savefig('scratch/' + pltfile + '_trimd' + '.png', transparent=True, format='PNG'); # plt.savefig('scratch/' + pltfile + '_trimd' + '.pdf', transparent=True, format='PDF'); # plt.savefig('scratch/' + pltfile + '_trimd' + '.eps', transparent=True, format='EPS",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:16,Availability,error,errors,16,"# plot reaction errors and threads",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:84,Availability,error,errors,84,"""""""Saves a plot with name *saveas* with a histogram representation; of the reaction errors in *data*. Also plots a gaussian distribution; with mean *me* and standard deviation *stde*. Plot has x-range; *xmin* to *xmax*, x-axis label *xtitle* and overall title *title*. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:154,Availability,error,errors,154,"#def thread(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None):; # """"""Generates a tiered slat diagram between model chemistries with; # errors (or simply values) in list *data*, which is supplied as part of the; # dictionary for each participating reaction, along with *dbse* and *rxn* keys; # in argument *data*. The plot is labeled with *title* and each tier with; # an element of *labels* and plotted at *xlimit* from the zero-line. If; # *color* is None, slats are black, if 'sapt', colors are taken from *color*; # key in *data* [0, 1]. Summary statistics *mae* are plotted on the; # overbound side and relative statistics *mape* on the underbound side.; #; # """"""; # from random import random; # import matplotlib.pyplot as plt; #; # # initialize tiers/wefts; # Nweft = len(labels); # lenS = 0.2; # gapT = 0.04; # positions = range(-1, -1 * Nweft - 1, -1); # posnS = []; # for weft in range(Nweft):; # posnS.extend([positions[weft] + lenS, positions[weft] - lenS, None]); # posnT = []; # for weft in range(Nweft - 1):; # posnT.extend([positions[weft] - lenS - gapT, positions[weft + 1] + lenS + gapT, None]); #; # # initialize plot; # fht = Nweft * 0.8; # fig, ax = plt.subplots(figsize=(12, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); # plt.xlim([-xlimit, xlimit]); # plt.ylim([-1 * Nweft - 1, 0]); # plt.yticks([]); #; # # label plot and tiers; # ax.text(-0.9 * xlimit, -0.25, title,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=12); # for weft in labels:; # ax.text(-0.9 * xlimit, -(1.2 + labels.index(weft)), weft,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=18); #; # # plot reaction errors and threads; # for rxn in data:; #; # # preparation; # xvals = rxn['data']; # clr = segment_color(color, rxn['color'] if 'color' in rxn else None); # slat = []; # for weft in range(Nweft):; # slat.extend([xvals[weft], xvals[we",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:1768,Availability,error,errors,1768,"= len(labels); # lenS = 0.2; # gapT = 0.04; # positions = range(-1, -1 * Nweft - 1, -1); # posnS = []; # for weft in range(Nweft):; # posnS.extend([positions[weft] + lenS, positions[weft] - lenS, None]); # posnT = []; # for weft in range(Nweft - 1):; # posnT.extend([positions[weft] - lenS - gapT, positions[weft + 1] + lenS + gapT, None]); #; # # initialize plot; # fht = Nweft * 0.8; # fig, ax = plt.subplots(figsize=(12, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); # plt.xlim([-xlimit, xlimit]); # plt.ylim([-1 * Nweft - 1, 0]); # plt.yticks([]); #; # # label plot and tiers; # ax.text(-0.9 * xlimit, -0.25, title,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=12); # for weft in labels:; # ax.text(-0.9 * xlimit, -(1.2 + labels.index(weft)), weft,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=18); #; # # plot reaction errors and threads; # for rxn in data:; #; # # preparation; # xvals = rxn['data']; # clr = segment_color(color, rxn['color'] if 'color' in rxn else None); # slat = []; # for weft in range(Nweft):; # slat.extend([xvals[weft], xvals[weft], None]); # thread = []; # for weft in range(Nweft - 1):; # thread.extend([xvals[weft], xvals[weft + 1], None]); #; # # plotting; # ax.plot(slat, posnS, color=clr, linewidth=1.0, solid_capstyle='round'); # ax.plot(thread, posnT, color=clr, linewidth=0.5, solid_capstyle='round',; # alpha=0.3); #; # # labeling; # try:; # toplblposn = next(item for item in xvals if item is not None); # botlblposn = next(item for item in reversed(xvals) if item is not None); # except StopIteration:; # pass; # else:; # ax.text(toplblposn, -0.75 + 0.6 * random(), rxn['sys'],; # verticalalignment='bottom', horizontalalignment='center',; # family='Times New Roman', fontsize=8); # ax.text(botlblposn, -1 * Nweft - 0.75 + 0.6 * random(), rxn['sys'],; # verticalalignment='bottom', horizontalalignment='cen",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:931,Modifiability,extend,extend,931,"#def thread(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None):; # """"""Generates a tiered slat diagram between model chemistries with; # errors (or simply values) in list *data*, which is supplied as part of the; # dictionary for each participating reaction, along with *dbse* and *rxn* keys; # in argument *data*. The plot is labeled with *title* and each tier with; # an element of *labels* and plotted at *xlimit* from the zero-line. If; # *color* is None, slats are black, if 'sapt', colors are taken from *color*; # key in *data* [0, 1]. Summary statistics *mae* are plotted on the; # overbound side and relative statistics *mape* on the underbound side.; #; # """"""; # from random import random; # import matplotlib.pyplot as plt; #; # # initialize tiers/wefts; # Nweft = len(labels); # lenS = 0.2; # gapT = 0.04; # positions = range(-1, -1 * Nweft - 1, -1); # posnS = []; # for weft in range(Nweft):; # posnS.extend([positions[weft] + lenS, positions[weft] - lenS, None]); # posnT = []; # for weft in range(Nweft - 1):; # posnT.extend([positions[weft] - lenS - gapT, positions[weft + 1] + lenS + gapT, None]); #; # # initialize plot; # fht = Nweft * 0.8; # fig, ax = plt.subplots(figsize=(12, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); # plt.xlim([-xlimit, xlimit]); # plt.ylim([-1 * Nweft - 1, 0]); # plt.yticks([]); #; # # label plot and tiers; # ax.text(-0.9 * xlimit, -0.25, title,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=12); # for weft in labels:; # ax.text(-0.9 * xlimit, -(1.2 + labels.index(weft)), weft,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=18); #; # # plot reaction errors and threads; # for rxn in data:; #; # # preparation; # xvals = rxn['data']; # clr = segment_color(color, rxn['color'] if 'color' in rxn else None); # slat = []; # for weft in range(Nweft):; # slat.extend([xvals[weft], xvals[we",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:1050,Modifiability,extend,extend,1050,"diagram between model chemistries with; # errors (or simply values) in list *data*, which is supplied as part of the; # dictionary for each participating reaction, along with *dbse* and *rxn* keys; # in argument *data*. The plot is labeled with *title* and each tier with; # an element of *labels* and plotted at *xlimit* from the zero-line. If; # *color* is None, slats are black, if 'sapt', colors are taken from *color*; # key in *data* [0, 1]. Summary statistics *mae* are plotted on the; # overbound side and relative statistics *mape* on the underbound side.; #; # """"""; # from random import random; # import matplotlib.pyplot as plt; #; # # initialize tiers/wefts; # Nweft = len(labels); # lenS = 0.2; # gapT = 0.04; # positions = range(-1, -1 * Nweft - 1, -1); # posnS = []; # for weft in range(Nweft):; # posnS.extend([positions[weft] + lenS, positions[weft] - lenS, None]); # posnT = []; # for weft in range(Nweft - 1):; # posnT.extend([positions[weft] - lenS - gapT, positions[weft + 1] + lenS + gapT, None]); #; # # initialize plot; # fht = Nweft * 0.8; # fig, ax = plt.subplots(figsize=(12, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); # plt.xlim([-xlimit, xlimit]); # plt.ylim([-1 * Nweft - 1, 0]); # plt.yticks([]); #; # # label plot and tiers; # ax.text(-0.9 * xlimit, -0.25, title,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=12); # for weft in labels:; # ax.text(-0.9 * xlimit, -(1.2 + labels.index(weft)), weft,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=18); #; # # plot reaction errors and threads; # for rxn in data:; #; # # preparation; # xvals = rxn['data']; # clr = segment_color(color, rxn['color'] if 'color' in rxn else None); # slat = []; # for weft in range(Nweft):; # slat.extend([xvals[weft], xvals[weft], None]); # thread = []; # for weft in range(Nweft - 1):; # thread.extend([xvals[weft], xvals[weft + 1], Non",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:1972,Modifiability,extend,extend,1972,"n range(Nweft - 1):; # posnT.extend([positions[weft] - lenS - gapT, positions[weft + 1] + lenS + gapT, None]); #; # # initialize plot; # fht = Nweft * 0.8; # fig, ax = plt.subplots(figsize=(12, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); # plt.xlim([-xlimit, xlimit]); # plt.ylim([-1 * Nweft - 1, 0]); # plt.yticks([]); #; # # label plot and tiers; # ax.text(-0.9 * xlimit, -0.25, title,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=12); # for weft in labels:; # ax.text(-0.9 * xlimit, -(1.2 + labels.index(weft)), weft,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=18); #; # # plot reaction errors and threads; # for rxn in data:; #; # # preparation; # xvals = rxn['data']; # clr = segment_color(color, rxn['color'] if 'color' in rxn else None); # slat = []; # for weft in range(Nweft):; # slat.extend([xvals[weft], xvals[weft], None]); # thread = []; # for weft in range(Nweft - 1):; # thread.extend([xvals[weft], xvals[weft + 1], None]); #; # # plotting; # ax.plot(slat, posnS, color=clr, linewidth=1.0, solid_capstyle='round'); # ax.plot(thread, posnT, color=clr, linewidth=0.5, solid_capstyle='round',; # alpha=0.3); #; # # labeling; # try:; # toplblposn = next(item for item in xvals if item is not None); # botlblposn = next(item for item in reversed(xvals) if item is not None); # except StopIteration:; # pass; # else:; # ax.text(toplblposn, -0.75 + 0.6 * random(), rxn['sys'],; # verticalalignment='bottom', horizontalalignment='center',; # family='Times New Roman', fontsize=8); # ax.text(botlblposn, -1 * Nweft - 0.75 + 0.6 * random(), rxn['sys'],; # verticalalignment='bottom', horizontalalignment='center',; # family='Times New Roman', fontsize=8); #; # # plot trimmings; # if mae is not None:; # ax.plot([-x for x in mae], positions, 's', color='black'); # if mape is not None: # equivalent to MAE for a 10 kcal/mol IE; # ax.plot([",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:2071,Modifiability,extend,extend,2071," 1] + lenS + gapT, None]); #; # # initialize plot; # fht = Nweft * 0.8; # fig, ax = plt.subplots(figsize=(12, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); # plt.xlim([-xlimit, xlimit]); # plt.ylim([-1 * Nweft - 1, 0]); # plt.yticks([]); #; # # label plot and tiers; # ax.text(-0.9 * xlimit, -0.25, title,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=12); # for weft in labels:; # ax.text(-0.9 * xlimit, -(1.2 + labels.index(weft)), weft,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=18); #; # # plot reaction errors and threads; # for rxn in data:; #; # # preparation; # xvals = rxn['data']; # clr = segment_color(color, rxn['color'] if 'color' in rxn else None); # slat = []; # for weft in range(Nweft):; # slat.extend([xvals[weft], xvals[weft], None]); # thread = []; # for weft in range(Nweft - 1):; # thread.extend([xvals[weft], xvals[weft + 1], None]); #; # # plotting; # ax.plot(slat, posnS, color=clr, linewidth=1.0, solid_capstyle='round'); # ax.plot(thread, posnT, color=clr, linewidth=0.5, solid_capstyle='round',; # alpha=0.3); #; # # labeling; # try:; # toplblposn = next(item for item in xvals if item is not None); # botlblposn = next(item for item in reversed(xvals) if item is not None); # except StopIteration:; # pass; # else:; # ax.text(toplblposn, -0.75 + 0.6 * random(), rxn['sys'],; # verticalalignment='bottom', horizontalalignment='center',; # family='Times New Roman', fontsize=8); # ax.text(botlblposn, -1 * Nweft - 0.75 + 0.6 * random(), rxn['sys'],; # verticalalignment='bottom', horizontalalignment='center',; # family='Times New Roman', fontsize=8); #; # # plot trimmings; # if mae is not None:; # ax.plot([-x for x in mae], positions, 's', color='black'); # if mape is not None: # equivalent to MAE for a 10 kcal/mol IE; # ax.plot([0.025 * x for x in mape], positions, 'o', color='black'); #; # plt.axvline(0, color",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:165,Usability,simpl,simply,165,"#def thread(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None):; # """"""Generates a tiered slat diagram between model chemistries with; # errors (or simply values) in list *data*, which is supplied as part of the; # dictionary for each participating reaction, along with *dbse* and *rxn* keys; # in argument *data*. The plot is labeled with *title* and each tier with; # an element of *labels* and plotted at *xlimit* from the zero-line. If; # *color* is None, slats are black, if 'sapt', colors are taken from *color*; # key in *data* [0, 1]. Summary statistics *mae* are plotted on the; # overbound side and relative statistics *mape* on the underbound side.; #; # """"""; # from random import random; # import matplotlib.pyplot as plt; #; # # initialize tiers/wefts; # Nweft = len(labels); # lenS = 0.2; # gapT = 0.04; # positions = range(-1, -1 * Nweft - 1, -1); # posnS = []; # for weft in range(Nweft):; # posnS.extend([positions[weft] + lenS, positions[weft] - lenS, None]); # posnT = []; # for weft in range(Nweft - 1):; # posnT.extend([positions[weft] - lenS - gapT, positions[weft + 1] + lenS + gapT, None]); #; # # initialize plot; # fht = Nweft * 0.8; # fig, ax = plt.subplots(figsize=(12, fht)); # plt.subplots_adjust(left=0.01, right=0.99, hspace=0.3); # plt.xlim([-xlimit, xlimit]); # plt.ylim([-1 * Nweft - 1, 0]); # plt.yticks([]); #; # # label plot and tiers; # ax.text(-0.9 * xlimit, -0.25, title,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=12); # for weft in labels:; # ax.text(-0.9 * xlimit, -(1.2 + labels.index(weft)), weft,; # verticalalignment='bottom', horizontalalignment='left',; # family='Times New Roman', weight='bold', fontsize=18); #; # # plot reaction errors and threads; # for rxn in data:; #; # # preparation; # xvals = rxn['data']; # clr = segment_color(color, rxn['color'] if 'color' in rxn else None); # slat = []; # for weft in range(Nweft):; # slat.extend([xvals[weft], xvals[we",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:67,Availability,error,errors,67,"""""""Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list *data*, which is supplied as part of the; dictionary for each participating reaction, along with *dbse* and *rxn* keys; in argument *data*. The plot is labeled with *title* and each tier with; an element of *labels* and plotted at *xlimit* from the zero-line. If; *color* is None, slats are black, if 'sapt', colors are taken from *color*; key in *data* [0, 1]. Summary statistics *mae* are plotted on the; overbound side and relative statistics *mape* on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:78,Usability,simpl,simply,78,"""""""Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list *data*, which is supplied as part of the; dictionary for each participating reaction, along with *dbse* and *rxn* keys; in argument *data*. The plot is labeled with *title* and each tier with; an element of *labels* and plotted at *xlimit* from the zero-line. If; *color* is None, slats are black, if 'sapt', colors are taken from *color*; key in *data* [0, 1]. Summary statistics *mae* are plotted on the; overbound side and relative statistics *mape* on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:16,Availability,error,errors,16,"# plot reaction errors and threads",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:306,Modifiability,extend,extend,306,"# converting into screen coordinates for image map; # block not working for py3 or up-to-date mpl. better ways for html image map nowadays; #npxvals = [np.nan if val is None else val for val in xvals]; #xyscreen = ax.transData.transform(zip(npxvals, positions)); #xscreen, yscreen = zip(*xyscreen); #posnM.extend(zip([rxn['db']] * Nweft, [rxn['sys']] * Nweft,; # npxvals, [rxn['show']] * Nweft, xscreen, yscreen)); # labeling",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:53,Safety,avoid,avoid,53,"# generating html image map code; # points sorted to avoid overlapping map areas that can overwhelm html for SSI; # y=0 on top for html and on bottom for mpl, so flip the numbers",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:146,Integrability,depend,depending,146,"""""""Takes array of arrays *sapt* in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on *labeled*. Saves in formats *graphicsformat*. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:173,Availability,error,errors,173,"#def thread_mouseover_web(pltfile, dbid, dbname, xmin, xmax, mcdats, labels, titles):; # """"""Saves a plot with name *pltfile* with a slat representation of; # the modelchems errors in *mcdat*. Mouseover shows geometry and error; # from *labels* based on recipe of Andrew Dalke from; # http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html; #; # """"""; # from matplotlib.backends.backend_agg import FigureCanvasAgg; # import matplotlib; # import sapt_colors; #; # cmpd_width = 200; # cmpd_height = 160; #; # nplots = len(mcdats); # fht = nplots * 0.8; # fht = nplots * 0.8 * 1.4; # fig = matplotlib.figure.Figure(figsize=(12.0, fht)); # fig.subplots_adjust(left=0.01, right=0.99, hspace=0.3, top=0.8, bottom=0.2); # img_width = fig.get_figwidth() * 80; # img_height = fig.get_figheight() * 80; #; # htmlcode = """"""; #<SCRIPT>; #function mouseandshow(name, id, db, dbname) {; # var cid = document.getElementById(""cid"");; # cid.innerHTML = name;; # cid.href = ""fragmentviewer.py?name="" + id + ""&dataset="" + db;; # var cmpd_img = document.getElementById(""cmpd_img"");; # cmpd_img.src = dbname + ""/dimers/"" + id + "".png"";; #}; #</SCRIPT>; #; #Distribution of Fragment Errors in Interaction Energy (kcal/mol)<BR>; #Mouseover:<BR><a id=""cid""></a><br>; #<IMG SRC=""scratch/%s"" ismap usemap=""#points"" WIDTH=""%d"" HEIGHT=""%d"">; #<IMG ID=""cmpd_img"" WIDTH=""%d"" HEIGHT=""%d"">; #<MAP name=""points"">; #"""""" % (pltfile, img_width, img_height, cmpd_width, cmpd_height); #; # for item in range(nplots):; # print '<br><br><br><br><br><br>'; # mcdat = mcdats[item]; # label = labels[item]; # tttle = titles[item]; #; # erdat = np.array(mcdat); # # No masked_array because interferes with html map; # #erdat = np.ma.masked_array(mcdat, mask=mask); # yvals = np.ones(len(mcdat)); # y = np.array([sapt_colors.sapt_colors[dbname][i] for i in label]); #; # ax = fig.add_subplot(nplots, 1, item + 1); # sc = ax.scatter(erdat, yvals, c=y, s=3000, marker=""|"", cmap=matplotlib.cm.jet, vmin=0, vmax=1); # ax",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:221,Availability,error,error,221,"#def thread_mouseover_web(pltfile, dbid, dbname, xmin, xmax, mcdats, labels, titles):; # """"""Saves a plot with name *pltfile* with a slat representation of; # the modelchems errors in *mcdat*. Mouseover shows geometry and error; # from *labels* based on recipe of Andrew Dalke from; # http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html; #; # """"""; # from matplotlib.backends.backend_agg import FigureCanvasAgg; # import matplotlib; # import sapt_colors; #; # cmpd_width = 200; # cmpd_height = 160; #; # nplots = len(mcdats); # fht = nplots * 0.8; # fht = nplots * 0.8 * 1.4; # fig = matplotlib.figure.Figure(figsize=(12.0, fht)); # fig.subplots_adjust(left=0.01, right=0.99, hspace=0.3, top=0.8, bottom=0.2); # img_width = fig.get_figwidth() * 80; # img_height = fig.get_figheight() * 80; #; # htmlcode = """"""; #<SCRIPT>; #function mouseandshow(name, id, db, dbname) {; # var cid = document.getElementById(""cid"");; # cid.innerHTML = name;; # cid.href = ""fragmentviewer.py?name="" + id + ""&dataset="" + db;; # var cmpd_img = document.getElementById(""cmpd_img"");; # cmpd_img.src = dbname + ""/dimers/"" + id + "".png"";; #}; #</SCRIPT>; #; #Distribution of Fragment Errors in Interaction Energy (kcal/mol)<BR>; #Mouseover:<BR><a id=""cid""></a><br>; #<IMG SRC=""scratch/%s"" ismap usemap=""#points"" WIDTH=""%d"" HEIGHT=""%d"">; #<IMG ID=""cmpd_img"" WIDTH=""%d"" HEIGHT=""%d"">; #<MAP name=""points"">; #"""""" % (pltfile, img_width, img_height, cmpd_width, cmpd_height); #; # for item in range(nplots):; # print '<br><br><br><br><br><br>'; # mcdat = mcdats[item]; # label = labels[item]; # tttle = titles[item]; #; # erdat = np.array(mcdat); # # No masked_array because interferes with html map; # #erdat = np.ma.masked_array(mcdat, mask=mask); # yvals = np.ones(len(mcdat)); # y = np.array([sapt_colors.sapt_colors[dbname][i] for i in label]); #; # ax = fig.add_subplot(nplots, 1, item + 1); # sc = ax.scatter(erdat, yvals, c=y, s=3000, marker=""|"", cmap=matplotlib.cm.jet, vmin=0, vmax=1); # ax",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:1739,Availability,mask,mask,1739,"; # img_width = fig.get_figwidth() * 80; # img_height = fig.get_figheight() * 80; #; # htmlcode = """"""; #<SCRIPT>; #function mouseandshow(name, id, db, dbname) {; # var cid = document.getElementById(""cid"");; # cid.innerHTML = name;; # cid.href = ""fragmentviewer.py?name="" + id + ""&dataset="" + db;; # var cmpd_img = document.getElementById(""cmpd_img"");; # cmpd_img.src = dbname + ""/dimers/"" + id + "".png"";; #}; #</SCRIPT>; #; #Distribution of Fragment Errors in Interaction Energy (kcal/mol)<BR>; #Mouseover:<BR><a id=""cid""></a><br>; #<IMG SRC=""scratch/%s"" ismap usemap=""#points"" WIDTH=""%d"" HEIGHT=""%d"">; #<IMG ID=""cmpd_img"" WIDTH=""%d"" HEIGHT=""%d"">; #<MAP name=""points"">; #"""""" % (pltfile, img_width, img_height, cmpd_width, cmpd_height); #; # for item in range(nplots):; # print '<br><br><br><br><br><br>'; # mcdat = mcdats[item]; # label = labels[item]; # tttle = titles[item]; #; # erdat = np.array(mcdat); # # No masked_array because interferes with html map; # #erdat = np.ma.masked_array(mcdat, mask=mask); # yvals = np.ones(len(mcdat)); # y = np.array([sapt_colors.sapt_colors[dbname][i] for i in label]); #; # ax = fig.add_subplot(nplots, 1, item + 1); # sc = ax.scatter(erdat, yvals, c=y, s=3000, marker=""|"", cmap=matplotlib.cm.jet, vmin=0, vmax=1); # ax.set_title(tttle, fontsize=8); # ax.set_yticks([]); # lp = ax.plot([0, 0], [0.9, 1.1], color='#cccc00', lw=2); # ax.set_ylim([0.95, 1.05]); # ax.text(xmin + 0.3, 1.0, stats(erdat), fontsize=7, family='monospace', verticalalignment='center'); # if item + 1 == nplots:; # ax.set_xticks([-12.0, -8.0, -4.0, -2.0, -1.0, 0.0, 1.0, 2.0, 4.0, 8.0, 12.0]); # for tick in ax.xaxis.get_major_ticks():; # tick.tick1line.set_markersize(0); # tick.tick2line.set_markersize(0); # else:; # ax.set_xticks([]); # ax.set_frame_on(False); # ax.set_xlim([xmin, xmax]); #; # # Convert the data set points into screen space coordinates; # #xyscreencoords = ax.transData.transform(zip(erdat, yvals)); # xyscreencoords = ax.transData.transform(zip(erdat, yvals)); #",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:1744,Availability,mask,mask,1744,"; # img_width = fig.get_figwidth() * 80; # img_height = fig.get_figheight() * 80; #; # htmlcode = """"""; #<SCRIPT>; #function mouseandshow(name, id, db, dbname) {; # var cid = document.getElementById(""cid"");; # cid.innerHTML = name;; # cid.href = ""fragmentviewer.py?name="" + id + ""&dataset="" + db;; # var cmpd_img = document.getElementById(""cmpd_img"");; # cmpd_img.src = dbname + ""/dimers/"" + id + "".png"";; #}; #</SCRIPT>; #; #Distribution of Fragment Errors in Interaction Energy (kcal/mol)<BR>; #Mouseover:<BR><a id=""cid""></a><br>; #<IMG SRC=""scratch/%s"" ismap usemap=""#points"" WIDTH=""%d"" HEIGHT=""%d"">; #<IMG ID=""cmpd_img"" WIDTH=""%d"" HEIGHT=""%d"">; #<MAP name=""points"">; #"""""" % (pltfile, img_width, img_height, cmpd_width, cmpd_height); #; # for item in range(nplots):; # print '<br><br><br><br><br><br>'; # mcdat = mcdats[item]; # label = labels[item]; # tttle = titles[item]; #; # erdat = np.array(mcdat); # # No masked_array because interferes with html map; # #erdat = np.ma.masked_array(mcdat, mask=mask); # yvals = np.ones(len(mcdat)); # y = np.array([sapt_colors.sapt_colors[dbname][i] for i in label]); #; # ax = fig.add_subplot(nplots, 1, item + 1); # sc = ax.scatter(erdat, yvals, c=y, s=3000, marker=""|"", cmap=matplotlib.cm.jet, vmin=0, vmax=1); # ax.set_title(tttle, fontsize=8); # ax.set_yticks([]); # lp = ax.plot([0, 0], [0.9, 1.1], color='#cccc00', lw=2); # ax.set_ylim([0.95, 1.05]); # ax.text(xmin + 0.3, 1.0, stats(erdat), fontsize=7, family='monospace', verticalalignment='center'); # if item + 1 == nplots:; # ax.set_xticks([-12.0, -8.0, -4.0, -2.0, -1.0, 0.0, 1.0, 2.0, 4.0, 8.0, 12.0]); # for tick in ax.xaxis.get_major_ticks():; # tick.tick1line.set_markersize(0); # tick.tick2line.set_markersize(0); # else:; # ax.set_xticks([]); # ax.set_frame_on(False); # ax.set_xlim([xmin, xmax]); #; # # Convert the data set points into screen space coordinates; # #xyscreencoords = ax.transData.transform(zip(erdat, yvals)); # xyscreencoords = ax.transData.transform(zip(erdat, yvals)); #",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:35,Availability,error,error,35,"""""""Takes dictionary *db* of label, error pairs and amino acids *aa1*; and *aa2* and returns a square array of all errors for that amino; acid pair, buffered by zeros. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:114,Availability,error,errors,114,"""""""Takes dictionary *db* of label, error pairs and amino acids *aa1*; and *aa2* and returns a square array of all errors for that amino; acid pair, buffered by zeros. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py:99,Availability,error,errors,99,"""""""Saves a plot with (extensionless) name *pltfile* with an Iowa; representation of the modelchems errors in *mcdat* for BBI/SSI-style; *labels*. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/options.py:58,Energy Efficiency,power,power,58,"""""""Returns the least restrictive negative exponent of the power 10; that would achieve the floating point convergence criterium *val*. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/options.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/options.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:11,Modifiability,variab,variables,11,"""""""Harvest variables, gradient, and the molecule from the output and other; files; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:75,Energy Efficiency,energy,energy,75,"""""""Return an array of Orca methods with energies. Appended; to procedures['energy']. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:44,Availability,down,down,44,"# Dipole x, y, z are the last items 6 lines down in the dipole block",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:29,Availability,down,down,29,"# Dipole magnitude is 8 line down in the dipole block",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:14,Energy Efficiency,energy,energy,14,"""""""Sample MP2 energy line (works for both MP2 and RI-MP2)""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:26,Energy Efficiency,energy,energy,26,"""""""Sample MP2 correlation energy line (yes there is a space)""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:29,Energy Efficiency,energy,energy,29,"""""""Sample RI-MP2 Correlation energy line (yes there is a space)""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:64,Energy Efficiency,energy,energy,64,"#; #Triples Correction (T) ... -0.001544381; #Final correlation energy ... -0.134770265; #E(CCSD) ... -75.709548429; #E(CCSD(T)) ... -75.711092810; #",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:73,Energy Efficiency,energy,energy,73,"#psivar[""CC REFERENCE""] = float(lines[cc_start + 3].split()[-1]); # CCSD energy block is less than 20 lines",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py:10,Energy Efficiency,energy,energy,10,"# CCSD(T) energy block",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orca.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orca.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py:2,Availability,toler,tolerance,2,"# tolerance in coordinate alignment btwn qc programs",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orient.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py:280,Availability,error,errors,280,"""""""Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of *Cmol*; into coincidence with the geometry of *Pmol*. *Pmol* and *Cmol*; must be :py:class:`qcdb.Molecule` and represent the same; geometry. Presently catches some errors of orientation that; Cfour as *Cmol* should properly fulfill. These are unnecessary; restrictions and can be relaxed later. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orient.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py:2,Safety,avoid,avoids,2,"# avoids trouble of ghost atoms w/center_of_mass",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orient.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py:2,Safety,avoid,avoids,2,"# avoids trouble of ghost atoms w/masswt'd",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orient.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py:185,Safety,safe,safe,185,"# if rotor != c4mol.rotor_type():; # raise ValidationError(""""""molPermanent (%s) and molChangeable (%s) of different rotor types."""""" % \; # (rotor, c4mol.rotor_type())); # TODO: is this safe? differences in masses of ghost atoms can cause different rotor types",MatchSource.CODE_COMMENT,psi4/driver/qcdb/orient.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/orient.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py:312,Availability,error,error,312,"""""""Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pdict.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py:162,Security,validat,validate,162,"""""""Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pdict.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py:219,Testability,test,testing,219,"""""""Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pdict.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py:44,Modifiability,variab,variable,44,"# Validate choosing more detailed value for variable",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pdict.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py:18,Modifiability,variab,variable,18,"#print 'Resetting variable %s to %s' % (key, best_value.to_eng_string())",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pdict.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py:16,Modifiability,variab,variable,16,"#print 'Setting variable %s to %s' % (key, best_value.to_eng_string())",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pdict.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pdict.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psiutil.py:68,Availability,avail,available,68,"""""""Function to extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Returns; attribute if available, None if not. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/psiutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psiutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psiutil.py:140,Availability,avail,available,140,"""""""Function to extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Returns; attribute if available, None if not. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/psiutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psiutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psiutil.py:97,Availability,avail,available,97,"""""""Function to import *module* in any possible lettercase; permutation. Returns module object if available, None if not. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/psiutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psiutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psiutil.py:137,Availability,avail,available,137,"""""""Function to locate a file *pre* + *fil* + *post* in any possible; lettercase permutation of *fil*. Returns *pre* + *fil* + *post* if; available, None if not. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/psiutil.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psiutil.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psivardefs.py:1662,Energy Efficiency,energy,energy,1662,"""""""Returns dictionary of PsiVariable definitions.; This function assembles SAPT subtotals and total energies from the fundamental SAPT variables like SAPT EXCH-DISP20 ENERGY.; This function pertains to wavefunction-based SAPT (not FISAPT or SAPT(DFT)); ; Those fundamental SAPT varliables are never scaled by any exchange scaling. ; ; Optionally, we can modify SAPT subtotal or total interation energies by scaling the terms that ; depend on the S^2 approximation. These terms can be scaled by the ratio ; [(SAPT EXCH10 ENERGY) / (SAPT EXCH10(S^2) ENERGY)]^(SAPT ALPHA), where SAPT ALPHA would normally be 1.0.; (if SAPT EXCH10 ENERGY is < 1E-5 we set the ratio to 1).; In older copies of Psi4, we did this scaling (with SAPT ALPHA = 1) by default, but then we changed the default; to not do this scaling (this is controlled by user option EXCH_SCALE_ALPHA which is False by default, or ; it can be set to True to set SAPT ALPHA = 1, or it can be set to some other value to set SAPT ALPHA to that value). SAPT EXCHSCAL1 is the above scaling ratio with SAPT ALPHA = 1; SAPT EXCHSCAL3 is the above scaling ratio with SAPT ALPHA = 3 (used in the so-called scaled SAPT0, or sSAPT0, which; we found to work better for many short-range contacts, e.g., 10.1039/c8cp02029a). (On the other hand, we found; that some *very* close contacts get over-corrected by sSAPT0, e.g., the Sherrill group Splinter dataset paper 2023). The final scale factor for S^2 dependent terms (for methods other than sSAPT0, which uses fixed SAPT EXCHSCAL3) is; SAPT EXCHSCAL, which is by default 1.0 (i.e., no scaling, or SAPT ALPHA = 0).; ; Note: SAPT HF TOTAL ENERGY is the HF *interaction* energy (like all SAPT energies); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/psivardefs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psivardefs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psivardefs.py:432,Integrability,depend,depend,432,"""""""Returns dictionary of PsiVariable definitions.; This function assembles SAPT subtotals and total energies from the fundamental SAPT variables like SAPT EXCH-DISP20 ENERGY.; This function pertains to wavefunction-based SAPT (not FISAPT or SAPT(DFT)); ; Those fundamental SAPT varliables are never scaled by any exchange scaling. ; ; Optionally, we can modify SAPT subtotal or total interation energies by scaling the terms that ; depend on the S^2 approximation. These terms can be scaled by the ratio ; [(SAPT EXCH10 ENERGY) / (SAPT EXCH10(S^2) ENERGY)]^(SAPT ALPHA), where SAPT ALPHA would normally be 1.0.; (if SAPT EXCH10 ENERGY is < 1E-5 we set the ratio to 1).; In older copies of Psi4, we did this scaling (with SAPT ALPHA = 1) by default, but then we changed the default; to not do this scaling (this is controlled by user option EXCH_SCALE_ALPHA which is False by default, or ; it can be set to True to set SAPT ALPHA = 1, or it can be set to some other value to set SAPT ALPHA to that value). SAPT EXCHSCAL1 is the above scaling ratio with SAPT ALPHA = 1; SAPT EXCHSCAL3 is the above scaling ratio with SAPT ALPHA = 3 (used in the so-called scaled SAPT0, or sSAPT0, which; we found to work better for many short-range contacts, e.g., 10.1039/c8cp02029a). (On the other hand, we found; that some *very* close contacts get over-corrected by sSAPT0, e.g., the Sherrill group Splinter dataset paper 2023). The final scale factor for S^2 dependent terms (for methods other than sSAPT0, which uses fixed SAPT EXCHSCAL3) is; SAPT EXCHSCAL, which is by default 1.0 (i.e., no scaling, or SAPT ALPHA = 0).; ; Note: SAPT HF TOTAL ENERGY is the HF *interaction* energy (like all SAPT energies); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/psivardefs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psivardefs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psivardefs.py:1445,Integrability,depend,dependent,1445,"""""""Returns dictionary of PsiVariable definitions.; This function assembles SAPT subtotals and total energies from the fundamental SAPT variables like SAPT EXCH-DISP20 ENERGY.; This function pertains to wavefunction-based SAPT (not FISAPT or SAPT(DFT)); ; Those fundamental SAPT varliables are never scaled by any exchange scaling. ; ; Optionally, we can modify SAPT subtotal or total interation energies by scaling the terms that ; depend on the S^2 approximation. These terms can be scaled by the ratio ; [(SAPT EXCH10 ENERGY) / (SAPT EXCH10(S^2) ENERGY)]^(SAPT ALPHA), where SAPT ALPHA would normally be 1.0.; (if SAPT EXCH10 ENERGY is < 1E-5 we set the ratio to 1).; In older copies of Psi4, we did this scaling (with SAPT ALPHA = 1) by default, but then we changed the default; to not do this scaling (this is controlled by user option EXCH_SCALE_ALPHA which is False by default, or ; it can be set to True to set SAPT ALPHA = 1, or it can be set to some other value to set SAPT ALPHA to that value). SAPT EXCHSCAL1 is the above scaling ratio with SAPT ALPHA = 1; SAPT EXCHSCAL3 is the above scaling ratio with SAPT ALPHA = 3 (used in the so-called scaled SAPT0, or sSAPT0, which; we found to work better for many short-range contacts, e.g., 10.1039/c8cp02029a). (On the other hand, we found; that some *very* close contacts get over-corrected by sSAPT0, e.g., the Sherrill group Splinter dataset paper 2023). The final scale factor for S^2 dependent terms (for methods other than sSAPT0, which uses fixed SAPT EXCHSCAL3) is; SAPT EXCHSCAL, which is by default 1.0 (i.e., no scaling, or SAPT ALPHA = 0).; ; Note: SAPT HF TOTAL ENERGY is the HF *interaction* energy (like all SAPT energies); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/psivardefs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psivardefs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psivardefs.py:135,Modifiability,variab,variables,135,"""""""Returns dictionary of PsiVariable definitions.; This function assembles SAPT subtotals and total energies from the fundamental SAPT variables like SAPT EXCH-DISP20 ENERGY.; This function pertains to wavefunction-based SAPT (not FISAPT or SAPT(DFT)); ; Those fundamental SAPT varliables are never scaled by any exchange scaling. ; ; Optionally, we can modify SAPT subtotal or total interation energies by scaling the terms that ; depend on the S^2 approximation. These terms can be scaled by the ratio ; [(SAPT EXCH10 ENERGY) / (SAPT EXCH10(S^2) ENERGY)]^(SAPT ALPHA), where SAPT ALPHA would normally be 1.0.; (if SAPT EXCH10 ENERGY is < 1E-5 we set the ratio to 1).; In older copies of Psi4, we did this scaling (with SAPT ALPHA = 1) by default, but then we changed the default; to not do this scaling (this is controlled by user option EXCH_SCALE_ALPHA which is False by default, or ; it can be set to True to set SAPT ALPHA = 1, or it can be set to some other value to set SAPT ALPHA to that value). SAPT EXCHSCAL1 is the above scaling ratio with SAPT ALPHA = 1; SAPT EXCHSCAL3 is the above scaling ratio with SAPT ALPHA = 3 (used in the so-called scaled SAPT0, or sSAPT0, which; we found to work better for many short-range contacts, e.g., 10.1039/c8cp02029a). (On the other hand, we found; that some *very* close contacts get over-corrected by sSAPT0, e.g., the Sherrill group Splinter dataset paper 2023). The final scale factor for S^2 dependent terms (for methods other than sSAPT0, which uses fixed SAPT EXCHSCAL3) is; SAPT EXCHSCAL, which is by default 1.0 (i.e., no scaling, or SAPT ALPHA = 0).; ; Note: SAPT HF TOTAL ENERGY is the HF *interaction* energy (like all SAPT energies); """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/psivardefs.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/psivardefs.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcformat.py:306,Availability,down,down,306,"""""""For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; *augbasis* is round up to the nearest aug-cc-pVXZ; *rootbasis* is round down to the nearest cc-pVXZ; *auxbasis* is round up to the nearest cc-pVXZ or aug-cc-pVXZ; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qcformat.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcformat.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcformat.py:306,Availability,down,down,306,"""""""For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; *augbasis* is round up to the nearest aug-cc-pVXZ; *rootbasis* is round down to the nearest cc-pVXZ; *auxbasis* is round up to the nearest cc-pVXZ or aug-cc-pVXZ; """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qcformat.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcformat.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py:50,Performance,perform,performance,50,"# r'((?!grimme3).)*' + r'\s*' + # severe negative performance impact; # r'(?:.*?)' +",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qchem.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py:210,Performance,perform,performance,210,"# TODO: need to split on 'Q-Chem begins' or 'Quantum Leap' or something; # # Process DFT no-D or internal-D WORKS BUT LOOKAHEAD VERY SLOW; # mobj = re.search(; # r'((?!grimme3).)*' + r'\s*' + # severe negative performance impact; # TODO note neg lookahead insufficient since option could be negated; # r'(?:.*?)' +; # r'^\s+' + r'(?:Nuclear Repulsion Energy =)' + r'\s+' + NUMBER + r'\s+hartrees\s*' +; # r'(?:.*?)' +; # r'(?:HF-DFT SCF calculation)' +; # r'(?:.*?)' +; # r'^\s+\d+\s+' + NUMBER + r'\s+' + NUMBER + r'\s+' + 'Convergence criterion met' + r'\s*$',; # outtext, re.MULTILINE | re.DOTALL | re.IGNORECASE); # if mobj:; # print('matched dft'); # psivar['NUCLEAR REPULSION ENERGY'] = mobj.group(2); # psivar['DFT TOTAL ENERGY'] = mobj.group(3); # psivar['DFT FUNCTIONAL TOTAL ENERGY'] = mobj.group(3); # # Process PsiVariables; # mobj = re.search(r'^(?: Variable Map:)\s*' +; # r'^\s*(?:-+)\s*' +; # r'^(.*?)' +; # r'^(?:\s*?)$',; # outtext, re.MULTILINE | re.DOTALL); #; # if mobj:; # for pv in mobj.group(1).split('\n'):; # submobj = re.search(r'^\s+' + r'""(.+?)""' + r'\s+=>\s+' + NUMBER + r'\s*$', pv); # if submobj:; # psivar['%s' % (submobj.group(1))] = submobj.group(2); # Process Completion",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qchem.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py:13,Energy Efficiency,energy,energy,13,"# text += """"""energy('""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qchem.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py:36,Availability,avail,available,36,"""""""Requested Psi4 dertype %d is not available.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qchem.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py:50,Availability,avail,available,50,"""""""Requested Psi4 computational methods %d is not available.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qchem.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qchem.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcprog_psi4.py:3,Energy Efficiency,energy,energy,3,"""""""energy('""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qcprog_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcprog_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcprog_psi4.py:36,Availability,avail,available,36,"""""""Requested Psi4 dertype %d is not available.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qcprog_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcprog_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcprog_psi4.py:50,Availability,avail,available,50,"""""""Requested Psi4 computational methods %d is not available.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/qcprog_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/qcprog_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py:61,Integrability,interface,interfaces,61,"""""""Outer shim to allow both Psi4-style and QCA-style testing interfaces through the same function. Notes; -----; `kwargs` modified (and returned) in-place. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py:53,Testability,test,testing,53,"""""""Outer shim to allow both Psi4-style and QCA-style testing interfaces through the same function. Notes; -----; `kwargs` modified (and returned) in-place. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py:49,Integrability,interface,interfaces,49,"""""""Shim between Psi4-style and QCA-style testing interfaces for scalar ints, strings.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py:41,Testability,test,testing,41,"""""""Shim between Psi4-style and QCA-style testing interfaces for scalar ints, strings.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py:61,Integrability,interface,interfaces,61,"""""""Outer shim to allow both Psi4-style and QCA-style testing interfaces through the same function.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py:53,Testability,test,testing,53,"""""""Outer shim to allow both Psi4-style and QCA-style testing interfaces through the same function.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py:49,Integrability,interface,interfaces,49,"""""""Shim between Psi4-style and QCA-style testing interfaces for scalar and array floats.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py:41,Testability,test,testing,41,"""""""Shim between Psi4-style and QCA-style testing interfaces for scalar and array floats.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py:11,Testability,test,testing,11,"# Notes on testing fns migration; # PSI4; # ADDED def compare SINGLE; # MERGED-APIs def compare_integers(expected, computed, label, verbose=1): SINGLE; # MERGED-APIs def compare_strings(expected, computed, label, verbose=1): SINGLE; # MERGED-APIs def compare_values(expected, computed, digits, label, *, rtol=1.e-16, passnone=False, verbose=1): SINGLE; # MERGED-APIs def compare_arrays(expected, computed, digits, label, rtol=1.e-16, verbose=1): SINGLE; #; # ADDED-NEW-API def compare_recursive SINGLE; # ADDED-NEW-API def compare_molrecs SINGLE; #; # MERGED-APIs def compare_cubes(expected, computed, label, verbose=1): SINGLE; # MERGED-APIs def compare_vectors(expected, computed, digits, label, *, rtol=1.e-16, verbose=1): MULTI; # MERGED-APIs def compare_matrices(expected, computed, digits, label, *, rtol=1.e-16, verbose=1): MULTI; # MERGED-APIs def compare_wavefunctions(expected, computed, digits=9, label='Wavefunctions equal'): MULTI; # def compare_fcidumps(expected, computed, label): MULTI; # QCDB; # ADDED def compare SINGLE; # MERGED-APIs-TRIVIAL def compare_integers(expected, computed, label, verbose=1): SINGLE; # MERGED-APIs-TRIVIAL def compare_strings(expected, computed, label, verbose=1): SINGLE; # MERGED-APIs def compare_values(expected, computed, digits, label, passnone=False, verbose=1): SINGLE; # MERGED-APIs def compare_arrays(expected, computed, digits, label, verbose=1): SINGLE; #; # ADDED-NEW-API def compare_recursive SINGLE; # STOPCONVERT/NEW-API def compare_molrecs(expected, computed, tol, label, forgive=None, verbose=1, relative_geoms='exact' SINGLE; #; # STOPCONVERT/NEW-FN def compare_matrices(expected, computed, digits, label, verbose=1): ---; # STOPCONVERT/NEW-FN def compare_dicts(expected, computed, tol, label, forgive=None, verbose=1): ---; # vib.py:def compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None): SINGLE",MatchSource.CODE_COMMENT,psi4/driver/qcdb/testing.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/testing.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/textables.py:82,Availability,error,error,82,"""""""Return merge of index dictionaries *dict_row* and *dict_col* (precedence) with error string from serrors appended at key 'matelem'.""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/textables.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/textables.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/textables.py:2,Safety,avoid,avoid,2,"# avoid misunderstandings",MatchSource.CODE_COMMENT,psi4/driver/qcdb/textables.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/textables.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/textables.py:38,Security,access,access,38,"""""""the values or add to columnplan to access""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/textables.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/textables.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:2,Availability,toler,tolerance,2,"# tolerance (roughly max dev) for TR space",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:87,Availability,toler,tolerance,87,"""""""Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters; ----------; expected; Reference value against which `computed` is compared.; computed; Input value to compare against `expected`. Must contain all fields of `expected`.; tol; Absolute tolerance.; label; Label for passed and error messages.; verbose; Control printing.; forgive; Keys in top level which may change between `expected` and `computed` without triggering failure.; required; Keys in top level which must be present in `computed`. (""omega"" recc. for vibs.); toldict; Tolerances for specific keys. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:294,Availability,toler,tolerance,294,"""""""Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters; ----------; expected; Reference value against which `computed` is compared.; computed; Input value to compare against `expected`. Must contain all fields of `expected`.; tol; Absolute tolerance.; label; Label for passed and error messages.; verbose; Control printing.; forgive; Keys in top level which may change between `expected` and `computed` without triggering failure.; required; Keys in top level which must be present in `computed`. (""omega"" recc. for vibs.); toldict; Tolerances for specific keys. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:334,Availability,error,error,334,"""""""Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters; ----------; expected; Reference value against which `computed` is compared.; computed; Input value to compare against `expected`. Must contain all fields of `expected`.; tol; Absolute tolerance.; label; Label for passed and error messages.; verbose; Control printing.; forgive; Keys in top level which may change between `expected` and `computed` without triggering failure.; required; Keys in top level which must be present in `computed`. (""omega"" recc. for vibs.); toldict; Tolerances for specific keys. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:476,Availability,failure,failure,476,"""""""Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters; ----------; expected; Reference value against which `computed` is compared.; computed; Input value to compare against `expected`. Must contain all fields of `expected`.; tol; Absolute tolerance.; label; Label for passed and error messages.; verbose; Control printing.; forgive; Keys in top level which may change between `expected` and `computed` without triggering failure.; required; Keys in top level which must be present in `computed`. (""omega"" recc. for vibs.); toldict; Tolerances for specific keys. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:711,Availability,toler,tolerance,711,"""""""Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters; ----------; expected; Reference value against which `computed` is compared.; computed; Input value to compare against `expected`. Must contain all fields of `expected`.; tol; Absolute tolerance.; label; Label for passed and error messages.; verbose; Control printing.; forgive; Keys in top level which may change between `expected` and `computed` without triggering failure.; required; Keys in top level which must be present in `computed`. (""omega"" recc. for vibs.); toldict; Tolerances for specific keys. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:340,Integrability,message,messages,340,"""""""Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters; ----------; expected; Reference value against which `computed` is compared.; computed; Input value to compare against `expected`. Must contain all fields of `expected`.; tol; Absolute tolerance.; label; Label for passed and error messages.; verbose; Control printing.; forgive; Keys in top level which may change between `expected` and `computed` without triggering failure.; required; Keys in top level which must be present in `computed`. (""omega"" recc. for vibs.); toldict; Tolerances for specific keys. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:12,Testability,test,tested,12,"# Note that tested syms all diagonal, so above may be off by some transposes",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:57,Availability,toler,tolerance,57,"# find the first index whose fabs equals that value, w/i tolerance",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:2717,Energy Efficiency,reduce,reduced,2717," +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | x | normal mode, normalized un-mass-weighted | a0 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | degeneracy | degree of degeneracy | | ndarray(ndof) int |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | TRV | translation/rotation/vibration | | ndarray(ndof) str 'TR' or 'V' or '-' for partial |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | gamma | irreducible representation | | ndarray(ndof) str irrep or None if unclassifiable |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | mu | reduced mass | u | ndarray(ndof) float (+/+) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | k | force constant | mDyne/A | ndarray(ndof) float (+/-) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | DQ0 | RMS deviation v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Qtp0 | Turning point v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Xtp0 | Turning point v=0 | a0 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | theta_vib | char temp | K | ndarray(n",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:4143,Energy Efficiency,energy,energy,4143,"on/vibration | | ndarray(ndof) str 'TR' or 'V' or '-' for partial |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | gamma | irreducible representation | | ndarray(ndof) str irrep or None if unclassifiable |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | mu | reduced mass | u | ndarray(ndof) float (+/+) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | k | force constant | mDyne/A | ndarray(ndof) float (+/-) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | DQ0 | RMS deviation v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Qtp0 | Turning point v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Xtp0 | Turning point v=0 | a0 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | theta_vib | char temp | K | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | IR_intensity | infrared intensity | km/mol | ndarray(ndof) float (+/+) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+. Examples; --------; >>> # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]. >>> # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:44,Availability,down,downhill,44,"# expected order for vibrations is steepest downhill to steepest uphill",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:11,Energy Efficiency,reduce,reduced,11,"# normco & reduced mass, LAB II.14 & II.15",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:243,Energy Efficiency,reduce,reduced,243,"""""""Pretty printer for vibrational analysis. Parameters; ----------; vibinfo; Results of a Hessian solution.; atom_lbl; Atomic symbols for printing. If None, integers used.; normco; {'q', 'w', 'x'}; Which normal coordinate definition to print (reduced mass, etc. unaffected by this parameter). Must be. * `q` [a0 u^1/2], the mass-weighted normalized eigenvectors of the Hessian,; * `w` [a0], the un-mass-weighted (Cartesian) of q, or; * `x` [a0], the normalized w.; shortlong; Whether normal coordinates should be in (nat, 3) `True` or (nat * 3, 1) `False` format.; groupby; How many normal coordinates per row. Defaults to 3/6 for shortlong=T/F. Value of `-1` uses one row.; prec; Number of decimal places for frequencies, reduced masses, etc.; ncprec; Number of decimal places for normal coordinates. Defaults to 2 for shortlong=short and 4 for shortlong=long. Returns; -------; str; String suitable for printing. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:723,Energy Efficiency,reduce,reduced,723,"""""""Pretty printer for vibrational analysis. Parameters; ----------; vibinfo; Results of a Hessian solution.; atom_lbl; Atomic symbols for printing. If None, integers used.; normco; {'q', 'w', 'x'}; Which normal coordinate definition to print (reduced mass, etc. unaffected by this parameter). Must be. * `q` [a0 u^1/2], the mass-weighted normalized eigenvectors of the Hessian,; * `w` [a0], the un-mass-weighted (Cartesian) of q, or; * `x` [a0], the normalized w.; shortlong; Whether normal coordinates should be in (nat, 3) `True` or (nat * 3, 1) `False` format.; groupby; How many normal coordinates per row. Defaults to 3/6 for shortlong=T/F. Value of `-1` uses one row.; prec; Number of decimal places for frequencies, reduced masses, etc.; ncprec; Number of decimal places for normal coordinates. Defaults to 2 for shortlong=short and 4 for shortlong=long. Returns; -------; str; String suitable for printing. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:99,Energy Efficiency,energy,energy,99,"""""""Perform thermochemical analysis from vibrational output. Parameters; ----------; E0; Electronic energy [Eh] at well bottom at 0 [K], :psivar:`CURRENT ENERGY`.; molecular_mass; Mass in [u] of molecule under analysis.; multiplicity; Spin multiplicity of molecule under analysis.; rot_const; (3,) rotational constants in [cm^-1] of molecule under analysis.; sigma; The rotational or external symmetry number determined from the point group.; rotor_type; The rotor type for rotational stat mech purposes: RT_ATOM, RT_LINEAR, other.; T; Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P; Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns; -------; dict, str; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:2,Energy Efficiency,reduce,reduced,2,"# reduced temperature",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:23,Energy Efficiency,energy,energy,23,"""""""\n\n Raw electronic energy, E_e""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:31,Energy Efficiency,energy,energy,31,"""""""\n\n Zero-point vibrational energy, ZPVE = Sum_i omega_i / 2, E_0 = E_e + ZPVE""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:27,Energy Efficiency,energy,energy,27,"""""""\n\n Thermal (internal) energy, E (includes ZPVE and finite-temperature corrections)""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:34,Energy Efficiency,energy,energy,34,"""""""\n Total E, Thermal (internal) energy at {:7.2f} [K] {:15.8f} [Eh]""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:19,Energy Efficiency,energy,energy,19,"""""""\n\n Gibbs free energy, G = H - T * S""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:21,Energy Efficiency,energy,energy,21,"""""""\n Total G, Gibbs energy at {:7.2f} [K] {:15.8f} [Eh]""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:25,Energy Efficiency,energy,energy,25,"""""""\n *** Absolute Gibbs energy, not a free energy of formation ***\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:44,Energy Efficiency,energy,energy,44,"""""""\n *** Absolute Gibbs energy, not a free energy of formation ***\n\n""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:107,Integrability,depend,dependencies,107,"""""""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:918,Testability,assert,assert,918,"""""""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:966,Testability,assert,assert,966,"""""""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:1013,Testability,assert,assert,1013,"""""""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:1060,Testability,assert,assert,1060,"""""""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:1108,Testability,assert,assert,1108,"""""""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:1155,Testability,assert,assert,1155,"""""""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:1203,Testability,assert,assert,1203,"""""""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py:1335,Testability,assert,assert,1335,"""""""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/vib.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/vib.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/__init__.py:32,Security,access,access,32,"# Load items that are useful to access from an input file",MatchSource.CODE_COMMENT,psi4/driver/qcdb/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/addons.py:346,Safety,detect,detecting,346,"#def is_numpy_new_enough(version_feature_introduced):; # if not _plugin_import('numpy'):; # return False; # import numpy; # from pkg_resources import parse_version; # return parse_version(numpy.version.version) >= parse_version(version_feature_introduced); #; #; #using_scipy = pytest.mark.skipif(_plugin_import('scipy') is False,; # reason='Not detecting module scipy. Install package if necessary and add to envvar PYTHONPATH')",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/addons.py:121,Modifiability,rewrite,rewrite,121,"#using_psi4_libxc = pytest.mark.skipif(is_psi4_new_enough(""1.2a1.dev100"") is False,; # reason=""Psi4 does not include DFT rewrite to use Libxc. Update to development head""); #; #using_psi4_efpmints = pytest.mark.skipif(is_psi4_new_enough(""1.2a1.dev507"") is False,; # reason=""Psi4 does not include EFP integrals in mints. Update to development head""); #; #using_psi4_python_integral_deriv = pytest.mark.skipif(is_psi4_new_enough(""1000"") is False,; # reason=""Psi4 does not include derivatives of integrals exported to python. Update to development head"")",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/addons.py:271,Safety,detect,detecting,271,"#using_numpy_113 = pytest.mark.skipif(is_numpy_new_enough(""1.13.0"") is False,; # reason='NumPy does not include 1.13 features. Update package and add to envvar PYTHONPATH'); #; #using_matplotlib = pytest.mark.skipif(_plugin_import('matplotlib') is False,; # reason='Note detecting module matplotlib. Install package if necessary and add to envvar PYTHONPATH')",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py:76,Modifiability,variab,variables,76,"#! A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for; #! the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong; #! to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries; #! because the former define absolute positions, while the latter are relative.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py:218,Deployability,update,updated,218,"#! RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates; #! using Python's built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables; #! that are updated during the potential energy surface scan, and then the same procedure is performed; #! using polar coordinates, converted to Cartesian coordinates.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py:15,Energy Efficiency,energy,energy,15,"#! RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates; #! using Python's built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables; #! that are updated during the potential energy surface scan, and then the same procedure is performed; #! using polar coordinates, converted to Cartesian coordinates.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py:247,Energy Efficiency,energy,energy,247,"#! RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates; #! using Python's built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables; #! that are updated during the potential energy surface scan, and then the same procedure is performed; #! using polar coordinates, converted to Cartesian coordinates.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py:195,Modifiability,variab,variables,195,"#! RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates; #! using Python's built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables; #! that are updated during the potential energy surface scan, and then the same procedure is performed; #! using polar coordinates, converted to Cartesian coordinates.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py:299,Performance,perform,performed,299,"#! RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates; #! using Python's built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables; #! that are updated during the potential energy surface scan, and then the same procedure is performed; #! using polar coordinates, converted to Cartesian coordinates.",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py:37,Energy Efficiency,energy,energy,37,"# Define the points on the potential energy surface using standard Python list functions",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py:26,Energy Efficiency,energy,energy,26,"# Start with a potentital energy scan in Z-matrix coordinates",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints4.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints9_basisset.py:5,Testability,test,test,5,"#! A test of the basis specification. Various basis sets are specified outright and in blocks, both; #! orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls; #! qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks; #! that symmetry of the Molecule observes the basis assignment to atoms.; # cc-pvdz aug-cc-pvdz; # BASIS H 5/ 5 C 14/15 H +4/ 4 C +9/10; # RIFIT H 14/15 C 56/66 H +9/10 C +16/20; # JKFIT H 23/25 C 70/81 H +9/10 C +16/20",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints9_basisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints9_basisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints9_basisset.py:4995,Usability,clear,clear,4995,"(AUG-CC-PVDZ AUX)', wert.name(), 'callby') #TEST; #psi4.compare_strings('AUG-CC-PVDZ-JKFIT', wert.blend(), 'blend') #TEST; #mymol.print_out(); #; #; #mymol2 = psi4.geometry(""""""; #0 2; #C 0.0 0.0 0.0; #O 1.4 0.0 0.0; #H_r -0.5 -0.6 0.3; #H_l -0.5 0.6 0.3; #H_c -0.5 0.0 0.7; #""""""); #; #psi4.set_options({'basis': 'dz_plusplusplus'}); #; #print('[11] <<< cc-pVDZ w/ aug-cc-pVDZ on C, H >>>'); #wert = psi4.core.BasisSet.build(mymol2, 'BASIS', psi4.core.get_global_option('BASIS')); #psi4.compare_integers(64, wert.nbf(), 'nbf()') #TEST; #psi4.compare_integers(67, wert.nao(), 'nao()') #TEST; #psi4.compare_strings('cs', mymol2.schoenflies_symbol(), 'symm') #TEST; #psi4.compare_strings('DZ_PLUSPLUSPLUS', wert.name(), 'callby') #TEST; #psi4.compare_strings('AUG-CC-PVDZ + CC-PVDZ', wert.blend(), 'blend') #TEST; #mymol2.print_out(); #; #hene = psi4.geometry(""""""; #He; #Ne 1 2.0; #""""""); #; #psi4.basis_helper(""""""; # assign cc-pv5z; #"""""", name='disguised5z'); #; #psi4.core.set_global_option('DF_BASIS_MP2', '') # clear df_basis_mp2 {...} to get autoaux below; #; #print('[12] <<< cc-pV5Z on HeNe >>>'); #wert = psi4.core.BasisSet.build(hene, 'BASIS', psi4.core.get_global_option('BASIS')); #hene.print_out(); #psi4.compare_integers(146, wert.nbf(), 'nbf()') #TEST; #psi4.compare_integers(196, wert.nao(), 'nao()') #TEST; #psi4.compare_strings('DISGUISED5Z', wert.name(), 'callby') #TEST; #psi4.compare_strings('CC-PV5Z', wert.blend(), 'blend') #TEST; #; #print('[13] <<< RI for cc-pV5Z on HeNe >>>'); #wert = psi4.core.BasisSet.build(hene, 'DF_BASIS_MP2', '', 'RIFIT', psi4.core.get_global_option('BASIS')); #hene.print_out(); #psi4.compare_integers(284, wert.nbf(), 'nbf()') #TEST; #psi4.compare_integers(413, wert.nao(), 'nao()') #TEST; #psi4.compare_strings('(DISGUISED5Z AUX)', wert.name(), 'callby') #TEST; #psi4.compare_strings('CC-PV5Z-RI', wert.blend(), 'blend') #TEST; #; #print('[14] <<< impossible JK for cc-pV5Z on HeNe >>>'); #error_tripped = 0; #try:; # wert = psi4.core.BasisSet.build(hene",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_mints9_basisset.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_mints9_basisset.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_to_string.py:135,Testability,assert,assert,135,"#def test_toxyz_2a():; # subject = subject2; # mol = qcdb.Molecule(subject); #; # xyz = mol.to_string(dtype='xyz', units='Bohr'); #; # assert compare_strings(ans2_au, xyz, sys._getframe().f_code.co_name); #; #def test_toxyz_2b():; # subject = subject2; # mol = qcdb.Molecule(subject); #; # xyz = mol.to_string(dtype='xyz', units='Angstrom', ghost_format='Gh({elez})'); #; # assert compare_strings(ans2_ang, xyz, sys._getframe().f_code.co_name); #; #def test_toxyz_2c():; # subject = subject2; # mol = qcdb.Molecule(subject); #; # xyz = mol.to_string(dtype='xyz', units='Angstrom', ghost_format=''); #; # assert compare_strings(ans2c_ang, xyz, sys._getframe().f_code.co_name)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_to_string.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_to_string.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_to_string.py:374,Testability,assert,assert,374,"#def test_toxyz_2a():; # subject = subject2; # mol = qcdb.Molecule(subject); #; # xyz = mol.to_string(dtype='xyz', units='Bohr'); #; # assert compare_strings(ans2_au, xyz, sys._getframe().f_code.co_name); #; #def test_toxyz_2b():; # subject = subject2; # mol = qcdb.Molecule(subject); #; # xyz = mol.to_string(dtype='xyz', units='Angstrom', ghost_format='Gh({elez})'); #; # assert compare_strings(ans2_ang, xyz, sys._getframe().f_code.co_name); #; #def test_toxyz_2c():; # subject = subject2; # mol = qcdb.Molecule(subject); #; # xyz = mol.to_string(dtype='xyz', units='Angstrom', ghost_format=''); #; # assert compare_strings(ans2c_ang, xyz, sys._getframe().f_code.co_name)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_to_string.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_to_string.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_to_string.py:604,Testability,assert,assert,604,"#def test_toxyz_2a():; # subject = subject2; # mol = qcdb.Molecule(subject); #; # xyz = mol.to_string(dtype='xyz', units='Bohr'); #; # assert compare_strings(ans2_au, xyz, sys._getframe().f_code.co_name); #; #def test_toxyz_2b():; # subject = subject2; # mol = qcdb.Molecule(subject); #; # xyz = mol.to_string(dtype='xyz', units='Angstrom', ghost_format='Gh({elez})'); #; # assert compare_strings(ans2_ang, xyz, sys._getframe().f_code.co_name); #; #def test_toxyz_2c():; # subject = subject2; # mol = qcdb.Molecule(subject); #; # xyz = mol.to_string(dtype='xyz', units='Angstrom', ghost_format=''); #; # assert compare_strings(ans2c_ang, xyz, sys._getframe().f_code.co_name)",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/test_to_string.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/test_to_string.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/utils.py:95,Availability,failure,failure,95,"""""""Turns `compare_fn` that returns `None` on success and raises; `qcdb.TestComparisonError` on failure into a function that returns; True/False, suitable for assertions in pytest. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/utils.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/utils.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/utils.py:158,Testability,assert,assertions,158,"""""""Turns `compare_fn` that returns `None` on success and raises; `qcdb.TestComparisonError` on failure into a function that returns; True/False, suitable for assertions in pytest. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/pytest/utils.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/pytest/utils.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/util/mpl.py:48,Deployability,install,installing,48,"""""""Python module matplotlib not found. Solve by installing it: `conda install matplotlib` or https://matplotlib.org/faq/installing_faq.html""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/util/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/util/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/util/mpl.py:70,Deployability,install,install,70,"""""""Python module matplotlib not found. Solve by installing it: `conda install matplotlib` or https://matplotlib.org/faq/installing_faq.html""""""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/util/mpl.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/util/mpl.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/util/regex.py:315,Availability,error,error,315,"""""""Apply generous regex to `dertype` to return regularized integer and driver values for derivative level. Parameters; ----------; dertype : int or str; Interpretable as a derivative level, regardless of case or type.; max_derivative : int, optional; Derivative level above which should throw FeatureNotImplemented error. Returns; -------; (int, {'energy', 'gradient', 'hessian'}); Returns dertype as an integer and a driver-valid string. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/util/regex.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/util/regex.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/util/regex.py:348,Energy Efficiency,energy,energy,348,"""""""Apply generous regex to `dertype` to return regularized integer and driver values for derivative level. Parameters; ----------; dertype : int or str; Interpretable as a derivative level, regardless of case or type.; max_derivative : int, optional; Derivative level above which should throw FeatureNotImplemented error. Returns; -------; (int, {'energy', 'gradient', 'hessian'}); Returns dertype as an integer and a driver-valid string. """"""",MatchSource.CODE_COMMENT,psi4/driver/qcdb/util/regex.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/qcdb/util/regex.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py:909,Energy Efficiency,green,green,909,"""""""; This file implements an expression syntax, similar to printf, for adding; ANSI colors to text. See colorize(), cwrite(), and cprint() for routines that can generate; colored output. colorize will take a string and replace all color expressions with; ANSI control codes. If the isatty keyword arg is set to False, then; the color expressions will be converted to null strings, and the; returned string will have no color. cwrite and cprint are equivalent to write() and print() calls in; python, but they colorize their output. If the stream argument is; not supplied, they write to sys.stdout. Here are some example color expressions:. @r Turn on red coloring; @R Turn on bright red coloring; @*{foo} Bold foo, but don't change text color; @_{bar} Underline bar, but don't change text color; @*b Turn on bold, blue text; @_B Turn on bright blue text with an underline; @. Revert to plain formatting; @*g{green} Print out 'green' in bold, green text, then reset to plain.; @*ggreen@. Print out 'green' in bold, green text, then reset to plain. The syntax consists of:. color-expr = '@' [style] color-code '{' text '}' | '@.' | '@@'; style = '*' | '_'; color-code = [krgybmcwKRGYBMCW]; text = .*. '@' indicates the start of a color expression. It can be followed; by an optional * or _ that indicates whether the font should be bold or; underlined. If * or _ is not provided, the text will be plain. Then; an optional color code is supplied. This can be [krgybmcw] or [KRGYBMCW],; where the letters map to black(k), red(r), green(g), yellow(y), blue(b),; magenta(m), cyan(c), and white(w). Lowercase letters denote normal ANSI; colors and capital letters denote bright ANSI colors. Finally, the color expression can be followed by text enclosed in {}. If; braces are present, only the text in braces is colored. If the braces are; NOT present, then just the control codes to enable the color will be output.; The console can be reset later to plain text with '@.'. To output an @, use '@@'. To outp",MatchSource.CODE_COMMENT,psi4/driver/util/tty/color.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py:927,Energy Efficiency,green,green,927,"""""""; This file implements an expression syntax, similar to printf, for adding; ANSI colors to text. See colorize(), cwrite(), and cprint() for routines that can generate; colored output. colorize will take a string and replace all color expressions with; ANSI control codes. If the isatty keyword arg is set to False, then; the color expressions will be converted to null strings, and the; returned string will have no color. cwrite and cprint are equivalent to write() and print() calls in; python, but they colorize their output. If the stream argument is; not supplied, they write to sys.stdout. Here are some example color expressions:. @r Turn on red coloring; @R Turn on bright red coloring; @*{foo} Bold foo, but don't change text color; @_{bar} Underline bar, but don't change text color; @*b Turn on bold, blue text; @_B Turn on bright blue text with an underline; @. Revert to plain formatting; @*g{green} Print out 'green' in bold, green text, then reset to plain.; @*ggreen@. Print out 'green' in bold, green text, then reset to plain. The syntax consists of:. color-expr = '@' [style] color-code '{' text '}' | '@.' | '@@'; style = '*' | '_'; color-code = [krgybmcwKRGYBMCW]; text = .*. '@' indicates the start of a color expression. It can be followed; by an optional * or _ that indicates whether the font should be bold or; underlined. If * or _ is not provided, the text will be plain. Then; an optional color code is supplied. This can be [krgybmcw] or [KRGYBMCW],; where the letters map to black(k), red(r), green(g), yellow(y), blue(b),; magenta(m), cyan(c), and white(w). Lowercase letters denote normal ANSI; colors and capital letters denote bright ANSI colors. Finally, the color expression can be followed by text enclosed in {}. If; braces are present, only the text in braces is colored. If the braces are; NOT present, then just the control codes to enable the color will be output.; The console can be reset later to plain text with '@.'. To output an @, use '@@'. To outp",MatchSource.CODE_COMMENT,psi4/driver/util/tty/color.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py:943,Energy Efficiency,green,green,943,"""""""; This file implements an expression syntax, similar to printf, for adding; ANSI colors to text. See colorize(), cwrite(), and cprint() for routines that can generate; colored output. colorize will take a string and replace all color expressions with; ANSI control codes. If the isatty keyword arg is set to False, then; the color expressions will be converted to null strings, and the; returned string will have no color. cwrite and cprint are equivalent to write() and print() calls in; python, but they colorize their output. If the stream argument is; not supplied, they write to sys.stdout. Here are some example color expressions:. @r Turn on red coloring; @R Turn on bright red coloring; @*{foo} Bold foo, but don't change text color; @_{bar} Underline bar, but don't change text color; @*b Turn on bold, blue text; @_B Turn on bright blue text with an underline; @. Revert to plain formatting; @*g{green} Print out 'green' in bold, green text, then reset to plain.; @*ggreen@. Print out 'green' in bold, green text, then reset to plain. The syntax consists of:. color-expr = '@' [style] color-code '{' text '}' | '@.' | '@@'; style = '*' | '_'; color-code = [krgybmcwKRGYBMCW]; text = .*. '@' indicates the start of a color expression. It can be followed; by an optional * or _ that indicates whether the font should be bold or; underlined. If * or _ is not provided, the text will be plain. Then; an optional color code is supplied. This can be [krgybmcw] or [KRGYBMCW],; where the letters map to black(k), red(r), green(g), yellow(y), blue(b),; magenta(m), cyan(c), and white(w). Lowercase letters denote normal ANSI; colors and capital letters denote bright ANSI colors. Finally, the color expression can be followed by text enclosed in {}. If; braces are present, only the text in braces is colored. If the braces are; NOT present, then just the control codes to enable the color will be output.; The console can be reset later to plain text with '@.'. To output an @, use '@@'. To outp",MatchSource.CODE_COMMENT,psi4/driver/util/tty/color.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py:999,Energy Efficiency,green,green,999,"plements an expression syntax, similar to printf, for adding; ANSI colors to text. See colorize(), cwrite(), and cprint() for routines that can generate; colored output. colorize will take a string and replace all color expressions with; ANSI control codes. If the isatty keyword arg is set to False, then; the color expressions will be converted to null strings, and the; returned string will have no color. cwrite and cprint are equivalent to write() and print() calls in; python, but they colorize their output. If the stream argument is; not supplied, they write to sys.stdout. Here are some example color expressions:. @r Turn on red coloring; @R Turn on bright red coloring; @*{foo} Bold foo, but don't change text color; @_{bar} Underline bar, but don't change text color; @*b Turn on bold, blue text; @_B Turn on bright blue text with an underline; @. Revert to plain formatting; @*g{green} Print out 'green' in bold, green text, then reset to plain.; @*ggreen@. Print out 'green' in bold, green text, then reset to plain. The syntax consists of:. color-expr = '@' [style] color-code '{' text '}' | '@.' | '@@'; style = '*' | '_'; color-code = [krgybmcwKRGYBMCW]; text = .*. '@' indicates the start of a color expression. It can be followed; by an optional * or _ that indicates whether the font should be bold or; underlined. If * or _ is not provided, the text will be plain. Then; an optional color code is supplied. This can be [krgybmcw] or [KRGYBMCW],; where the letters map to black(k), red(r), green(g), yellow(y), blue(b),; magenta(m), cyan(c), and white(w). Lowercase letters denote normal ANSI; colors and capital letters denote bright ANSI colors. Finally, the color expression can be followed by text enclosed in {}. If; braces are present, only the text in braces is colored. If the braces are; NOT present, then just the control codes to enable the color will be output.; The console can be reset later to plain text with '@.'. To output an @, use '@@'. To output a } inside br",MatchSource.CODE_COMMENT,psi4/driver/util/tty/color.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py:1015,Energy Efficiency,green,green,1015,"plements an expression syntax, similar to printf, for adding; ANSI colors to text. See colorize(), cwrite(), and cprint() for routines that can generate; colored output. colorize will take a string and replace all color expressions with; ANSI control codes. If the isatty keyword arg is set to False, then; the color expressions will be converted to null strings, and the; returned string will have no color. cwrite and cprint are equivalent to write() and print() calls in; python, but they colorize their output. If the stream argument is; not supplied, they write to sys.stdout. Here are some example color expressions:. @r Turn on red coloring; @R Turn on bright red coloring; @*{foo} Bold foo, but don't change text color; @_{bar} Underline bar, but don't change text color; @*b Turn on bold, blue text; @_B Turn on bright blue text with an underline; @. Revert to plain formatting; @*g{green} Print out 'green' in bold, green text, then reset to plain.; @*ggreen@. Print out 'green' in bold, green text, then reset to plain. The syntax consists of:. color-expr = '@' [style] color-code '{' text '}' | '@.' | '@@'; style = '*' | '_'; color-code = [krgybmcwKRGYBMCW]; text = .*. '@' indicates the start of a color expression. It can be followed; by an optional * or _ that indicates whether the font should be bold or; underlined. If * or _ is not provided, the text will be plain. Then; an optional color code is supplied. This can be [krgybmcw] or [KRGYBMCW],; where the letters map to black(k), red(r), green(g), yellow(y), blue(b),; magenta(m), cyan(c), and white(w). Lowercase letters denote normal ANSI; colors and capital letters denote bright ANSI colors. Finally, the color expression can be followed by text enclosed in {}. If; braces are present, only the text in braces is colored. If the braces are; NOT present, then just the control codes to enable the color will be output.; The console can be reset later to plain text with '@.'. To output an @, use '@@'. To output a } inside br",MatchSource.CODE_COMMENT,psi4/driver/util/tty/color.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py:1527,Energy Efficiency,green,green,1527,"on syntax, similar to printf, for adding; ANSI colors to text. See colorize(), cwrite(), and cprint() for routines that can generate; colored output. colorize will take a string and replace all color expressions with; ANSI control codes. If the isatty keyword arg is set to False, then; the color expressions will be converted to null strings, and the; returned string will have no color. cwrite and cprint are equivalent to write() and print() calls in; python, but they colorize their output. If the stream argument is; not supplied, they write to sys.stdout. Here are some example color expressions:. @r Turn on red coloring; @R Turn on bright red coloring; @*{foo} Bold foo, but don't change text color; @_{bar} Underline bar, but don't change text color; @*b Turn on bold, blue text; @_B Turn on bright blue text with an underline; @. Revert to plain formatting; @*g{green} Print out 'green' in bold, green text, then reset to plain.; @*ggreen@. Print out 'green' in bold, green text, then reset to plain. The syntax consists of:. color-expr = '@' [style] color-code '{' text '}' | '@.' | '@@'; style = '*' | '_'; color-code = [krgybmcwKRGYBMCW]; text = .*. '@' indicates the start of a color expression. It can be followed; by an optional * or _ that indicates whether the font should be bold or; underlined. If * or _ is not provided, the text will be plain. Then; an optional color code is supplied. This can be [krgybmcw] or [KRGYBMCW],; where the letters map to black(k), red(r), green(g), yellow(y), blue(b),; magenta(m), cyan(c), and white(w). Lowercase letters denote normal ANSI; colors and capital letters denote bright ANSI colors. Finally, the color expression can be followed by text enclosed in {}. If; braces are present, only the text in braces is colored. If the braces are; NOT present, then just the control codes to enable the color will be output.; The console can be reset later to plain text with '@.'. To output an @, use '@@'. To output a } inside braces, use '}}'.; """"""",MatchSource.CODE_COMMENT,psi4/driver/util/tty/color.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py:143,Integrability,rout,routines,143,"""""""; This file implements an expression syntax, similar to printf, for adding; ANSI colors to text. See colorize(), cwrite(), and cprint() for routines that can generate; colored output. colorize will take a string and replace all color expressions with; ANSI control codes. If the isatty keyword arg is set to False, then; the color expressions will be converted to null strings, and the; returned string will have no color. cwrite and cprint are equivalent to write() and print() calls in; python, but they colorize their output. If the stream argument is; not supplied, they write to sys.stdout. Here are some example color expressions:. @r Turn on red coloring; @R Turn on bright red coloring; @*{foo} Bold foo, but don't change text color; @_{bar} Underline bar, but don't change text color; @*b Turn on bold, blue text; @_B Turn on bright blue text with an underline; @. Revert to plain formatting; @*g{green} Print out 'green' in bold, green text, then reset to plain.; @*ggreen@. Print out 'green' in bold, green text, then reset to plain. The syntax consists of:. color-expr = '@' [style] color-code '{' text '}' | '@.' | '@@'; style = '*' | '_'; color-code = [krgybmcwKRGYBMCW]; text = .*. '@' indicates the start of a color expression. It can be followed; by an optional * or _ that indicates whether the font should be bold or; underlined. If * or _ is not provided, the text will be plain. Then; an optional color code is supplied. This can be [krgybmcw] or [KRGYBMCW],; where the letters map to black(k), red(r), green(g), yellow(y), blue(b),; magenta(m), cyan(c), and white(w). Lowercase letters denote normal ANSI; colors and capital letters denote bright ANSI colors. Finally, the color expression can be followed by text enclosed in {}. If; braces are present, only the text in braces is colored. If the braces are; NOT present, then just the control codes to enable the color will be output.; The console can be reset later to plain text with '@.'. To output an @, use '@@'. To outp",MatchSource.CODE_COMMENT,psi4/driver/util/tty/color.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py:2,Energy Efficiency,green,green,2,"# green",MatchSource.CODE_COMMENT,psi4/driver/util/tty/color.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/color.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/__init__.py:6,Availability,avail,available,6,"# Not available on Windows",MatchSource.CODE_COMMENT,psi4/driver/util/tty/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/__init__.py:6,Availability,avail,available,6,"# Not available on Windows",MatchSource.CODE_COMMENT,psi4/driver/util/tty/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/util/tty/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/A24.py:366,Testability,benchmark,benchmark,366,"""""""; | Database (Hobza) of interaction energies for bimolecular complexes.; | Geometries from <Reference>.; | Reference interaction energies from Rezac and Hobza, JCTC (in press). - **cp** ``'off'`` <erase this comment and after unless on is a valid option> || ``'on'``. - **rlxd** ``'off'`` <erase this comment and after unless on is valid option> || ``'on'``. - **benchmark**. - ``'<benchmark_name>'`` <Reference>.; - |dl| ``'<default_benchmark_name>'`` |dr| <Reference>. - **subset**. - ``'small'`` <members_description>; - ``'large'`` <members_description>; - ``'<subset>'`` <members_description>. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/A24.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/A24.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/A24alt.py:366,Testability,benchmark,benchmark,366,"""""""; | Database (Hobza) of interaction energies for bimolecular complexes.; | Geometries from <Reference>.; | Reference interaction energies from Rezac and Hobza, JCTC (in press). - **cp** ``'off'`` <erase this comment and after unless on is a valid option> || ``'on'``. - **rlxd** ``'off'`` <erase this comment and after unless on is valid option> || ``'on'``. - **benchmark**. - ``'<benchmark_name>'`` <Reference>.; - |dl| ``'<default_benchmark_name>'`` |dr| <Reference>. - **subset**. - ``'small'`` <members_description>; - ``'large'`` <members_description>; - ``'<subset>'`` <members_description>. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/A24alt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/A24alt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BAKERJCC93.py:53,Performance,optimiz,optimize,53,"""""""; | Database of molecules that are challenging to optimize.; | Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; | No reference energies defined. - **cp** ``'off'``. - **rlxd** ``'off'``. - **subset**. - ``'small'``; - ``'large'``. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/BAKERJCC93.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BAKERJCC93.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BAKERJCC93.py:117,Performance,optimiz,optimization,117,"# These atoms were replaced below to avoid a D3h related symmetry bug; # the point group wasn't getting detected and optimization couldn't proceed; #C 2.27501122 1.31347834 0.00000000; #C -2.27501122 1.31347834 0.00000000",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/BAKERJCC93.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BAKERJCC93.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BAKERJCC93.py:37,Safety,avoid,avoid,37,"# These atoms were replaced below to avoid a D3h related symmetry bug; # the point group wasn't getting detected and optimization couldn't proceed; #C 2.27501122 1.31347834 0.00000000; #C -2.27501122 1.31347834 0.00000000",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/BAKERJCC93.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BAKERJCC93.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BAKERJCC93.py:104,Safety,detect,detected,104,"# These atoms were replaced below to avoid a D3h related symmetry bug; # the point group wasn't getting detected and optimization couldn't proceed; #C 2.27501122 1.31347834 0.00000000; #C -2.27501122 1.31347834 0.00000000",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/BAKERJCC93.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BAKERJCC93.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BASIC.py:48,Testability,test,testing,48,"""""""; | Database of simple molecules, mostly for testing.; | Geometries from nowhere special, and no reference energies defined. - **cp** ``'off'``. - **rlxd** ``'off'``. - **subset** [``'h2o'``, ``'nh3'``, ``'ch4'``]. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/BASIC.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BASIC.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BASIC.py:19,Usability,simpl,simple,19,"""""""; | Database of simple molecules, mostly for testing.; | Geometries from nowhere special, and no reference energies defined. - **cp** ``'off'``. - **rlxd** ``'off'``. - **subset** [``'h2o'``, ``'nh3'``, ``'ch4'``]. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/BASIC.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BASIC.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BENCH12.py:57,Energy Efficiency,energy,energy,57,"""""""; | Database of <description of members and reference energy type>.; | Geometries from <Reference>.; | Reference interaction energies from <Reference>. - **benchmark**. - ``'<benchmark_name>'`` <Reference>.; - |dl| ``'<default_benchmark_name>'`` |dr| <Reference>. - **subset**. - ``'small'``; - ``'large'``; - ``'alkenes'`` ; - ``'alkanes'`` ; - ``'acenes'`` ; - ``'thiophenes'`` ; - ``'h2o_size'`` ; - ``'h2o_shape'`` ; - ``'atoms'`` ; - ``'S22_HB'`` ; - ``'S22_MX'`` ; - ``'S22_DD'`` . """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/BENCH12.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BENCH12.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BENCH12.py:159,Testability,benchmark,benchmark,159,"""""""; | Database of <description of members and reference energy type>.; | Geometries from <Reference>.; | Reference interaction energies from <Reference>. - **benchmark**. - ``'<benchmark_name>'`` <Reference>.; - |dl| ``'<default_benchmark_name>'`` |dr| <Reference>. - **subset**. - ``'small'``; - ``'large'``; - ``'alkenes'`` ; - ``'alkanes'`` ; - ``'acenes'`` ; - ``'thiophenes'`` ; - ``'h2o_size'`` ; - ``'h2o_shape'`` ; - ``'atoms'`` ; - ``'S22_HB'`` ; - ``'S22_MX'`` ; - ``'S22_DD'`` . """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/BENCH12.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/BENCH12.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/HBC6.py:388,Testability,benchmark,benchmark,388,"""""""; | Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; | Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; | Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'`` || ``'on'``. - **benchmark**. - ``'HBC60'`` Thanthiriwatte et al. JCTC 7 88 (2011).; - |dl| ``'HBC6A'`` |dr| Marshall et al. JCP 135 194102 (2011).; - ``'HBC6ARLX'`` Sherrill group, unpublished. - **subset**. - ``'small'``; - ``'large'``; - ``'equilibrium'`` equilibrium points for the six systems; - ``'FaOOFaOO'`` dissociation curve for formic acid dimer; - ``'FaONFaON'`` dissociation curve for formamide dimer; - ``'FaNNFaNN'`` dissociation curve for formamidine dimer; - ``'FaOOFaON'`` dissociation curve for formic acid- formamide complex; - ``'FaONFaNN'`` dissociation curve for formamide- formamidine complex; - ``'FaOOFaNN'`` dissociation curve for formic acid- formamidine complex. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/HBC6.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/HBC6.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/HSG.py:350,Testability,benchmark,benchmark,350,"""""""; | Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; | Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; | Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'``. - **benchmark**. - ``'HSG0'`` Faver et al. JCTC 7 790 (2011).; - |dl| ``'HSGA'`` |dr| Marshall et al. JCP 135 194102 (2011). - **subset**. - ``'small'``; - ``'large'``. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/HSG.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/HSG.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/HTR40.py:142,Testability,benchmark,benchmark,142,"""""""; | Database of Hydrogen transfer reactions.; | Geometries from Bozkaya and Sherrill.; | Reference energies from Bozkaya and Sherrill. - **benchmark**. - ``'<benchmark_name>'`` <Reference>.; - |dl| ``'<default_benchmark_name>'`` |dr| <Reference>. - **subset**. - ``'small'`` <members_description>; - ``'large'`` <members_description>; - ``'<subset>'`` <members_description>. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/HTR40.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/HTR40.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/NBC10.py:733,Testability,benchmark,benchmark,733,"""""""; | Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; | Geometries and Reference interaction energies from the following articles:; | Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; | Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; | Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; | Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; | Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; | Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; | Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'``. - **benchmark**. - ``'NBC100'`` Burns et al. JCP 134 084107 (2011).; - |dl| ``'NBC10A'`` |dr| Marshall et al. JCP 135 194102 (2011). - **subset**. - ``'small'``; - ``'large'``; - ``'equilibrium'``; - ``'BzBz_S'`` dissociation curve for benzene dimer, sandwich; - ``'BzBz_T'`` dissociation curve for benzene dimer, t-shaped; - ``'BzBz_PD34'`` dissociation curve for benzene dimer, parallel displaced by 3.4A; - ``'BzH2S'`` dissociation curve for benzene-H2S; - ``'BzMe'`` dissociation curve for benzene-methane; - ``'MeMe'`` dissociation curve for methane dimer; - ``'PyPy_S2'`` dissociation curve for pyridine dimer, sandwich; - ``'PyPy_T3'`` dissociation curve for pyridine dimer, t-shaped; - ``'BzBz_PD32'`` dissociation curve for benzene dimer, parallel displaced by 3.2A; - ``'BzBz_PD36'`` dissociation curve for benzene dimer, parallel displaced by 3.6A. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/NBC10.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/NBC10.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/NCB31.py:651,Energy Efficiency,charge,charge-transfer,651,"""""""; | Database (Truhlar) of several classes of noncovalent interactions.; | Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; | Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; | First comprehensive citation JPCA 109 5656 (2005). . - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'`` || ``'on'``. - **benchmark**. - ``'<benchmark_name>'`` <Reference>.; - |dl| ``'<default_benchmark_name>'`` |dr| <Reference>. - **subset**. - ``'small'`` 3: HF-HF, He-Ne, HCCH-HCCH; - ``'large'`` 1: BzBz_PD; - ``'HB6'`` hydrogen-bonded; - ``'CT7'`` charge-transfer; - ``'DI6'`` dipole-interacting; - ``'WI7'`` weakly interacting; - ``'PPS5'`` pi-pi stacking. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/NCB31.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/NCB31.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/NCB31.py:420,Testability,benchmark,benchmark,420,"""""""; | Database (Truhlar) of several classes of noncovalent interactions.; | Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; | Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; | First comprehensive citation JPCA 109 5656 (2005). . - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'`` || ``'on'``. - **benchmark**. - ``'<benchmark_name>'`` <Reference>.; - |dl| ``'<default_benchmark_name>'`` |dr| <Reference>. - **subset**. - ``'small'`` 3: HF-HF, He-Ne, HCCH-HCCH; - ``'large'`` 1: BzBz_PD; - ``'HB6'`` hydrogen-bonded; - ``'CT7'`` charge-transfer; - ``'DI6'`` dipole-interacting; - ``'WI7'`` weakly interacting; - ``'PPS5'`` pi-pi stacking. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/NCB31.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/NCB31.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/RSE42.py:259,Testability,benchmark,benchmark,259,"""""""; | Database of radical stabilization energies.; | Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; | Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. - **benchmark**. - ``'RSE42'`` [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; - |dl| ``'RSE42'`` |dr| [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. - **subset**. - ``'small'`` <members_description>; - ``'large'`` <members_description>; - ``'RSE30'`` smaller systems in RSE42; - ``'<subset>'`` <members_description>. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/RSE42.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/RSE42.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/S22.py:374,Testability,benchmark,benchmark,374,"""""""; | Database (Hobza) of interaction energies for bimolecular complexes.; | Geometries from Jurecka et al. PCCP 8 1985 (2006).; | First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; | Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'``. - **benchmark**. - ``'S220'`` Jurecka et al. PCCP 8 1985 (2006).; - ``'S22A'`` Takatani et al. JCP 132 144104 (2010).; - |dl| ``'S22B'`` |dr| Marshall et al. JCP 135 194102 (2011). - **subset**. - ``'small'`` water dimer, methane dimer, ethene-ethine; - ``'large'`` adenine-thymine; - ``'HB'`` hydrogen-bonded systems; - ``'MX'`` mixed-influence systems; - ``'DD'`` dispersion-dominated systems; - ``'S11'`` smaller systems in S22; - ``'WATER'`` water dimer. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/S22.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/S22.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/S22by5.py:297,Availability,error,error,297,"""""""; | Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; | Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; | Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there's trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'``. - **subset**. - ``'small'``; - ``'large'``; - ``'equilibrium'``; - ``'mol1'`` five-point (0.9, 1.0, 1.2, 1.5, 2.0) :math:`\\times R_{eq}` dissociation curve for molecule 1; - ...; - ``'mol22'`` five-point (0.9, 1.0, 1.2, 1.5, 2.0) :math:`\\times R_{eq}` dissociation curve for molecule 22. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/databases/S22by5.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/databases/S22by5.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:24,Energy Efficiency,charge,charge,24,"# Map from atom name to charge, vDW radius, nfrozen",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:116,Energy Efficiency,energy,energy,116,""""""" Reads the F-SAPT component files. Arguments; ---------; filepath : str; Path to directory containing the F-SAPT energy component files. Returns; -------; vals : Dict[str, np.ndarray]; Dictionary of the F-SAPT0 components decomposed to orbital, nuclear, and external; potential contributions; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:449,Energy Efficiency,energy,energy,449,"""""""Fragments atomic pairwise dispersion contributions from DFTD3 for inclusion in F-SAPT-D.; Arguments; ---------; d3disp : numpy.ndarray[float]; (NA, NB) array of atom-pairwise dispersion computed by DFTD3; frags : Dict[str, Dict[str, List[str]]]; Dictionary containing fragment information read from `fA.dat` and `fB.dat`; natoms : Dict[str, int]; Dictionary containing number of atoms in each monomer; Returns; -------; Edisp : float; Dispersion energy computed from pairwise analysis; D3pairs : Dict[str, Dict[str, float]]; Dictionary containing reduced order-2 dispersion interactions between fragments; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:550,Energy Efficiency,reduce,reduced,550,"""""""Fragments atomic pairwise dispersion contributions from DFTD3 for inclusion in F-SAPT-D.; Arguments; ---------; d3disp : numpy.ndarray[float]; (NA, NB) array of atom-pairwise dispersion computed by DFTD3; frags : Dict[str, Dict[str, List[str]]]; Dictionary containing fragment information read from `fA.dat` and `fB.dat`; natoms : Dict[str, int]; Dictionary containing number of atoms in each monomer; Returns; -------; Edisp : float; Dispersion energy computed from pairwise analysis; D3pairs : Dict[str, Dict[str, float]]; Dictionary containing reduced order-2 dispersion interactions between fragments; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:155,Energy Efficiency,charge,charge,155,"""""""Calculate the order 2 F-SAPT analysis; ---------; osapt : Dict; Dictionary of the decompositions of the SAPT0 components to nuclear, orbital, and point charge contributions; wsA : Dict; Dictionary containing the weight (0 or 1) for each atom in the defined fragments for subsystem A; wsB : Dict; Dictionary containing the weight (0 or 1) for each atom in the defined fragments for subsystem B; frags : Dict; Dictionary containing the indices of the atoms in each user-defined functional group; Returns; -------; vals : Dict; Dictionary containing the F-SAPT0 order 2 analysis for the SAPT components; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:51,Energy Efficiency,reduce,reduced,51,"# No full order 2 analysis for D3 dispersion, only reduced. Fragment separately",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:138,Deployability,A/B,A/B,138,"# For I-SAPT/SAOn and I-SAPT/SIAOn, we need to add one extra orbital weight for the reassigned link orbital. It belongs; # to the atom of A/B directly connected to the linker C. The user needs to supply a file link_siao.dat that has two lines; # A (atomnumber); # B (atomnumber); # to specify the numbers of atoms which are connected to C. We will now check if this file exists and read it.",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:92,Energy Efficiency,charge,charges,92,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:210,Energy Efficiency,charge,charges,210,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:267,Energy Efficiency,energy,energy,267,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:376,Energy Efficiency,charge,charges,376,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:436,Energy Efficiency,energy,energy,436,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:472,Energy Efficiency,charge,charges,472,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:522,Energy Efficiency,charge,charges,522,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:608,Energy Efficiency,charge,charges,608,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:678,Energy Efficiency,energy,energy,678,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:751,Energy Efficiency,charge,charge,751,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:857,Energy Efficiency,charge,charges,857,"# Finished adding an extra entry for I-SAPT/SAOn and I-SAPT/SIAOn; # In F/I-SAPT, the point charges can be either in the interacting subsystems A and B or the environment C; # The interaction between the point charges in A and fragment B enters the SAPT0 interaction energy, especially; # in the electrostatics and induction components. Similarly, the interaction between the charges in B and fragment A; # enters the SAPT0 interaction energy. By contrast, when the point charges are assigned to subsystem C, the point; # charges in C polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; # directly contribute to the SAPT0 interaction energy, which is computed between A and B only.; # Now process the point charge data for the interacting fragments A and B; # We need to analyze the interaction between the point charges in one fragment and the other fragment; # Add external potential data for A; # We add zero entry for all the fragments that are not associated with the external potential",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:49,Energy Efficiency,charge,charges,49,"# Add external potential data for C; # The point charges in C do not explicitly enter the SAPT0 interaction energy",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py:108,Energy Efficiency,energy,energy,108,"# Add external potential data for C; # The point charges in C do not explicitly enter the SAPT0 interaction energy",MatchSource.CODE_COMMENT,psi4/share/psi4/fsapt/fsapt.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/fsapt/fsapt.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/apply_license.py:240,Modifiability,plugin,plugins,240,"# Checks all psi4 relevant files for proper boilerplate GNU license.; # This is sold as is with no warrenty-- probably should double check everything; # after running. I am not responsible if you break Psi4.; #; # Do not forget to do share/plugins by hand!",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/apply_license.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/apply_license.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:10,Performance,load,load,10,"""""""Cannot load qcdb python module. Run this script in situ or append the psi4/share/psi4/scripts directory to $PYTHONPATH.""""""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:596,Deployability,configurat,configuration,596,"""""""; Utility: This script converts a set of geometry files in XYZ format into; a python database file for psi4 and qcdb scripts.; Instructions: Detailed instructions may be found at; http://sirius.chem.vt.edu/psi4manual/latest/quickadddatabase.html .; In short, move all XYZ files intended for a database into a directory; and run this script from that directory. Answer a few questions about; the intended database. Edit the resulting database.py file if necessary,; then copy it into psi4/share/psi4/databases/ . Its contents can be accessed as; normal through the db() wrapper with no further configuration or recompiling.; Created: Monday, December 21, 2009, LAB; Last Modified: Tuesday, September 10, 2013, LAB; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:572,Integrability,wrap,wrapper,572,"""""""; Utility: This script converts a set of geometry files in XYZ format into; a python database file for psi4 and qcdb scripts.; Instructions: Detailed instructions may be found at; http://sirius.chem.vt.edu/psi4manual/latest/quickadddatabase.html .; In short, move all XYZ files intended for a database into a directory; and run this script from that directory. Answer a few questions about; the intended database. Edit the resulting database.py file if necessary,; then copy it into psi4/share/psi4/databases/ . Its contents can be accessed as; normal through the db() wrapper with no further configuration or recompiling.; Created: Monday, December 21, 2009, LAB; Last Modified: Tuesday, September 10, 2013, LAB; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:596,Modifiability,config,configuration,596,"""""""; Utility: This script converts a set of geometry files in XYZ format into; a python database file for psi4 and qcdb scripts.; Instructions: Detailed instructions may be found at; http://sirius.chem.vt.edu/psi4manual/latest/quickadddatabase.html .; In short, move all XYZ files intended for a database into a directory; and run this script from that directory. Answer a few questions about; the intended database. Edit the resulting database.py file if necessary,; then copy it into psi4/share/psi4/databases/ . Its contents can be accessed as; normal through the db() wrapper with no further configuration or recompiling.; Created: Monday, December 21, 2009, LAB; Last Modified: Tuesday, September 10, 2013, LAB; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:535,Security,access,accessed,535,"""""""; Utility: This script converts a set of geometry files in XYZ format into; a python database file for psi4 and qcdb scripts.; Instructions: Detailed instructions may be found at; http://sirius.chem.vt.edu/psi4manual/latest/quickadddatabase.html .; In short, move all XYZ files intended for a database into a directory; and run this script from that directory. Answer a few questions about; the intended database. Edit the resulting database.py file if necessary,; then copy it into psi4/share/psi4/databases/ . Its contents can be accessed as; normal through the db() wrapper with no further configuration or recompiling.; Created: Monday, December 21, 2009, LAB; Last Modified: Tuesday, September 10, 2013, LAB; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:49,Modifiability,variab,variables,49,"""""""; Welcome to ixyz2database.; Just fill in the variables when prompted. ; Hit ENTER to accept default.; Strings should not be in quotes.; Elements in arrays should be space-delimited.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:143,Energy Efficiency,charge,charge,143,"""""""; What should line two of the XYZ file be used for (needn't be specially formatted in all files); [cgmp] Treat first item in line as system charge, second as multiplicity, rest as comment; [comment] Treat content as text for the comment line; [trash] Ignore content; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:487,Energy Efficiency,energy,energy,487,"""""""; What is the nature of the systems in your incipient database?; [1] I have a bunch of plain molecules (no need to act on any subsystems); that I want to be able to act upon in parallel.; [2] I have a bunch of molecules that I want to form into a database; whose reference quantity corresponds to various combinations thereof.; [3] I have a bunch of dimers (only dimer, no monomer, files should be present); that I want to form into a database whose reference quantity is interaction energy.; Your final database may of course resemble any combination of these choices.; This is but a humble script to get you started.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:63,Energy Efficiency,energy,energy,63,"""""""\""\""\""; | Database of <description of members and reference energy type>.; | Geometries from <Reference>.; | Reference interaction energies from <Reference>. """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:9,Testability,benchmark,benchmark,9,"""""""; - **benchmark**. - ``'<benchmark_name>'`` <Reference>.; - |dl| ``'<default_benchmark_name>'`` |dr| <Reference>. - **subset**. - ``'small'`` <members_description>; - ``'large'`` <members_description>; - ``'<subset>'`` <members_description>. \""\""\""; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:52,Energy Efficiency,charge,charge,52,"""""""; * If not all neutral singlets, fill in correct charge and; multiplicity for all reagents.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:43,Energy Efficiency,charge,charge,43,"""""""; * If not all neutral, fill in correct charge for all reagents.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:11,Energy Efficiency,charge,charge,11,"""""""; * The charge and multiplicity read in from line2 of the xyz files; has been assigned to fragmentA, leaving fragmentB as a neutral; singlet. If this is incorrect for any reagents, reapportion the; charge and multiplicity correctly between fragments A & B.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:201,Energy Efficiency,charge,charge,201,"""""""; * The charge and multiplicity read in from line2 of the xyz files; has been assigned to fragmentA, leaving fragmentB as a neutral; singlet. If this is incorrect for any reagents, reapportion the; charge and multiplicity correctly between fragments A & B.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:79,Energy Efficiency,charge,charge,79,"""""""; * If dimer and both subsystems are not neutral singlets, fill in; correct charge and multiplicity for each subsystem.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:531,Availability,avail,available,531,"""""""; ** To enhance the functionality/documentation of your database, do the following:. * Rearrange the order of reactions in HRXN, as this will define; the order for the database. * Fill in the skeleton docstring at top of file, adding sources; for geometries and any reference data. This info will show up; in the online documentation. * Fill in the comment lines of TAGL in plain text. These show up; as banners in job output files. * Fill in reference values (in kcal/mol) into BIND. * If multiple sets of reference values are available, define each; in an array BIND_ALTREF so that they can be called in a psi4; input file as benchmark='ALTREF'. Add the new reference to the; docstring. See S22.py as an example. * Fill in the least computationally expensive 2-3 reactions into; HRXN_SM and the most expensive into HRXN_LG so that they can be; called in a psi4 input file as subset='small' or subset='large'. * Define subsets of reactions such as in an array; SUBSETARRAY=['reaction', 'reaction'] so that they can be called; in a psi4 input file as subset='SUBSETARRAY'. Add the new subset; option to to the docstring. See NBC10.py for a simple example or; CFLOW.py for a complex example.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:11,Modifiability,enhance,enhance,11,"""""""; ** To enhance the functionality/documentation of your database, do the following:. * Rearrange the order of reactions in HRXN, as this will define; the order for the database. * Fill in the skeleton docstring at top of file, adding sources; for geometries and any reference data. This info will show up; in the online documentation. * Fill in the comment lines of TAGL in plain text. These show up; as banners in job output files. * Fill in reference values (in kcal/mol) into BIND. * If multiple sets of reference values are available, define each; in an array BIND_ALTREF so that they can be called in a psi4; input file as benchmark='ALTREF'. Add the new reference to the; docstring. See S22.py as an example. * Fill in the least computationally expensive 2-3 reactions into; HRXN_SM and the most expensive into HRXN_LG so that they can be; called in a psi4 input file as subset='small' or subset='large'. * Define subsets of reactions such as in an array; SUBSETARRAY=['reaction', 'reaction'] so that they can be called; in a psi4 input file as subset='SUBSETARRAY'. Add the new subset; option to to the docstring. See NBC10.py for a simple example or; CFLOW.py for a complex example.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:631,Testability,benchmark,benchmark,631,"""""""; ** To enhance the functionality/documentation of your database, do the following:. * Rearrange the order of reactions in HRXN, as this will define; the order for the database. * Fill in the skeleton docstring at top of file, adding sources; for geometries and any reference data. This info will show up; in the online documentation. * Fill in the comment lines of TAGL in plain text. These show up; as banners in job output files. * Fill in reference values (in kcal/mol) into BIND. * If multiple sets of reference values are available, define each; in an array BIND_ALTREF so that they can be called in a psi4; input file as benchmark='ALTREF'. Add the new reference to the; docstring. See S22.py as an example. * Fill in the least computationally expensive 2-3 reactions into; HRXN_SM and the most expensive into HRXN_LG so that they can be; called in a psi4 input file as subset='small' or subset='large'. * Define subsets of reactions such as in an array; SUBSETARRAY=['reaction', 'reaction'] so that they can be called; in a psi4 input file as subset='SUBSETARRAY'. Add the new subset; option to to the docstring. See NBC10.py for a simple example or; CFLOW.py for a complex example.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py:1143,Usability,simpl,simple,1143,"""""""; ** To enhance the functionality/documentation of your database, do the following:. * Rearrange the order of reactions in HRXN, as this will define; the order for the database. * Fill in the skeleton docstring at top of file, adding sources; for geometries and any reference data. This info will show up; in the online documentation. * Fill in the comment lines of TAGL in plain text. These show up; as banners in job output files. * Fill in reference values (in kcal/mol) into BIND. * If multiple sets of reference values are available, define each; in an array BIND_ALTREF so that they can be called in a psi4; input file as benchmark='ALTREF'. Add the new reference to the; docstring. See S22.py as an example. * Fill in the least computationally expensive 2-3 reactions into; HRXN_SM and the most expensive into HRXN_LG so that they can be; called in a psi4 input file as subset='small' or subset='large'. * Define subsets of reactions such as in an array; SUBSETARRAY=['reaction', 'reaction'] so that they can be called; in a psi4 input file as subset='SUBSETARRAY'. Add the new subset; option to to the docstring. See NBC10.py for a simple example or; CFLOW.py for a complex example.; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/ixyz2database.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/ixyz2database.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py:1328,Availability,avail,available,1328,"ise, single file in basetemp/).; # * to combine these multiple files, can use bash: `cat /tmp/pytest-of-$USER/pytest-current/*/stdsuite_psi4.txt > stdsuite_psi4.txt`; # * or this script globs them.; # * if stdsuite_psi4.txt file is to be diff-ed (say, checked into a repository), it should be minimized and sorted to minimize churn. This script does that.; # * `document_capabilities.py` reads a single arbitrary-order stdsuite_psi4.txt file and format tables.; # * either run by hand and specify location with --stdsuite; # * or triggered through a CMake `sphinxman` target that reads the repo file `samples/stdsuite_psi4.txt`.; # * Thus, this script is largely unnecessary and piecemeal.; # * if you're working locally, run pytest, merge the record files with `cat`, and run `document_capabilities` on the result.; # * but if you're running the full standard suite to update the repo, this script is a handy intermediary or has the pieces to run separately.; # * don't have mrcc available; # * comment out the lines in test_standard_suite.py with ""# SEMI-DISABLE"". These are temp disabled (mostly for; # non-scaling) and conflict with the test_<mtd>_<driver>_default entries in the resulting tables.; # * (objdir) pytest -v ../tests/pytests/test_standard_suite.py -n auto -m ""not noci""; # * (objdir) python ../psi4/share/psi4/scripts/merge_stdsuite.py; # * (objdir) mv stdsuite_psi4.txt ../samples/; # * # restore the 8 ""fci"" and 22 ""mrcc"" lines to the file; # * (objdir) cmake --build . -j<N> --target sphinxman; # * (objdir) diff ../doc/sphinxman/source/preview_* # check if any unanticipated changes to the preview tables; # * rationalization for redundancy of test_standard_suite, stdsuite_psi4.txt, and preview_capabilities_*rst tables all in repository; # * from a single-source-of-truth argument, one should re-run stdsuite at docs generation time and never save stdsuite_psi4.txt or generated tables.; # * but even run with filters and `-n 20`, the standard suite takes tens of minutes (and",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/merge_stdsuite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py:1217,Deployability,update,update,1217,"al ""stdsuite_psi4.txt"" files with unordered entries end up in pytest's basetemp/popen-*/ (if run parallel; otherwise, single file in basetemp/).; # * to combine these multiple files, can use bash: `cat /tmp/pytest-of-$USER/pytest-current/*/stdsuite_psi4.txt > stdsuite_psi4.txt`; # * or this script globs them.; # * if stdsuite_psi4.txt file is to be diff-ed (say, checked into a repository), it should be minimized and sorted to minimize churn. This script does that.; # * `document_capabilities.py` reads a single arbitrary-order stdsuite_psi4.txt file and format tables.; # * either run by hand and specify location with --stdsuite; # * or triggered through a CMake `sphinxman` target that reads the repo file `samples/stdsuite_psi4.txt`.; # * Thus, this script is largely unnecessary and piecemeal.; # * if you're working locally, run pytest, merge the record files with `cat`, and run `document_capabilities` on the result.; # * but if you're running the full standard suite to update the repo, this script is a handy intermediary or has the pieces to run separately.; # * don't have mrcc available; # * comment out the lines in test_standard_suite.py with ""# SEMI-DISABLE"". These are temp disabled (mostly for; # non-scaling) and conflict with the test_<mtd>_<driver>_default entries in the resulting tables.; # * (objdir) pytest -v ../tests/pytests/test_standard_suite.py -n auto -m ""not noci""; # * (objdir) python ../psi4/share/psi4/scripts/merge_stdsuite.py; # * (objdir) mv stdsuite_psi4.txt ../samples/; # * # restore the 8 ""fci"" and 22 ""mrcc"" lines to the file; # * (objdir) cmake --build . -j<N> --target sphinxman; # * (objdir) diff ../doc/sphinxman/source/preview_* # check if any unanticipated changes to the preview tables; # * rationalization for redundancy of test_standard_suite, stdsuite_psi4.txt, and preview_capabilities_*rst tables all in repository; # * from a single-source-of-truth argument, one should re-run stdsuite at docs generation time and never save stdsuite_psi4.t",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/merge_stdsuite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py:2776,Energy Efficiency,monitor,monitor,2776,"* either run by hand and specify location with --stdsuite; # * or triggered through a CMake `sphinxman` target that reads the repo file `samples/stdsuite_psi4.txt`.; # * Thus, this script is largely unnecessary and piecemeal.; # * if you're working locally, run pytest, merge the record files with `cat`, and run `document_capabilities` on the result.; # * but if you're running the full standard suite to update the repo, this script is a handy intermediary or has the pieces to run separately.; # * don't have mrcc available; # * comment out the lines in test_standard_suite.py with ""# SEMI-DISABLE"". These are temp disabled (mostly for; # non-scaling) and conflict with the test_<mtd>_<driver>_default entries in the resulting tables.; # * (objdir) pytest -v ../tests/pytests/test_standard_suite.py -n auto -m ""not noci""; # * (objdir) python ../psi4/share/psi4/scripts/merge_stdsuite.py; # * (objdir) mv stdsuite_psi4.txt ../samples/; # * # restore the 8 ""fci"" and 22 ""mrcc"" lines to the file; # * (objdir) cmake --build . -j<N> --target sphinxman; # * (objdir) diff ../doc/sphinxman/source/preview_* # check if any unanticipated changes to the preview tables; # * rationalization for redundancy of test_standard_suite, stdsuite_psi4.txt, and preview_capabilities_*rst tables all in repository; # * from a single-source-of-truth argument, one should re-run stdsuite at docs generation time and never save stdsuite_psi4.txt or generated tables.; # * but even run with filters and `-n 20`, the standard suite takes tens of minutes (and new capabilities aren't exactly weekly occurrences), so sensible to preserve stdsuite_psi4.txt in repo.; # * still from a fewest-sources-of truth argument, one should only store stdsuite_psi4.txt records in the repo. but they're 2k lines long and not easily interpretable.; # * so regenerate tables in pairs: a proper reST to objdir (less human-readable) and a unicode version to sphinxman/source for repo (readable and used to monitor changes); # edit as needed",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/merge_stdsuite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py:1999,Safety,redund,redundancy,1999,"* either run by hand and specify location with --stdsuite; # * or triggered through a CMake `sphinxman` target that reads the repo file `samples/stdsuite_psi4.txt`.; # * Thus, this script is largely unnecessary and piecemeal.; # * if you're working locally, run pytest, merge the record files with `cat`, and run `document_capabilities` on the result.; # * but if you're running the full standard suite to update the repo, this script is a handy intermediary or has the pieces to run separately.; # * don't have mrcc available; # * comment out the lines in test_standard_suite.py with ""# SEMI-DISABLE"". These are temp disabled (mostly for; # non-scaling) and conflict with the test_<mtd>_<driver>_default entries in the resulting tables.; # * (objdir) pytest -v ../tests/pytests/test_standard_suite.py -n auto -m ""not noci""; # * (objdir) python ../psi4/share/psi4/scripts/merge_stdsuite.py; # * (objdir) mv stdsuite_psi4.txt ../samples/; # * # restore the 8 ""fci"" and 22 ""mrcc"" lines to the file; # * (objdir) cmake --build . -j<N> --target sphinxman; # * (objdir) diff ../doc/sphinxman/source/preview_* # check if any unanticipated changes to the preview tables; # * rationalization for redundancy of test_standard_suite, stdsuite_psi4.txt, and preview_capabilities_*rst tables all in repository; # * from a single-source-of-truth argument, one should re-run stdsuite at docs generation time and never save stdsuite_psi4.txt or generated tables.; # * but even run with filters and `-n 20`, the standard suite takes tens of minutes (and new capabilities aren't exactly weekly occurrences), so sensible to preserve stdsuite_psi4.txt in repo.; # * still from a fewest-sources-of truth argument, one should only store stdsuite_psi4.txt records in the repo. but they're 2k lines long and not easily interpretable.; # * so regenerate tables in pairs: a proper reST to objdir (less human-readable) and a unicode version to sphinxman/source for repo (readable and used to monitor changes); # edit as needed",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/merge_stdsuite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py:16,Testability,test,tests,16,"# How do pytest tests in `test_standard_suite.py` communicate with docs?; # * after calling psi4 for each test, `standard_suite_runner.py` appends a one-line dict describing the result to local file ""stdsuite_psi4.txt"".; # * thus, local ""stdsuite_psi4.txt"" files with unordered entries end up in pytest's basetemp/popen-*/ (if run parallel; otherwise, single file in basetemp/).; # * to combine these multiple files, can use bash: `cat /tmp/pytest-of-$USER/pytest-current/*/stdsuite_psi4.txt > stdsuite_psi4.txt`; # * or this script globs them.; # * if stdsuite_psi4.txt file is to be diff-ed (say, checked into a repository), it should be minimized and sorted to minimize churn. This script does that.; # * `document_capabilities.py` reads a single arbitrary-order stdsuite_psi4.txt file and format tables.; # * either run by hand and specify location with --stdsuite; # * or triggered through a CMake `sphinxman` target that reads the repo file `samples/stdsuite_psi4.txt`.; # * Thus, this script is largely unnecessary and piecemeal.; # * if you're working locally, run pytest, merge the record files with `cat`, and run `document_capabilities` on the result.; # * but if you're running the full standard suite to update the repo, this script is a handy intermediary or has the pieces to run separately.; # * don't have mrcc available; # * comment out the lines in test_standard_suite.py with ""# SEMI-DISABLE"". These are temp disabled (mostly for; # non-scaling) and conflict with the test_<mtd>_<driver>_default entries in the resulting tables.; # * (objdir) pytest -v ../tests/pytests/test_standard_suite.py -n auto -m ""not noci""; # * (objdir) python ../psi4/share/psi4/scripts/merge_stdsuite.py; # * (objdir) mv stdsuite_psi4.txt ../samples/; # * # restore the 8 ""fci"" and 22 ""mrcc"" lines to the file; # * (objdir) cmake --build . -j<N> --target sphinxman; # * (objdir) diff ../doc/sphinxman/source/preview_* # check if any unanticipated changes to the preview tables; # * rationalization for re",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/merge_stdsuite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py:106,Testability,test,test,106,"# How do pytest tests in `test_standard_suite.py` communicate with docs?; # * after calling psi4 for each test, `standard_suite_runner.py` appends a one-line dict describing the result to local file ""stdsuite_psi4.txt"".; # * thus, local ""stdsuite_psi4.txt"" files with unordered entries end up in pytest's basetemp/popen-*/ (if run parallel; otherwise, single file in basetemp/).; # * to combine these multiple files, can use bash: `cat /tmp/pytest-of-$USER/pytest-current/*/stdsuite_psi4.txt > stdsuite_psi4.txt`; # * or this script globs them.; # * if stdsuite_psi4.txt file is to be diff-ed (say, checked into a repository), it should be minimized and sorted to minimize churn. This script does that.; # * `document_capabilities.py` reads a single arbitrary-order stdsuite_psi4.txt file and format tables.; # * either run by hand and specify location with --stdsuite; # * or triggered through a CMake `sphinxman` target that reads the repo file `samples/stdsuite_psi4.txt`.; # * Thus, this script is largely unnecessary and piecemeal.; # * if you're working locally, run pytest, merge the record files with `cat`, and run `document_capabilities` on the result.; # * but if you're running the full standard suite to update the repo, this script is a handy intermediary or has the pieces to run separately.; # * don't have mrcc available; # * comment out the lines in test_standard_suite.py with ""# SEMI-DISABLE"". These are temp disabled (mostly for; # non-scaling) and conflict with the test_<mtd>_<driver>_default entries in the resulting tables.; # * (objdir) pytest -v ../tests/pytests/test_standard_suite.py -n auto -m ""not noci""; # * (objdir) python ../psi4/share/psi4/scripts/merge_stdsuite.py; # * (objdir) mv stdsuite_psi4.txt ../samples/; # * # restore the 8 ""fci"" and 22 ""mrcc"" lines to the file; # * (objdir) cmake --build . -j<N> --target sphinxman; # * (objdir) diff ../doc/sphinxman/source/preview_* # check if any unanticipated changes to the preview tables; # * rationalization for re",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/merge_stdsuite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py:1576,Testability,test,tests,1576," (say, checked into a repository), it should be minimized and sorted to minimize churn. This script does that.; # * `document_capabilities.py` reads a single arbitrary-order stdsuite_psi4.txt file and format tables.; # * either run by hand and specify location with --stdsuite; # * or triggered through a CMake `sphinxman` target that reads the repo file `samples/stdsuite_psi4.txt`.; # * Thus, this script is largely unnecessary and piecemeal.; # * if you're working locally, run pytest, merge the record files with `cat`, and run `document_capabilities` on the result.; # * but if you're running the full standard suite to update the repo, this script is a handy intermediary or has the pieces to run separately.; # * don't have mrcc available; # * comment out the lines in test_standard_suite.py with ""# SEMI-DISABLE"". These are temp disabled (mostly for; # non-scaling) and conflict with the test_<mtd>_<driver>_default entries in the resulting tables.; # * (objdir) pytest -v ../tests/pytests/test_standard_suite.py -n auto -m ""not noci""; # * (objdir) python ../psi4/share/psi4/scripts/merge_stdsuite.py; # * (objdir) mv stdsuite_psi4.txt ../samples/; # * # restore the 8 ""fci"" and 22 ""mrcc"" lines to the file; # * (objdir) cmake --build . -j<N> --target sphinxman; # * (objdir) diff ../doc/sphinxman/source/preview_* # check if any unanticipated changes to the preview tables; # * rationalization for redundancy of test_standard_suite, stdsuite_psi4.txt, and preview_capabilities_*rst tables all in repository; # * from a single-source-of-truth argument, one should re-run stdsuite at docs generation time and never save stdsuite_psi4.txt or generated tables.; # * but even run with filters and `-n 20`, the standard suite takes tens of minutes (and new capabilities aren't exactly weekly occurrences), so sensible to preserve stdsuite_psi4.txt in repo.; # * still from a fewest-sources-of truth argument, one should only store stdsuite_psi4.txt records in the repo. but they're 2k lines long an",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/merge_stdsuite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/merge_stdsuite.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:457,Energy Efficiency,energy,energy,457,"""""""; molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; }. set {; BASIS jun-cc-pVQZ; SCF_TYPE DF; FREEZE_CORE True; DF_BASIS_ELST jun-cc-pVQZ-RI; }. energy('sapt0'). compare_values(85.189064531275775, dimer.nuclear_repulsion_energy(), 9, ""Nuclear Repulsion Energy""); compare_values(-0.00343130969, psi4.variable(""SSAPT0 ELST ENERGY""), 6, ""sSAPT0 elst""); compare_values( 0.00368418323, psi4.variable(""SSAPT0 EXCH ENERGY""), 6, ""sSAPT0 exch""); compare_values(-0.00093297498, psi4.variable(""SSAPT0 IND ENERGY""), 6, ""sSAPT0 ind""); compare_values(-0.00231534918, psi4.variable(""SSAPT0 DISP ENERGY""), 6, ""sSAPT0 disp""); compare_values(-0.00299545062, psi4.variable(""SSAPT0 TOTAL ENERGY""), 6, ""sSAPT0""); """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:611,Modifiability,variab,variable,611,"""""""; molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; }. set {; BASIS jun-cc-pVQZ; SCF_TYPE DF; FREEZE_CORE True; DF_BASIS_ELST jun-cc-pVQZ-RI; }. energy('sapt0'). compare_values(85.189064531275775, dimer.nuclear_repulsion_energy(), 9, ""Nuclear Repulsion Energy""); compare_values(-0.00343130969, psi4.variable(""SSAPT0 ELST ENERGY""), 6, ""sSAPT0 elst""); compare_values( 0.00368418323, psi4.variable(""SSAPT0 EXCH ENERGY""), 6, ""sSAPT0 exch""); compare_values(-0.00093297498, psi4.variable(""SSAPT0 IND ENERGY""), 6, ""sSAPT0 ind""); compare_values(-0.00231534918, psi4.variable(""SSAPT0 DISP ENERGY""), 6, ""sSAPT0 disp""); compare_values(-0.00299545062, psi4.variable(""SSAPT0 TOTAL ENERGY""), 6, ""sSAPT0""); """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:698,Modifiability,variab,variable,698,"""""""; molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; }. set {; BASIS jun-cc-pVQZ; SCF_TYPE DF; FREEZE_CORE True; DF_BASIS_ELST jun-cc-pVQZ-RI; }. energy('sapt0'). compare_values(85.189064531275775, dimer.nuclear_repulsion_energy(), 9, ""Nuclear Repulsion Energy""); compare_values(-0.00343130969, psi4.variable(""SSAPT0 ELST ENERGY""), 6, ""sSAPT0 elst""); compare_values( 0.00368418323, psi4.variable(""SSAPT0 EXCH ENERGY""), 6, ""sSAPT0 exch""); compare_values(-0.00093297498, psi4.variable(""SSAPT0 IND ENERGY""), 6, ""sSAPT0 ind""); compare_values(-0.00231534918, psi4.variable(""SSAPT0 DISP ENERGY""), 6, ""sSAPT0 disp""); compare_values(-0.00299545062, psi4.variable(""SSAPT0 TOTAL ENERGY""), 6, ""sSAPT0""); """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:785,Modifiability,variab,variable,785,"""""""; molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; }. set {; BASIS jun-cc-pVQZ; SCF_TYPE DF; FREEZE_CORE True; DF_BASIS_ELST jun-cc-pVQZ-RI; }. energy('sapt0'). compare_values(85.189064531275775, dimer.nuclear_repulsion_energy(), 9, ""Nuclear Repulsion Energy""); compare_values(-0.00343130969, psi4.variable(""SSAPT0 ELST ENERGY""), 6, ""sSAPT0 elst""); compare_values( 0.00368418323, psi4.variable(""SSAPT0 EXCH ENERGY""), 6, ""sSAPT0 exch""); compare_values(-0.00093297498, psi4.variable(""SSAPT0 IND ENERGY""), 6, ""sSAPT0 ind""); compare_values(-0.00231534918, psi4.variable(""SSAPT0 DISP ENERGY""), 6, ""sSAPT0 disp""); compare_values(-0.00299545062, psi4.variable(""SSAPT0 TOTAL ENERGY""), 6, ""sSAPT0""); """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:870,Modifiability,variab,variable,870,"""""""; molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; }. set {; BASIS jun-cc-pVQZ; SCF_TYPE DF; FREEZE_CORE True; DF_BASIS_ELST jun-cc-pVQZ-RI; }. energy('sapt0'). compare_values(85.189064531275775, dimer.nuclear_repulsion_energy(), 9, ""Nuclear Repulsion Energy""); compare_values(-0.00343130969, psi4.variable(""SSAPT0 ELST ENERGY""), 6, ""sSAPT0 elst""); compare_values( 0.00368418323, psi4.variable(""SSAPT0 EXCH ENERGY""), 6, ""sSAPT0 exch""); compare_values(-0.00093297498, psi4.variable(""SSAPT0 IND ENERGY""), 6, ""sSAPT0 ind""); compare_values(-0.00231534918, psi4.variable(""SSAPT0 DISP ENERGY""), 6, ""sSAPT0 disp""); compare_values(-0.00299545062, psi4.variable(""SSAPT0 TOTAL ENERGY""), 6, ""sSAPT0""); """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:957,Modifiability,variab,variable,957,"""""""; molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; }. set {; BASIS jun-cc-pVQZ; SCF_TYPE DF; FREEZE_CORE True; DF_BASIS_ELST jun-cc-pVQZ-RI; }. energy('sapt0'). compare_values(85.189064531275775, dimer.nuclear_repulsion_energy(), 9, ""Nuclear Repulsion Energy""); compare_values(-0.00343130969, psi4.variable(""SSAPT0 ELST ENERGY""), 6, ""sSAPT0 elst""); compare_values( 0.00368418323, psi4.variable(""SSAPT0 EXCH ENERGY""), 6, ""sSAPT0 exch""); compare_values(-0.00093297498, psi4.variable(""SSAPT0 IND ENERGY""), 6, ""sSAPT0 ind""); compare_values(-0.00231534918, psi4.variable(""SSAPT0 DISP ENERGY""), 6, ""sSAPT0 disp""); compare_values(-0.00299545062, psi4.variable(""SSAPT0 TOTAL ENERGY""), 6, ""sSAPT0""); """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:1,Testability,assert,assert,1,"#assert math.isclose(rat1, threads[-1], rel_tol=0.6), 'Psithon speedup {} !~= {}'.format(rat1, threads[-1])",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:946,Energy Efficiency,energy,energy,946,"""""""; import %s. molecule {; 0 1; C 0.0000000 0.0000000 1.0590353; C 0.0000000 -1.2060084 1.7576742; C 0.0000000 -1.2071767 3.1515905; C 0.0000000 0.0000000 3.8485751; C 0.0000000 1.2071767 3.1515905; C 0.0000000 1.2060084 1.7576742; H 0.0000000 0.0000000 -0.0215805; H 0.0000000 -2.1416387 1.2144217; H 0.0000000 -2.1435657 3.6929953; H 0.0000000 0.0000000 4.9301499; H 0.0000000 2.1435657 3.6929953; H 0.0000000 2.1416387 1.2144217; --; 0 1; C -1.3940633 0.0000000 -2.4541524; C -0.6970468 1.2072378 -2.4546277; C 0.6970468 1.2072378 -2.4546277; C 1.3940633 0.0000000 -2.4541524; C 0.6970468 -1.2072378 -2.4546277; C -0.6970468 -1.2072378 -2.4546277; H -2.4753995 0.0000000 -2.4503221; H -1.2382321 2.1435655 -2.4536764; H 1.2382321 2.1435655 -2.4536764; H 2.4753995 0.0000000 -2.4503221; H 1.2382321 -2.1435655 -2.4536764; H -1.2382321 -2.1435655 -2.4536764; }. set {; scf_type df; mp2_type df; basis aug-cc-pvdz; freeze_core true; }. e, wfn = energy('plugdfmp2', return_wfn=True); compare_values(-1.6309450762271729, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # aug-cc-pvdz; #compare_values(-1.5720781831194317, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # cc-pvdz; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:1071,Energy Efficiency,energy,energy,1071,"""""""; import %s. molecule {; 0 1; C 0.0000000 0.0000000 1.0590353; C 0.0000000 -1.2060084 1.7576742; C 0.0000000 -1.2071767 3.1515905; C 0.0000000 0.0000000 3.8485751; C 0.0000000 1.2071767 3.1515905; C 0.0000000 1.2060084 1.7576742; H 0.0000000 0.0000000 -0.0215805; H 0.0000000 -2.1416387 1.2144217; H 0.0000000 -2.1435657 3.6929953; H 0.0000000 0.0000000 4.9301499; H 0.0000000 2.1435657 3.6929953; H 0.0000000 2.1416387 1.2144217; --; 0 1; C -1.3940633 0.0000000 -2.4541524; C -0.6970468 1.2072378 -2.4546277; C 0.6970468 1.2072378 -2.4546277; C 1.3940633 0.0000000 -2.4541524; C 0.6970468 -1.2072378 -2.4546277; C -0.6970468 -1.2072378 -2.4546277; H -2.4753995 0.0000000 -2.4503221; H -1.2382321 2.1435655 -2.4536764; H 1.2382321 2.1435655 -2.4536764; H 2.4753995 0.0000000 -2.4503221; H 1.2382321 -2.1435655 -2.4536764; H -1.2382321 -2.1435655 -2.4536764; }. set {; scf_type df; mp2_type df; basis aug-cc-pvdz; freeze_core true; }. e, wfn = energy('plugdfmp2', return_wfn=True); compare_values(-1.6309450762271729, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # aug-cc-pvdz; #compare_values(-1.5720781831194317, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # cc-pvdz; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:1183,Energy Efficiency,energy,energy,1183,"""""""; import %s. molecule {; 0 1; C 0.0000000 0.0000000 1.0590353; C 0.0000000 -1.2060084 1.7576742; C 0.0000000 -1.2071767 3.1515905; C 0.0000000 0.0000000 3.8485751; C 0.0000000 1.2071767 3.1515905; C 0.0000000 1.2060084 1.7576742; H 0.0000000 0.0000000 -0.0215805; H 0.0000000 -2.1416387 1.2144217; H 0.0000000 -2.1435657 3.6929953; H 0.0000000 0.0000000 4.9301499; H 0.0000000 2.1435657 3.6929953; H 0.0000000 2.1416387 1.2144217; --; 0 1; C -1.3940633 0.0000000 -2.4541524; C -0.6970468 1.2072378 -2.4546277; C 0.6970468 1.2072378 -2.4546277; C 1.3940633 0.0000000 -2.4541524; C 0.6970468 -1.2072378 -2.4546277; C -0.6970468 -1.2072378 -2.4546277; H -2.4753995 0.0000000 -2.4503221; H -1.2382321 2.1435655 -2.4536764; H 1.2382321 2.1435655 -2.4536764; H 2.4753995 0.0000000 -2.4503221; H 1.2382321 -2.1435655 -2.4536764; H -1.2382321 -2.1435655 -2.4536764; }. set {; scf_type df; mp2_type df; basis aug-cc-pvdz; freeze_core true; }. e, wfn = energy('plugdfmp2', return_wfn=True); compare_values(-1.6309450762271729, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # aug-cc-pvdz; #compare_values(-1.5720781831194317, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # cc-pvdz; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:1024,Modifiability,variab,variable,1024,"""""""; import %s. molecule {; 0 1; C 0.0000000 0.0000000 1.0590353; C 0.0000000 -1.2060084 1.7576742; C 0.0000000 -1.2071767 3.1515905; C 0.0000000 0.0000000 3.8485751; C 0.0000000 1.2071767 3.1515905; C 0.0000000 1.2060084 1.7576742; H 0.0000000 0.0000000 -0.0215805; H 0.0000000 -2.1416387 1.2144217; H 0.0000000 -2.1435657 3.6929953; H 0.0000000 0.0000000 4.9301499; H 0.0000000 2.1435657 3.6929953; H 0.0000000 2.1416387 1.2144217; --; 0 1; C -1.3940633 0.0000000 -2.4541524; C -0.6970468 1.2072378 -2.4546277; C 0.6970468 1.2072378 -2.4546277; C 1.3940633 0.0000000 -2.4541524; C 0.6970468 -1.2072378 -2.4546277; C -0.6970468 -1.2072378 -2.4546277; H -2.4753995 0.0000000 -2.4503221; H -1.2382321 2.1435655 -2.4536764; H 1.2382321 2.1435655 -2.4536764; H 2.4753995 0.0000000 -2.4503221; H 1.2382321 -2.1435655 -2.4536764; H -1.2382321 -2.1435655 -2.4536764; }. set {; scf_type df; mp2_type df; basis aug-cc-pvdz; freeze_core true; }. e, wfn = energy('plugdfmp2', return_wfn=True); compare_values(-1.6309450762271729, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # aug-cc-pvdz; #compare_values(-1.5720781831194317, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # cc-pvdz; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:1136,Modifiability,variab,variable,1136,"""""""; import %s. molecule {; 0 1; C 0.0000000 0.0000000 1.0590353; C 0.0000000 -1.2060084 1.7576742; C 0.0000000 -1.2071767 3.1515905; C 0.0000000 0.0000000 3.8485751; C 0.0000000 1.2071767 3.1515905; C 0.0000000 1.2060084 1.7576742; H 0.0000000 0.0000000 -0.0215805; H 0.0000000 -2.1416387 1.2144217; H 0.0000000 -2.1435657 3.6929953; H 0.0000000 0.0000000 4.9301499; H 0.0000000 2.1435657 3.6929953; H 0.0000000 2.1416387 1.2144217; --; 0 1; C -1.3940633 0.0000000 -2.4541524; C -0.6970468 1.2072378 -2.4546277; C 0.6970468 1.2072378 -2.4546277; C 1.3940633 0.0000000 -2.4541524; C 0.6970468 -1.2072378 -2.4546277; C -0.6970468 -1.2072378 -2.4546277; H -2.4753995 0.0000000 -2.4503221; H -1.2382321 2.1435655 -2.4536764; H 1.2382321 2.1435655 -2.4536764; H 2.4753995 0.0000000 -2.4503221; H 1.2382321 -2.1435655 -2.4536764; H -1.2382321 -2.1435655 -2.4536764; }. set {; scf_type df; mp2_type df; basis aug-cc-pvdz; freeze_core true; }. e, wfn = energy('plugdfmp2', return_wfn=True); compare_values(-1.6309450762271729, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # aug-cc-pvdz; #compare_values(-1.5720781831194317, wfn.variable('MP2 CORRELATION ENERGY'), 5, 'df-mp2 energy') # cc-pvdz; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:2,Modifiability,plugin,plugins,2,"# plugins on Mac won't show mkl through otool (linked to psi4.core)",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:36,Testability,test,tests,36,"""""""Instead of just printing, run as tests.""""""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:157,Modifiability,plugin,plugin-,157,"""""""In --ldd mode, module and shared library (w/o extension) to analyze, e.g., 'greatplugin/cxxcode.so' or 'psi4/core.cpython-36m-x86_64-linux-gnu.so'.; In --plugin-dfmp2 mode, name of dfmp2 module to load, e.g., 'plugdfmp2'.""""""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:200,Performance,load,load,200,"""""""In --ldd mode, module and shared library (w/o extension) to analyze, e.g., 'greatplugin/cxxcode.so' or 'psi4/core.cpython-36m-x86_64-linux-gnu.so'.; In --plugin-dfmp2 mode, name of dfmp2 module to load, e.g., 'plugdfmp2'.""""""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:14,Modifiability,plugin,plugin,14,"""""""Test dfmp2 plugin template (PSIthon) threading.""""""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:292,Modifiability,plugin,plugin,292,"""""""; PLUG=""plugdfmp2""; THD=8; # * build psi4 and test its threading; PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail --ldd; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail -n$THD; # * build an OpenMP plugin and test its threading; stage/bin/psi4 --plugin-name $PLUG --plugin-template dfmp2; cd $PLUG && `../stage/bin/psi4 --plugin-compile` && make && cd ..; PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --ldd --module=""$PLUG/$PLUG""; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --plugin-dfmp2 --module=""$PLUG"" -n$THD; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:340,Modifiability,plugin,plugin-name,340,"""""""; PLUG=""plugdfmp2""; THD=8; # * build psi4 and test its threading; PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail --ldd; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail -n$THD; # * build an OpenMP plugin and test its threading; stage/bin/psi4 --plugin-name $PLUG --plugin-template dfmp2; cd $PLUG && `../stage/bin/psi4 --plugin-compile` && make && cd ..; PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --ldd --module=""$PLUG/$PLUG""; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --plugin-dfmp2 --module=""$PLUG"" -n$THD; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:360,Modifiability,plugin,plugin-template,360,"""""""; PLUG=""plugdfmp2""; THD=8; # * build psi4 and test its threading; PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail --ldd; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail -n$THD; # * build an OpenMP plugin and test its threading; stage/bin/psi4 --plugin-name $PLUG --plugin-template dfmp2; cd $PLUG && `../stage/bin/psi4 --plugin-compile` && make && cd ..; PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --ldd --module=""$PLUG/$PLUG""; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --plugin-dfmp2 --module=""$PLUG"" -n$THD; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:416,Modifiability,plugin,plugin-compile,416,"""""""; PLUG=""plugdfmp2""; THD=8; # * build psi4 and test its threading; PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail --ldd; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail -n$THD; # * build an OpenMP plugin and test its threading; stage/bin/psi4 --plugin-name $PLUG --plugin-template dfmp2; cd $PLUG && `../stage/bin/psi4 --plugin-compile` && make && cd ..; PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --ldd --module=""$PLUG/$PLUG""; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --plugin-dfmp2 --module=""$PLUG"" -n$THD; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:674,Modifiability,plugin,plugin-,674,"""""""; PLUG=""plugdfmp2""; THD=8; # * build psi4 and test its threading; PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail --ldd; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail -n$THD; # * build an OpenMP plugin and test its threading; stage/bin/psi4 --plugin-name $PLUG --plugin-template dfmp2; cd $PLUG && `../stage/bin/psi4 --plugin-compile` && make && cd ..; PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --ldd --module=""$PLUG/$PLUG""; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --plugin-dfmp2 --module=""$PLUG"" -n$THD; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:49,Testability,test,test,49,"""""""; PLUG=""plugdfmp2""; THD=8; # * build psi4 and test its threading; PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail --ldd; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail -n$THD; # * build an OpenMP plugin and test its threading; stage/bin/psi4 --plugin-name $PLUG --plugin-template dfmp2; cd $PLUG && `../stage/bin/psi4 --plugin-compile` && make && cd ..; PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --ldd --module=""$PLUG/$PLUG""; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --plugin-dfmp2 --module=""$PLUG"" -n$THD; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py:303,Testability,test,test,303,"""""""; PLUG=""plugdfmp2""; THD=8; # * build psi4 and test its threading; PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail --ldd; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/ python stage/share/psi4/scripts/test_threading.py --passfail -n$THD; # * build an OpenMP plugin and test its threading; stage/bin/psi4 --plugin-name $PLUG --plugin-template dfmp2; cd $PLUG && `../stage/bin/psi4 --plugin-compile` && make && cd ..; PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --ldd --module=""$PLUG/$PLUG""; PATH=stage/bin/:$PATH PYTHONPATH=stage/lib/:. python stage/share/psi4/scripts/test_threading.py --passfail --plugin-dfmp2 --module=""$PLUG"" -n$THD; """"""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/test_threading.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/test_threading.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/vmd_cube.py:128,Energy Efficiency,charge,charge,128,"#!/usr/bin/env python; # MIT License; #; # Copyright (c) 2017 Francesco Evangelista; #; # Permission is hereby granted, free of charge, to any person obtaining a copy; # of this software and associated documentation files (the ""Software""), to deal; # in the Software without restriction, including without limitation the rights; # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; # copies of the Software, and to permit persons to whom the Software is; # furnished to do so, subject to the following conditions:; # ; # The above copyright notice and this permission notice shall be included in all; # copies or substantial portions of the Software.; # ; # THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; # SOFTWARE.",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/vmd_cube.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/vmd_cube.py
https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/vmd_cube.py:102,Performance,load,load,102,"""""""#; # VMD script to plot MOs from cube files; #. # Load the molecule and change the atom style; mol load cube PARAM_CUBEFILE.cube; mol modcolor 0 PARAM_CUBENUM Element; mol modstyle 0 PARAM_CUBENUM Licorice 0.110000 10.000000 10.000000; #mol modstyle 0 PARAM_CUBENUM CPK 0.400000 0.40000 30.000000 16.000000. # Define the material; material change ambient Opaque 0.310000; material change diffuse Opaque 0.720000; material change specular Opaque 0.500000; material change shininess Opaque 0.480000; material change opacity Opaque 1.000000; material change outline Opaque 0.000000; material change outlinewidth Opaque 0.000000; material change transmode Opaque 0.000000; material change specular Opaque 0.750000. material change ambient EdgyShiny 0.310000; material change diffuse EdgyShiny 0.720000; material change shininess EdgyShiny 1.0000; material change opacity EdgyShiny PARAM_OPACITY. # Customize atom colors; color Element C silver; color Element H white. # Rotate and translate the molecule; rotate x by PARAM_RX; rotate y by PARAM_RY; rotate z by PARAM_RZ; translate by PARAM_TX PARAM_TY PARAM_TZ; scale by PARAM_SCALE. # Eliminate the axis and perfect the view; axes location Off; display projection Orthographic; display depthcue off; display resize PARAM_IMAGEW PARAM_IMAGEH; color Display Background white""""""",MatchSource.CODE_COMMENT,psi4/share/psi4/scripts/vmd_cube.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/share/psi4/scripts/vmd_cube.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-energy/input.py:21,Energy Efficiency,energy,energy,21,"#! test QCSchema for energy",MatchSource.CODE_COMMENT,samples/json/schema-1-energy/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-energy/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-energy/input.py:3,Testability,test,test,3,"#! test QCSchema for energy",MatchSource.CODE_COMMENT,samples/json/schema-1-energy/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-energy/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-energy/test.py:21,Energy Efficiency,energy,energy,21,"#! test QCSchema for energy",MatchSource.CODE_COMMENT,samples/json/schema-1-energy/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-energy/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-energy/test.py:3,Testability,test,test,3,"#! test QCSchema for energy",MatchSource.CODE_COMMENT,samples/json/schema-1-energy/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-energy/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-ghost/input.py:3,Testability,test,test,3,"#! test QCSchema with ghost atoms",MatchSource.CODE_COMMENT,samples/json/schema-1-ghost/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-ghost/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-ghost/test.py:3,Testability,test,test,3,"#! test QCSchema with ghost atoms",MatchSource.CODE_COMMENT,samples/json/schema-1-ghost/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-ghost/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-gradient/input.py:3,Testability,test,test,3,"#! test QCSchema for gradient",MatchSource.CODE_COMMENT,samples/json/schema-1-gradient/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-gradient/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-gradient/test.py:3,Testability,test,test,3,"#! test QCSchema for gradient",MatchSource.CODE_COMMENT,samples/json/schema-1-gradient/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-gradient/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-orient/input.py:3,Testability,test,test,3,"#! test QCSchema mol orientation",MatchSource.CODE_COMMENT,samples/json/schema-1-orient/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-orient/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-orient/test.py:3,Testability,test,test,3,"#! test QCSchema mol orientation",MatchSource.CODE_COMMENT,samples/json/schema-1-orient/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-orient/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-properties/input.py:3,Testability,test,test,3,"#! test QCSchema for properties",MatchSource.CODE_COMMENT,samples/json/schema-1-properties/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-properties/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-properties/test.py:3,Testability,test,test,3,"#! test QCSchema for properties",MatchSource.CODE_COMMENT,samples/json/schema-1-properties/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-properties/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-response/input.py:3,Testability,test,test,3,"#! test QCSchema for response properties",MatchSource.CODE_COMMENT,samples/json/schema-1-response/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-response/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-response/test.py:3,Testability,test,test,3,"#! test QCSchema for response properties",MatchSource.CODE_COMMENT,samples/json/schema-1-response/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-response/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-tamps/input.py:3,Testability,test,test,3,"#! test QCSchema for CCSD amplitudes saving",MatchSource.CODE_COMMENT,samples/json/schema-1-tamps/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-tamps/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-tamps/test.py:3,Testability,test,test,3,"#! test QCSchema for CCSD amplitudes saving",MatchSource.CODE_COMMENT,samples/json/schema-1-tamps/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-tamps/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/input.py:3,Testability,test,test,3,"#! test QCSchema noncontiguous mol",MatchSource.CODE_COMMENT,samples/json/schema-1-throws/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/input.py:22,Availability,error,errors,22,"# Check symbol length errors",MatchSource.CODE_COMMENT,samples/json/schema-1-throws/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/input.py:16,Availability,error,errors,16,"# Check keyword errors",MatchSource.CODE_COMMENT,samples/json/schema-1-throws/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/test.py:3,Testability,test,test,3,"#! test QCSchema noncontiguous mol",MatchSource.CODE_COMMENT,samples/json/schema-1-throws/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/test.py:29,Availability,error,errors,29,"#TEST; # Check symbol length errors",MatchSource.CODE_COMMENT,samples/json/schema-1-throws/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/test.py:23,Availability,error,errors,23,"#TEST; # Check keyword errors",MatchSource.CODE_COMMENT,samples/json/schema-1-throws/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/json/schema-1-throws/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/dfmp2/input.py:5,Usability,simpl,simple,5,"#! A simple Psi 4 input script to compute MP2 from a RHF reference",MatchSource.CODE_COMMENT,samples/psi4numpy/dfmp2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/dfmp2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/dfmp2/test.py:5,Usability,simpl,simple,5,"#! A simple Psi 4 input script to compute MP2 from a RHF reference",MatchSource.CODE_COMMENT,samples/psi4numpy/dfmp2/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/dfmp2/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py:5,Usability,simpl,simple,5,"#! A simple Psi 4 input script to compute a SCF reference using Psi4's libJK",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py:6,Availability,toler,tolerances,6,"# Set tolerances",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py:14,Integrability,rout,routine,14,"# Diagonalize routine",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py:7,Availability,error,error,7,"# DIIS error build and update",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py:23,Deployability,update,update,23,"# DIIS error build and update",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py:17,Deployability,update,update,17,"# SCF energy and update",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py:6,Energy Efficiency,energy,energy,6,"# SCF energy and update",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py:12,Energy Efficiency,energy,energy,12,"#print(psi4.energy(""SCF""))",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py:5,Usability,simpl,simple,5,"#! A simple Psi 4 input script to compute a SCF reference using Psi4's libJK",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py:6,Availability,toler,tolerances,6,"# Set tolerances",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py:14,Integrability,rout,routine,14,"# Diagonalize routine",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py:7,Availability,error,error,7,"# DIIS error build and update",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py:23,Deployability,update,update,23,"# DIIS error build and update",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py:17,Deployability,update,update,17,"# SCF energy and update",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py:6,Energy Efficiency,energy,energy,6,"# SCF energy and update",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py:12,Energy Efficiency,energy,energy,12,"#print(psi4.energy(""SCF""))",MatchSource.CODE_COMMENT,samples/psi4numpy/rhf/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/psi4numpy/rhf/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/input.py:6,Testability,test,test,6,"# set test options",MatchSource.CODE_COMMENT,samples/python/3-index-transforms/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/input.py:11,Testability,test,test,11,"# TODO:; # test tensor slicing grabs; # test pQq and pqQ builds for store and direct0",MatchSource.CODE_COMMENT,samples/python/3-index-transforms/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/input.py:40,Testability,test,test,40,"# TODO:; # test tensor slicing grabs; # test pQq and pqQ builds for store and direct0",MatchSource.CODE_COMMENT,samples/python/3-index-transforms/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/test.py:6,Testability,test,test,6,"# set test options",MatchSource.CODE_COMMENT,samples/python/3-index-transforms/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/test.py:11,Testability,test,test,11,"# TODO:; # test tensor slicing grabs; # test pQq and pqQ builds for store and direct0",MatchSource.CODE_COMMENT,samples/python/3-index-transforms/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/test.py:40,Testability,test,test,40,"# TODO:; # test tensor slicing grabs; # test pQq and pqQ builds for store and direct0",MatchSource.CODE_COMMENT,samples/python/3-index-transforms/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/3-index-transforms/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/cc-amps/input.py:7,Security,access,access,7,"#! API access to CCSD amplitudes",MatchSource.CODE_COMMENT,samples/python/cc-amps/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/cc-amps/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/cc-amps/test.py:7,Security,access,access,7,"#! API access to CCSD amplitudes",MatchSource.CODE_COMMENT,samples/python/cc-amps/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/cc-amps/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/curve/input.py:31,Energy Efficiency,energy,energy,31,"#! PsiAPI scanning a potential energy curve",MatchSource.CODE_COMMENT,samples/python/curve/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/curve/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/curve/test.py:31,Energy Efficiency,energy,energy,31,"#! PsiAPI scanning a potential energy curve",MatchSource.CODE_COMMENT,samples/python/curve/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/curve/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/databases/input.py:10,Energy Efficiency,energy,energy,10,"#! PsiAPI energy example",MatchSource.CODE_COMMENT,samples/python/databases/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/databases/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/databases/test.py:10,Energy Efficiency,energy,energy,10,"#! PsiAPI energy example",MatchSource.CODE_COMMENT,samples/python/databases/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/databases/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/energy/input.py:10,Energy Efficiency,energy,energy,10,"#! PsiAPI energy example",MatchSource.CODE_COMMENT,samples/python/energy/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/energy/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/energy/input.py:9,Testability,test,testing,9,"""""""; C # testing escaping comments; """"""",MatchSource.CODE_COMMENT,samples/python/energy/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/energy/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/energy/test.py:10,Energy Efficiency,energy,energy,10,"#! PsiAPI energy example",MatchSource.CODE_COMMENT,samples/python/energy/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/energy/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/energy/test.py:9,Testability,test,testing,9,"""""""; C # testing escaping comments; """"""",MatchSource.CODE_COMMENT,samples/python/energy/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/energy/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/input.py:3,Testability,test,test,3,"#! test fragment decomposition + to/from_dict",MatchSource.CODE_COMMENT,samples/python/mints13/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/input.py:259,Energy Efficiency,charge,charges,259,"# Once user starts messing with cgmp other than in construction, user has; # no way to mess with fragment cgmp, and Psi/QCDB Molecule classes don't do; # much to set things in order. Upon to_dict, things get sorted into some; # physical reality, but fragment charges in a complicated system like this; # won't get sorted out to resemble thier initial state (could do more; # try/catch, but that's really the class's job). So really all that can be; # tested in the main dimer's total charge and total mult.",MatchSource.CODE_COMMENT,samples/python/mints13/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/input.py:484,Energy Efficiency,charge,charge,484,"# Once user starts messing with cgmp other than in construction, user has; # no way to mess with fragment cgmp, and Psi/QCDB Molecule classes don't do; # much to set things in order. Upon to_dict, things get sorted into some; # physical reality, but fragment charges in a complicated system like this; # won't get sorted out to resemble thier initial state (could do more; # try/catch, but that's really the class's job). So really all that can be; # tested in the main dimer's total charge and total mult.",MatchSource.CODE_COMMENT,samples/python/mints13/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/input.py:451,Testability,test,tested,451,"# Once user starts messing with cgmp other than in construction, user has; # no way to mess with fragment cgmp, and Psi/QCDB Molecule classes don't do; # much to set things in order. Upon to_dict, things get sorted into some; # physical reality, but fragment charges in a complicated system like this; # won't get sorted out to resemble thier initial state (could do more; # try/catch, but that's really the class's job). So really all that can be; # tested in the main dimer's total charge and total mult.",MatchSource.CODE_COMMENT,samples/python/mints13/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/test.py:3,Testability,test,test,3,"#! test fragment decomposition + to/from_dict",MatchSource.CODE_COMMENT,samples/python/mints13/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/test.py:259,Energy Efficiency,charge,charges,259,"# Once user starts messing with cgmp other than in construction, user has; # no way to mess with fragment cgmp, and Psi/QCDB Molecule classes don't do; # much to set things in order. Upon to_dict, things get sorted into some; # physical reality, but fragment charges in a complicated system like this; # won't get sorted out to resemble thier initial state (could do more; # try/catch, but that's really the class's job). So really all that can be; # tested in the main dimer's total charge and total mult.",MatchSource.CODE_COMMENT,samples/python/mints13/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/test.py:484,Energy Efficiency,charge,charge,484,"# Once user starts messing with cgmp other than in construction, user has; # no way to mess with fragment cgmp, and Psi/QCDB Molecule classes don't do; # much to set things in order. Upon to_dict, things get sorted into some; # physical reality, but fragment charges in a complicated system like this; # won't get sorted out to resemble thier initial state (could do more; # try/catch, but that's really the class's job). So really all that can be; # tested in the main dimer's total charge and total mult.",MatchSource.CODE_COMMENT,samples/python/mints13/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/test.py:451,Testability,test,tested,451,"# Once user starts messing with cgmp other than in construction, user has; # no way to mess with fragment cgmp, and Psi/QCDB Molecule classes don't do; # much to set things in order. Upon to_dict, things get sorted into some; # physical reality, but fragment charges in a complicated system like this; # won't get sorted out to resemble thier initial state (could do more; # try/catch, but that's really the class's job). So really all that can be; # tested in the main dimer's total charge and total mult.",MatchSource.CODE_COMMENT,samples/python/mints13/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints13/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints14/input.py:287,Testability,test,test,287,"#! Check for correctness of ESP values. The ESP values are calculated using one or four threads; #! The one thread values are checked against the four thread values. The one thread values are ; #! also checked against the reference values (1 thread values computed, when generating this test).; #! Caution: The reference values are not obtained using an actual physical reference, but rather; #! generated by Psi4 at one point in time.",MatchSource.CODE_COMMENT,samples/python/mints14/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints14/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints14/test.py:287,Testability,test,test,287,"#! Check for correctness of ESP values. The ESP values are calculated using one or four threads; #! The one thread values are checked against the four thread values. The one thread values are ; #! also checked against the reference values (1 thread values computed, when generating this test).; #! Caution: The reference values are not obtained using an actual physical reference, but rather; #! generated by Psi4 at one point in time.",MatchSource.CODE_COMMENT,samples/python/mints14/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints14/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/input.py:5,Testability,test,test,5,"#! A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms; #! and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically; #! lowered to account for the different basis sets.",MatchSource.CODE_COMMENT,samples/python/mints2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/input.py:1078,Availability,error,error,1078,"# Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:; # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****; # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.",MatchSource.CODE_COMMENT,samples/python/mints2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/input.py:1084,Integrability,message,message,1084,"# Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:; # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****; # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.",MatchSource.CODE_COMMENT,samples/python/mints2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/input.py:158,Modifiability,variab,variable,158,"# Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:; # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****; # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.",MatchSource.CODE_COMMENT,samples/python/mints2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/test.py:5,Testability,test,test,5,"#! A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms; #! and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically; #! lowered to account for the different basis sets.",MatchSource.CODE_COMMENT,samples/python/mints2/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/test.py:1078,Availability,error,error,1078,"# Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:; # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****; # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.",MatchSource.CODE_COMMENT,samples/python/mints2/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/test.py:1084,Integrability,message,message,1084,"# Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:; # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****; # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.",MatchSource.CODE_COMMENT,samples/python/mints2/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/test.py:158,Modifiability,variab,variable,158,"# Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:; # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****; # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.",MatchSource.CODE_COMMENT,samples/python/mints2/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints2/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints9/input.py:5,Testability,test,test,5,"#! A test of the basis specification. Various basis sets are specified outright and in blocks, both; #! orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls; #! qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks; #! that symmetry of the Molecule observes the basis assignment to atoms.; # cc-pvdz aug-cc-pvdz; # BASIS H 5/ 5 C 14/15 H +4/ 4 C +9/10; # RIFIT H 14/15 C 56/66 H +9/10 C +16/20; # JKFIT H 23/25 C 70/81 H +9/10 C +16/20",MatchSource.CODE_COMMENT,samples/python/mints9/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints9/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints9/input.py:2,Usability,clear,clear,2,"# clear df_basis_mp2 {...} to get autoaux below",MatchSource.CODE_COMMENT,samples/python/mints9/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints9/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints9/test.py:5,Testability,test,test,5,"#! A test of the basis specification. Various basis sets are specified outright and in blocks, both; #! orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls; #! qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks; #! that symmetry of the Molecule observes the basis assignment to atoms.; # cc-pvdz aug-cc-pvdz; # BASIS H 5/ 5 C 14/15 H +4/ 4 C +9/10; # RIFIT H 14/15 C 56/66 H +9/10 C +16/20; # JKFIT H 23/25 C 70/81 H +9/10 C +16/20",MatchSource.CODE_COMMENT,samples/python/mints9/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints9/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints9/test.py:2,Usability,clear,clear,2,"# clear df_basis_mp2 {...} to get autoaux below",MatchSource.CODE_COMMENT,samples/python/mints9/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/mints9/test.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/pubchem/input.py:18,Security,access,access,18,"#! PsiAPI pubchem access",MatchSource.CODE_COMMENT,samples/python/pubchem/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/pubchem/input.py
https://github.com/psi4/psi4/tree/v1.9.1/samples/python/pubchem/test.py:18,Security,access,access,18,"#! PsiAPI pubchem access",MatchSource.CODE_COMMENT,samples/python/pubchem/test.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/python/pubchem/test.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py:24,Testability,log,logfile,24,"""""""Usage: %s input_file logfile top_srcdir alt_output_file alt_psi4_exe alt_psi4datadir""""""",MatchSource.CODE_COMMENT,tests/runtest.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py:7,Testability,log,logfile,7,"# open logfile and print test case header",MatchSource.CODE_COMMENT,tests/runtest.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py:25,Testability,test,test,25,"# open logfile and print test case header",MatchSource.CODE_COMMENT,tests/runtest.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py:102,Testability,log,logfile,102,"""""""Executes the command-argument list in *exelist*, directing the; standard output to screen and file logfile and string p4out. Returns; the system status of the call. """"""",MatchSource.CODE_COMMENT,tests/runtest.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py:95,Integrability,interface,interfaces,95,"# not sure why 2nd while loop needed, as 1st while loop has always; # been adequate for driver interfaces. nevertheless, to collect; # the proper exit code, 2nd while loop very necessary.",MatchSource.CODE_COMMENT,tests/runtest.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py:23,Testability,test,testing,23,"# run psi4 and collect testing status from any compare_* in input file",MatchSource.CODE_COMMENT,tests/runtest.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py:35,Testability,test,testing,35,"# combine, print, and return (0/1) testing status",MatchSource.CODE_COMMENT,tests/runtest.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/runtest.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py:70,Testability,test,test,70,"# Goals for Psithon Tests; # -----------------------; # [x] Notice if test undocumented; # [x] Notice if test unregistered to CMake/CTest or registered with wrong name; # [x] Notice if test unregistered to pytest or registered with wrong name; # [x] If test unregistered to pytest, fill in runner file (completely for most, but add'l files are manual); # [x] Check ctest/pytest marks consistency; # [ ] Write Sphinx files; # [ ] Translate docs comment from LaTeX to reST; # [ ] Update samples/; # [ ] Replace document_tests.pl",MatchSource.CODE_COMMENT,tests/tester.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py:105,Testability,test,test,105,"# Goals for Psithon Tests; # -----------------------; # [x] Notice if test undocumented; # [x] Notice if test unregistered to CMake/CTest or registered with wrong name; # [x] Notice if test unregistered to pytest or registered with wrong name; # [x] If test unregistered to pytest, fill in runner file (completely for most, but add'l files are manual); # [x] Check ctest/pytest marks consistency; # [ ] Write Sphinx files; # [ ] Translate docs comment from LaTeX to reST; # [ ] Update samples/; # [ ] Replace document_tests.pl",MatchSource.CODE_COMMENT,tests/tester.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py:185,Testability,test,test,185,"# Goals for Psithon Tests; # -----------------------; # [x] Notice if test undocumented; # [x] Notice if test unregistered to CMake/CTest or registered with wrong name; # [x] Notice if test unregistered to pytest or registered with wrong name; # [x] If test unregistered to pytest, fill in runner file (completely for most, but add'l files are manual); # [x] Check ctest/pytest marks consistency; # [ ] Write Sphinx files; # [ ] Translate docs comment from LaTeX to reST; # [ ] Update samples/; # [ ] Replace document_tests.pl",MatchSource.CODE_COMMENT,tests/tester.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py:253,Testability,test,test,253,"# Goals for Psithon Tests; # -----------------------; # [x] Notice if test undocumented; # [x] Notice if test unregistered to CMake/CTest or registered with wrong name; # [x] Notice if test unregistered to pytest or registered with wrong name; # [x] If test unregistered to pytest, fill in runner file (completely for most, but add'l files are manual); # [x] Check ctest/pytest marks consistency; # [ ] Write Sphinx files; # [ ] Translate docs comment from LaTeX to reST; # [ ] Update samples/; # [ ] Replace document_tests.pl",MatchSource.CODE_COMMENT,tests/tester.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py:75,Usability,undo,undocumented,75,"# Goals for Psithon Tests; # -----------------------; # [x] Notice if test undocumented; # [x] Notice if test unregistered to CMake/CTest or registered with wrong name; # [x] Notice if test unregistered to pytest or registered with wrong name; # [x] If test unregistered to pytest, fill in runner file (completely for most, but add'l files are manual); # [x] Check ctest/pytest marks consistency; # [ ] Write Sphinx files; # [ ] Translate docs comment from LaTeX to reST; # [ ] Update samples/; # [ ] Replace document_tests.pl",MatchSource.CODE_COMMENT,tests/tester.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py:8,Testability,test,test,8,"# can't test locally",MatchSource.CODE_COMMENT,tests/tester.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tester.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/S33.py:374,Testability,benchmark,benchmark,374,"""""""; | Database (Hobza) of interaction energies for bimolecular complexes.; | Geometries from Jurecka et al. PCCP 8 1985 (2006).; | First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; | Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'``. - **benchmark**. - ``'S220'`` Jurecka et al. PCCP 8 1985 (2006).; - ``'S22A'`` Takatani et al. JCP 132 144104 (2010).; - |dl| ``'S22B'`` |dr| Marshall et al. JCP 135 194102 (2011). - **subset**. - ``'small'`` water dimer, methane dimer, ethene-ethine; - ``'large'`` adenine-thymine; - ``'HB'`` hydrogen-bonded systems; - ``'MX'`` mixed-influence systems; - ``'DD'`` dispersion-dominated systems; - ``'S11'`` smaller systems in S22. """"""",MatchSource.CODE_COMMENT,tests/dftd3/psithon2/psiaux1/S33.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/S33.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/myplugin1/pymodule.py:7,Modifiability,plugin,plugin,7,"# Your plugin's psi4 run sequence goes here",MatchSource.CODE_COMMENT,tests/dftd3/psithon2/psiaux1/myplugin1/pymodule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/myplugin1/pymodule.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/myplugin1/pymodule.py:26,Integrability,rout,routines,26,"# Integration with driver routines",MatchSource.CODE_COMMENT,tests/dftd3/psithon2/psiaux1/myplugin1/pymodule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/myplugin1/pymodule.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/myplugin1/__init__.py:11,Modifiability,plugin,plugin,11,"# Load C++ plugin",MatchSource.CODE_COMMENT,tests/dftd3/psithon2/psiaux1/myplugin1/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/myplugin1/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux2/S44.py:374,Testability,benchmark,benchmark,374,"""""""; | Database (Hobza) of interaction energies for bimolecular complexes.; | Geometries from Jurecka et al. PCCP 8 1985 (2006).; | First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; | Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'``. - **benchmark**. - ``'S220'`` Jurecka et al. PCCP 8 1985 (2006).; - ``'S22A'`` Takatani et al. JCP 132 144104 (2010).; - |dl| ``'S22B'`` |dr| Marshall et al. JCP 135 194102 (2011). - **subset**. - ``'small'`` water dimer, methane dimer, ethene-ethine; - ``'large'`` adenine-thymine; - ``'HB'`` hydrogen-bonded systems; - ``'MX'`` mixed-influence systems; - ``'DD'`` dispersion-dominated systems; - ``'S11'`` smaller systems in S22. """"""",MatchSource.CODE_COMMENT,tests/dftd3/psithon2/psiaux2/S44.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux2/S44.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-energy/input.py:21,Energy Efficiency,energy,energy,21,"#! test QCSchema for energy",MatchSource.CODE_COMMENT,tests/json/schema-1-energy/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-energy/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-energy/input.py:3,Testability,test,test,3,"#! test QCSchema for energy",MatchSource.CODE_COMMENT,tests/json/schema-1-energy/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-energy/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-ghost/input.py:3,Testability,test,test,3,"#! test QCSchema with ghost atoms",MatchSource.CODE_COMMENT,tests/json/schema-1-ghost/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-ghost/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-gradient/input.py:3,Testability,test,test,3,"#! test QCSchema for gradient",MatchSource.CODE_COMMENT,tests/json/schema-1-gradient/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-gradient/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-orient/input.py:3,Testability,test,test,3,"#! test QCSchema mol orientation",MatchSource.CODE_COMMENT,tests/json/schema-1-orient/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-orient/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-properties/input.py:3,Testability,test,test,3,"#! test QCSchema for properties",MatchSource.CODE_COMMENT,tests/json/schema-1-properties/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-properties/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-response/input.py:3,Testability,test,test,3,"#! test QCSchema for response properties",MatchSource.CODE_COMMENT,tests/json/schema-1-response/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-response/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-tamps/input.py:3,Testability,test,test,3,"#! test QCSchema for CCSD amplitudes saving",MatchSource.CODE_COMMENT,tests/json/schema-1-tamps/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-tamps/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-throws/input.py:3,Testability,test,test,3,"#! test QCSchema noncontiguous mol",MatchSource.CODE_COMMENT,tests/json/schema-1-throws/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-throws/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-throws/input.py:29,Availability,error,errors,29,"#TEST; # Check symbol length errors",MatchSource.CODE_COMMENT,tests/json/schema-1-throws/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-throws/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-throws/input.py:23,Availability,error,errors,23,"#TEST; # Check keyword errors",MatchSource.CODE_COMMENT,tests/json/schema-1-throws/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-throws/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/dfmp2/input.py:5,Usability,simpl,simple,5,"#! A simple Psi 4 input script to compute MP2 from a RHF reference",MatchSource.CODE_COMMENT,tests/psi4numpy/dfmp2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/dfmp2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py:5,Usability,simpl,simple,5,"#! A simple Psi 4 input script to compute a SCF reference using Psi4's libJK",MatchSource.CODE_COMMENT,tests/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py:6,Availability,toler,tolerances,6,"# Set tolerances",MatchSource.CODE_COMMENT,tests/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py:14,Integrability,rout,routine,14,"# Diagonalize routine",MatchSource.CODE_COMMENT,tests/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py:7,Availability,error,error,7,"# DIIS error build and update",MatchSource.CODE_COMMENT,tests/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py:23,Deployability,update,update,23,"# DIIS error build and update",MatchSource.CODE_COMMENT,tests/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py:17,Deployability,update,update,17,"# SCF energy and update",MatchSource.CODE_COMMENT,tests/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py:6,Energy Efficiency,energy,energy,6,"# SCF energy and update",MatchSource.CODE_COMMENT,tests/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py:12,Energy Efficiency,energy,energy,12,"#print(psi4.energy(""SCF""))",MatchSource.CODE_COMMENT,tests/psi4numpy/rhf/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/S33.py:374,Testability,benchmark,benchmark,374,"""""""; | Database (Hobza) of interaction energies for bimolecular complexes.; | Geometries from Jurecka et al. PCCP 8 1985 (2006).; | First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; | Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'``. - **benchmark**. - ``'S220'`` Jurecka et al. PCCP 8 1985 (2006).; - ``'S22A'`` Takatani et al. JCP 132 144104 (2010).; - |dl| ``'S22B'`` |dr| Marshall et al. JCP 135 194102 (2011). - **subset**. - ``'small'`` water dimer, methane dimer, ethene-ethine; - ``'large'`` adenine-thymine; - ``'HB'`` hydrogen-bonded systems; - ``'MX'`` mixed-influence systems; - ``'DD'`` dispersion-dominated systems; - ``'S11'`` smaller systems in S22. """"""",MatchSource.CODE_COMMENT,tests/psithon2/psiaux1/S33.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/S33.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/myplugin1/pymodule.py:7,Modifiability,plugin,plugin,7,"# Your plugin's psi4 run sequence goes here",MatchSource.CODE_COMMENT,tests/psithon2/psiaux1/myplugin1/pymodule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/myplugin1/pymodule.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/myplugin1/pymodule.py:26,Integrability,rout,routines,26,"# Integration with driver routines",MatchSource.CODE_COMMENT,tests/psithon2/psiaux1/myplugin1/pymodule.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/myplugin1/pymodule.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/myplugin1/__init__.py:11,Modifiability,plugin,plugin,11,"# Load C++ plugin",MatchSource.CODE_COMMENT,tests/psithon2/psiaux1/myplugin1/__init__.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/myplugin1/__init__.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux2/S44.py:374,Testability,benchmark,benchmark,374,"""""""; | Database (Hobza) of interaction energies for bimolecular complexes.; | Geometries from Jurecka et al. PCCP 8 1985 (2006).; | First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; | Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). - **cp** ``'off'`` || ``'on'``. - **rlxd** ``'off'``. - **benchmark**. - ``'S220'`` Jurecka et al. PCCP 8 1985 (2006).; - ``'S22A'`` Takatani et al. JCP 132 144104 (2010).; - |dl| ``'S22B'`` |dr| Marshall et al. JCP 135 194102 (2011). - **subset**. - ``'small'`` water dimer, methane dimer, ethene-ethine; - ``'large'`` adenine-thymine; - ``'HB'`` hydrogen-bonded systems; - ``'MX'`` mixed-influence systems; - ``'DD'`` dispersion-dominated systems; - ``'S11'`` smaller systems in S22. """"""",MatchSource.CODE_COMMENT,tests/psithon2/psiaux2/S44.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux2/S44.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:90,Usability,responsiv,responsive,90,"# Figure out what is imported; # * only using psi4.addons for C-linked b/c _programs more responsive to env; # * `which` not taking PSIPATH into account",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:37,Safety,detect,detected,37,"""""""Apply 3 marks: skipif program not detected, label ""addon"", and label program.; This is the decorator form for whole test functions: `@mark\n@mark`. """"""",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:119,Testability,test,test,119,"""""""Apply 3 marks: skipif program not detected, label ""addon"", and label program.; This is the decorator form for whole test functions: `@mark\n@mark`. """"""",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:110,Modifiability,parameteriz,parameterizations,110,"""""""Apply 3 marks: skipif program not detected, label ""addon"", and label program.; This is the inline form for parameterizations: `marks=[]`.; In combo, do `marks=[*using(), pytest.mark.quick]`. """"""",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:37,Safety,detect,detected,37,"""""""Apply 3 marks: skipif program not detected, label ""addon"", and label program.; This is the inline form for parameterizations: `marks=[]`.; In combo, do `marks=[*using(), pytest.mark.quick]`. """"""",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:345,Availability,avail,available,345,"""""""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory. Any strings listed in ``setenv`` are available; in the test as environment variables set to ""1"". """"""",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:383,Modifiability,variab,variables,383,"""""""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory. Any strings listed in ``setenv`` are available; in the test as environment variables set to ""1"". """"""",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:17,Testability,mock,mock,17,"""""""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory. Any strings listed in ``setenv`` are available; in the test as environment variables set to ""1"". """"""",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:363,Testability,test,test,363,"""""""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory. Any strings listed in ``setenv`` are available; in the test as environment variables set to ""1"". """"""",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:142,Availability,robust,robust,142,"# Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:862,Availability,error,error,862,"# Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; # The ""exe"" rerouting is for Windows conda package Scripts/psi4.exe file. It gives an encoding error if Python in command.; # * Toggle `scratch_messy` to examine scratch contents.",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:714,Testability,test,tests,714,"# Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; # The ""exe"" rerouting is for Windows conda package Scripts/psi4.exe file. It gives an encoding error if Python in command.; # * Toggle `scratch_messy` to examine scratch contents.",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py:12,Usability,simpl,simple,12,"# Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; # The ""exe"" rerouting is for Windows conda package Scripts/psi4.exe file. It gives an encoding error if Python in command.; # * Toggle `scratch_messy` to examine scratch contents.",MatchSource.CODE_COMMENT,tests/pytests/addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/conftest.py:55,Testability,test,tests,55,"# --runnonroutine given in cli: do not skip nonroutine tests",MatchSource.CODE_COMMENT,tests/pytests/conftest.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/conftest.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_ref_local.py:112,Deployability,release,release,112,"# in-repo extensions for _std_suite above; # * ideally empty. PR to QCEngine ASAP and empty this after QCEngine release.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_ref_local.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_ref_local.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:51,Integrability,rout,routing,51,"# returns ""psi4""|""psi4-<module>"" # input-specified routing",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:11,Integrability,rout,routing,11,"# expected routing",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:43,Availability,avail,available,43,"# dummy to assure df/cd/conv scf_type refs available",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:63,Modifiability,variab,variable,63,"# Hartree--Fock doesn't need this b/c it does value sharing by variable so CONV-AE-CONV also stored at CONV-AE-DF",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:26,Availability,toler,tolerances,26,"# * absolute and relative tolerances function approx as `or` operation. see https://numpy.org/doc/stable/reference/generated/numpy.allclose.html",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:59,Availability,toler,tolerance,59,"# check all calcs against conventional reference to looser tolerance",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:39,Availability,error,error,39,"# fnocc non-conv ccsd opposite-spin df error is larger than corl df error. TODO: see if other methods/module/mols show this or if suspicious.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:68,Availability,error,error,68,"# fnocc non-conv ccsd opposite-spin df error is larger than corl df error. TODO: see if other methods/module/mols show this or if suspicious.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:21,Testability,test,tests,21,"# ADVICE: adding new tests, as soon as you start editing any standard_suite_ref* file, uncomment; # ""reference generation"" block below, so any numbers you may copy are of best quality.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:57,Integrability,rout,routing,57,"# returns ""psi4-<module>""; # <<< Comparison Tests >>>; # routing checks",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:198,Integrability,rout,routine,198,"# ADVICE: adding new tests, when a variable claims ""not set"", and you're sure it was, investigate core vs wfn.; # best practice is to set in C++ code on wfn, then copy wfn to P::e at end of proc.py routine.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:35,Modifiability,variab,variable,35,"# ADVICE: adding new tests, when a variable claims ""not set"", and you're sure it was, investigate core vs wfn.; # best practice is to set in C++ code on wfn, then copy wfn to P::e at end of proc.py routine.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:21,Testability,test,tests,21,"# ADVICE: adding new tests, when a variable claims ""not set"", and you're sure it was, investigate core vs wfn.; # best practice is to set in C++ code on wfn, then copy wfn to P::e at end of proc.py routine.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:185,Integrability,contract,contracts,185,"# ADVICE: adding new tests, comment out lesser methods to focus first on target method; # add lesser back later, fulfilled by either adding qcvars to psi4 code or excusing them in qcng contracts",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:21,Testability,test,tests,21,"# ADVICE: adding new tests, comment out lesser methods to focus first on target method; # add lesser back later, fulfilled by either adding qcvars to psi4 code or excusing them in qcng contracts",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:2,Testability,assert,assert,2,"# assert skipped",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:2,Testability,assert,assert,2,"# assert skipped",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:2,Testability,assert,assert,2,"# assert skipped",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:2,Testability,assert,assert,2,"# assert 0",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:21,Testability,test,tests,21,"# ADVICE: adding new tests, when a conventional reference is not present and isn't a priority, comment next two statements.; # To long-term forgive, as last resort, add `_knownmissing` to CONV in qcng _std_suite.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:263,Integrability,message,message,263,"# Note that the double compare_values lines are to collect the errmsg in the first for assertion in the second.; # If the errmsg isn't present in the assert, the string isn't accessible through `e.value`.; # If a plain bool is compared in the assert, the printed message will show booleans and not numbers.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:175,Security,access,accessible,175,"# Note that the double compare_values lines are to collect the errmsg in the first for assertion in the second.; # If the errmsg isn't present in the assert, the string isn't accessible through `e.value`.; # If a plain bool is compared in the assert, the printed message will show booleans and not numbers.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:87,Testability,assert,assertion,87,"# Note that the double compare_values lines are to collect the errmsg in the first for assertion in the second.; # If the errmsg isn't present in the assert, the string isn't accessible through `e.value`.; # If a plain bool is compared in the assert, the printed message will show booleans and not numbers.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:150,Testability,assert,assert,150,"# Note that the double compare_values lines are to collect the errmsg in the first for assertion in the second.; # If the errmsg isn't present in the assert, the string isn't accessible through `e.value`.; # If a plain bool is compared in the assert, the printed message will show booleans and not numbers.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:243,Testability,assert,assert,243,"# Note that the double compare_values lines are to collect the errmsg in the first for assertion in the second.; # If the errmsg isn't present in the assert, the string isn't accessible through `e.value`.; # If a plain bool is compared in the assert, the printed message will show booleans and not numbers.",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:27,Integrability,contract,contract,27,"# verify and forgive known contract violations",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py:34,Testability,test,tests,34,"""""""Accumulates record of stdsuite tests circumstances and status.; See ../../psi4/share/psi4/scripts/merge_stdsuite.py for discussion on viewing results.""""""",MatchSource.CODE_COMMENT,tests/pytests/standard_suite_runner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/standard_suite_runner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_aaa_profiling.py:95,Testability,test,test,95,"# Test below is fine on its own but erratic through pytest. Most likely; # to succeed as first test collected, so here it lies.",MatchSource.CODE_COMMENT,tests/pytests/test_aaa_profiling.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_aaa_profiling.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_adcc.py:20,Testability,test,test,20,"# for easier manual test selection",MatchSource.CODE_COMMENT,tests/pytests/test_adcc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_adcc.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:17,Energy Efficiency,energy,energy,17,"#! CCSDT cc-pVDZ energy for the H2O molecule using MRCC",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:9,Energy Efficiency,energy,energy,9,"""""""dftd3/energy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:6,Energy Efficiency,energy,energy,6,"#psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:180,Energy Efficiency,energy,energy,180,"#psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:331,Energy Efficiency,energy,energy,331,"#psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:88,Modifiability,variab,variable,88,"#psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:244,Modifiability,variab,variable,244,"#psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:403,Modifiability,variab,variable,403,"#psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:45,Testability,assert,assert,45,"#psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:201,Testability,assert,assert,201,"#psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:356,Testability,assert,assert,356,"#psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:6,Energy Efficiency,energy,energy,6,"#psi4.energy('b3lyp-d3'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); #psi4.energy('b3lyp-d'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:148,Energy Efficiency,energy,energy,148,"#psi4.energy('b3lyp-d3'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); #psi4.energy('b3lyp-d'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:74,Modifiability,variab,variable,74,"#psi4.energy('b3lyp-d3'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); #psi4.energy('b3lyp-d'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:211,Modifiability,variab,variable,211,"#psi4.energy('b3lyp-d3'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); #psi4.energy('b3lyp-d'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:27,Testability,assert,assert,27,"#psi4.energy('b3lyp-d3'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); #psi4.energy('b3lyp-d'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:168,Testability,assert,assert,168,"#psi4.energy('b3lyp-d3'); #assert psi4.compare_values(ref_d3zero[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); #psi4.energy('b3lyp-d'); #assert psi4.compare_values(ref_d2[1], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:64,Energy Efficiency,energy,energy,64,"#psi4.set_options({'dft_dispersion_parameters': [0.75]}); #psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.set_options({'dft_dispersion_parameters': [0.75, 20.0]}); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.set_options({'dft_dispersion_parameters': [1.0, 0.722, 1.217, 14.0]}); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_pbe_d3zero[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:306,Energy Efficiency,energy,energy,306,"#psi4.set_options({'dft_dispersion_parameters': [0.75]}); #psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.set_options({'dft_dispersion_parameters': [0.75, 20.0]}); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.set_options({'dft_dispersion_parameters': [1.0, 0.722, 1.217, 14.0]}); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_pbe_d3zero[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:538,Energy Efficiency,energy,energy,538,"#psi4.set_options({'dft_dispersion_parameters': [0.75]}); #psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.set_options({'dft_dispersion_parameters': [0.75, 20.0]}); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.set_options({'dft_dispersion_parameters': [1.0, 0.722, 1.217, 14.0]}); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_pbe_d3zero[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:150,Modifiability,variab,variable,150,"#psi4.set_options({'dft_dispersion_parameters': [0.75]}); #psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.set_options({'dft_dispersion_parameters': [0.75, 20.0]}); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.set_options({'dft_dispersion_parameters': [1.0, 0.722, 1.217, 14.0]}); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_pbe_d3zero[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:374,Modifiability,variab,variable,374,"#psi4.set_options({'dft_dispersion_parameters': [0.75]}); #psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.set_options({'dft_dispersion_parameters': [0.75, 20.0]}); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.set_options({'dft_dispersion_parameters': [1.0, 0.722, 1.217, 14.0]}); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_pbe_d3zero[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:614,Modifiability,variab,variable,614,"#psi4.set_options({'dft_dispersion_parameters': [0.75]}); #psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.set_options({'dft_dispersion_parameters': [0.75, 20.0]}); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.set_options({'dft_dispersion_parameters': [1.0, 0.722, 1.217, 14.0]}); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_pbe_d3zero[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:103,Testability,assert,assert,103,"#psi4.set_options({'dft_dispersion_parameters': [0.75]}); #psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.set_options({'dft_dispersion_parameters': [0.75, 20.0]}); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.set_options({'dft_dispersion_parameters': [1.0, 0.722, 1.217, 14.0]}); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_pbe_d3zero[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:327,Testability,assert,assert,327,"#psi4.set_options({'dft_dispersion_parameters': [0.75]}); #psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.set_options({'dft_dispersion_parameters': [0.75, 20.0]}); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.set_options({'dft_dispersion_parameters': [1.0, 0.722, 1.217, 14.0]}); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_pbe_d3zero[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:563,Testability,assert,assert,563,"#psi4.set_options({'dft_dispersion_parameters': [0.75]}); #psi4.energy('b3lyp-d2', engine='libdisp'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); #psi4.set_options({'dft_dispersion_parameters': [0.75, 20.0]}); #psi4.energy('b3lyp-d2'); #assert psi4.compare_values(ref_pbe_d2[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); #psi4.set_options({'dft_dispersion_parameters': [1.0, 0.722, 1.217, 14.0]}); #psi4.energy('b3lyp-d3zero'); #assert psi4.compare_values(ref_pbe_d3zero[2], psi4.variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)')",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:9,Energy Efficiency,energy,energy,9,"""""""dftd3/energy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:86,Performance,perform,performed,86,"#! EFP on mixed QM (water) and EFP (water + 2 * ammonia) system.; #! An EFP-only calc performed first to test vales against q-chem.",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:105,Testability,test,test,105,"#! EFP on mixed QM (water) and EFP (water + 2 * ammonia) system.; #! An EFP-only calc performed first to test vales against q-chem.",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:17,Availability,checkpoint,checkpoint,17,"#Ensure that the checkpoint file is always nuked",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:8,Energy Efficiency,energy,energy,8,"""""""json/energy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:8,Energy Efficiency,energy,energy,8,"""""""json/energy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:16,Testability,test,tests,16,"""""""v2rdm_casscf/tests/v2rdm1""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:12,Testability,test,tests,12,"""""""gpu_dfcc/tests/gpu_dfcc1""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:8,Testability,test,tests,8,"""""""resp/tests/test_resp_1""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:54,Testability,test,tests,54,"# resp writes fixed-name grid files that clobber when tests run in parallel",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:12,Energy Efficiency,charge,charges,12,"# Reference charges are generated by the R.E.D.-III.5 tools; # with GAMESS as the quantum chemistry package",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:11,Energy Efficiency,charge,charges,11,"# Get RESP charges",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:54,Testability,test,tests,54,"# resp writes fixed-name grid files that clobber when tests run in parallel",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py:23,Testability,test,test,23,"# not much of a psixas test",MatchSource.CODE_COMMENT,tests/pytests/test_addons.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:234,Energy Efficiency,energy,energy,234,"# Notes; # * options-setting NOT cummulative if a run_qcschema in between; # Generating; # * equivalent to test_psi4. copy over the job, then run below to generate atomicinput; # atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); # print(f' jatin = """"""{atin.serialize(""json"")}""""""'); # assert 0; # * switch to json running; # atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); # pprint.pprint(atres.dict())",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:424,Performance,load,loads,424,"# Notes; # * options-setting NOT cummulative if a run_qcschema in between; # Generating; # * equivalent to test_psi4. copy over the job, then run below to generate atomicinput; # atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); # print(f' jatin = """"""{atin.serialize(""json"")}""""""'); # assert 0; # * switch to json running; # atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); # pprint.pprint(atres.dict())",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:338,Testability,assert,assert,338,"# Notes; # * options-setting NOT cummulative if a run_qcschema in between; # Generating; # * equivalent to test_psi4. copy over the job, then run below to generate atomicinput; # atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); # print(f' jatin = """"""{atin.serialize(""json"")}""""""'); # assert 0; # * switch to json running; # atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); # pprint.pprint(atres.dict())",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Integrability,protocol,protocols,141,"# noreorient/nocom are not needed, but are used here to guarantee that the; # GDMA origin placement defined below is at the O atom.; # added protocols.wavefunction = orbitals_and_eigenvalues (needs to be all)",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:870,Energy Efficiency,energy,energy,870,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""H"", ""H""], ""geometry"": [0.0, 0.0, 0.22143054847664648, 4.379423262771008e-17, -1.4304281906653031, -0.8857259733588368, -4.379423262771008e-17, 1.4304281906653031, -0.8857259733588368], ""name"": ""H2O"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 1.00782503223, 1.00782503223], ""real"": [true, true, true], ""atom_labels"": ["""", """", """"], ""atomic_numbers"": [8, 1, 1], ""mass_numbers"": [16, 1, 1], ""fragments"": [[0, 1, 2]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": true, ""fix_orientation"": true, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""d_convergence"": 1e-10, ""gdma_limit"": 2, ""gdma_origin"": [0.0, 0.0, 0.117176], ""gdma_radius"": [""H"", 0.65], ""gdma_switch"": 0.0, ""scf_type"": ""PK""}, ""protocols"": {""wavefunction"": ""orbitals_and_eigenvalues""}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:811,Integrability,rout,routine,811,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""H"", ""H""], ""geometry"": [0.0, 0.0, 0.22143054847664648, 4.379423262771008e-17, -1.4304281906653031, -0.8857259733588368, -4.379423262771008e-17, 1.4304281906653031, -0.8857259733588368], ""name"": ""H2O"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 1.00782503223, 1.00782503223], ""real"": [true, true, true], ""atom_labels"": ["""", """", """"], ""atomic_numbers"": [8, 1, 1], ""mass_numbers"": [16, 1, 1], ""fragments"": [[0, 1, 2]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": true, ""fix_orientation"": true, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""d_convergence"": 1e-10, ""gdma_limit"": 2, ""gdma_origin"": [0.0, 0.0, 0.117176], ""gdma_radius"": [""H"", 0.65], ""gdma_switch"": 0.0, ""scf_type"": ""PK""}, ""protocols"": {""wavefunction"": ""orbitals_and_eigenvalues""}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1086,Integrability,protocol,protocols,1086,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""H"", ""H""], ""geometry"": [0.0, 0.0, 0.22143054847664648, 4.379423262771008e-17, -1.4304281906653031, -0.8857259733588368, -4.379423262771008e-17, 1.4304281906653031, -0.8857259733588368], ""name"": ""H2O"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 1.00782503223, 1.00782503223], ""real"": [true, true, true], ""atom_labels"": ["""", """", """"], ""atomic_numbers"": [8, 1, 1], ""mass_numbers"": [16, 1, 1], ""fragments"": [[0, 1, 2]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": true, ""fix_orientation"": true, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""d_convergence"": 1e-10, ""gdma_limit"": 2, ""gdma_origin"": [0.0, 0.0, 0.117176], ""gdma_radius"": [""H"", 0.65], ""gdma_switch"": 0.0, ""scf_type"": ""PK""}, ""protocols"": {""wavefunction"": ""orbitals_and_eigenvalues""}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1244,Integrability,rout,routine,1244,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""H"", ""H""], ""geometry"": [0.0, 0.0, 0.22143054847664648, 4.379423262771008e-17, -1.4304281906653031, -0.8857259733588368, -4.379423262771008e-17, 1.4304281906653031, -0.8857259733588368], ""name"": ""H2O"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 1.00782503223, 1.00782503223], ""real"": [true, true, true], ""atom_labels"": ["""", """", """"], ""atomic_numbers"": [8, 1, 1], ""mass_numbers"": [16, 1, 1], ""fragments"": [[0, 1, 2]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": true, ""fix_orientation"": true, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""d_convergence"": 1e-10, ""gdma_limit"": 2, ""gdma_origin"": [0.0, 0.0, 0.117176], ""gdma_radius"": [""H"", 0.65], ""gdma_switch"": 0.0, ""scf_type"": ""PK""}, ""protocols"": {""wavefunction"": ""orbitals_and_eigenvalues""}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""H"", ""H""], ""geometry"": [0.0, 0.0, 0.22143054847664648, 4.379423262771008e-17, -1.4304281906653031, -0.8857259733588368, -4.379423262771008e-17, 1.4304281906653031, -0.8857259733588368], ""name"": ""H2O"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 1.00782503223, 1.00782503223], ""real"": [true, true, true], ""atom_labels"": ["""", """", """"], ""atomic_numbers"": [8, 1, 1], ""mass_numbers"": [16, 1, 1], ""fragments"": [[0, 1, 2]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": true, ""fix_orientation"": true, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""d_convergence"": 1e-10, ""gdma_limit"": 2, ""gdma_origin"": [0.0, 0.0, 0.117176], ""gdma_radius"": [""H"", 0.65], ""gdma_switch"": 0.0, ""scf_type"": ""PK""}, ""protocols"": {""wavefunction"": ""orbitals_and_eigenvalues""}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:735,Energy Efficiency,energy,energy,735,"# water = psi4.geometry(""""""; # O -1.216 -0.015 -0.261; # H -1.946 0.681 -0.378; # H -1.332 -0.754 0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.c",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1050,Energy Efficiency,energy,energy,1050,"16 -0.015 -0.261; # H -1.946 0.681 -0.378; # H -1.332 -0.754 0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.n",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1127,Energy Efficiency,energy,energy,1127,"# no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1145,Energy Efficiency,energy,energy,1145,"# no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1230,Energy Efficiency,energy,energy,1230,"ons = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.va",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1332,Energy Efficiency,energy,energy,1332,"csd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1352,Energy Efficiency,energy,energy,1352,"csd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1425,Energy Efficiency,energy,energy,1425,".9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reft",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1764,Energy Efficiency,energy,energy,1764,"rint(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',;",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2086,Energy Efficiency,energy,energy,2086,".compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(js",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2163,Energy Efficiency,energy,energy,2163,"re_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972,",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2181,Energy Efficiency,energy,energy,2181,"re_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972,",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2266,Energy Efficiency,energy,energy,2266,"4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, p",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2368,Energy Efficiency,energy,energy,2368,"re_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variabl",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2388,Energy Efficiency,energy,energy,2388,"re_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variabl",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2461,Energy Efficiency,energy,energy,2461,"arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2629,Energy Efficiency,energy,energy,2629," # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2827,Energy Efficiency,energy,energy,2827,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2907,Energy Efficiency,energy,energy,2907,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1107,Modifiability,variab,variable,1107,"# no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1203,Modifiability,variab,variable,1203,"ons = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.va",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1314,Modifiability,variab,variable,1314,"csd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2143,Modifiability,variab,variable,2143,"re_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972,",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2239,Modifiability,variab,variable,2239,"4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, p",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2350,Modifiability,variab,variable,2350,"re_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variabl",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3180,Modifiability,variab,variable,3180,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3281,Modifiability,variab,variable,3281,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3374,Modifiability,variab,variable,3374,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3486,Modifiability,variab,variable,3486,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3601,Modifiability,variab,variable,3601,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:904,Performance,load,loads,904,"# water = psi4.geometry(""""""; # O -1.216 -0.015 -0.261; # H -1.946 0.681 -0.378; # H -1.332 -0.754 0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.c",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1933,Performance,load,loads,1933,"t()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3076,Performance,load,loads,3076,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:841,Testability,assert,assert,841,"# water = psi4.geometry(""""""; # O -1.216 -0.015 -0.261; # H -1.946 0.681 -0.378; # H -1.332 -0.754 0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.c",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:959,Testability,assert,assert,959,"# water = psi4.geometry(""""""; # O -1.216 -0.015 -0.261; # H -1.946 0.681 -0.378; # H -1.332 -0.754 0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.c",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1062,Testability,assert,assert,1062,"16 -0.015 -0.261; # H -1.946 0.681 -0.378; # H -1.332 -0.754 0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.n",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1157,Testability,assert,assert,1157,"# no_com; # """"""); #; # psi4.set_options({; # 'basis': 'sto-3g',; # 'reference': 'rhf',; # }); #; # options = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1267,Testability,assert,assert,1267,"ons = {}; #; # #ipi_broker(serverdata=""inet:localhost:21340"", options=options); # b = psi4.ipi_broker(""ccsd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.va",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1364,Testability,assert,assert,1364,"csd"", serverdata=False, options=options); #; # refnuc = 9.05843673637; # refscf = -74.9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1446,Testability,assert,assert,1446,".9417588868628; # refccsd = -0.04895074370294; # reftotal = -74.9907096305658; #; # frc = [[ 0.08704801, 0.1067644 , -0.11170374],; # [-0.02216499, -0.03279655, 0.03215871],; # [-0.06488302, -0.07396785, 0.07954503]]; #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reft",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1870,Testability,assert,assert,1870,"schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1988,Testability,assert,assert,1988,"(refnuc, water.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.s",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2098,Testability,assert,assert,2098,".compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(js",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2193,Testability,assert,assert,2193,"re_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972,",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2303,Testability,assert,assert,2303,"4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, p",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2400,Testability,assert,assert,2400,"re_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variabl",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2482,Testability,assert,assert,2482,"arrays(frc, b._force, 4, ""Total force (Broker)""); #; # water_mirror = psi4.geometry(""""""; # O 1.216 0.015 0.261; # H 1.946 -0.681 0.378; # H 1.332 0.754 -0.283; # units angstrom; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3013,Testability,assert,assert,3013,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3131,Testability,assert,assert,3131,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3231,Testability,assert,assert,3231,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3324,Testability,assert,assert,3324,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3436,Testability,assert,assert,3436,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:3551,Testability,assert,assert,3551,"m; # no_reorient; # no_com; # """"""); #; # b.calculate_force(); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(refnuc, water_mirror.nuclear_repulsion_energy(), 3, ""Nuclear repulsion energy""); # assert psi4.compare_values(refscf, psi4.core.variable(""SCF total energy""), 5, ""SCF energy""); # assert psi4.compare_values(refccsd, psi4.core.variable(""CCSD correlation energy""), 4, ""CCSD contribution""); # assert psi4.compare_values(reftotal, psi4.core.variable(""Current energy""), 7, ""Total energy""); # assert psi4.compare_values(reftotal, b._potential, 7, ""Total energy (Broker)""); # assert psi4.compare_arrays(frc, -b._force, 4, ""Total force (Broker)""); #@uusing(""mrcc""); #def test_mrcc():; # """"""mrcc/ccsdt""""""; # #! CCSDT cc-pVDZ energy for the H2O molecule using MRCC; #; # h2o = psi4.geometry(""""""; # o; # h 1 1.0; # h 1 1.0 2 104.5; # """"""); #; # psi4.set_options({; # 'basis': 'cc-pvdz',; # 'freeze_core': 'true'}); #; # psi4.energy('mrccsdt'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 8.801465529972, psi4.variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); # assert psi4.compare_values(-76.021418445155, psi4.variable(""SCF TOTAL ENERGY""), 6, 'SCF'); # assert psi4.compare_values( -0.204692406830, psi4.variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); # assert psi4.compare_values( -0.217715210258, psi4.variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); # assert psi4.compare_values(-76.239133655413, psi4.variable(""CURRENT ENERGY""), 6, 'CCSDT')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:708,Energy Efficiency,energy,energy,708,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -1.059, 0.0, 0.0, 1.059], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""dmrg-scf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [2, 0, 1, 1, 0, 2, 1, 1], ""dmrg_diis"": 1, ""dmrg_diis_write"": 1, ""dmrg_excitation"": 0, ""dmrg_irrep"": 0, ""dmrg_local_init"": 0, ""dmrg_mps_write"": 0, ""dmrg_multiplicity"": 1, ""dmrg_print_corr"": 1, ""dmrg_scf_active_space"": ""NO"", ""dmrg_scf_diis_thr"": 0.01, ""dmrg_scf_state_avg"": 0, ""dmrg_sweep_dvdson_rtol"": [0.0001, 1e-06, 1e-08], ""dmrg_sweep_energy_conv"": [1e-10, 1e-10, 1e-10], ""dmrg_sweep_max_sweeps"": [5, 5, 10], ""dmrg_sweep_noise_prefac"": [0.05, 0.05, 0.0], ""dmrg_sweep_states"": [500, 1000, 1000], ""dmrg_unitary_write"": 1, ""d_convergence"": 1e-12, ""e_convergence"": 1e-12, ""reference"": ""RHF"", ""restricted_docc"": [1, 0, 0, 0, 0, 1, 0, 0]}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:649,Integrability,rout,routine,649,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -1.059, 0.0, 0.0, 1.059], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""dmrg-scf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [2, 0, 1, 1, 0, 2, 1, 1], ""dmrg_diis"": 1, ""dmrg_diis_write"": 1, ""dmrg_excitation"": 0, ""dmrg_irrep"": 0, ""dmrg_local_init"": 0, ""dmrg_mps_write"": 0, ""dmrg_multiplicity"": 1, ""dmrg_print_corr"": 1, ""dmrg_scf_active_space"": ""NO"", ""dmrg_scf_diis_thr"": 0.01, ""dmrg_scf_state_avg"": 0, ""dmrg_sweep_dvdson_rtol"": [0.0001, 1e-06, 1e-08], ""dmrg_sweep_energy_conv"": [1e-10, 1e-10, 1e-10], ""dmrg_sweep_max_sweeps"": [5, 5, 10], ""dmrg_sweep_noise_prefac"": [0.05, 0.05, 0.0], ""dmrg_sweep_states"": [500, 1000, 1000], ""dmrg_unitary_write"": 1, ""d_convergence"": 1e-12, ""e_convergence"": 1e-12, ""reference"": ""RHF"", ""restricted_docc"": [1, 0, 0, 0, 0, 1, 0, 0]}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1430,Integrability,protocol,protocols,1430,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -1.059, 0.0, 0.0, 1.059], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""dmrg-scf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [2, 0, 1, 1, 0, 2, 1, 1], ""dmrg_diis"": 1, ""dmrg_diis_write"": 1, ""dmrg_excitation"": 0, ""dmrg_irrep"": 0, ""dmrg_local_init"": 0, ""dmrg_mps_write"": 0, ""dmrg_multiplicity"": 1, ""dmrg_print_corr"": 1, ""dmrg_scf_active_space"": ""NO"", ""dmrg_scf_diis_thr"": 0.01, ""dmrg_scf_state_avg"": 0, ""dmrg_sweep_dvdson_rtol"": [0.0001, 1e-06, 1e-08], ""dmrg_sweep_energy_conv"": [1e-10, 1e-10, 1e-10], ""dmrg_sweep_max_sweeps"": [5, 5, 10], ""dmrg_sweep_noise_prefac"": [0.05, 0.05, 0.0], ""dmrg_sweep_states"": [500, 1000, 1000], ""dmrg_unitary_write"": 1, ""d_convergence"": 1e-12, ""e_convergence"": 1e-12, ""reference"": ""RHF"", ""restricted_docc"": [1, 0, 0, 0, 0, 1, 0, 0]}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1546,Integrability,rout,routine,1546,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -1.059, 0.0, 0.0, 1.059], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""dmrg-scf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [2, 0, 1, 1, 0, 2, 1, 1], ""dmrg_diis"": 1, ""dmrg_diis_write"": 1, ""dmrg_excitation"": 0, ""dmrg_irrep"": 0, ""dmrg_local_init"": 0, ""dmrg_mps_write"": 0, ""dmrg_multiplicity"": 1, ""dmrg_print_corr"": 1, ""dmrg_scf_active_space"": ""NO"", ""dmrg_scf_diis_thr"": 0.01, ""dmrg_scf_state_avg"": 0, ""dmrg_sweep_dvdson_rtol"": [0.0001, 1e-06, 1e-08], ""dmrg_sweep_energy_conv"": [1e-10, 1e-10, 1e-10], ""dmrg_sweep_max_sweeps"": [5, 5, 10], ""dmrg_sweep_noise_prefac"": [0.05, 0.05, 0.0], ""dmrg_sweep_states"": [500, 1000, 1000], ""dmrg_unitary_write"": 1, ""d_convergence"": 1e-12, ""e_convergence"": 1e-12, ""reference"": ""RHF"", ""restricted_docc"": [1, 0, 0, 0, 0, 1, 0, 0]}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -1.059, 0.0, 0.0, 1.059], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""dmrg-scf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [2, 0, 1, 1, 0, 2, 1, 1], ""dmrg_diis"": 1, ""dmrg_diis_write"": 1, ""dmrg_excitation"": 0, ""dmrg_irrep"": 0, ""dmrg_local_init"": 0, ""dmrg_mps_write"": 0, ""dmrg_multiplicity"": 1, ""dmrg_print_corr"": 1, ""dmrg_scf_active_space"": ""NO"", ""dmrg_scf_diis_thr"": 0.01, ""dmrg_scf_state_avg"": 0, ""dmrg_sweep_dvdson_rtol"": [0.0001, 1e-06, 1e-08], ""dmrg_sweep_energy_conv"": [1e-10, 1e-10, 1e-10], ""dmrg_sweep_max_sweeps"": [5, 5, 10], ""dmrg_sweep_noise_prefac"": [0.05, 0.05, 0.0], ""dmrg_sweep_states"": [500, 1000, 1000], ""dmrg_unitary_write"": 1, ""d_convergence"": 1e-12, ""e_convergence"": 1e-12, ""reference"": ""RHF"", ""restricted_docc"": [1, 0, 0, 0, 0, 1, 0, 0]}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1528,Energy Efficiency,energy,energy,1528,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, -4.02163254721969, -3.862351044209187e-17, 1.261539587380886, -4.02163254721969, 1.745390733721485, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.745390733721485, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, -5.7777898331617076e-34, 0.0, 5.47454736883822, -5.7777898331617076e-34, 0.0, 3.193150937439626, -5.7777898331617076e-34, 0.0, 1.1789145370276326, -5.7777898331617076e-34, 0.0, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""mp2-d"", ""basis"": ""cc-pvdz""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1469,Integrability,rout,routine,1469,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, -4.02163254721969, -3.862351044209187e-17, 1.261539587380886, -4.02163254721969, 1.745390733721485, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.745390733721485, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, -5.7777898331617076e-34, 0.0, 5.47454736883822, -5.7777898331617076e-34, 0.0, 3.193150937439626, -5.7777898331617076e-34, 0.0, 1.1789145370276326, -5.7777898331617076e-34, 0.0, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""mp2-d"", ""basis"": ""cc-pvdz""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1604,Integrability,protocol,protocols,1604,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, -4.02163254721969, -3.862351044209187e-17, 1.261539587380886, -4.02163254721969, 1.745390733721485, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.745390733721485, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, -5.7777898331617076e-34, 0.0, 5.47454736883822, -5.7777898331617076e-34, 0.0, 3.193150937439626, -5.7777898331617076e-34, 0.0, 1.1789145370276326, -5.7777898331617076e-34, 0.0, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""mp2-d"", ""basis"": ""cc-pvdz""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1720,Integrability,rout,routine,1720,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, -4.02163254721969, -3.862351044209187e-17, 1.261539587380886, -4.02163254721969, 1.745390733721485, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.745390733721485, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, -5.7777898331617076e-34, 0.0, 5.47454736883822, -5.7777898331617076e-34, 0.0, 3.193150937439626, -5.7777898331617076e-34, 0.0, 1.1789145370276326, -5.7777898331617076e-34, 0.0, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""mp2-d"", ""basis"": ""cc-pvdz""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, -4.02163254721969, -3.862351044209187e-17, 1.261539587380886, -4.02163254721969, 1.745390733721485, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.745390733721485, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, -5.7777898331617076e-34, 0.0, 5.47454736883822, -5.7777898331617076e-34, 0.0, 3.193150937439626, -5.7777898331617076e-34, 0.0, 1.1789145370276326, -5.7777898331617076e-34, 0.0, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""mp2-d"", ""basis"": ""cc-pvdz""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:9,Energy Efficiency,energy,energy,9,"""""""dftd3/energy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1204,Energy Efficiency,energy,energy,1204,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""b3lyp-d2"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF"", ""function_kwargs"": {""engine"": ""libdisp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1145,Integrability,rout,routine,1145,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""b3lyp-d2"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF"", ""function_kwargs"": {""engine"": ""libdisp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1394,Integrability,protocol,protocols,1394,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""b3lyp-d2"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF"", ""function_kwargs"": {""engine"": ""libdisp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1510,Integrability,rout,routine,1510,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""b3lyp-d2"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF"", ""function_kwargs"": {""engine"": ""libdisp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""b3lyp-d2"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF"", ""function_kwargs"": {""engine"": ""libdisp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1204,Energy Efficiency,energy,energy,1204,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""B3LYP-D3BJ"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1145,Integrability,rout,routine,1145,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""B3LYP-D3BJ"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1354,Integrability,protocol,protocols,1354,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""B3LYP-D3BJ"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1470,Integrability,rout,routine,1470,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""B3LYP-D3BJ"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H""], ""geometry"": [3.8623510442091865e-17, -1.261539587380886, 0.00041472029798115525, -3.862351044209187e-17, 1.261539587380886, 0.00041472029798115525, 1.745390733721485, -2.3286206872737854, -0.0024690017694669127, -1.7453907337214847, -2.3286206872737854, -0.0024690017694669127, -1.745390733721485, 2.3286206872737854, -0.0024690017694669127, 1.7453907337214847, 2.3286206872737854, -0.0024690017694669127], ""name"": ""C2H4"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""B3LYP-D3BJ"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1009,Energy Efficiency,energy,energy,1009,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H""], ""geometry"": [3.7092061506874214e-68, -3.7092061506874214e-68, 1.1408784499704554, 3.7092061506874214e-68, -3.7092061506874214e-68, -1.140517981428138, 3.7092061506874214e-68, -3.7092061506874214e-68, -3.154754381840132, 3.7092061506874214e-68, -3.7092061506874214e-68, 3.1504623446615714], ""name"": ""C2H2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbe-d3bj"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_dispersion_parameters"": [2.0, 0.7875, 0.4289, 4.4407], ""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:950,Integrability,rout,routine,950,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H""], ""geometry"": [3.7092061506874214e-68, -3.7092061506874214e-68, 1.1408784499704554, 3.7092061506874214e-68, -3.7092061506874214e-68, -1.140517981428138, 3.7092061506874214e-68, -3.7092061506874214e-68, -3.154754381840132, 3.7092061506874214e-68, -3.7092061506874214e-68, 3.1504623446615714], ""name"": ""C2H2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbe-d3bj"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_dispersion_parameters"": [2.0, 0.7875, 0.4289, 4.4407], ""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1217,Integrability,protocol,protocols,1217,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H""], ""geometry"": [3.7092061506874214e-68, -3.7092061506874214e-68, 1.1408784499704554, 3.7092061506874214e-68, -3.7092061506874214e-68, -1.140517981428138, 3.7092061506874214e-68, -3.7092061506874214e-68, -3.154754381840132, 3.7092061506874214e-68, -3.7092061506874214e-68, 3.1504623446615714], ""name"": ""C2H2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbe-d3bj"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_dispersion_parameters"": [2.0, 0.7875, 0.4289, 4.4407], ""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1333,Integrability,rout,routine,1333,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H""], ""geometry"": [3.7092061506874214e-68, -3.7092061506874214e-68, 1.1408784499704554, 3.7092061506874214e-68, -3.7092061506874214e-68, -1.140517981428138, 3.7092061506874214e-68, -3.7092061506874214e-68, -3.154754381840132, 3.7092061506874214e-68, -3.7092061506874214e-68, 3.1504623446615714], ""name"": ""C2H2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbe-d3bj"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_dispersion_parameters"": [2.0, 0.7875, 0.4289, 4.4407], ""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H""], ""geometry"": [3.7092061506874214e-68, -3.7092061506874214e-68, 1.1408784499704554, 3.7092061506874214e-68, -3.7092061506874214e-68, -1.140517981428138, 3.7092061506874214e-68, -3.7092061506874214e-68, -3.154754381840132, 3.7092061506874214e-68, -3.7092061506874214e-68, 3.1504623446615714], ""name"": ""C2H2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbe-d3bj"", ""basis"": ""STO-3G""}, ""keywords"": {""dft_dispersion_parameters"": [2.0, 0.7875, 0.4289, 4.4407], ""dft_radial_points"": 50, ""dft_spherical_points"": 110, ""scf_type"": ""DF""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:86,Performance,perform,performed,86,"#! EFP on mixed QM (water) and EFP (water + 2 * ammonia) system.; #! An EFP-only calc performed first to test vales against q-chem.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:105,Testability,test,test,105,"#! EFP on mixed QM (water) and EFP (water + 2 * ammonia) system.; #! An EFP-only calc performed first to test vales against q-chem.",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:7,Energy Efficiency,energy,energy,7,"# psi4.energy('efp'); #",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:262,Energy Efficiency,energy,energy,262,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:373,Energy Efficiency,energy,energy,373,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:471,Energy Efficiency,energy,energy,471,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:583,Energy Efficiency,energy,energy,583,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:696,Energy Efficiency,energy,energy,696,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:793,Energy Efficiency,energy,energy,793,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1012,Energy Efficiency,energy,energy,1012,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1191,Energy Efficiency,energy,energy,1191,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1225,Energy Efficiency,energy,energy,1225,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1339,Energy Efficiency,energy,energy,1339,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1450,Energy Efficiency,energy,energy,1450,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1562,Energy Efficiency,energy,energy,1562,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1675,Energy Efficiency,energy,energy,1675,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1789,Energy Efficiency,energy,energy,1789,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:243,Modifiability,variab,variable,243,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:355,Modifiability,variab,variable,355,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:452,Modifiability,variab,variable,452,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:564,Modifiability,variab,variable,564,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:676,Modifiability,variab,variable,676,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:775,Modifiability,variab,variable,775,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1171,Modifiability,variab,variable,1171,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1207,Modifiability,variab,variable,1207,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1321,Modifiability,variab,variable,1321,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1431,Modifiability,variab,variable,1431,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1543,Modifiability,variab,variable,1543,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1655,Modifiability,variab,variable,1655,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1769,Modifiability,variab,variable,1769,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:49,Performance,load,loads,49,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:104,Testability,assert,assert,104,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:196,Testability,assert,assert,196,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:308,Testability,assert,assert,308,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:405,Testability,assert,assert,405,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:517,Testability,assert,assert,517,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:629,Testability,assert,assert,629,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:728,Testability,assert,assert,728,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1032,Testability,assert,assert,1032,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1124,Testability,assert,assert,1124,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1274,Testability,assert,assert,1274,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1384,Testability,assert,assert,1384,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1496,Testability,assert,assert,1496,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1608,Testability,assert,assert,1608,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1721,Testability,assert,assert,1721,"## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values(-0.0004901368, psi4.variable('efp elst energy'), 6, 'EFP-EFP Elst') # from q-chem; # assert psi4.compare_values(-0.0003168768, psi4.variable('efp ind energy'), 6, 'EFP-EFP Indc'); # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.0026804450, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl'); # assert psi4.compare_values( 0.0026804450, psi4.variable('current energy'), 6, 'Current'); # psi4.core.print_variables(); #; # psi4.core.clean(); # psi4.core.clean_variables(); #; # # <<< QM + EFP calc >>>; # psi4.set_options({; # 'e_convergence': 12,; # 'd_convergence': 12}); # psi4.energy('scf'); #; # assert psi4.compare_values( 9.1793879214, qmefp.nuclear_repulsion_energy(), 6, 'QM NRE'); # assert psi4.compare_values( 0.2622598847, psi4.variable('efp total energy') - psi4.variable('efp ind energy'), 6, 'EFP corr to SCF') # from q-chem; # assert psi4.compare_values(-0.0117694790, psi4.variable('efp ind energy'), 6, 'QM-EFP Indc') # from q-chem; # assert psi4.compare_values(-0.0021985285, psi4.variable('efp disp energy'), 6, 'EFP-EFP Disp') # from q-chem; # assert psi4.compare_values( 0.0056859871, psi4.variable('efp exch energy'), 6, 'EFP-EFP Exch') # from q-chem; # assert psi4.compare_values( 0.2504904057, psi4.variable('efp total energy'), 6, 'EFP-EFP Totl') # from q-chem; # assert psi4.compare_values(-76.0139362744, psi4.variable('scf total energy'), 6, 'SCF') # from q-chem; # psi4.core.print_variables()",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:920,Energy Efficiency,energy,energy,920,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:861,Integrability,rout,routine,861,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1252,Integrability,protocol,protocols,1252,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1368,Integrability,rout,routine,1368,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:920,Energy Efficiency,energy,energy,920,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""SEPARATE"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:861,Integrability,rout,routine,861,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""SEPARATE"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1255,Integrability,protocol,protocols,1255,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""SEPARATE"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1371,Integrability,rout,routine,1371,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""SEPARATE"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""SEPARATE"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:920,Energy Efficiency,energy,energy,920,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:861,Integrability,rout,routine,861,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1272,Integrability,protocol,protocols,1272,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1388,Integrability,rout,routine,1388,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:920,Energy Efficiency,energy,energy,920,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:861,Integrability,rout,routine,861,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1273,Integrability,protocol,protocols,1273,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1389,Integrability,rout,routine,1389,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""H"", ""H"", ""H""], ""geometry"": [-1e-10, -0.1040380466, 0.0, -0.9015844116, 0.4818470201, -1.5615900098, -0.9015844116, 0.4818470201, 1.5615900098, 1.8031688251, 0.4818470204, 0.0], ""name"": ""H3N"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 1.00782503223, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true], ""atom_labels"": ["""", """", """", """"], ""atomic_numbers"": [7, 1, 1, 1], ""mass_numbers"": [14, 1, 1, 1], ""fragments"": [[0, 1, 2, 3]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""pcm"": 1, ""pcm__input"": ""\\n Units = Angstrom\\n Medium {\\n SolverType = IEFPCM\\n Solvent = Water\\n }\\n \\n Cavity {\\n RadiiSet = UFF\\n Type = GePol\\n Scaling = False\\n Area = 0.3\\n Mode = Implicit\\n }\\n "", ""pcm_scf_type"": ""TOTAL"", ""scf_type"": ""PK"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:734,Energy Efficiency,energy,energy,734,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf__scf_type"": ""DIRECT""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:675,Integrability,rout,routine,675,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf__scf_type"": ""DIRECT""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:878,Integrability,protocol,protocols,878,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf__scf_type"": ""DIRECT""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:994,Integrability,rout,routine,994,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf__scf_type"": ""DIRECT""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf__scf_type"": ""DIRECT""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:734,Energy Efficiency,energy,energy,734,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""df"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:675,Integrability,rout,routine,675,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""df"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:889,Integrability,protocol,protocols,889,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""df"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1005,Integrability,rout,routine,1005,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""df"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""df"", ""reference"": ""uhf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:734,Energy Efficiency,energy,energy,734,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 3, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""out_of_core"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:675,Integrability,rout,routine,675,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 3, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""out_of_core"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:899,Integrability,protocol,protocols,899,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 3, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""out_of_core"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1015,Integrability,rout,routine,1015,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 3, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""out_of_core"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""O"", ""O""], ""geometry"": [0.0, 0.0, -1.0393493690018054, 0.0, 0.0, 1.0393493690018054], ""name"": ""O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 3, ""masses"": [15.99491461957, 15.99491461957], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [8, 8], ""mass_numbers"": [16, 16], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ""}, ""keywords"": {""df_basis_scf"": ""CC-PVTZ-JKFIT"", ""print"": 2, ""scf_type"": ""out_of_core"", ""reference"": ""rohf""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:8,Energy Efficiency,energy,energy,8,"""""""json/energy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:433,Energy Efficiency,energy,energy,433,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:511,Energy Efficiency,energy,energy,511,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:805,Energy Efficiency,energy,energy,805,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:898,Energy Efficiency,energy,energy,898,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:992,Energy Efficiency,energy,energy,992,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1092,Energy Efficiency,energy,energy,1092,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1195,Energy Efficiency,energy,energy,1195,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1301,Energy Efficiency,energy,energy,1301,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:785,Modifiability,variab,variable,785,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:878,Modifiability,variab,variable,878,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:971,Modifiability,variab,variable,971,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1065,Modifiability,variab,variable,1065,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1171,Modifiability,variab,variable,1171,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1271,Modifiability,variab,variable,1271,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:680,Performance,load,loads,680,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:617,Testability,assert,assert,617,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:735,Testability,assert,assert,735,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:828,Testability,assert,assert,828,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:921,Testability,assert,assert,921,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1016,Testability,assert,assert,1016,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1121,Testability,assert,assert,1121,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1222,Testability,assert,assert,1222,"#@pytest.mark.smoke; #@uusing(""cfour""); #def test_cfour():; # """"""cfour/sp-rhf-ccsd_t_""""""; # #! single-point CCSD(T)/qz2p on water; #; # print(' <<< Translation of ZMAT to Psi4 format to Cfour >>>'); #; # psi4.geometry(""""""; # O; # H 1 R; # H 1 R 2 A; #; # R=0.958; # A=104.5; # """"""); #; # psi4.set_options({; # 'cfour_CALC_level': 'CCSD(T)',; # 'cfour_BASIS': 'qz2p',; # 'cfour_SCF_CONV': 12,; # 'cfour_CC_CONV': 12,; # }); #; # psi4.energy('cfour'); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(-76.062748460117, psi4.variable('scf total energy'), 6, 'SCF'); # assert psi4.compare_values(-76.332940127333, psi4.variable('mp2 total energy'), 6, 'MP2'); # assert psi4.compare_values(-76.338453951890, psi4.variable('ccsd total energy'), 6, 'CCSD'); # assert psi4.compare_values(-0.275705491773, psi4.variable('ccsd correlation energy'), 6, 'CCSD corl'); # assert psi4.compare_values(-76.345717549886, psi4.variable('ccsd(t) total energy'), 6, 'CCSD(T)'); # assert psi4.compare_values(-0.282969089769, psi4.variable('ccsd(t) correlation energy'), 6, 'CCSD(T) corl')",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:16,Testability,test,tests,16,"""""""v2rdm_casscf/tests/v2rdm1""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:17,Modifiability,plugin,plugin,17,"# NOTES; # * add plugin keywords to AtomicInput by hand, not set_module_options, since the module list doesn't know about v2rdm",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:734,Energy Efficiency,energy,energy,734,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -0.4724315332214108, 0.0, 0.0, 0.4724315332214108], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""v2rdm-casscf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [1, 0, 1, 1, 0, 1, 1, 1], ""cholesky_tolerance"": 1e-12, ""d_convergence"": 1e-10, ""maxiter"": 500, ""restricted_docc"": [2, 0, 0, 0, 0, 2, 0, 0], ""scf_type"": ""CD"", ""v2rdm_casscf__r_convergence"": 1e-5, ""v2rdm_casscf__e_convergence"": 1e-6, ""v2rdm_casscf__maxiter"": 20000}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:675,Integrability,rout,routine,675,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -0.4724315332214108, 0.0, 0.0, 0.4724315332214108], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""v2rdm-casscf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [1, 0, 1, 1, 0, 1, 1, 1], ""cholesky_tolerance"": 1e-12, ""d_convergence"": 1e-10, ""maxiter"": 500, ""restricted_docc"": [2, 0, 0, 0, 0, 2, 0, 0], ""scf_type"": ""CD"", ""v2rdm_casscf__r_convergence"": 1e-5, ""v2rdm_casscf__e_convergence"": 1e-6, ""v2rdm_casscf__maxiter"": 20000}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1089,Integrability,protocol,protocols,1089,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -0.4724315332214108, 0.0, 0.0, 0.4724315332214108], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""v2rdm-casscf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [1, 0, 1, 1, 0, 1, 1, 1], ""cholesky_tolerance"": 1e-12, ""d_convergence"": 1e-10, ""maxiter"": 500, ""restricted_docc"": [2, 0, 0, 0, 0, 2, 0, 0], ""scf_type"": ""CD"", ""v2rdm_casscf__r_convergence"": 1e-5, ""v2rdm_casscf__e_convergence"": 1e-6, ""v2rdm_casscf__maxiter"": 20000}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1205,Integrability,rout,routine,1205,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -0.4724315332214108, 0.0, 0.0, 0.4724315332214108], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""v2rdm-casscf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [1, 0, 1, 1, 0, 1, 1, 1], ""cholesky_tolerance"": 1e-12, ""d_convergence"": 1e-10, ""maxiter"": 500, ""restricted_docc"": [2, 0, 0, 0, 0, 2, 0, 0], ""scf_type"": ""CD"", ""v2rdm_casscf__r_convergence"": 1e-5, ""v2rdm_casscf__e_convergence"": 1e-6, ""v2rdm_casscf__maxiter"": 20000}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -0.4724315332214108, 0.0, 0.0, 0.4724315332214108], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""v2rdm-casscf"", ""basis"": ""CC-PVDZ""}, ""keywords"": {""active"": [1, 0, 1, 1, 0, 1, 1, 1], ""cholesky_tolerance"": 1e-12, ""d_convergence"": 1e-10, ""maxiter"": 500, ""restricted_docc"": [2, 0, 0, 0, 0, 2, 0, 0], ""scf_type"": ""CD"", ""v2rdm_casscf__r_convergence"": 1e-5, ""v2rdm_casscf__e_convergence"": 1e-6, ""v2rdm_casscf__maxiter"": 20000}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:773,Energy Efficiency,energy,energy,773,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:824,Energy Efficiency,energy,energy,824,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:922,Energy Efficiency,energy,energy,922,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1199,Energy Efficiency,energy,energy,1199,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1487,Energy Efficiency,energy,energy,1487,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1091,Performance,load,loads,1091,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1368,Performance,load,loads,1368,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:82,Testability,test,tests,82,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1028,Testability,assert,assert,1028,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1305,Testability,assert,assert,1305,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1423,Testability,assert,assert,1423,"#@hardware_nvidia_gpu; #@uusing(""gpu_dfcc""); #def test_gpu_dfcc():; # """"""gpu_dfcc/tests/gpu_dfcc1""""""; # #! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; #; # import gpu_dfcc; #; # H20 = psi4.geometry(""""""; # O 0.000000000000 0.000000000000 -0.068516219310; # H 0.000000000000 -0.790689573744 0.543701060724; # H 0.000000000000 0.790689573744 0.543701060724; # """"""); #; # psi4.set_memory(32000000000); # psi4.set_options({; # 'cc_timings': False,; # 'num_gpus': 1,; # 'cc_type': 'df',; # 'df_basis_cc': 'aug-cc-pvdz-ri',; # 'df_basis_scf': 'aug-cc-pvdz-jkfit',; # 'basis': 'aug-cc-pvdz',; # 'freeze_core': 'true',; # 'e_convergence': 1e-8,; # 'd_convergence': 1e-8,; # 'r_convergence': 1e-8,; # 'scf_type': 'df',; # 'maxiter': 30}); # psi4.set_num_threads(2); # en_dfcc = psi4.energy('ccsd', molecule=H20); # en_gpu_dfcc = psi4.energy('gpu-df-ccsd', molecule=H20); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # assert psi4.compare_values(en_gpu_dfcc, en_dfcc, 8, ""CCSD total energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1622,Energy Efficiency,energy,energy,1622,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbeh3c"", ""basis"": ""(auto)""}, ""keywords"": {""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1563,Integrability,rout,routine,1563,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbeh3c"", ""basis"": ""(auto)""}, ""keywords"": {""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1738,Integrability,protocol,protocols,1738,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbeh3c"", ""basis"": ""(auto)""}, ""keywords"": {""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1854,Integrability,rout,routine,1854,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbeh3c"", ""basis"": ""(auto)""}, ""keywords"": {""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""pbeh3c"", ""basis"": ""(auto)""}, ""keywords"": {""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1622,Energy Efficiency,energy,energy,1622,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""hf3c"", ""basis"": """"}, ""keywords"": {""scf_type"": ""pk"", ""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1563,Integrability,rout,routine,1563,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""hf3c"", ""basis"": """"}, ""keywords"": {""scf_type"": ""pk"", ""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1748,Integrability,protocol,protocols,1748,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""hf3c"", ""basis"": """"}, ""keywords"": {""scf_type"": ""pk"", ""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1864,Integrability,rout,routine,1864,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""hf3c"", ""basis"": """"}, ""keywords"": {""scf_type"": ""pk"", ""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""C"", ""C"", ""H"", ""H""], ""geometry"": [2.676440890378796e-18, -1.261539587380886, -4.02163254721969, 2.676440890378796e-18, 1.261539587380886, -4.02163254721969, 1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, -2.3286206872737854, -4.0245162692871395, -1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 1.7453907337214847, 2.3286206872737854, -4.0245162692871395, 2.676440890378796e-18, -1.8740279466317074e-17, 5.47454736883822, 2.676440890378796e-18, -1.8740279466317074e-17, 3.193150937439626, 2.676440890378796e-18, -1.8740279466317074e-17, 1.1789145370276326, 2.676440890378796e-18, -1.8740279466317074e-17, 7.484131263529336], ""name"": ""C4H6"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 12.0, 12.0, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 1, 1, 1, 1, 6, 6, 1, 1], ""mass_numbers"": [12, 12, 1, 1, 1, 1, 12, 12, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""hf3c"", ""basis"": """"}, ""keywords"": {""scf_type"": ""pk"", ""function_kwargs"": {""bsse_type"": ""nocp""}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:648,Energy Efficiency,energy,energy,648,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""Ne""], ""geometry"": [0.0, 0.0, 0.0], ""name"": ""Ne"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [19.9924401762], ""real"": [true], ""atom_labels"": [""""], ""atomic_numbers"": [10], ""mass_numbers"": [20], ""fragments"": [[0]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ-DK""}, ""keywords"": {""dkh_order"": 2, ""print"": 2, ""reference"": ""RHF"", ""relativistic"": ""DKH"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:589,Integrability,rout,routine,589,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""Ne""], ""geometry"": [0.0, 0.0, 0.0], ""name"": ""Ne"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [19.9924401762], ""real"": [true], ""atom_labels"": [""""], ""atomic_numbers"": [10], ""mass_numbers"": [20], ""fragments"": [[0]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ-DK""}, ""keywords"": {""dkh_order"": 2, ""print"": 2, ""reference"": ""RHF"", ""relativistic"": ""DKH"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:812,Integrability,protocol,protocols,812,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""Ne""], ""geometry"": [0.0, 0.0, 0.0], ""name"": ""Ne"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [19.9924401762], ""real"": [true], ""atom_labels"": [""""], ""atomic_numbers"": [10], ""mass_numbers"": [20], ""fragments"": [[0]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ-DK""}, ""keywords"": {""dkh_order"": 2, ""print"": 2, ""reference"": ""RHF"", ""relativistic"": ""DKH"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:928,Integrability,rout,routine,928,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""Ne""], ""geometry"": [0.0, 0.0, 0.0], ""name"": ""Ne"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [19.9924401762], ""real"": [true], ""atom_labels"": [""""], ""atomic_numbers"": [10], ""mass_numbers"": [20], ""fragments"": [[0]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ-DK""}, ""keywords"": {""dkh_order"": 2, ""print"": 2, ""reference"": ""RHF"", ""relativistic"": ""DKH"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""Ne""], ""geometry"": [0.0, 0.0, 0.0], ""name"": ""Ne"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [19.9924401762], ""real"": [true], ""atom_labels"": [""""], ""atomic_numbers"": [10], ""mass_numbers"": [20], ""fragments"": [[0]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""CC-PVTZ-DK""}, ""keywords"": {""dkh_order"": 2, ""print"": 2, ""reference"": ""RHF"", ""relativistic"": ""DKH"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1497,Energy Efficiency,energy,energy,1497,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1732,Energy Efficiency,energy,energy,1732,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1816,Energy Efficiency,energy,energy,1816,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1906,Energy Efficiency,energy,energy,1906,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1999,Energy Efficiency,energy,energy,1999,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1875,Modifiability,variab,variable,1875,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1961,Modifiability,variab,variable,1961,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1666,Performance,load,loads,1666,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1603,Testability,assert,assert,1603,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1749,Testability,assert,assert,1749,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1835,Testability,assert,assert,1835,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1918,Testability,assert,assert,1918,"(""ambit""); #@uusing(""forte""); #def disabled_test_forte():; # """"""aci-10: Perform aci on benzyne""""""; #; # import forte; #; # refscf = -229.20378006852584; # refaci = -229.359450812283; # refacipt2 = -229.360444943286; #; # mbenzyne = psi4.geometry(""""""; # 0 1; # C 0.0000000000 -2.5451795941 0.0000000000; # C 0.0000000000 2.5451795941 0.0000000000; # C -2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 -1.3508352528 0.0000000000; # C 2.2828001669 1.3508352528 0.0000000000; # C -2.2828001669 1.3508352528 0.0000000000; # H -4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 -2.3208602146 0.0000000000; # H 4.0782187459 2.3208602146 0.0000000000; # H -4.0782187459 2.3208602146 0.0000000000; #; # units bohr; # """"""); #; # psi4.set_options({; # 'basis': 'DZ',; # 'df_basis_mp2': 'cc-pvdz-ri',; # 'reference': 'uhf',; # 'scf_type': 'pk',; # 'd_convergence': 10,; # 'e_convergence': 12,; # 'guess': 'gwh',; # }); #; # psi4.set_module_options(""FORTE"", {; # 'root_sym': 0,; # 'frozen_docc': [2,1,0,0,0,0,2,1],; # 'restricted_docc': [3,2,0,0,0,0,2,3],; # 'active': [1,0,1,2,1,2,1,0],; # 'multiplicity': 1,; # 'aci_nroot': 1,; # 'job_type': 'aci',; # 'sigma': 0.001,; # 'aci_select_type': 'aimed_energy',; # 'aci_spin_projection': 1,; # 'aci_enforce_spin_complete': True,; # 'aci_add_aimed_degenerate': False,; # 'aci_project_out_spin_contaminants': False,; # 'diag_algorithm': 'full',; # 'aci_quiet_mode': True,; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # scf = psi4.energy('scf'); # assert psi4.compare_values(refscf, scf,10,""SCF Energy""); #; # psi4.energy('forte'); # assert psi4.compare_values(refaci, psi4.variable(""ACI ENERGY""),10,""ACI energy""); # assert psi4.compare_values(refacipt2, psi4.variable(""ACI+PT2 ENERGY""),8,""ACI+PT2 energy"")",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:780,Energy Efficiency,energy,energy,780,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""He"", ""He""], ""geometry"": [-1.8897261254578286, -2.892808813508824e-17, 0.0, 1.8897261254578286, 2.892808813508824e-17, 0.0], ""name"": ""He2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [4.00260325413, 4.00260325413], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [2, 2], ""mass_numbers"": [4, 4], ""fragments"": [[0], [1]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""sns-mp2"", ""basis"": ""(auto)""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:721,Integrability,rout,routine,721,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""He"", ""He""], ""geometry"": [-1.8897261254578286, -2.892808813508824e-17, 0.0, 1.8897261254578286, 2.892808813508824e-17, 0.0], ""name"": ""He2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [4.00260325413, 4.00260325413], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [2, 2], ""mass_numbers"": [4, 4], ""fragments"": [[0], [1]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""sns-mp2"", ""basis"": ""(auto)""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:857,Integrability,protocol,protocols,857,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""He"", ""He""], ""geometry"": [-1.8897261254578286, -2.892808813508824e-17, 0.0, 1.8897261254578286, 2.892808813508824e-17, 0.0], ""name"": ""He2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [4.00260325413, 4.00260325413], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [2, 2], ""mass_numbers"": [4, 4], ""fragments"": [[0], [1]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""sns-mp2"", ""basis"": ""(auto)""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:973,Integrability,rout,routine,973,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""He"", ""He""], ""geometry"": [-1.8897261254578286, -2.892808813508824e-17, 0.0, 1.8897261254578286, 2.892808813508824e-17, 0.0], ""name"": ""He2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [4.00260325413, 4.00260325413], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [2, 2], ""mass_numbers"": [4, 4], ""fragments"": [[0], [1]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""sns-mp2"", ""basis"": ""(auto)""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""He"", ""He""], ""geometry"": [-1.8897261254578286, -2.892808813508824e-17, 0.0, 1.8897261254578286, 2.892808813508824e-17, 0.0], ""name"": ""He2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [4.00260325413, 4.00260325413], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [2, 2], ""mass_numbers"": [4, 4], ""fragments"": [[0], [1]], ""fragment_charges"": [0.0, 0.0], ""fragment_multiplicities"": [1, 1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""sns-mp2"", ""basis"": ""(auto)""}, ""keywords"": {}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:8,Testability,test,tests,8,"""""""resp/tests/test_resp_1""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:756,Energy Efficiency,energy,energy,756,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 0, ""new_multiplicity"": 1}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:697,Integrability,rout,routine,697,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 0, ""new_multiplicity"": 1}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:896,Integrability,protocol,protocols,896,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 0, ""new_multiplicity"": 1}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1012,Integrability,rout,routine,1012,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 0, ""new_multiplicity"": 1}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 0, ""new_multiplicity"": 1}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:756,Energy Efficiency,energy,energy,756,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:697,Integrability,rout,routine,697,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:896,Integrability,protocol,protocols,896,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1012,Integrability,rout,routine,1012,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": 1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:756,Energy Efficiency,energy,energy,756,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": -1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:697,Integrability,rout,routine,697,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": -1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:897,Integrability,protocol,protocols,897,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": -1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1013,Integrability,rout,routine,1013,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": -1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""N"", ""N""], ""geometry"": [0.0, 0.0, -2.3621576568222853, 0.0, 0.0, 2.3621576568222853], ""name"": ""N2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 7, ""masses"": [14.00307400443, 14.00307400443], ""real"": [true, true], ""atom_labels"": ["""", """"], ""atomic_numbers"": [7, 7], ""mass_numbers"": [14, 14], ""fragments"": [[0, 1]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [7], ""fix_com"": false, ""fix_orientation"": false, ""fix_symmetry"": ""c1"", ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""psi4fockci"", ""basis"": ""cc-pvdz""}, ""keywords"": {""function_kwargs"": {""new_charge"": -1, ""new_multiplicity"": 2}}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1089"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2132,Energy Efficiency,energy,energy,2132,"46196], ""name"": ""C6H6N2O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 14.00307400443, 14.00307400443, 15.99491461957, 15.99491461957, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 7, 7, 8, 8, 1, 1], ""mass_numbers"": [12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 14, 14, 16, 16, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""d_convergence"": 1e-10, ""e_convergence"": 1e-10, ""pe"": 1, ""pe__potfile"": ""\\n! Generated by PyFraME 0.1.0\\n@COORDINATES\\n18\\nAA\\nO 9.37100000 2.95300000 -6.07800000 1\\nH 8.87200000 2.13400000 -6.04900000 2\\nH 9.87300000 2.94000000 -5.26100000 3\\nO 7.72000000 5.12000000 -5.51900000 4\\nH 7.63800000 5.70400000 -6.27600000 5\\nH 8.29100000 4.41700000 -5.83600000 6\\nO 10.45300000 3.07700000 -3.43400000 7\\nH 9.94500000 3.80300000 -3.06600000 8\\nH 11.35900000 3.30000000 -3.21200000 9\\nO 6.15200000 4.88500000 -1.44700000 10\\nH 5.50700000 5.59100000 -1.36900000 11\\nH 5.89100000 4.42800000 -2.24900000 12\\nO 5.82300000 3.53700000 -3.94100000 13\\nH 6.31400000 2.71500000 -4.01100000 14\\nH 6.27500000 4.12300000 -4.55200000 15\\nO 8.86000000 5.34600000 -2.74900000 16\\nH 8.46500000 5.48700000 -3.61200000 17\\nH 8.10300000 5.25400000 -2.16700000 18\\n@MULTIPOLES\\nORDER 0\\n18\\n1 -0.67072060\\n2 0.33528566\\n3 0.33543494\\n4 -0.67055041\\n5 0.33526795\\n6 0.33528246\\n7 -0.67071744\\n8 0",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:2073,Integrability,rout,routine,2073,"97907508368325, 14.64348774617271, 5.123047526116172, 5.01155368471416, 16.99052759399133, 2.9763186475960794, 5.659729745746196], ""name"": ""C6H6N2O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 14.00307400443, 14.00307400443, 15.99491461957, 15.99491461957, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 7, 7, 8, 8, 1, 1], ""mass_numbers"": [12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 14, 14, 16, 16, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenance"": {""creator"": ""QCElemental"", ""version"": ""v0.17.0+7.gf55d5ac.dirty"", ""routine"": ""qcelemental.molparse.from_string""}}, ""driver"": ""energy"", ""model"": {""method"": ""scf"", ""basis"": ""STO-3G""}, ""keywords"": {""d_convergence"": 1e-10, ""e_convergence"": 1e-10, ""pe"": 1, ""pe__potfile"": ""\\n! Generated by PyFraME 0.1.0\\n@COORDINATES\\n18\\nAA\\nO 9.37100000 2.95300000 -6.07800000 1\\nH 8.87200000 2.13400000 -6.04900000 2\\nH 9.87300000 2.94000000 -5.26100000 3\\nO 7.72000000 5.12000000 -5.51900000 4\\nH 7.63800000 5.70400000 -6.27600000 5\\nH 8.29100000 4.41700000 -5.83600000 6\\nO 10.45300000 3.07700000 -3.43400000 7\\nH 9.94500000 3.80300000 -3.06600000 8\\nH 11.35900000 3.30000000 -3.21200000 9\\nO 6.15200000 4.88500000 -1.44700000 10\\nH 5.50700000 5.59100000 -1.36900000 11\\nH 5.89100000 4.42800000 -2.24900000 12\\nO 5.82300000 3.53700000 -3.94100000 13\\nH 6.31400000 2.71500000 -4.01100000 14\\nH 6.27500000 4.12300000 -4.55200000 15\\nO 8.86000000 5.34600000 -2.74900000 16\\nH 8.46500000 5.48700000 -3.61200000 17\\nH 8.10300000 5.25400000 -2.16700000 18\\n@MULTIPOLES\\nOR",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:7008,Integrability,protocol,protocols,7008,"7317 0.16791558 -0.17641064 -0.26949266 -0.21058649 -0.21581787\\n16 -3.76934440 0.01997274 -0.13330175 -4.28009915 -0.16523022 -3.28439494\\n17 -0.34779244 -0.03700706 0.22659090 -0.43533186 -0.07018391 -0.01780670\\n18 -0.08414919 0.04219414 -0.26720999 -0.44242465 -0.02713904 -0.27419185\\n@POLARIZABILITIES\\nORDER 1 1\\n18\\n1 2.30791521 0.59643991 0.58658837 2.61100398 -0.10257978 2.60785108\\n2 1.30711897 0.90889808 -0.14203759 2.23138041 0.03064426 0.56363899\\n3 1.31473738 -0.12335800 0.91322978 0.56426081 0.06343491 2.22049295\\n4 2.07587445 -0.67088756 -0.21506644 2.80527167 -0.31578724 2.64886958\\n5 0.72279353 0.00751649 0.24603845 1.44539448 -1.05520399 1.93525324\\n6 1.51667446 -0.87135876 -0.35833460 1.82612167 0.59796749 0.76044651\\n7 3.17597352 -0.21979725 0.03827106 2.48641276 0.51074529 1.86433465\\n8 1.15711080 -0.91546924 -0.49534521 1.87545624 0.51559151 1.06960779\\n9 2.55558469 0.50338563 0.46922356 0.68876452 -0.02563589 0.85563095\\n10 2.34307583 -0.51517500 0.28388438 2.61854341 0.61181317 2.56593966\\n11 1.63329191 -1.01651663 -0.24252266 1.86507920 0.04484738 0.60387225\\n12 0.76841032 0.41201391 0.40278140 1.14519478 0.81893980 2.18754212\\n13 2.29130369 -0.22262257 -0.50824047 3.08292101 -0.43438854 2.16011928\\n14 1.20133160 -0.94148299 0.07075699 2.22478033 0.20477680 0.68049498\\n15 1.10983723 0.72098321 -0.53040485 1.39825592 -0.82860371 1.59671491\\n16 2.74369667 0.01646994 -0.12367515 1.60703710 -0.26089660 3.17839863\\n17 0.86347479 -0.13575237 0.83717068 0.86374986 -0.25419187 2.37549183\\n18 1.89994613 0.17584219 -1.10556667 0.83549707 -0.08475173 1.36594908\\nEXCLISTS\\n18 3\\n1 2 3\\n2 1 3\\n3 1 2\\n4 5 6\\n5 4 6\\n6 4 5\\n7 8 9\\n8 7 9\\n9 7 8\\n10 11 12\\n11 10 12\\n12 10 11\\n13 14 15\\n14 13 15\\n15 13 14\\n16 17 18\\n17 16 18\\n18 16 17\\n"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1090"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:7124,Integrability,rout,routine,7124,"7317 0.16791558 -0.17641064 -0.26949266 -0.21058649 -0.21581787\\n16 -3.76934440 0.01997274 -0.13330175 -4.28009915 -0.16523022 -3.28439494\\n17 -0.34779244 -0.03700706 0.22659090 -0.43533186 -0.07018391 -0.01780670\\n18 -0.08414919 0.04219414 -0.26720999 -0.44242465 -0.02713904 -0.27419185\\n@POLARIZABILITIES\\nORDER 1 1\\n18\\n1 2.30791521 0.59643991 0.58658837 2.61100398 -0.10257978 2.60785108\\n2 1.30711897 0.90889808 -0.14203759 2.23138041 0.03064426 0.56363899\\n3 1.31473738 -0.12335800 0.91322978 0.56426081 0.06343491 2.22049295\\n4 2.07587445 -0.67088756 -0.21506644 2.80527167 -0.31578724 2.64886958\\n5 0.72279353 0.00751649 0.24603845 1.44539448 -1.05520399 1.93525324\\n6 1.51667446 -0.87135876 -0.35833460 1.82612167 0.59796749 0.76044651\\n7 3.17597352 -0.21979725 0.03827106 2.48641276 0.51074529 1.86433465\\n8 1.15711080 -0.91546924 -0.49534521 1.87545624 0.51559151 1.06960779\\n9 2.55558469 0.50338563 0.46922356 0.68876452 -0.02563589 0.85563095\\n10 2.34307583 -0.51517500 0.28388438 2.61854341 0.61181317 2.56593966\\n11 1.63329191 -1.01651663 -0.24252266 1.86507920 0.04484738 0.60387225\\n12 0.76841032 0.41201391 0.40278140 1.14519478 0.81893980 2.18754212\\n13 2.29130369 -0.22262257 -0.50824047 3.08292101 -0.43438854 2.16011928\\n14 1.20133160 -0.94148299 0.07075699 2.22478033 0.20477680 0.68049498\\n15 1.10983723 0.72098321 -0.53040485 1.39825592 -0.82860371 1.59671491\\n16 2.74369667 0.01646994 -0.12367515 1.60703710 -0.26089660 3.17839863\\n17 0.86347479 -0.13575237 0.83717068 0.86374986 -0.25419187 2.37549183\\n18 1.89994613 0.17584219 -1.10556667 0.83549707 -0.08475173 1.36594908\\nEXCLISTS\\n18 3\\n1 2 3\\n2 1 3\\n3 1 2\\n4 5 6\\n5 4 6\\n6 4 5\\n7 8 9\\n8 7 9\\n9 7 8\\n10 11 12\\n11 10 12\\n12 10 11\\n13 14 15\\n14 13 15\\n15 13 14\\n16 17 18\\n17 16 18\\n18 16 17\\n"", ""scf_type"": ""PK""}, ""protocols"": {}, ""extras"": {""wfn_qcvars_only"": true}, ""provenance"": {""creator"": ""Psi4"", ""version"": ""1.4a2.dev1090"", ""routine"": ""psi4.driver.p4util.procutil""}}""""""",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:141,Security,validat,validated,141,"""""""{""id"": null, ""schema_name"": ""qcschema_input"", ""schema_version"": 1, ""molecule"": {""schema_name"": ""qcschema_molecule"", ""schema_version"": 2, ""validated"": true, ""symbols"": [""C"", ""C"", ""C"", ""C"", ""C"", ""C"", ""H"", ""H"", ""H"", ""H"", ""N"", ""N"", ""O"", ""O"", ""H"", ""H""], ""geometry"": [16.3423515329593, 2.031455584867165, -3.233321400658344, 17.918383121591127, 0.8125822339468661, -1.5268987093699253, 17.755866674801755, 1.417294594093371, 1.0166726554963117, 16.028656996133297, 3.2352111267838017, 1.880277494830539, 14.462074038128758, 4.431407764198608, 0.10393493690018055, 14.611362402039928, 3.838033760804849, -2.441526154091514, 19.243081135537064, -0.5839253727664689, -2.1996412100329117, 18.980409204098425, 0.4762109836153727, 2.356488478445912, 13.118478762928243, 5.837364001539231, 0.7351034628030951, 13.411386312374207, 4.752661205526438, -3.813467321173897, 15.875589179971215, 3.826695404052102, 4.393613241689451, 16.50486797974867, 1.4002870589642507, -5.912953046557544, 15.08001448115347, 2.515225472984369, -7.371821615410987, 18.058222854875005, -0.2078698738003611, -6.5497907508368325, 14.64348774617271, 5.123047526116172, 5.01155368471416, 16.99052759399133, 2.9763186475960794, 5.659729745746196], ""name"": ""C6H6N2O2"", ""molecular_charge"": 0.0, ""molecular_multiplicity"": 1, ""masses"": [12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 1.00782503223, 1.00782503223, 1.00782503223, 1.00782503223, 14.00307400443, 14.00307400443, 15.99491461957, 15.99491461957, 1.00782503223, 1.00782503223], ""real"": [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], ""atom_labels"": ["""", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """"], ""atomic_numbers"": [6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 7, 7, 8, 8, 1, 1], ""mass_numbers"": [12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 14, 14, 16, 16, 1, 1], ""fragments"": [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], ""fragment_charges"": [0.0], ""fragment_multiplicities"": [1], ""fix_com"": false, ""fix_orientation"": false, ""provenan",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1148,Energy Efficiency,energy,energy,1148,"#@pytest.mark.smoke; #@uusing(""cct3""); #def test_cct3():; # import cct3; #; # psi4.geometry(""""""; # units bohr; # h -2.514213562373 -1.000000000000 0.000000000000; # h -2.514213562373 1.000000000000 0.000000000000; # h 2.514213562373 -1.000000000000 0.000000000000; # h 2.514213562373 1.000000000000 0.000000000000; # h -1.000000000000 -2.414213562373 0.000000000000; # h -1.000000000000 2.414213562373 0.000000000000; # h 1.000000000000 -2.414213562373 0.000000000000; # h 1.000000000000 2.414213562373 0.000000000000; # symmetry d2h; # """"""); #; # def basisspec_psi4_yo__anonymous1234(mol, role):; # bas = """"""; # cartesian; # ****; # H 0; # S 3 1.0000; # 4.50038 0.0704800; # 0.681277 0.407890; # 0.151374 0.647670; # ****; # """"""; # mol.set_basis_all_atoms(""mbs_my"", role=role); # return {""mbs_my"": bas}; #; # psi4.driver.qcdb.libmintsbasisset.basishorde[""ANONYMOUS1234""] = basisspec_psi4_yo__anonymous1234; #; # psi4.set_options({; # ""cct3__froz"": 0,; # ""cct3__act_occ"": 1,; # ""cct3__act_unocc"": 1,; # ""cct3__etol"": 16,; # ""cct3__calc_type"": ""cct3"",; # ""basis"": ""anonymous1234"",; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # ene = psi4.energy(""cct3""); # assert psi4.compare_values(-4.220587742726, ene, 10, ""cc(t;3) energy""); #",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1383,Energy Efficiency,energy,energy,1383,"#@pytest.mark.smoke; #@uusing(""cct3""); #def test_cct3():; # import cct3; #; # psi4.geometry(""""""; # units bohr; # h -2.514213562373 -1.000000000000 0.000000000000; # h -2.514213562373 1.000000000000 0.000000000000; # h 2.514213562373 -1.000000000000 0.000000000000; # h 2.514213562373 1.000000000000 0.000000000000; # h -1.000000000000 -2.414213562373 0.000000000000; # h -1.000000000000 2.414213562373 0.000000000000; # h 1.000000000000 -2.414213562373 0.000000000000; # h 1.000000000000 2.414213562373 0.000000000000; # symmetry d2h; # """"""); #; # def basisspec_psi4_yo__anonymous1234(mol, role):; # bas = """"""; # cartesian; # ****; # H 0; # S 3 1.0000; # 4.50038 0.0704800; # 0.681277 0.407890; # 0.151374 0.647670; # ****; # """"""; # mol.set_basis_all_atoms(""mbs_my"", role=role); # return {""mbs_my"": bas}; #; # psi4.driver.qcdb.libmintsbasisset.basishorde[""ANONYMOUS1234""] = basisspec_psi4_yo__anonymous1234; #; # psi4.set_options({; # ""cct3__froz"": 0,; # ""cct3__act_occ"": 1,; # ""cct3__act_unocc"": 1,; # ""cct3__etol"": 16,; # ""cct3__calc_type"": ""cct3"",; # ""basis"": ""anonymous1234"",; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # ene = psi4.energy(""cct3""); # assert psi4.compare_values(-4.220587742726, ene, 10, ""cc(t;3) energy""); #",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1463,Energy Efficiency,energy,energy,1463,"#@pytest.mark.smoke; #@uusing(""cct3""); #def test_cct3():; # import cct3; #; # psi4.geometry(""""""; # units bohr; # h -2.514213562373 -1.000000000000 0.000000000000; # h -2.514213562373 1.000000000000 0.000000000000; # h 2.514213562373 -1.000000000000 0.000000000000; # h 2.514213562373 1.000000000000 0.000000000000; # h -1.000000000000 -2.414213562373 0.000000000000; # h -1.000000000000 2.414213562373 0.000000000000; # h 1.000000000000 -2.414213562373 0.000000000000; # h 1.000000000000 2.414213562373 0.000000000000; # symmetry d2h; # """"""); #; # def basisspec_psi4_yo__anonymous1234(mol, role):; # bas = """"""; # cartesian; # ****; # H 0; # S 3 1.0000; # 4.50038 0.0704800; # 0.681277 0.407890; # 0.151374 0.647670; # ****; # """"""; # mol.set_basis_all_atoms(""mbs_my"", role=role); # return {""mbs_my"": bas}; #; # psi4.driver.qcdb.libmintsbasisset.basishorde[""ANONYMOUS1234""] = basisspec_psi4_yo__anonymous1234; #; # psi4.set_options({; # ""cct3__froz"": 0,; # ""cct3__act_occ"": 1,; # ""cct3__act_unocc"": 1,; # ""cct3__etol"": 16,; # ""cct3__calc_type"": ""cct3"",; # ""basis"": ""anonymous1234"",; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # ene = psi4.energy(""cct3""); # assert psi4.compare_values(-4.220587742726, ene, 10, ""cc(t;3) energy""); #",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1317,Performance,load,loads,1317,"#@pytest.mark.smoke; #@uusing(""cct3""); #def test_cct3():; # import cct3; #; # psi4.geometry(""""""; # units bohr; # h -2.514213562373 -1.000000000000 0.000000000000; # h -2.514213562373 1.000000000000 0.000000000000; # h 2.514213562373 -1.000000000000 0.000000000000; # h 2.514213562373 1.000000000000 0.000000000000; # h -1.000000000000 -2.414213562373 0.000000000000; # h -1.000000000000 2.414213562373 0.000000000000; # h 1.000000000000 -2.414213562373 0.000000000000; # h 1.000000000000 2.414213562373 0.000000000000; # symmetry d2h; # """"""); #; # def basisspec_psi4_yo__anonymous1234(mol, role):; # bas = """"""; # cartesian; # ****; # H 0; # S 3 1.0000; # 4.50038 0.0704800; # 0.681277 0.407890; # 0.151374 0.647670; # ****; # """"""; # mol.set_basis_all_atoms(""mbs_my"", role=role); # return {""mbs_my"": bas}; #; # psi4.driver.qcdb.libmintsbasisset.basishorde[""ANONYMOUS1234""] = basisspec_psi4_yo__anonymous1234; #; # psi4.set_options({; # ""cct3__froz"": 0,; # ""cct3__act_occ"": 1,; # ""cct3__act_unocc"": 1,; # ""cct3__etol"": 16,; # ""cct3__calc_type"": ""cct3"",; # ""basis"": ""anonymous1234"",; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # ene = psi4.energy(""cct3""); # assert psi4.compare_values(-4.220587742726, ene, 10, ""cc(t;3) energy""); #",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1254,Testability,assert,assert,1254,"#@pytest.mark.smoke; #@uusing(""cct3""); #def test_cct3():; # import cct3; #; # psi4.geometry(""""""; # units bohr; # h -2.514213562373 -1.000000000000 0.000000000000; # h -2.514213562373 1.000000000000 0.000000000000; # h 2.514213562373 -1.000000000000 0.000000000000; # h 2.514213562373 1.000000000000 0.000000000000; # h -1.000000000000 -2.414213562373 0.000000000000; # h -1.000000000000 2.414213562373 0.000000000000; # h 1.000000000000 -2.414213562373 0.000000000000; # h 1.000000000000 2.414213562373 0.000000000000; # symmetry d2h; # """"""); #; # def basisspec_psi4_yo__anonymous1234(mol, role):; # bas = """"""; # cartesian; # ****; # H 0; # S 3 1.0000; # 4.50038 0.0704800; # 0.681277 0.407890; # 0.151374 0.647670; # ****; # """"""; # mol.set_basis_all_atoms(""mbs_my"", role=role); # return {""mbs_my"": bas}; #; # psi4.driver.qcdb.libmintsbasisset.basishorde[""ANONYMOUS1234""] = basisspec_psi4_yo__anonymous1234; #; # psi4.set_options({; # ""cct3__froz"": 0,; # ""cct3__act_occ"": 1,; # ""cct3__act_unocc"": 1,; # ""cct3__etol"": 16,; # ""cct3__calc_type"": ""cct3"",; # ""basis"": ""anonymous1234"",; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # ene = psi4.energy(""cct3""); # assert psi4.compare_values(-4.220587742726, ene, 10, ""cc(t;3) energy""); #",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py:1401,Testability,assert,assert,1401,"#@pytest.mark.smoke; #@uusing(""cct3""); #def test_cct3():; # import cct3; #; # psi4.geometry(""""""; # units bohr; # h -2.514213562373 -1.000000000000 0.000000000000; # h -2.514213562373 1.000000000000 0.000000000000; # h 2.514213562373 -1.000000000000 0.000000000000; # h 2.514213562373 1.000000000000 0.000000000000; # h -1.000000000000 -2.414213562373 0.000000000000; # h -1.000000000000 2.414213562373 0.000000000000; # h 1.000000000000 -2.414213562373 0.000000000000; # h 1.000000000000 2.414213562373 0.000000000000; # symmetry d2h; # """"""); #; # def basisspec_psi4_yo__anonymous1234(mol, role):; # bas = """"""; # cartesian; # ****; # H 0; # S 3 1.0000; # 4.50038 0.0704800; # 0.681277 0.407890; # 0.151374 0.647670; # ****; # """"""; # mol.set_basis_all_atoms(""mbs_my"", role=role); # return {""mbs_my"": bas}; #; # psi4.driver.qcdb.libmintsbasisset.basishorde[""ANONYMOUS1234""] = basisspec_psi4_yo__anonymous1234; #; # psi4.set_options({; # ""cct3__froz"": 0,; # ""cct3__act_occ"": 1,; # ""cct3__act_unocc"": 1,; # ""cct3__etol"": 16,; # ""cct3__calc_type"": ""cct3"",; # ""basis"": ""anonymous1234"",; # }); #; ## atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); ## print(f' jatin = """"""{atin.serialize(""json"")}""""""'); ## assert 0; ##; ## atres = psi4.schema_wrapper.run_qcschema(json.loads(jatin)); ## pprint.pprint(atres.dict()); #; #; # ene = psi4.energy(""cct3""); # assert psi4.compare_values(-4.220587742726, ene, 10, ""cc(t;3) energy""); #",MatchSource.CODE_COMMENT,tests/pytests/test_addons_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_addons_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_composite.py:49,Modifiability,variab,variable,49,"#ADD VAR assert compare_values(-0.06148737, psi4.variable(""CBS CORL ENERGY""), 7, ""corl mp2 q5"")",MatchSource.CODE_COMMENT,tests/pytests/test_composite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_composite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_composite.py:9,Testability,assert,assert,9,"#ADD VAR assert compare_values(-0.06148737, psi4.variable(""CBS CORL ENERGY""), 7, ""corl mp2 q5"")",MatchSource.CODE_COMMENT,tests/pytests/test_composite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_composite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_composite.py:86,Testability,test,test,86,"# 5 tasks: (t)/tz, (t)/qz, (t)/5z, t/tz, t(q)/dz; # lowering the basis sets keeps the test within packaged L2's AM bounds",MatchSource.CODE_COMMENT,tests/pytests/test_composite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_composite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py:23,Energy Efficiency,energy,energy,23,"# does the DFJCOSK SCF energy match a pre-computed reference?",MatchSource.CODE_COMMENT,tests/pytests/test_compositejk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py:21,Energy Efficiency,energy,energy,21,"# is the DFJCOSK SCF energy reasonably close to a conventional SCF?",MatchSource.CODE_COMMENT,tests/pytests/test_compositejk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py:18,Energy Efficiency,energy,energy,18,"# compute DFJCOSK energy+wfn without IncFock ",MatchSource.CODE_COMMENT,tests/pytests/test_compositejk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py:81,Energy Efficiency,energy,energy,81,"#assert compare_values(inp[""ref""], energy_dfjcosk, atol=1e-6); # compute DFJCOSK energy+wfn with Incfock ",MatchSource.CODE_COMMENT,tests/pytests/test_compositejk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py:1,Testability,assert,assert,1,"#assert compare_values(inp[""ref""], energy_dfjcosk, atol=1e-6); # compute DFJCOSK energy+wfn with Incfock ",MatchSource.CODE_COMMENT,tests/pytests/test_compositejk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py:7,Modifiability,extend,extended,7,"#to be extended in the future",MatchSource.CODE_COMMENT,tests/pytests/test_compositejk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py:7,Modifiability,extend,extended,7,"#to be extended in the future",MatchSource.CODE_COMMENT,tests/pytests/test_compositejk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py:135,Availability,toler,tolerance,135,"""""""Test SCF_TYPE={J} and all SCF_TYPE={J}+{K} combinations for a BP86 calculation.; They should all give the exact same answer (within tolerance).""""""",MatchSource.CODE_COMMENT,tests/pytests/test_compositejk.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_compositejk.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_comprehensive_jk_screening.py:14,Energy Efficiency,energy,energy,14,"""""""Checks the energy values computed by different JK methods using different; screening types. The differences in energies should be insignificant.""""""",MatchSource.CODE_COMMENT,tests/pytests/test_comprehensive_jk_screening.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_comprehensive_jk_screening.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_comprehensive_jk_screening.py:9,Availability,redundant,redundant,9,"#== skip redundant option combinations based on type/subtype combination ==# ",MatchSource.CODE_COMMENT,tests/pytests/test_comprehensive_jk_screening.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_comprehensive_jk_screening.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_comprehensive_jk_screening.py:9,Safety,redund,redundant,9,"#== skip redundant option combinations based on type/subtype combination ==# ",MatchSource.CODE_COMMENT,tests/pytests/test_comprehensive_jk_screening.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_comprehensive_jk_screening.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_comprehensive_jk_screening.py:15,Testability,test,test,15,"#== otherwise, test if current option combo gives right answer ==#",MatchSource.CODE_COMMENT,tests/pytests/test_comprehensive_jk_screening.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_comprehensive_jk_screening.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py:23,Energy Efficiency,energy,energy,23,"""""""; Tests COSMO / LPB energy against reference from Gaussian; and internal consistency of Fock matrix versus the energy.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_ddx.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py:114,Energy Efficiency,energy,energy,114,"""""""; Tests COSMO / LPB energy against reference from Gaussian; and internal consistency of Fock matrix versus the energy.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_ddx.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py:26,Testability,test,test,26,"# build the DDX object to test",MatchSource.CODE_COMMENT,tests/pytests/test_ddx.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py:41,Testability,test,tests,41,"# PCMsolver reference values, same as in tests/pcmsolver/tdscf",MatchSource.CODE_COMMENT,tests/pytests/test_ddx.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py:12,Testability,test,test,12,"# Reference test against Gaussian",MatchSource.CODE_COMMENT,tests/pytests/test_ddx.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_ddx.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dertype.py:123,Availability,error,error,123,"#((""properties"", ""hf"", 2)), # todo: does not raise b/c prop not in hierarchical sequence. investigate whether should force error.",MatchSource.CODE_COMMENT,tests/pytests/test_dertype.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dertype.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_benchmarks.py:130,Energy Efficiency,energy,energy,130,"# Current version of Psi4 does not match Q-Chem for these tests; #expected_fail_qchem = ['B97-D', 'wB97X-D3'] #TEST; # ionization energy references from an older version of Psi4 (~April 2017, SHA: 53e752c)",MatchSource.CODE_COMMENT,tests/pytests/test_dft_benchmarks.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_benchmarks.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_benchmarks.py:58,Testability,test,tests,58,"# Current version of Psi4 does not match Q-Chem for these tests; #expected_fail_qchem = ['B97-D', 'wB97X-D3'] #TEST; # ionization energy references from an older version of Psi4 (~April 2017, SHA: 53e752c)",MatchSource.CODE_COMMENT,tests/pytests/test_dft_benchmarks.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_benchmarks.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_benchmarks.py:14,Energy Efficiency,energy,energy,14,"# interaction energy references from an older version of Psi4 (~April 2017, SHA: 53e752c)",MatchSource.CODE_COMMENT,tests/pytests/test_dft_benchmarks.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_benchmarks.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_blocking.py:16,Energy Efficiency,energy,energy,16,"""""""calculate XC energy per atom with psi4numpy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_dft_blocking.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_blocking.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_blocking.py:17,Energy Efficiency,energy,energy,17,"# Compute the XC energy",MatchSource.CODE_COMMENT,tests/pytests/test_dft_blocking.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dft_blocking.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dipoles.py:120,Energy Efficiency,energy,energy,120,"# TODO: That ""true"" needs to be a string is silly. Convert it to a boolean when you can do that without incurring a NaN energy.",MatchSource.CODE_COMMENT,tests/pytests/test_dipoles.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_dipoles.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_elec_fields.py:15,Testability,test,tests,15,"""""""; This file tests electric_field_value and induction_operator; agains the canonical electric_field integral evaluation; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_elec_fields.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_elec_fields.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_erisieve.py:37,Energy Efficiency,energy,energy,37,"""""""Checks difference in Hartree-Fock energy between Schwarz screening and CSAM screening, which should be; insignificant. """"""",MatchSource.CODE_COMMENT,tests/pytests/test_erisieve.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_erisieve.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_erisieve.py:37,Energy Efficiency,energy,energy,37,"""""""Checks difference in Hartree-Fock energy between Schwarz and Density screening (with and without IFB), ; which should be insignificant.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_erisieve.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_erisieve.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_erisieve.py:37,Energy Efficiency,energy,energy,37,"""""""Checks difference in Hartree-Fock energy between Schwarz screening and no screening, which should be; insignificant. """"""",MatchSource.CODE_COMMENT,tests/pytests/test_erisieve.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_erisieve.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_f12_ints.py:15,Testability,test,tests,15,"""""""; This file tests the F12 two-electron integrals from libmints; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_f12_ints.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_f12_ints.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fchk_writer.py:135,Availability,avail,available,135,"""""""; from: https://stackoverflow.com/a/29631801; Fixture responsible for searching a folder with the same name of test; module and, if available, moving all contents to a temporary directory so; tests can use them freely.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_fchk_writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fchk_writer.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fchk_writer.py:114,Testability,test,test,114,"""""""; from: https://stackoverflow.com/a/29631801; Fixture responsible for searching a folder with the same name of test; module and, if available, moving all contents to a temporary directory so; tests can use them freely.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_fchk_writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fchk_writer.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fchk_writer.py:195,Testability,test,tests,195,"""""""; from: https://stackoverflow.com/a/29631801; Fixture responsible for searching a folder with the same name of test; module and, if available, moving all contents to a temporary directory so; tests can use them freely.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_fchk_writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fchk_writer.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fcidump_energy.py:32,Energy Efficiency,energy,energy,32,"""""""Compare FCIDUMP computed SCF energy against call to energy()""""""",MatchSource.CODE_COMMENT,tests/pytests/test_fcidump_energy.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fcidump_energy.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fcidump_energy.py:55,Energy Efficiency,energy,energy,55,"""""""Compare FCIDUMP computed SCF energy against call to energy()""""""",MatchSource.CODE_COMMENT,tests/pytests/test_fcidump_energy.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fcidump_energy.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fcidump_energy.py:32,Energy Efficiency,energy,energy,32,"""""""Compare FCIDUMP computed MP2 energy against call to energy()""""""",MatchSource.CODE_COMMENT,tests/pytests/test_fcidump_energy.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fcidump_energy.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fcidump_energy.py:55,Energy Efficiency,energy,energy,55,"""""""Compare FCIDUMP computed MP2 energy against call to energy()""""""",MatchSource.CODE_COMMENT,tests/pytests/test_fcidump_energy.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_fcidump_energy.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_geometric.py:15,Performance,optimiz,optimization,15,"""""""Constrained optimization of the square water molecule""""""",MatchSource.CODE_COMMENT,tests/pytests/test_geometric.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_geometric.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_gradients.py:120,Energy Efficiency,energy,energy,120,"# TODO: That ""true"" needs to be a string is silly. Convert it to a boolean when you can do that without incurring a NaN energy.",MatchSource.CODE_COMMENT,tests/pytests/test_gradients.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_gradients.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_jkmemory.py:7,Testability,test,tests,7,"# pvdz tests",MatchSource.CODE_COMMENT,tests/pytests/test_jkmemory.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_jkmemory.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_jkmemory.py:5,Testability,test,tests,5,"# 5z tests",MatchSource.CODE_COMMENT,tests/pytests/test_jkmemory.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_jkmemory.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py:551,Testability,test,test,551,"""""""Generate the result of a doublet operation. This function computes op(A) x op(B) by:; -> Loop over blocks of C (i_c):; 1. Determine which block of A (i_a) is needed; 2. Determine which block of B (i_b) is needed; 3. Compute: C[i_c] = op(A[i_a]) x op(B[i_b]). This a bit different than the code in `Matrix::gemm` which does:; -> Loop over Blocks of A (i_a); 1. Determine which block of B (i_b) is needed; 2. Determine which block of C (i_c) is the target; 3. C[i_c] = op(A[i_a]) x op(B[i_b]). I chose to work out how to do it both ways so that this test is a bit; stronger than just saying see I translated the function into python and both give the same result.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_matrix.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py:2,Testability,assert,assert,2,"# assert op_a_c == op_b_r, ""block matmul: col(op(A)) != row(op(B)) [A: {}x{} op:{}] [B: {}x{} op:{}]"".format(a.rowspi(a)",MatchSource.CODE_COMMENT,tests/pytests/test_matrix.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py:2,Testability,assert,assert,2,"# assert op_a_r == c_blk_r, ""block matmul: row(op(A)) != row(C)""; # assert op_b_c == c_blk_c, ""block matmul: col(op(B)) != col(C)""",MatchSource.CODE_COMMENT,tests/pytests/test_matrix.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py:68,Testability,assert,assert,68,"# assert op_a_r == c_blk_r, ""block matmul: row(op(A)) != row(C)""; # assert op_b_c == c_blk_c, ""block matmul: col(op(B)) != col(C)""",MatchSource.CODE_COMMENT,tests/pytests/test_matrix.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py:114,Testability,test,test,114,"# If I try to prebuild the mats I run out of memory very fast, so I build the params, and create the mat w/in the test",MatchSource.CODE_COMMENT,tests/pytests/test_matrix.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_matrix.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py:15,Testability,test,tests,15,"""""""; This file tests one-electron integrals from libmints computed with; the McMurchie-Davidson scheme; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_mcmurchie_davidson.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py:49,Integrability,interface,interface,49,"# overlap integrals not accessible via multipole interface",MatchSource.CODE_COMMENT,tests/pytests/test_mcmurchie_davidson.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py:24,Security,access,accessible,24,"# overlap integrals not accessible via multipole interface",MatchSource.CODE_COMMENT,tests/pytests/test_mcmurchie_davidson.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py:2,Testability,test,test,2,"# test against finite differences",MatchSource.CODE_COMMENT,tests/pytests/test_mcmurchie_davidson.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py:2,Testability,test,test,2,"# test that we get the same result from the 'hard-wired' dipole_grad",MatchSource.CODE_COMMENT,tests/pytests/test_mcmurchie_davidson.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mcmurchie_davidson.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mdi.py:17,Energy Efficiency,energy,energy,17,"# Test the final energy",MatchSource.CODE_COMMENT,tests/pytests/test_mdi.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mdi.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_misc.py:6,Energy Efficiency,energy,energy,6,"#psi4.energy(psi4.driver.driver_cbs.complete_basis_set, scf_basis='cc-pvdz')",MatchSource.CODE_COMMENT,tests/pytests/test_misc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_misc.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_misc.py:39,Availability,error,error,39,"# <<< TODO Deprecated! Delete when the error messages are removed. >>>",MatchSource.CODE_COMMENT,tests/pytests/test_misc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_misc.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_misc.py:45,Integrability,message,messages,45,"# <<< TODO Deprecated! Delete when the error messages are removed. >>>",MatchSource.CODE_COMMENT,tests/pytests/test_misc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_misc.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_misc.py:6,Availability,error,errors,6,"# The errors trapped below are C-side, so they're nameless, Py-side.",MatchSource.CODE_COMMENT,tests/pytests/test_misc.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_misc.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_molden_writer.py:135,Availability,avail,available,135,"""""""; from: https://stackoverflow.com/a/29631801; Fixture responsible for searching a folder with the same name of test; module and, if available, moving all contents to a temporary directory so; tests can use them freely.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_molden_writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_molden_writer.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_molden_writer.py:114,Testability,test,test,114,"""""""; from: https://stackoverflow.com/a/29631801; Fixture responsible for searching a folder with the same name of test; module and, if available, moving all contents to a temporary directory so; tests can use them freely.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_molden_writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_molden_writer.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_molden_writer.py:195,Testability,test,tests,195,"""""""; from: https://stackoverflow.com/a/29631801; Fixture responsible for searching a folder with the same name of test; module and, if available, moving all contents to a temporary directory so; tests can use them freely.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_molden_writer.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_molden_writer.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py:13,Testability,test,testing,13,"# simplifies testing logic",MatchSource.CODE_COMMENT,tests/pytests/test_mp2d.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py:21,Testability,log,logic,21,"# simplifies testing logic",MatchSource.CODE_COMMENT,tests/pytests/test_mp2d.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py:2,Usability,simpl,simplifies,2,"# simplifies testing logic",MatchSource.CODE_COMMENT,tests/pytests/test_mp2d.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py:26,Modifiability,variab,variables,26,"#for pv, pvv in psi4.core.variables().items():; # print('CORE -- ', pv, pvv); #for pv, pvv in wfn.variables().items():; # print('WFN -- ', pv, pvv)",MatchSource.CODE_COMMENT,tests/pytests/test_mp2d.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py:98,Modifiability,variab,variables,98,"#for pv, pvv in psi4.core.variables().items():; # print('CORE -- ', pv, pvv); #for pv, pvv in wfn.variables().items():; # print('WFN -- ', pv, pvv)",MatchSource.CODE_COMMENT,tests/pytests/test_mp2d.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py:210,Modifiability,variab,variable,210,"## apparently not widespread; #if inp['driver'] == 'gradient':; # for qcvar in [inp['pv'] + ' TOTAL GRADIENT',; # 'CURRENT GRADIENT']:; # assert compare_values(ref[basisset][inp['pv'] + ' TOTAL GRADIENT'], obj.variable(qcvar), 10, basisset + "" "" + qcvar)",MatchSource.CODE_COMMENT,tests/pytests/test_mp2d.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py:138,Testability,assert,assert,138,"## apparently not widespread; #if inp['driver'] == 'gradient':; # for qcvar in [inp['pv'] + ' TOTAL GRADIENT',; # 'CURRENT GRADIENT']:; # assert compare_values(ref[basisset][inp['pv'] + ' TOTAL GRADIENT'], obj.variable(qcvar), 10, basisset + "" "" + qcvar)",MatchSource.CODE_COMMENT,tests/pytests/test_mp2d.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_mp2d.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_multipole_potential.py:15,Testability,test,tests,15,"""""""; This file tests the ao_multipole_potential integrals; using finite differences; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_multipole_potential.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_multipole_potential.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_nbody_multi_level_qcschema.py:42,Energy Efficiency,energy,energy,42,"#! Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015))",MatchSource.CODE_COMMENT,tests/pytests/test_nbody_multi_level_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_nbody_multi_level_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_nbody_multi_level_qcschema.py:57,Energy Efficiency,energy,energy,57,"# Compute electrostatically embedded many-body expansion energy.with TIP3P charges",MatchSource.CODE_COMMENT,tests/pytests/test_nbody_multi_level_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_nbody_multi_level_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_nbody_multi_level_qcschema.py:75,Energy Efficiency,charge,charges,75,"# Compute electrostatically embedded many-body expansion energy.with TIP3P charges",MatchSource.CODE_COMMENT,tests/pytests/test_nbody_multi_level_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_nbody_multi_level_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_np_views.py:59,Security,access,accessing,59,"""""""; This is a simple script that verifies several ways of accessing numpy arrays; and ensures that their memory is properly cleaned.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_np_views.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_np_views.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_np_views.py:15,Usability,simpl,simple,15,"""""""; This is a simple script that verifies several ways of accessing numpy arrays; and ensures that their memory is properly cleaned.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_np_views.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_np_views.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_option.py:11,Energy Efficiency,energy,energy,11,"""""""tu1-h2o-energy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_option.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_option.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_optking.py:109,Testability,test,tests,109,""""""" Test keyword passing implicitly and explicitly through optking. Test appropriate molecule setting. These tests are also; run in Optking's pytest suite. They are included here as an example of running optking through PsiAPI """"""",MatchSource.CODE_COMMENT,tests/pytests/test_optking.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_optking.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_optking.py:39,Performance,optimiz,optimizations,39,""""""" frozen, ranged, and external force optimizations """"""",MatchSource.CODE_COMMENT,tests/pytests/test_optking.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_optking.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py:11,Energy Efficiency,energy,energy,11,"""""""tu1-h2o-energy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py:33,Performance,optimiz,optimization,33,"#! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule",MatchSource.CODE_COMMENT,tests/pytests/test_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py:18,Energy Efficiency,energy,energy,18,"#! CASSCF/6-31G** energy point",MatchSource.CODE_COMMENT,tests/pytests/test_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py:82,Energy Efficiency,energy,energy,82,"#! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.",MatchSource.CODE_COMMENT,tests/pytests/test_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py:62,Energy Efficiency,energy,energy,62,"#! SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF; #! and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates.",MatchSource.CODE_COMMENT,tests/pytests/test_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py:27,Testability,test,test,27,"# this molecule will crash test if molecule passing broken",MatchSource.CODE_COMMENT,tests/pytests/test_psi4.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:159,Energy Efficiency,energy,energy,159,"# Generating; # * equivalent to test_psi4. copy over the job, then run below to generate atomicinput; # atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); # print(f' jatin = """"""{atin.serialize(""json"")}""""""'); # assert 0; # * switch to json running; # atres = psi4.schema_wrapper.run_qcschema(jatin); # pprint.pprint(atres.dict())",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:263,Testability,assert,assert,263,"# Generating; # * equivalent to test_psi4. copy over the job, then run below to generate atomicinput; # atin = psi4.driver.p4util.state_to_atomicinput(driver=""energy"", method=""ccsd"", molecule=ethene_ethyne); # print(f' jatin = """"""{atin.serialize(""json"")}""""""'); # assert 0; # * switch to json running; # atres = psi4.schema_wrapper.run_qcschema(jatin); # pprint.pprint(atres.dict())",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:135,Availability,avail,available,135,"""""""; from: https://stackoverflow.com/a/29631801; Fixture responsible for searching a folder with the same name of test; module and, if available, moving all contents to a temporary directory so; tests can use them freely.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:114,Testability,test,test,114,"""""""; from: https://stackoverflow.com/a/29631801; Fixture responsible for searching a folder with the same name of test; module and, if available, moving all contents to a temporary directory so; tests can use them freely.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:195,Testability,test,tests,195,"""""""; from: https://stackoverflow.com/a/29631801; Fixture responsible for searching a folder with the same name of test; module and, if available, moving all contents to a temporary directory so; tests can use them freely.; """"""",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:11,Energy Efficiency,energy,energy,11,"""""""tu1-h2o-energy""""""",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:33,Performance,optimiz,optimization,33,"#! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:7,Performance,optimiz,optimize,7,"# psi4.optimize('ccsd')",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:18,Energy Efficiency,energy,energy,18,"#! CASSCF/6-31G** energy point",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:82,Energy Efficiency,energy,energy,82,"#! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py:62,Energy Efficiency,energy,energy,62,"#! SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF; #! and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates.; # TODO: add `""extras"": {""wfn_qcvars_only"": true}` when SAPT stored on wfn properly",MatchSource.CODE_COMMENT,tests/pytests/test_psi4_qcschema.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_psi4_qcschema.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_qcfractal.py:20,Testability,test,test,20,"# << pk >> (just to test options passing works); #psi4.set_options({""scf_type"": ""pk""}) #, ""e_convergence"": 10, ""d_convergence"": 9}); #ref_ene = -5.725227008286358; #ref_grad = [[-7.01014982e-07, 0.0, 0.0], [ 7.01014982e-07, 0.0, 0.0]]; # << df >>",MatchSource.CODE_COMMENT,tests/pytests/test_qcfractal.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_qcfractal.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_qcng_dftd3_mp2d.py:1,Testability,assert,assert,1,"#assert len(jrec['extras']['qcvars']) == 8",MatchSource.CODE_COMMENT,tests/pytests/test_qcng_dftd3_mp2d.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_qcng_dftd3_mp2d.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:28,Testability,log,logging,28,"# Don't assault stdout with logging",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:28,Testability,log,logging,28,"# Don't assault stdout with logging",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:50,Energy Efficiency,reduce,reduced,50,"# compute the reference values, Use the partially reduced non-hermitian form of the problem, solve for RH-eigenvectors",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:28,Testability,log,logging,28,"# Don't assault stdout with logging",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:28,Testability,log,logging,28,"# Don't assault stdout with logging",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:28,Testability,log,logging,28,"# Don't assault stdout with logging",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:50,Energy Efficiency,reduce,reduced,50,"# compute the reference values, Use the partially reduced non-hermitian form of the problem, solve for RH-eigenvectors",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:28,Testability,log,logging,28,"# Don't assault stdout with logging",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:50,Energy Efficiency,reduce,reduced,50,"# compute the reference values, Use the partially reduced non-hermitian form of the problem, solve for RH-eigenvectors",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:28,Testability,log,logging,28,"# Don't assault stdout with logging",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py:50,Energy Efficiency,reduce,reduced,50,"# compute the reference values, Use the partially reduced non-hermitian form of the problem, solve for RH-eigenvectors",MatchSource.CODE_COMMENT,tests/pytests/test_solvers.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_solvers.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:771,Availability,error,error,771,"# ADVICE: tests in this file run through methods and check the usual return contracts are fulfilled.; # * tests are arranged by (1) plain methods, then orbital-optimized methods, then DFT methods, (2) method in level-of-theory order, (3) derivative/driver order, (4) ""scftype"", then ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1770,Availability,error,error,1770,"h block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when ana",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1965,Availability,error,error,1965,"h block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when ana",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2168,Availability,redundant,redundant,2168,"# * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when analytic derivatives missing, new dz entries may be needed at qcng standard_suite_ref.py for findif to check against; # * populates the summary, non-module line for each method in the capabilities table and also the single- and double-underline default markers; #; # * it's tempting to parametriz",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2459,Availability,error,error,2459,"+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when analytic derivatives missing, new dz entries may be needed at qcng standard_suite_ref.py for findif to check against; # * populates the summary, non-module line for each method in the capabilities table and also the single- and double-underline default markers; #; # * it's tempting to parametrize and consolidate tests further, but keep in mind that the hard part is managing the differing outcomes (e.g., grd1 vs. grd0); # * note that doing ""good"" things like adding a method (particularly to a select_ function) or fixing a missing QCVariable can cause failures here. that's a feature, not",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:3463,Availability,failure,failures,3463,"f, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when analytic derivatives missing, new dz entries may be needed at qcng standard_suite_ref.py for findif to check against; # * populates the summary, non-module line for each method in the capabilities table and also the single- and double-underline default markers; #; # * it's tempting to parametrize and consolidate tests further, but keep in mind that the hard part is managing the differing outcomes (e.g., grd1 vs. grd0); # * note that doing ""good"" things like adding a method (particularly to a select_ function) or fixing a missing QCVariable can cause failures here. that's a feature, not a bug.",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1168,Energy Efficiency,energy,energy,1168,"en ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actual",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:76,Integrability,contract,contracts,76,"# ADVICE: tests in this file run through methods and check the usual return contracts are fulfilled.; # * tests are arranged by (1) plain methods, then orbital-optimized methods, then DFT methods, (2) method in level-of-theory order, (3) derivative/driver order, (4) ""scftype"", then ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1036,Integrability,rout,routes,1036,"en ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actual",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1293,Integrability,rout,routes,1293,"en ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actual",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1776,Integrability,message,messages,1776,"h block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when ana",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1971,Integrability,message,message,1971,"h block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when ana",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2072,Modifiability,parameteriz,parameterization,2072,"h block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when ana",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:160,Performance,optimiz,optimized,160,"# ADVICE: tests in this file run through methods and check the usual return contracts are fulfilled.; # * tests are arranged by (1) plain methods, then orbital-optimized methods, then DFT methods, (2) method in level-of-theory order, (3) derivative/driver order, (4) ""scftype"", then ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1335,Safety,redund,redundancy,1335,"en ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actual",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2168,Safety,redund,redundant,2168,"# * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when analytic derivatives missing, new dz entries may be needed at qcng standard_suite_ref.py for findif to check against; # * populates the summary, non-module line for each method in the capabilities table and also the single- and double-underline default markers; #; # * it's tempting to parametriz",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:10,Testability,test,tests,10,"# ADVICE: tests in this file run through methods and check the usual return contracts are fulfilled.; # * tests are arranged by (1) plain methods, then orbital-optimized methods, then DFT methods, (2) method in level-of-theory order, (3) derivative/driver order, (4) ""scftype"", then ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:106,Testability,test,tests,106,"# ADVICE: tests in this file run through methods and check the usual return contracts are fulfilled.; # * tests are arranged by (1) plain methods, then orbital-optimized methods, then DFT methods, (2) method in level-of-theory order, (3) derivative/driver order, (4) ""scftype"", then ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:547,Testability,test,testtype,547,"# ADVICE: tests in this file run through methods and check the usual return contracts are fulfilled.; # * tests are arranged by (1) plain methods, then orbital-optimized methods, then DFT methods, (2) method in level-of-theory order, (3) derivative/driver order, (4) ""scftype"", then ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:563,Testability,test,test,563,"# ADVICE: tests in this file run through methods and check the usual return contracts are fulfilled.; # * tests are arranged by (1) plain methods, then orbital-optimized methods, then DFT methods, (2) method in level-of-theory order, (3) derivative/driver order, (4) ""scftype"", then ""module"", then ""default""; # * search sections with `<<<` or scroll for big-letter headers; # * for new big-letter headers, use: http://patorjk.com/software/taag/#p=display&c=bash&f=Soft&t=MP3; # * at best, each method+driver has three `def test_<method>_<driver>_<testtype>(...)` test types:; # * scftype: least important, skip for gradient, write second; # * purpose: check that if user sets a scf_type, corl method either uses it, computes missing integrals files, or raises an helpful error; # * scope: only checks rhf ref and dz basis. also, only conv and df, not cd.; # * a block has single module and type (conv|df). each block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1761,Testability,test,test,1761,"h block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when ana",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2115,Testability,test,test,2115,"h block cycles through the six common scf_type values; #; # * module: most important, write first; # * purpose: check that all routes to computing a method produce the same final result and that all the subcontracts (like storing in wfn and setting reference energy) are fulfilled or excused; # * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when ana",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2223,Testability,test,testing,2223,"# * scope: full scope, so checks three molecule+basis combinations and all analytic/findif routes; # * block count: varies by module redundancy and capability; # * each block fixes: qc_module and corl type and scf_type (>= corl type, so scf+corl combinations among conv+conv, conv+cd, cd+cd, conv+df, cd+df, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when analytic derivatives missing, new dz entries may be needed at qcng standard_suite_ref.py for findif to check against; # * populates the summary, non-module line for each method in the capabilities table and also the single- and double-underline default markers; #; # * it's tempting to parametriz",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:3221,Testability,test,tests,3221,"f, df+df; mixed are optional); # * each block cycles: through up to six ref+aefc combinations; # * implemented combinations should always be present. ae/fc pairs should always be present; # * not-yet-implemented combinations may be present to regression test the error messages or may be skipped; # * checks whether QC values consistent among modules, whether specified ref, types, aefc ran (via QC values), whether specified qc_module ran, whether intended error message thrown; # * populates the module lines for each method in the capabilities table; # * findif parameterization important when setting up test to be sure analytic matches 5-point findif. but redundant for day-to-day, so suppressed by default for testing efficiency. use `pytest --runnonroutine` to actually run them; #; # * default: second-most important, write last; # * purpose: check that if user doesn't set qc_module or doesn't set corl_type, the calc runs or raises a helpful error; # * scope: only checks dz basis; # * block count: four corl type specifications: conv, df, cd, and unspecified; # * each block fixes: corl type; # * each block cycles: through six ref+aefc combinations; # * checks QC values, checks module and type match expectations; # * always 24 pytest.param lines: 4 ""type"" blocks namely conv, df, cd, and unspecified (to catch mp2_type, cc_type, etc.). each block with fc r/u/ro and ae r/u/ro; # * when analytic derivatives missing, new dz entries may be needed at qcng standard_suite_ref.py for findif to check against; # * populates the summary, non-module line for each method in the capabilities table and also the single- and double-underline default markers; #; # * it's tempting to parametrize and consolidate tests further, but keep in mind that the hard part is managing the differing outcomes (e.g., grd1 vs. grd0); # * note that doing ""good"" things like adding a method (particularly to a select_ function) or fixing a missing QCVariable can cause failures here. that's a feature, not a bug.",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:178,Integrability,depend,depending,178,"# yapf: disable; # * tuple is (error_type, string_match_in_error_message, reason_for_human); # * note that 2nd is regex matched, so raw strings and escape chars may be needed; # depending on DDD routing, _p1/_p10/_p29/_p31 can be `psi4.ValidationError` or `qcengine.exceptions.InputError`; # depending on DDD routing, _p17 can be `RuntimeError` or `qcengine.exeptions.UnknownError`",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:195,Integrability,rout,routing,195,"# yapf: disable; # * tuple is (error_type, string_match_in_error_message, reason_for_human); # * note that 2nd is regex matched, so raw strings and escape chars may be needed; # depending on DDD routing, _p1/_p10/_p29/_p31 can be `psi4.ValidationError` or `qcengine.exceptions.InputError`; # depending on DDD routing, _p17 can be `RuntimeError` or `qcengine.exeptions.UnknownError`",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:292,Integrability,depend,depending,292,"# yapf: disable; # * tuple is (error_type, string_match_in_error_message, reason_for_human); # * note that 2nd is regex matched, so raw strings and escape chars may be needed; # depending on DDD routing, _p1/_p10/_p29/_p31 can be `psi4.ValidationError` or `qcengine.exceptions.InputError`; # depending on DDD routing, _p17 can be `RuntimeError` or `qcengine.exeptions.UnknownError`",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:309,Integrability,rout,routing,309,"# yapf: disable; # * tuple is (error_type, string_match_in_error_message, reason_for_human); # * note that 2nd is regex matched, so raw strings and escape chars may be needed; # depending on DDD routing, _p1/_p10/_p29/_p31 can be `psi4.ValidationError` or `qcengine.exceptions.InputError`; # depending on DDD routing, _p17 can be `RuntimeError` or `qcengine.exeptions.UnknownError`",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:20,Availability,avail,available,20,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV (at least for dz uhf/rohf, so skipping for now; # pytest.param({""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf rhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf uhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf rohf cd ae: scf "",),; # yapf: enable",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:260,Availability,error,error,260,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV (at least for dz uhf/rohf, so skipping for now; # pytest.param({""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf rhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf uhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf rohf cd ae: scf "",),; # yapf: enable",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:412,Availability,error,error,412,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV (at least for dz uhf/rohf, so skipping for now; # pytest.param({""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf rhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf uhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf rohf cd ae: scf "",),; # yapf: enable",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:565,Availability,error,error,565,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV (at least for dz uhf/rohf, so skipping for now; # pytest.param({""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf rhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf uhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}}, id=""hf rohf cd ae: scf "",),; # yapf: enable",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:20,Availability,avail,available,20,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV (at least for dz uhf/rohf, so skipping for now; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf rhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf uhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf rohf cd ae: dd "",),; ###### default qc_module, mp2_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:290,Availability,error,error,290,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV (at least for dz uhf/rohf, so skipping for now; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf rhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf uhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf rohf cd ae: dd "",),; ###### default qc_module, mp2_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:473,Availability,error,error,473,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV (at least for dz uhf/rohf, so skipping for now; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf rhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf uhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf rohf cd ae: dd "",),; ###### default qc_module, mp2_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:657,Availability,error,error,657,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV (at least for dz uhf/rohf, so skipping for now; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf rhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf uhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {2: _p10, 1: _p10}, }, id=""hf rohf cd ae: dd "",),; ###### default qc_module, mp2_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:74,Testability,test,test,74,"# yapf: disable; ######## Are scf_types managed properly by proc.py?; # * test ae and sole fc that differs",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### dfmp2",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### dfmp2",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:23,Availability,avail,available,23,"# no analytic Hessians available",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:74,Testability,test,test,74,"# yapf: disable; ######## Are scf_types managed properly by proc.py?; # * test ae and sole fc that differs",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:74,Testability,test,test,74,"# yapf: disable; ######## Are scf_types managed properly by proc.py?; # * test ae and sole fc that differs",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:388,Availability,error,error,388,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rhf conv fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", }, ""error"": {0: _p45}}, id=""fci uhf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rohf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rhf conv ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", }, ""error"": {0: _p45}}, id=""fci uhf conv ae: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:876,Availability,error,error,876,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rhf conv fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", }, ""error"": {0: _p45}}, id=""fci uhf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rohf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rhf conv ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", }, ""error"": {0: _p45}}, id=""fci uhf conv ae: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1212,Availability,error,error,1212,"nce"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rhf conv fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", }, ""error"": {0: _p45}}, id=""fci uhf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rohf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rhf conv ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", }, ""error"": {0: _p45}}, id=""fci uhf conv ae: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pyte",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1364,Availability,error,error,1364,"i_type"": ""conv"", ""freeze_core"": ""true"", }, ""error"": {0: _p45}}, id=""fci uhf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rohf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rhf conv ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", }, ""error"": {0: _p45}}, id=""fci uhf conv ae: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pyte",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1517,Availability,error,error,1517,", ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rohf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rhf conv ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", }, ""error"": {0: _p45}}, id=""fci uhf conv ae: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pyt",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1671,Availability,error,error,1671,"etci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rhf conv ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", }, ""error"": {0: _p45}}, id=""fci uhf conv ae: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf cd ae: dd ""),; # pyte",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1824,Availability,error,error,1824,"ds"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", }, ""error"": {0: _p45}}, id=""fci uhf conv ae: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf cd ae: dd ""),; # pyte",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:1978,Availability,error,error,1978,": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf cd ae: dd ""),; ###### de",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2139,Availability,error,error,2139,"""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf cd ae: dd ""),; ###### default qc_module, ci_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2291,Availability,error,error,2291,"""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf cd ae: dd ""),; ###### default qc_module, ci_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2444,Availability,error,error,2444,"""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf cd ae: dd ""),; ###### default qc_module, ci_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2598,Availability,error,error,2598,"""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf cd ae: dd ""),; ###### default qc_module, ci_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2751,Availability,error,error,2751,"""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf cd ae: dd ""),; ###### default qc_module, ci_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:2905,Availability,error,error,2905,"""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf df ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf cd fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf cd ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""cd"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rohf cd ae: dd ""),; ###### default qc_module, ci_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rhf conv fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", }, ""error"": {0: _p45}}, id=""fci uhf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rohf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rhf conv ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", }, ""error"": {0: _p45}}, id=""fci uhf conv ae: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, ci_type) work?; ###### default qc_module; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rhf conv fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", }, ""error"": {0: _p45}}, id=""fci uhf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""true"", } }, id=""fci rohf conv fc: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci""}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rhf conv ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", }, ""error"": {0: _p45}}, id=""fci uhf conv ae: dd ""),; # pytest.param({""xptd"": {""qc_module"": ""detci"", ""sdsc"": ""sd""}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""conv"", ""freeze_core"": ""false"", } }, id=""fci rohf conv ae: dd ""),; # ####; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci uhf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""true"", }, ""error"": {0: _p43}}, id=""fci rohf df fc: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci rhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""uhf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=""fci uhf df ae: dd ""),; # pytest.param({""xptd"": {}, ""keywords"": {""reference"": ""rohf"", ""ci_type"": ""df"", ""freeze_core"": ""false"", }, ""error"": {0: _p43}}, id=",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:74,Testability,test,test,74,"# yapf: disable; ######## Are scf_types managed properly by proc.py?; # * test ae and sole fc that differs",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ/dfocc",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### ccenergy",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### ccenergy",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:804,Energy Efficiency,energy,energy,804,"# pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""conv"", ""qc_module"": ""ccenergy"", ""freeze_core"": ""false"", ""scf_type"": ""df"", }, }, id=""ccsd rhf df/conv rr ccenergy"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""conv"", ""qc_module"": ""ccenergy"", ""freeze_core"": ""false"", ""scf_type"": ""mem_df"", }, }, id=""ccsd rhf mem/conv rr ccenergy"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""conv"", ""qc_module"": ""ccenergy"", ""freeze_core"": ""false"", ""scf_type"": ""disk_df"",}, }, id=""ccsd rhf disk/conv rr ccenergy"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""conv"", ""qc_module"": ""ccenergy"", ""freeze_core"": ""false"", ""scf_type"": ""cd"", }, }, id=""ccsd rhf cd/conv rr ccenergy"",),; # TODO reconcile dispute over whether df+conv ccsd directive returns df+conv energy (fnocc) or conv+conv energy (ccenergy)",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:832,Energy Efficiency,energy,energy,832,"# pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""conv"", ""qc_module"": ""ccenergy"", ""freeze_core"": ""false"", ""scf_type"": ""df"", }, }, id=""ccsd rhf df/conv rr ccenergy"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""conv"", ""qc_module"": ""ccenergy"", ""freeze_core"": ""false"", ""scf_type"": ""mem_df"", }, }, id=""ccsd rhf mem/conv rr ccenergy"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""conv"", ""qc_module"": ""ccenergy"", ""freeze_core"": ""false"", ""scf_type"": ""disk_df"",}, }, id=""ccsd rhf disk/conv rr ccenergy"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""conv"", ""qc_module"": ""ccenergy"", ""freeze_core"": ""false"", ""scf_type"": ""cd"", }, }, id=""ccsd rhf cd/conv rr ccenergy"",),; # TODO reconcile dispute over whether df+conv ccsd directive returns df+conv energy (fnocc) or conv+conv energy (ccenergy)",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### ccenergy",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### ccenergy",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### ccenergy",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### ccenergy",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:764,Availability,error,error,764,"# yapf: disable; ######## Are scf_types managed properly by proc.py? Generally skip corl_type=cd, so df & conv only.; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""df"", ""qc_module"": ""occ"", ""freeze_core"": ""false"", ""scf_type"": ""pk"", }, }, id=""olccd rhf pk/df rr dfocc"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""df"", ""qc_module"": ""occ"", ""freeze_core"": ""false"", ""scf_type"": ""direct"", }, }, id=""olccd rhf drct/df rr dfocc"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""df"", ""qc_module"": ""occ"", ""freeze_core"": ""false"", ""scf_type"": ""df"", }, }, id=""olccd rhf df/df rr dfocc"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""df"", ""qc_module"": ""occ"", ""freeze_core"": ""false"", ""scf_type"": ""mem_df"", }, ""error"": _p1}, id=""olccd rhf mem/df rr dfocc"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""df"", ""qc_module"": ""occ"", ""freeze_core"": ""false"", ""scf_type"": ""disk_df"",}, }, id=""olccd rhf disk/df rr dfocc"",),; # pytest.param({""keywords"": {""reference"": ""rhf"", ""cc_type"": ""df"", ""qc_module"": ""occ"", ""freeze_core"": ""false"", ""scf_type"": ""cd"", }, }, id=""olccd rhf cd/df rr dfocc"",),",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:108,Availability,avail,available,108,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:142,Testability,test,tests,142,"# yapf: disable; ######## Are all possible ways of computing <method> working?; # * no mixed-type gradients available (like pk+df) so no grad tests; ###### occ",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, cc_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:20,Availability,avail,available,20,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV, so skipping for now; # pytest.param({""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn rhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn uhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn rohf cd ae: scf "",),; # yapf: enable",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:246,Availability,error,error,246,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV, so skipping for now; # pytest.param({""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn rhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn uhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn rohf cd ae: scf "",),; # yapf: enable",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:412,Availability,error,error,412,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV, so skipping for now; # pytest.param({""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn rhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn uhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn rohf cd ae: scf "",),; # yapf: enable",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:579,Availability,error,error,579,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV, so skipping for now; # pytest.param({""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn rhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn uhf cd ae: scf "",),; # pytest.param({""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid }, ""error"": {2: _p10, 1: _p10}}, id=""svwn rohf cd ae: scf "",),; # yapf: enable",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:20,Availability,avail,available,20,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV, so skipping for now; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn rhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn uhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn rohf cd ae: dd "",),; ###### default qc_module, mp2_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:279,Availability,error,error,279,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV, so skipping for now; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn rhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn uhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn rohf cd ae: dd "",),; ###### default qc_module, mp2_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:479,Availability,error,error,479,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV, so skipping for now; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn rhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn uhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn rohf cd ae: dd "",),; ###### default qc_module, mp2_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:680,Availability,error,error,680,"####; # only H-by-E available for CD ref Hessians, and loose dflt cholesky_tolerance means they're not close to CONV, so skipping for now; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn rhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""uhf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn uhf cd ae: dd "",),; # pytest.param({""xptd"": {""qc_module"": ""scf""}, ""keywords"": {""reference"": ""rohf"", ""scf_type"": ""cd"", ""freeze_core"": ""false"", **_psi_grid_dd }, ""error"": {2: _p10, 1: _p10}, }, id=""svwn rohf cd ae: dd "",),; ###### default qc_module, mp2_type",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work? Here we xfail the NYI rather than catch graceful exit.; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:42,Integrability,interface,interface,42,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:35,Usability,simpl,simple,35,"# yapf: disable; ######## Does the simple interface (default qc_module, scf_type, mp2_type) work?; ###### default qc_module",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:197,Integrability,rout,routing,197,"""""""For each pytest.param in this file, takes its input dictionary, inserts additional param; fields like molecule, basis, dertype, inserts per-test fields like method and driver, sets up; handling routing like per-basis or per-dertype xfail flags, and sends the result on to; standard_suite_runner.py. """"""",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py:143,Testability,test,test,143,"""""""For each pytest.param in this file, takes its input dictionary, inserts additional param; fields like molecule, basis, dertype, inserts per-test fields like method and driver, sets up; handling routing like per-basis or per-dertype xfail flags, and sends the result on to; standard_suite_runner.py. """"""",MatchSource.CODE_COMMENT,tests/pytests/test_standard_suite.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_standard_suite.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py:120,Energy Efficiency,energy,energy,120,"# Local options currently taking ~3 seconds per call!; # psi4.set_options({""basis"": ""cc-pVQZ""}); # plan = task_planner(""energy"", ""HF"", mol); # assert plan.basis == ""cc-pvqz""",MatchSource.CODE_COMMENT,tests/pytests/test_task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py:143,Testability,assert,assert,143,"# Local options currently taking ~3 seconds per call!; # psi4.set_options({""basis"": ""cc-pVQZ""}); # plan = task_planner(""energy"", ""HF"", mol); # assert plan.basis == ""cc-pvqz""",MatchSource.CODE_COMMENT,tests/pytests/test_task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py:2,Testability,assert,assert,2,"# assert plan3.keywords['SCF__E_CONVERGENCE'] == 1.e-6; # assert plan3.keywords['SCF__D_CONVERGENCE'] == 1.e-11; # assert plan3.keywords['E_CONVERGENCE'] == 1.e-10",MatchSource.CODE_COMMENT,tests/pytests/test_task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py:58,Testability,assert,assert,58,"# assert plan3.keywords['SCF__E_CONVERGENCE'] == 1.e-6; # assert plan3.keywords['SCF__D_CONVERGENCE'] == 1.e-11; # assert plan3.keywords['E_CONVERGENCE'] == 1.e-10",MatchSource.CODE_COMMENT,tests/pytests/test_task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py:115,Testability,assert,assert,115,"# assert plan3.keywords['SCF__E_CONVERGENCE'] == 1.e-6; # assert plan3.keywords['SCF__D_CONVERGENCE'] == 1.e-11; # assert plan3.keywords['E_CONVERGENCE'] == 1.e-10",MatchSource.CODE_COMMENT,tests/pytests/test_task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py:36,Testability,assert,assert,36,"# below are now back to optstash; # assert plan.task_list[key].keywords['E_CONVERGENCE'] == 10; # assert plan.task_list[key].keywords['SCF__E_CONVERGENCE'] == 10; # assert plan.task_list[key].keywords['SCF__D_CONVERGENCE'] == 10",MatchSource.CODE_COMMENT,tests/pytests/test_task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py:98,Testability,assert,assert,98,"# below are now back to optstash; # assert plan.task_list[key].keywords['E_CONVERGENCE'] == 10; # assert plan.task_list[key].keywords['SCF__E_CONVERGENCE'] == 10; # assert plan.task_list[key].keywords['SCF__D_CONVERGENCE'] == 10",MatchSource.CODE_COMMENT,tests/pytests/test_task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py:165,Testability,assert,assert,165,"# below are now back to optstash; # assert plan.task_list[key].keywords['E_CONVERGENCE'] == 10; # assert plan.task_list[key].keywords['SCF__E_CONVERGENCE'] == 10; # assert plan.task_list[key].keywords['SCF__D_CONVERGENCE'] == 10",MatchSource.CODE_COMMENT,tests/pytests/test_task_planner.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_task_planner.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_excitations.py:59,Deployability,integrat,integration,59,"# Reference data generated using PySCF 2.1.1.; # (99, 590) integration grid, no pruning.",MatchSource.CODE_COMMENT,tests/pytests/test_tdscf_excitations.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_excitations.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_excitations.py:59,Integrability,integrat,integration,59,"# Reference data generated using PySCF 2.1.1.; # (99, 590) integration grid, no pruning.",MatchSource.CODE_COMMENT,tests/pytests/test_tdscf_excitations.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_excitations.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_excitations.py:175,Integrability,depend,depend,175,"### On Signs; # Different programs have different sign conventions for the various dipole moments.; # These dipole moments are only defined up to a common phase, because they depend linearly on; # the TDSCF eigenvectors, which are only defined up to phase.; # The choice of sign is not important for _oscillator_strength, but _rotatory_strength; # requires that the electric and magnetic dipole have the same phase.; # In Psi's sign convention, the ""L"" gauge needs a + sign, and the ""V"" gauge a -; # sign. Adjust for your case.; # In PySCF's sign convention, the velocity gauge electric and the magnetic dipole; # both have flipped sign.",MatchSource.CODE_COMMENT,tests/pytests/test_tdscf_excitations.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_excitations.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_products.py:2,Testability,assert,assert,2,"# assert compare_values(x, y, 4, ""Singlet ROOT"")",MatchSource.CODE_COMMENT,tests/pytests/test_tdscf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_products.py:2,Testability,assert,assert,2,"# assert compare_values(x, y, 4, ""Triplet Root"")",MatchSource.CODE_COMMENT,tests/pytests/test_tdscf_products.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_tdscf_products.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py:17,Testability,test,testing,17,"# <<< Section I: testing vibrational analysis vs Cfour >>>",MatchSource.CODE_COMMENT,tests/pytests/test_vibanalysis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py:36,Performance,tune,tuned,36,"# IR matches to 4 when scale factor tuned, but have to loosen to 1 since Cfour using 974.868 and we're using ~974.880",MatchSource.CODE_COMMENT,tests/pytests/test_vibanalysis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py:111,Energy Efficiency,energy,energy,111,"# <<< Section II: testing Psi4 findif-by-grad Hessians vs Cfour >>>; # <<< Section III: testing Psi4 findif-by-energy Hessians vs Cfour >>>; # <<< Section IV: testing Psi4 analytic Hessians vs Cfour >>>",MatchSource.CODE_COMMENT,tests/pytests/test_vibanalysis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py:18,Testability,test,testing,18,"# <<< Section II: testing Psi4 findif-by-grad Hessians vs Cfour >>>; # <<< Section III: testing Psi4 findif-by-energy Hessians vs Cfour >>>; # <<< Section IV: testing Psi4 analytic Hessians vs Cfour >>>",MatchSource.CODE_COMMENT,tests/pytests/test_vibanalysis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py:88,Testability,test,testing,88,"# <<< Section II: testing Psi4 findif-by-grad Hessians vs Cfour >>>; # <<< Section III: testing Psi4 findif-by-energy Hessians vs Cfour >>>; # <<< Section IV: testing Psi4 analytic Hessians vs Cfour >>>",MatchSource.CODE_COMMENT,tests/pytests/test_vibanalysis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py:159,Testability,test,testing,159,"# <<< Section II: testing Psi4 findif-by-grad Hessians vs Cfour >>>; # <<< Section III: testing Psi4 findif-by-energy Hessians vs Cfour >>>; # <<< Section IV: testing Psi4 analytic Hessians vs Cfour >>>",MatchSource.CODE_COMMENT,tests/pytests/test_vibanalysis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py:960,Testability,assert,assert,960,"#@pytest.mark.parametrize(""dertype,opts,ref,tagl"", [; # pytest.param(1, {}, 'analytic', 'Cfour analytic vs. Psi4 G-findif-T-projected'),; # pytest.param(2, {}, 'analytic', 'Cfour analytic vs. Psi4 analytic'),; # pytest.param(1, {'fd_project': True}, 'findifproj', 'Cfour G-findif-TR-projected vs. Psi4 G-findif-TR-projected'),; #]); #def test_rotational_projection(dertype, opts, ref, tagl):; # block = _cfour_ref['neqh2o']; # h2o = psi4.geometry(block['xyz']); #; # psi4.set_options({'g_convergence': 'gau_verytight',; # 'e_convergence': 10,; # 'd_convergence': 10,; # 'points': 5,; # 'scf_type': 'pk'}); # psi4.set_options(opts); #; #; # # 1. findif-by-G, auto inclusion of rot dof b/c non-eq; # # 2. analytic, always include rot dof; # # 3. even though same non-eq geometry, forcibly turn off rot dof; # e, wfn = psi4.frequency('hf/cc-pvdz', return_wfn=True, molecule=h2o, dertype=dertype); # pvibonly = qcdb.vib.filter_nonvib(wfn.frequency_analysis); #; # assert qcdb.compare_vibinfos(block['vibonly'][ref], pvibonly, 1.e-3, 'Cfour analytic vs. Psi4 G-findif-T-projected')",MatchSource.CODE_COMMENT,tests/pytests/test_vibanalysis.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_vibanalysis.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_zeta.py:72,Modifiability,config,config,72,"# hand-adjust zetas -- what to pass/xfail/fail is NOT read from Libint2 config; # * leaving at dtq5 so running pytest from source doesn't catch hours-long 7z; # * @pytest.mark.parametrize(""zeta"", [""d"", ""t"", ""q"", ""5"", ""6/5"", ""6"", ""7/6"", ""7""])",MatchSource.CODE_COMMENT,tests/pytests/test_zeta.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/test_zeta.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py:64,Availability,failure,failure,64,"""""""Turns `compare_fn` that raises `psi4.TestComparisonError` on failure into a function that; returns True on success and False on failure, suitable for assertions in pytest. """"""",MatchSource.CODE_COMMENT,tests/pytests/utils.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py:131,Availability,failure,failure,131,"""""""Turns `compare_fn` that raises `psi4.TestComparisonError` on failure into a function that; returns True on success and False on failure, suitable for assertions in pytest. """"""",MatchSource.CODE_COMMENT,tests/pytests/utils.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py:153,Testability,assert,assertions,153,"""""""Turns `compare_fn` that raises `psi4.TestComparisonError` on failure into a function that; returns True on success and False on failure, suitable for assertions in pytest. """"""",MatchSource.CODE_COMMENT,tests/pytests/utils.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py:61,Testability,test,test,61,"""""""Returns the name of the calling function, usually name of test case.""""""",MatchSource.CODE_COMMENT,tests/pytests/utils.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py:13,Deployability,install,install,13,"# Check test install",MatchSource.CODE_COMMENT,tests/pytests/utils.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py:8,Testability,test,test,8,"# Check test install",MatchSource.CODE_COMMENT,tests/pytests/utils.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/utils.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/3-index-transforms/input.py:6,Testability,test,test,6,"# set test options",MatchSource.CODE_COMMENT,tests/python/3-index-transforms/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/3-index-transforms/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/3-index-transforms/input.py:11,Testability,test,test,11,"# TODO:; # test tensor slicing grabs; # test pQq and pqQ builds for store and direct0",MatchSource.CODE_COMMENT,tests/python/3-index-transforms/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/3-index-transforms/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/3-index-transforms/input.py:40,Testability,test,test,40,"# TODO:; # test tensor slicing grabs; # test pQq and pqQ builds for store and direct0",MatchSource.CODE_COMMENT,tests/python/3-index-transforms/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/3-index-transforms/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/cc-amps/input.py:7,Security,access,access,7,"#! API access to CCSD amplitudes",MatchSource.CODE_COMMENT,tests/python/cc-amps/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/cc-amps/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/curve/input.py:31,Energy Efficiency,energy,energy,31,"#! PsiAPI scanning a potential energy curve",MatchSource.CODE_COMMENT,tests/python/curve/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/curve/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/databases/input.py:10,Energy Efficiency,energy,energy,10,"#! PsiAPI energy example",MatchSource.CODE_COMMENT,tests/python/databases/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/databases/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/energy/input.py:10,Energy Efficiency,energy,energy,10,"#! PsiAPI energy example",MatchSource.CODE_COMMENT,tests/python/energy/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/energy/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/energy/input.py:9,Testability,test,testing,9,"""""""; C # testing escaping comments; """"""",MatchSource.CODE_COMMENT,tests/python/energy/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/energy/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/input.py:3,Testability,test,test,3,"#! test fragment decomposition + to/from_dict",MatchSource.CODE_COMMENT,tests/python/mints13/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/input.py:259,Energy Efficiency,charge,charges,259,"# Once user starts messing with cgmp other than in construction, user has; # no way to mess with fragment cgmp, and Psi/QCDB Molecule classes don't do; # much to set things in order. Upon to_dict, things get sorted into some; # physical reality, but fragment charges in a complicated system like this; # won't get sorted out to resemble thier initial state (could do more; # try/catch, but that's really the class's job). So really all that can be; # tested in the main dimer's total charge and total mult.",MatchSource.CODE_COMMENT,tests/python/mints13/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/input.py:484,Energy Efficiency,charge,charge,484,"# Once user starts messing with cgmp other than in construction, user has; # no way to mess with fragment cgmp, and Psi/QCDB Molecule classes don't do; # much to set things in order. Upon to_dict, things get sorted into some; # physical reality, but fragment charges in a complicated system like this; # won't get sorted out to resemble thier initial state (could do more; # try/catch, but that's really the class's job). So really all that can be; # tested in the main dimer's total charge and total mult.",MatchSource.CODE_COMMENT,tests/python/mints13/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/input.py:451,Testability,test,tested,451,"# Once user starts messing with cgmp other than in construction, user has; # no way to mess with fragment cgmp, and Psi/QCDB Molecule classes don't do; # much to set things in order. Upon to_dict, things get sorted into some; # physical reality, but fragment charges in a complicated system like this; # won't get sorted out to resemble thier initial state (could do more; # try/catch, but that's really the class's job). So really all that can be; # tested in the main dimer's total charge and total mult.",MatchSource.CODE_COMMENT,tests/python/mints13/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints14/input.py:287,Testability,test,test,287,"#! Check for correctness of ESP values. The ESP values are calculated using one or four threads; #! The one thread values are checked against the four thread values. The one thread values are ; #! also checked against the reference values (1 thread values computed, when generating this test).; #! Caution: The reference values are not obtained using an actual physical reference, but rather; #! generated by Psi4 at one point in time.",MatchSource.CODE_COMMENT,tests/python/mints14/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints14/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/input.py:5,Testability,test,test,5,"#! A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms; #! and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically; #! lowered to account for the different basis sets.",MatchSource.CODE_COMMENT,tests/python/mints2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/input.py:1078,Availability,error,error,1078,"# Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:; # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****; # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.",MatchSource.CODE_COMMENT,tests/python/mints2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/input.py:1084,Integrability,message,message,1084,"# Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:; # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****; # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.",MatchSource.CODE_COMMENT,tests/python/mints2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/input.py:158,Modifiability,variab,variable,158,"# Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:; # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****; # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.",MatchSource.CODE_COMMENT,tests/python/mints2/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints9/input.py:5,Testability,test,test,5,"#! A test of the basis specification. Various basis sets are specified outright and in blocks, both; #! orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls; #! qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks; #! that symmetry of the Molecule observes the basis assignment to atoms.; # cc-pvdz aug-cc-pvdz; # BASIS H 5/ 5 C 14/15 H +4/ 4 C +9/10; # RIFIT H 14/15 C 56/66 H +9/10 C +16/20; # JKFIT H 23/25 C 70/81 H +9/10 C +16/20",MatchSource.CODE_COMMENT,tests/python/mints9/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints9/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints9/input.py:2,Usability,clear,clear,2,"# clear df_basis_mp2 {...} to get autoaux below",MatchSource.CODE_COMMENT,tests/python/mints9/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints9/input.py
https://github.com/psi4/psi4/tree/v1.9.1/tests/python/pubchem/input.py:18,Security,access,access,18,"#! PsiAPI pubchem access",MatchSource.CODE_COMMENT,tests/python/pubchem/input.py,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/pubchem/input.py
