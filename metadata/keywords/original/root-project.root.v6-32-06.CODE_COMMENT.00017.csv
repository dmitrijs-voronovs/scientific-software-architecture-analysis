id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp:141,Availability,error,error,141,"// If result status is < 0, then the driver command signalled an error.; // If result status is 70, then the driver command reported a fatal error.; // On Windows, abort will return an exit code of 3. In these cases,; // generate additional diagnostic information if possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/driver/driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp:164,Safety,abort,abort,164,"// If result status is < 0, then the driver command signalled an error.; // If result status is 70, then the driver command reported a fatal error.; // On Windows, abort will return an exit code of 3. In these cases,; // generate additional diagnostic information if possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/driver/driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp:19,Deployability,integrat,integrated-,19,"// When running in integrated-cc1 mode, the CrashRecoveryContext returns; // the same codes as if the program crashed. See section ""Exit Status for; // Commands"":; // https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xcu_chap02.html",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/driver/driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp:19,Integrability,integrat,integrated-,19,"// When running in integrated-cc1 mode, the CrashRecoveryContext returns; // the same codes as if the program crashed. See section ""Exit Status for; // Commands"":; // https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xcu_chap02.html",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/driver/driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp:24,Integrability,message,message,24,"// Print the bug report message that would be printed if we did actually; // crash, but only if we're crashing due to FORCE_CLANG_DIAGNOSTICS_CRASH.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/driver/driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp:128,Deployability,release,released,128,"// When crashing in -fintegrated-cc1 mode, bury the timer pointers, because; // the internal linked list might point to already released stack frames.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/driver/driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/cppreference_parser.py:53,Integrability,wrap,wrapped,53,# The interesting header content (e.g. <cstdlib>) is wrapped in <code>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/cppreference_parser.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/cppreference_parser.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:641,Availability,Down,Download,641,"""""""gen_std.py is a tool to generate a lookup table (from qualified names to; include headers) for C/C++ Standard Library symbols by parsing archived HTML; files from cppreference. The generated files are located in clang/include/Tooling/Inclusions. Caveats and FIXMEs:; - only symbols directly in ""std"" namespace are added, we should also add std's; subnamespace symbols (e.g. chrono).; - symbols with multiple variants or defined in multiple headers aren't added,; e.g. std::move, std::swap. Usage:; 1. Install BeautifulSoup dependency, see instruction:; https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup; 2. Download cppreference offline HTML files (html_book_20220730.zip in Unofficial Release) at; https://en.cppreference.com/w/Cppreference:Archives; 3. Unzip the zip file from step 2 (e.g., to a ""cppreference"" directory). You should; get a ""cppreference/reference"" directory.; 4. Run the command:; // Generate C++ symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=cpp > StdSymbolMap.inc; // Generate C symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=c > CSymbolMap.inc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:504,Deployability,Install,Install,504,"""""""gen_std.py is a tool to generate a lookup table (from qualified names to; include headers) for C/C++ Standard Library symbols by parsing archived HTML; files from cppreference. The generated files are located in clang/include/Tooling/Inclusions. Caveats and FIXMEs:; - only symbols directly in ""std"" namespace are added, we should also add std's; subnamespace symbols (e.g. chrono).; - symbols with multiple variants or defined in multiple headers aren't added,; e.g. std::move, std::swap. Usage:; 1. Install BeautifulSoup dependency, see instruction:; https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup; 2. Download cppreference offline HTML files (html_book_20220730.zip in Unofficial Release) at; https://en.cppreference.com/w/Cppreference:Archives; 3. Unzip the zip file from step 2 (e.g., to a ""cppreference"" directory). You should; get a ""cppreference/reference"" directory.; 4. Run the command:; // Generate C++ symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=cpp > StdSymbolMap.inc; // Generate C symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=c > CSymbolMap.inc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:611,Deployability,install,installing-beautiful-soup,611,"""""""gen_std.py is a tool to generate a lookup table (from qualified names to; include headers) for C/C++ Standard Library symbols by parsing archived HTML; files from cppreference. The generated files are located in clang/include/Tooling/Inclusions. Caveats and FIXMEs:; - only symbols directly in ""std"" namespace are added, we should also add std's; subnamespace symbols (e.g. chrono).; - symbols with multiple variants or defined in multiple headers aren't added,; e.g. std::move, std::swap. Usage:; 1. Install BeautifulSoup dependency, see instruction:; https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup; 2. Download cppreference offline HTML files (html_book_20220730.zip in Unofficial Release) at; https://en.cppreference.com/w/Cppreference:Archives; 3. Unzip the zip file from step 2 (e.g., to a ""cppreference"" directory). You should; get a ""cppreference/reference"" directory.; 4. Run the command:; // Generate C++ symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=cpp > StdSymbolMap.inc; // Generate C symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=c > CSymbolMap.inc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:720,Deployability,Release,Release,720,"""""""gen_std.py is a tool to generate a lookup table (from qualified names to; include headers) for C/C++ Standard Library symbols by parsing archived HTML; files from cppreference. The generated files are located in clang/include/Tooling/Inclusions. Caveats and FIXMEs:; - only symbols directly in ""std"" namespace are added, we should also add std's; subnamespace symbols (e.g. chrono).; - symbols with multiple variants or defined in multiple headers aren't added,; e.g. std::move, std::swap. Usage:; 1. Install BeautifulSoup dependency, see instruction:; https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup; 2. Download cppreference offline HTML files (html_book_20220730.zip in Unofficial Release) at; https://en.cppreference.com/w/Cppreference:Archives; 3. Unzip the zip file from step 2 (e.g., to a ""cppreference"" directory). You should; get a ""cppreference/reference"" directory.; 4. Run the command:; // Generate C++ symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=cpp > StdSymbolMap.inc; // Generate C symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=c > CSymbolMap.inc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:526,Integrability,depend,dependency,526,"""""""gen_std.py is a tool to generate a lookup table (from qualified names to; include headers) for C/C++ Standard Library symbols by parsing archived HTML; files from cppreference. The generated files are located in clang/include/Tooling/Inclusions. Caveats and FIXMEs:; - only symbols directly in ""std"" namespace are added, we should also add std's; subnamespace symbols (e.g. chrono).; - symbols with multiple variants or defined in multiple headers aren't added,; e.g. std::move, std::swap. Usage:; 1. Install BeautifulSoup dependency, see instruction:; https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup; 2. Download cppreference offline HTML files (html_book_20220730.zip in Unofficial Release) at; https://en.cppreference.com/w/Cppreference:Archives; 3. Unzip the zip file from step 2 (e.g., to a ""cppreference"" directory). You should; get a ""cppreference/reference"" directory.; 4. Run the command:; // Generate C++ symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=cpp > StdSymbolMap.inc; // Generate C symbols; python3 gen_std.py -cppreference cppreference/reference -symbols=c > CSymbolMap.inc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:2,Safety,avoid,avoid,2,"# avoid printing duplicated entries, for C macros!",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:171,Security,access,accessed,171,"# std sub-namespace symbols have separated pages.; # We don't index std literal operators (e.g.; # std::literals::chrono_literals::operator""""d), these symbols can't be; # accessed by std::<symbol_name>.; #; # std::placeholders symbols are handled manually in StdSpecialSymbolMap.inc",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:28,Security,access,accessed,28,# std::ranges::views can be accessed as std::views.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:27,Availability,avail,available,27,"# Zombie symbols that were available from the Standard Library, but are; # removed in the following standards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/test.py:30,Testability,test,test,30,"#!/usr/bin/env python; # ===- test.py - ---------------------------------------------*- python -*--===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/include-mapping/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:295,Integrability,rout,routine,295,"/// Translate a Clang source range into a CIndex source range.; ///; /// Clang internally represents ranges where the end location points to the; /// start of the token at the end. However, for external clients it is more; /// useful to have a CXSourceRange be a proper half-open interval. This routine; /// does the appropriate translation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:315,Safety,abort,aborted,315,"/// Visit the given cursor and, if requested by the visitor,; /// its children.; ///; /// \param Cursor the cursor to visit.; ///; /// \param CheckedRegionOfInterest if true, then the caller already checked; /// that this cursor is within the region of interest.; ///; /// \returns true if the visitation should be aborted, false if it; /// should continue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Safety,abort,abort,3,// abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:64,Performance,optimiz,optimization,64,"// If the begin/end of the range lie in the same FileID, do the optimization; // where we skip preprocessed entities that do not come from the same; // FileID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:55,Availability,recover,recover,55,"// If the end does not reside in the same file, try to recover by; // picking the end of the file of begin location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:55,Safety,recover,recover,55,"// If the end does not reside in the same file, try to recover by; // picking the end of the file of begin location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:55,Modifiability,extend,extends,55,"// Beginning of range lies in the preamble but it also extends beyond; // it into the main file. Split the range into 2 parts, one covering; // the preamble and another covering the main file. This allows subsequent; // calls to visitPreprocessedEntitiesInRange to accept a source range that; // lies in the same FileID, allowing it to skip preprocessed entities that; // do not come from the same FileID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:96,Safety,abort,aborted,96,"/// Visit the children of the given cursor.; ///; /// \returns true if the visitation should be aborted, false if it; /// should continue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:35,Security,access,accessor,35,// Filter out synthesized property accessor redeclarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:57,Integrability,protocol,protocol,57,// FIXME: ObjCClassRef/ObjCProtocolRef for forward class/protocol; // declarations is a mismatch with the compiler semantics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:82,Deployability,install,installed,82,// FIXME: This implements a workaround with @property declarations also being; // installed in the DeclContext for the @interface. Eventually this code; // should be removed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:120,Integrability,interface,interface,120,// FIXME: This implements a workaround with @property declarations also being; // installed in the DeclContext for the @interface. Eventually this code; // should be removed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:79,Integrability,interface,interface,79,// Visit synthesized methods since they will be skipped when visiting; // the @interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:21,Integrability,rout,routine,21,"// FIXME: This whole routine is a hack to work around the lack of proper; // source information in nested-name-specifiers (PR5791). Since we do have; // a beginning source location, we can visit the first component of the; // nested-name-specifier, if it's a single-token component.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:79,Performance,perform,performed,79,// Now reverse the entries we just added. This will match the DFS; // ordering performed by the worklist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:33,Modifiability,variab,variables,33,/// Process clauses with list of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:79,Performance,perform,performed,79,// Now reverse the entries we just added. This will match the DFS; // ordering performed by the worklist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:79,Performance,perform,performed,79,// Now reverse the entries we just added. This will match the DFS; // ordering performed by the worklist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:15,Energy Efficiency,allocate,allocated,15,// Enqueue the allocated type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:79,Performance,perform,performed,79,// Now reverse the entries we just added. This will match the DFS; // ordering performed by the worklist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:29,Security,access,access,29,"// If the base of the member access expression is an implicit 'this', don't; // visit it.; // FIXME: If we ever want to show these implicit accesses, this will be; // unfortunate. However, clang_getCursor() relies on this behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:140,Security,access,accesses,140,"// If the base of the member access expression is an implicit 'this', don't; // visit it.; // FIXME: If we ever want to show these implicit accesses, this will be; // unfortunate. However, clang_getCursor() relies on this behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:12,Performance,perform,perform,12,"// For now, perform default visitation for Decls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Performance,Perform,Perform,3,// Perform default visitation for TypeLocs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Deployability,Update,Update,3,// Update the current cursor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:16,Availability,recover,recovery,16,"// We use crash recovery to make some of our APIs more reliable, implicitly; // enable it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:55,Availability,reliab,reliable,55,"// We use crash recovery to make some of our APIs more reliable, implicitly; // enable it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:16,Safety,recover,recovery,16,"// We use crash recovery to make some of our APIs more reliable, implicitly; // enable it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:111,Availability,error,error,111,// Look through the managed static to trigger construction of the managed; // static which registers our fatal error handler. This ensures it is only; // registered once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:1192,Availability,failure,failure,1192,"// Adding new options to struct CXIndexOptions:; // 1. If no other new option has been added in the same libclang version,; // sizeof(CXIndexOptions) must increase for versioning purposes.; // 2. Options should be added at the end of the struct in order to seamlessly; // support older struct versions. If options->Size < sizeof(CXIndexOptions),; // don't attempt to read the missing options and rely on the default values of; // recently added options being reasonable. For example:; // if (options->Size >= offsetof(CXIndexOptions, RecentlyAddedMember)); // do_something(options->RecentlyAddedMember);; // An exception: if a new option is small enough, it can be squeezed into the; // /*Reserved*/ bits in CXIndexOptions. Since the default value of each option; // is guaranteed to be 0 and the callers are advised to zero out the struct,; // programs built against older libclang versions would implicitly set the new; // options to default values, which should keep the behavior of previous; // libclang versions and thus be backward-compatible.; // If options->Size > sizeof(CXIndexOptions), the user may have set an option; // we can't handle, in which case we return nullptr to report failure.; // Replace `!=` with `>` here to support older struct versions. `!=` has the; // advantage of catching more usage bugs and no disadvantages while there is a; // single supported struct version (the initial version).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Modifiability,Config,Configure,3,// Configure the diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:179,Performance,perform,performance,179,"// Since the Clang C library is primarily used by batch tools dealing with; // (often very broken) source code, where spell-checking can have a; // significant negative impact on performance (particularly when; // precompiled headers are involved), we disable it by default.; // Only do this if we haven't found a spell-checking-related argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:9,Availability,failure,failures,9,// Early failures in LoadFromCommandLine may return with ErrUnit unset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:21,Performance,Load,LoadFromCommandLine,21,// Early failures in LoadFromCommandLine may return with ErrUnit unset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:57,Availability,error,errors,57,// We have an AST that has invalid nodes due to compiler errors.; // Use a crash recovery thread for protection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:81,Availability,recover,recovery,81,// We have an AST that has invalid nodes due to compiler errors.; // Use a crash recovery thread for protection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:81,Safety,recover,recovery,81,// We have an AST that has invalid nodes due to compiler errors.; // Use a crash recovery thread for protection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:46,Safety,unsafe,unsafe,46,"// If the translation unit has been marked as unsafe to free, just discard; // it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:41,Modifiability,variab,variables,41,// Mangling only works for functions and variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Safety,Avoid,Avoid,3,// Avoid having the implicit methods override the property decls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:234,Modifiability,variab,variable,234,"// Avoid having the cursor of an expression replace the declaration cursor; // when the expression source range overlaps the declaration range.; // This can happen for C++ constructor expressions whose range generally; // include the variable declaration, e.g.:; // MyCXXClass foo; // Make sure pointing at 'foo' returns a VarDecl; // cursor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Safety,Avoid,Avoid,3,"// Avoid having the cursor of an expression replace the declaration cursor; // when the expression source range overlaps the declaration range.; // This can happen for C++ constructor expressions whose range generally; // include the variable declaration, e.g.:; // MyCXXClass foo; // Make sure pointing at 'foo' returns a VarDecl; // cursor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:69,Deployability,update,update,69,"// If we already have an Objective-C superclass reference, don't; // update it further.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:403,Modifiability,enhance,enhanced,403,"// Clear out the ""FirstInDeclGroup"" part in a declaration cursor, since we; // can't set consistently. For example, when visiting a DeclStmt we will set; // it but we don't set it on the result of clang_getCursorDefinition for; // a reference of the same declaration.; // FIXME: Setting ""FirstInDeclGroup"" in CXCursors is a hack that only works; // when visiting a DeclStmt currently, the AST should be enhanced to be able; // to provide that kind of info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Usability,Clear,Clear,3,"// Clear out the ""FirstInDeclGroup"" part in a declaration cursor, since we; // can't set consistently. For example, when visiting a DeclStmt we will set; // it but we don't set it on the result of clang_getCursorDefinition for; // a reference of the same declaration.; // FIXME: Setting ""FirstInDeclGroup"" in CXCursors is a hack that only works; // when visiting a DeclStmt currently, the AST should be enhanced to be able; // to provide that kind of info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:19,Modifiability,variab,variables,19,"// FIXME: Multiple variables declared in a single declaration; // currently lack the information needed to correctly determine their; // ranges when accounting for the type-specifier. We use context; // stored in the CXCursor to determine if the VarDecl is in a DeclGroup,; // and if so, whether it is the first decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:54,Testability,assert,assert,54,"// Guard against an invalid SourceLocation, or we may assert in one; // of the following calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:19,Modifiability,variab,variables,19,"// FIXME: Multiple variables declared in a single declaration; // currently lack the information needed to correctly determine their; // ranges when accounting for the type-specifier. We use context; // stored in the CXCursor to determine if the VarDecl is in a DeclGroup,; // and if so, whether it is the first decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:53,Modifiability,extend,extended,53,"/// Retrieves the ""raw"" cursor extent, which is then extended to include; /// the decl-specifier-seq for declarations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:19,Modifiability,variab,variables,19,"// FIXME: Multiple variables declared in a single declaration; // currently lack the information needed to correctly determine their; // ranges when accounting for the type-specifier. We use context; // stored in the CXCursor to determine if the VarDecl is in a DeclGroup,; // and if so, whether it is the first decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:11,Modifiability,variab,variable,11,// Ask the variable if it has a definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:77,Integrability,interface,interface,77,"// There are two notions of a ""definition"" for an Objective-C; // class: the interface and its implementation. When we resolved a; // reference to an Objective-C class, produce the @interface as; // the definition; when we were provided with the interface,; // produce the @implementation as the definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:182,Integrability,interface,interface,182,"// There are two notions of a ""definition"" for an Objective-C; // class: the interface and its implementation. When we resolved a; // reference to an Objective-C class, produce the @interface as; // the definition; when we were provided with the interface,; // produce the @implementation as the definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:246,Integrability,interface,interface,246,"// There are two notions of a ""definition"" for an Objective-C; // class: the interface and its implementation. When we resolved a; // reference to an Objective-C class, produce the @interface as; // the definition; when we were provided with the interface,; // produce the @implementation as the definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:364,Safety,avoid,avoid,364,"// The DeclRefExpr of CXXOperatorCallExpr referring to the custom operator is; // visited before the arguments to the operator call. For the Call and; // Subscript operator the range of this DeclRefExpr includes the whole call; // expression, so that all tokens in that range would be mapped to the; // operator function, including the tokens of the arguments. To avoid that,; // ensure to visit this DeclRefExpr as last node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:223,Testability,test,test,223,"// This works differently than annotateAndAdvanceTokens; because expanded; // macro arguments can have arbitrary translation-unit source order, we do not; // advance the token index one by one until a token fails the range test.; // We only advance once past all of the macro arg tokens if all of them; // pass the range test. If one of them fails we keep the token index pointing; // at the start of the macro arg tokens so that the failing token will be; // annotated by a subsequent annotation try.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:321,Testability,test,test,321,"// This works differently than annotateAndAdvanceTokens; because expanded; // macro arguments can have arbitrary translation-unit source order, we do not; // advance the token index one by one until a token fails the range test.; // We only advance once past all of the macro arg tokens if all of them; // pass the range test. If one of them fails we keep the token index pointing; // at the start of the macro arg tokens so that the failing token will be; // annotated by a subsequent annotation try.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:82,Modifiability,variab,variable,82,"// Avoid having the cursor of an expression ""overwrite"" the annotation of the; // variable declaration that it belongs to.; // This can happen for C++ constructor expressions whose range generally; // include the variable declaration, e.g.:; // MyCXXClass foo; // Make sure we don't annotate 'foo' as a CallExpr cursor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:213,Modifiability,variab,variable,213,"// Avoid having the cursor of an expression ""overwrite"" the annotation of the; // variable declaration that it belongs to.; // This can happen for C++ constructor expressions whose range generally; // include the variable declaration, e.g.:; // MyCXXClass foo; // Make sure we don't annotate 'foo' as a CallExpr cursor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Safety,Avoid,Avoid,3,"// Avoid having the cursor of an expression ""overwrite"" the annotation of the; // variable declaration that it belongs to.; // This can happen for C++ constructor expressions whose range generally; // include the variable declaration, e.g.:; // MyCXXClass foo; // Make sure we don't annotate 'foo' as a CallExpr cursor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:250,Safety,avoid,avoid,250,// Before recursing into the children keep some state that we are going; // to use in the AnnotateTokensWorker::postVisitChildren callback to do some; // extra work after the child nodes are visited.; // Note that we don't call VisitChildren here to avoid traversing statements; // code-recursively which can blow the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Energy Efficiency,Adapt,Adapt,3,"// Adapt the end range, because LocationCompare() reports; // RangeOverlap even for the not-inclusive end location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:3,Modifiability,Adapt,Adapt,3,"// Adapt the end range, because LocationCompare() reports; // RangeOverlap even for the not-inclusive end location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:14,Deployability,update,updated,14,"// All tokens updated for current range, check next.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:64,Safety,avoid,avoid,64,"// Lex tokens in raw mode until we hit the end of the range, to avoid; // entering #includes or expanding macros.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:110,Testability,test,tests,110,"// We have found a preprocessing directive. Annotate the tokens; // appropriately.; //; // FIXME: Some simple tests here could identify macro definitions and; // #undefs, to provide specific cursor kinds for those.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:103,Usability,simpl,simple,103,"// We have found a preprocessing directive. Annotate the tokens; // appropriately.; //; // FIXME: Some simple tests here could identify macro definitions and; // #undefs, to provide specific cursor kinds for those.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:38,Safety,avoid,avoid,38,// This gets run a separate thread to avoid stack blowout.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:9,Availability,avail,availability,9,"// If no availability attributes are found, inherit the attribute from the; // containing decl or the class or category interface decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:120,Integrability,interface,interface,120,"// If no availability attributes are found, inherit the attribute from the; // containing decl or the class or category interface decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:44,Modifiability,inherit,inherit,44,"// If no availability attributes are found, inherit the attribute from the; // containing decl or the class or category interface decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:60,Performance,cache,cache,60,// How much memory is being used by SourceManager's content cache?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:246,Safety,safe,safety,246,"//===----------------------------------------------------------------------===//; // Misc. utility functions.; //===----------------------------------------------------------------------===//; /// Default to using our desired 8 MB stack size on ""safety"" threads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:9,Modifiability,Portab,Portability,9,// TODO: Portability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:43,Energy Efficiency,allocate,allocate,43,"/// The CXCodeCompleteResults structure we allocate internally;; /// the client only sees the initial CXCodeCompleteResults structure.; ///; /// Normally, clients of CXString shouldn't care whether or not a CXString is; /// managed by a pool or by explicitly malloc'ed memory. But; /// AllocatedCXCodeCompleteResults outlives the CXTranslationUnit, so we can; /// not rely on the StringPool in the TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:286,Energy Efficiency,Allocate,AllocatedCXCodeCompleteResults,286,"/// The CXCodeCompleteResults structure we allocate internally;; /// the client only sees the initial CXCodeCompleteResults structure.; ///; /// Normally, clients of CXString shouldn't care whether or not a CXString is; /// managed by a pool or by explicitly malloc'ed memory. But; /// AllocatedCXCodeCompleteResults outlives the CXTranslationUnit, so we can; /// not rely on the StringPool in the TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:31,Performance,perform,performing,31,/// Diagnostics produced while performing code completion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:4,Energy Efficiency,Allocate,Allocated,4,/// Allocated API-exposed wrappters for Diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:26,Integrability,wrap,wrappters,26,/// Allocated API-exposed wrappters for Diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:18,Security,expose,exposed,18,/// Allocated API-exposed wrappters for Diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:37,Performance,cache,cached,37,/// Allocator used to store globally cached code-completion results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:77,Integrability,message,message,77,/// A string containing the Objective-C selector entered thus far for a; /// message send.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:12,Integrability,interface,interface,12,"// Get the @interface declaration for a (possibly-qualified) Objective-C; // object pointer type, e.g., NSString*",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:12,Integrability,interface,interface,12,// Get the @interface declaration for an Objective-C object type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:27,Integrability,inject,injected-class-name,27,// Get the class for a C++ injected-class-name,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:27,Security,inject,injected-class-name,27,// Get the class for a C++ injected-class-name,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:3,Performance,Perform,Perform,3,// Perform the remapping of source files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:14,Testability,log,logging,14,// FIXME: Add logging.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:3,Performance,Perform,Perform,3,// Perform completion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:46,Performance,cache,cached,46,"// Keep a reference to the allocator used for cached global completions, so; // that we can be sure that the memory used by our code completion strings; // doesn't get freed due to subsequent reparses (while the code completion; // results are still active).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:210,Deployability,update,updated,210,"/// Simple utility function that appends a \p New string to the given; /// \p Old string, using the \p Buffer for storage.; ///; /// \param Old The string to which we are appending. This parameter will be; /// updated to reflect the complete string.; ///; ///; /// \param New The string to append to \p Old.; ///; /// \param Buffer A buffer that stores the actual, concatenated string. It will; /// be used if the old string is already-non-empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:4,Usability,Simpl,Simple,4,"/// Simple utility function that appends a \p New string to the given; /// \p Old string, using the \p Buffer for storage.; ///; /// \param Old The string to which we are appending. This parameter will be; /// updated to reflect the complete string.; ///; ///; /// \param New The string to append to \p Old.; ///; /// \param Buffer A buffer that stores the actual, concatenated string. It will; /// be used if the old string is already-non-empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:44,Integrability,Interface,Interface,44,"//===- CIndexDiagnostic.cpp - Diagnostics C Interface ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements the diagnostic functions of the Clang C interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:434,Integrability,interface,interface,434,"//===- CIndexDiagnostic.cpp - Diagnostics C Interface ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements the diagnostic functions of the Clang C interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:153,Availability,error,error-on-deserialized-decl,153,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:192,Availability,error,error,192,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:386,Availability,error,errors,386,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:482,Availability,error,error-on-deserialized-decl,482,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:538,Availability,error,error,538,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:659,Availability,error,error,659,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:680,Performance,perform,performing,680,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:134,Testability,test,testing,134,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:281,Testability,test,test,281,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:628,Testability,test,test,628,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:35,Deployability,update,updated,35,"// Diagnostics in the ASTUnit were updated, reset the associated; // diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:86,Integrability,Interface,Interface,86,//-----------------------------------------------------------------------------; // C Interface Routines; //-----------------------------------------------------------------------------,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:96,Integrability,Rout,Routines,96,//-----------------------------------------------------------------------------; // C Interface Routines; //-----------------------------------------------------------------------------,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:17,Availability,error,error,17,/* Print warning/error/etc. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.h:43,Integrability,Interface,Interface,43,"/*===-- CIndexDiagnostic.h - Diagnostics C Interface ------------*- C++ -*-===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* Implements the diagnostic functions of the Clang C interface. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.h:459,Integrability,interface,interface,459,"/*===-- CIndexDiagnostic.h - Diagnostics C Interface ------------*- C++ -*-===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* Implements the diagnostic functions of the Clang C interface. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp:3,Performance,load,loadquery,3,// loadquery() was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp:27,Energy Efficiency,allocate,allocate,27,// errno == ENOMEM; try to allocate more memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp:50,Performance,load,loadquery,50,// Loop to locate the function entry point in the loadquery() results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp:25,Safety,avoid,avoids,25,// This silly cast below avoids a C++ warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp:78,Availability,error,error,78,"// It's rather unlikely we end up here. But it could happen, so report an; // error instead of crashing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp:3,Performance,Cache,Cache,3,// Cache our result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp:46,Testability,log,log,46,// Create a temporary file for the invocation log.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:4,Testability,Log,Logs,4,/// Logs information about a particular libclang operation like parsing to; /// a new file in the invocation emission path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:44,Safety,safe,safety,44,"/// Return the current size to request for ""safety"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:41,Safety,safe,safety,41,"/// Set the current size to request for ""safety"" (or 0, if safety; /// threads should not be used).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:59,Safety,safe,safety,59,"/// Set the current size to request for ""safety"" (or 0, if safety; /// threads should not be used).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:51,Availability,recover,recovery,51,"/// Execution the given code ""safely"", using crash recovery or safety; /// threads when possible.; ///; /// \return False if a crash was detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:30,Safety,safe,safely,30,"/// Execution the given code ""safely"", using crash recovery or safety; /// threads when possible.; ///; /// \return False if a crash was detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:51,Safety,recover,recovery,51,"/// Execution the given code ""safely"", using crash recovery or safety; /// threads when possible.; ///; /// \return False if a crash was detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:63,Safety,safe,safety,63,"/// Execution the given code ""safely"", using crash recovery or safety; /// threads when possible.; ///; /// \return False if a crash was detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:137,Safety,detect,detected,137,"/// Execution the given code ""safely"", using crash recovery or safety; /// threads when possible.; ///; /// \return False if a crash was detected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h:48,Availability,error,error,48,/// Print libclang's resource usage to standard error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CIndexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:24,Integrability,Interface,Interface,24,"//===- CLog.h - Logging Interface -------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:16,Testability,Log,Logging,16,"//===- CLog.h - Logging Interface -------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:13,Testability,log,logging,13,"/// Collects logging output and writes it to stderr when it's destructed.; /// Common use case:; /// \code; /// if (LogRef Log = Logger::make(__func__)) {; /// *Log << ""stuff"";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:116,Testability,Log,LogRef,116,"/// Collects logging output and writes it to stderr when it's destructed.; /// Common use case:; /// \code; /// if (LogRef Log = Logger::make(__func__)) {; /// *Log << ""stuff"";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:123,Testability,Log,Log,123,"/// Collects logging output and writes it to stderr when it's destructed.; /// Common use case:; /// \code; /// if (LogRef Log = Logger::make(__func__)) {; /// *Log << ""stuff"";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:129,Testability,Log,Logger,129,"/// Collects logging output and writes it to stderr when it's destructed.; /// Common use case:; /// \code; /// if (LogRef Log = Logger::make(__func__)) {; /// *Log << ""stuff"";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:161,Testability,Log,Log,161,"/// Collects logging output and writes it to stderr when it's destructed.; /// Common use case:; /// \code; /// if (LogRef Log = Logger::make(__func__)) {; /// *Log << ""stuff"";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:38,Testability,Log,Logger,38,"/// Macros to automate common uses of Logger. Like this:; /// \code; /// LOG_FUNC_SECTION {; /// *Log << ""blah"";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h:98,Testability,Log,Log,98,"/// Macros to automate common uses of Logger. Like this:; /// \code; /// LOG_FUNC_SECTION {; /// *Log << ""blah"";; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h:39,Integrability,interface,interface,39,"//===- CursorVisitor.h - CursorVisitor interface ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h:16,Energy Efficiency,allocate,allocated,16,// Cache of pre-allocated worklists for data-recursion walk of Stmts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h:3,Performance,Cache,Cache,3,// Cache of pre-allocated worklists for data-recursion walk of Stmts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h:16,Energy Efficiency,allocate,allocated,16,// Free the pre-allocated worklists for data-recursion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CursorVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXComment.h:21,Integrability,Rout,Routines,21,"//===- CXComment.h - Routines for manipulating CXComments -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXComments.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXComment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXComment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXComment.h:401,Integrability,rout,routines,401,"//===- CXComment.h - Routines for manipulating CXComments -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXComments.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXComment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXComment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCompilationDatabase.cpp:44,Availability,error,error,44,// FIXME: do something more useful with the error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCompilationDatabase.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCompilationDatabase.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCompilationDatabase.cpp:50,Integrability,message,message,50,// FIXME: do something more useful with the error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCompilationDatabase.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCompilationDatabase.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp:22,Integrability,Rout,Routines,22,"//===- CXCursor.cpp - Routines for manipulating CXCursors -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXCursors. It should be the; // only file that has internal knowledge of the encoding of the data in; // CXCursor.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp:401,Integrability,rout,routines,401,"//===- CXCursor.cpp - Routines for manipulating CXCursors -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXCursors. It should be the; // only file that has internal knowledge of the encoding of the data in; // CXCursor.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp:10,Security,Expose,Expose,10,// FIXME: Expose these values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp:70,Energy Efficiency,reduce,reduces,70,"// Clear out the vector, but don't free the memory contents. This; // reduces malloc() traffic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp:3,Usability,Clear,Clear,3,"// Clear out the vector, but don't free the memory contents. This; // reduces malloc() traffic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp:76,Availability,avail,available,76,"// Did we get any overridden cursors? If not, return Vec to the pool; // of available cursor vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:20,Integrability,Rout,Routines,20,"//===- CXCursor.h - Routines for manipulating CXCursors -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXCursors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:401,Integrability,rout,routines,401,"//===- CXCursor.h - Routines for manipulating CXCursors -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXCursors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:48,Integrability,interface,interface,48,/// Unpack an ObjCSuperClassRef cursor into the interface it references; /// and optionally the location where the reference occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:26,Integrability,protocol,protocol,26,/// Create an Objective-C protocol reference at the given location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:46,Integrability,protocol,protocol,46,/// Unpack an ObjCProtocolRef cursor into the protocol it references; /// and optionally the location where the reference occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:28,Modifiability,variab,variable,28,/// Create a reference to a variable at the given location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:13,Modifiability,Variab,VariableRef,13,/// Unpack a VariableRef cursor into the variable it references and the; /// location where the where the reference occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:41,Modifiability,variab,variable,41,/// Unpack a VariableRef cursor into the variable it references and the; /// location where the where the reference occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:4,Integrability,Wrap,Wraps,4,"/// Wraps a macro expansion cursor and provides a common interface; /// for a normal macro expansion cursor or a ""pseudo"" one.; ///; /// ""Pseudo"" macro expansion cursors (essentially a macro definition along with; /// a source location) are created in special cases, for example they can be; /// created for identifiers inside macro definitions, if these identifiers are; /// macro names.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:57,Integrability,interface,interface,57,"/// Wraps a macro expansion cursor and provides a common interface; /// for a normal macro expansion cursor or a ""pseudo"" one.; ///; /// ""Pseudo"" macro expansion cursors (essentially a macro definition along with; /// a source location) are created in special cases, for example they can be; /// created for identifiers inside macro definitions, if these identifiers are; /// macro names.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXExtractAPI.cpp:78,Integrability,interface,interface,78,// Build declaration fragments and sub-heading by generating them for the; // interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXExtractAPI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXExtractAPI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXFile.h:18,Integrability,Rout,Routines,18,"//===- CXFile.h - Routines for manipulating CXFile --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXIndexDataConsumer.h:11,Deployability,Release,Release,11,"/// Retain/Release only useful when we allocate a AttrListInfo from the; /// BumpPtrAllocator, and not from the stack; so that we keep a pointer; // in the EntityInfo",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXIndexDataConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXIndexDataConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXIndexDataConsumer.h:39,Energy Efficiency,allocate,allocate,39,"/// Retain/Release only useful when we allocate a AttrListInfo from the; /// BumpPtrAllocator, and not from the stack; so that we keep a pointer; // in the EntityInfo",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXIndexDataConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXIndexDataConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXIndexDataConsumer.h:13,Energy Efficiency,allocate,allocated,13,"// Memory is allocated from a BumpPtrAllocator, no need to delete it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXIndexDataConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXIndexDataConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp:85,Modifiability,Extend,Extend,85,//===----------------------------------------------------------------------===//; // Extend CXDiagnosticSetImpl which contains strings for diagnostics.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp:19,Modifiability,refactor,refactor,19,// FIXME: possibly refactor with logic in CXStoredDiagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp:33,Testability,log,logic,33,// FIXME: possibly refactor with logic in CXStoredDiagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp:311,Performance,optimiz,optimize,311,"// CXSourceLocation consists of the following fields:; //; // void *ptr_data[2];; // unsigned int_data;; //; // The lowest bit of ptr_data[0] is always set to 1 to indicate this; // is a persistent diagnostic.; //; // For now, do the unoptimized approach and store the data in a side; // data structure. We can optimize this case later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.cpp:401,Integrability,rout,routines,401,"//===- CXSourceLocation.cpp - CXSourceLocations APIs ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXSourceLocations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.cpp:24,Usability,clear,clear,24,"// If the lowest bit is clear then the first ptr_data entry is a SourceManager; // pointer, or the CXSourceLocation is a null location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.cpp:85,Integrability,Rout,Routines,85,"//===----------------------------------------------------------------------===//; // Routines for expanding and manipulating CXSourceLocations, regardless; // of their origin.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.h:401,Integrability,rout,routines,401,"//===- CXSourceLocation.h - CXSourceLocations Utilities ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXSourceLocations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.h:295,Integrability,rout,routine,295,"/// Translate a Clang source range into a CIndex source range.; ///; /// Clang internally represents ranges where the end location points to the; /// start of the token at the end. However, for external clients it is more; /// useful to have a CXSourceRange be a proper half-open interval. This routine; /// does the appropriate translation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXSourceLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXStoredDiagnostic.cpp:46,Integrability,Interface,Interface,46,"//===- CXStoredDiagnostic.cpp - Diagnostics C Interface -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements part of the diagnostic functions of the Clang C interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXStoredDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXStoredDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXStoredDiagnostic.cpp:442,Integrability,interface,interface,442,"//===- CXStoredDiagnostic.cpp - Diagnostics C Interface -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements part of the diagnostic functions of the Clang C interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXStoredDiagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXStoredDiagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.cpp:22,Integrability,Rout,Routines,22,"//===- CXString.cpp - Routines for manipulating CXStrings -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXStrings. It should be the; // only file that has internal knowledge of the encoding of the data in; // CXStrings.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.cpp:401,Integrability,rout,routines,401,"//===- CXString.cpp - Routines for manipulating CXStrings -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXStrings. It should be the; // only file that has internal knowledge of the encoding of the data in; // CXStrings.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.cpp:47,Energy Efficiency,allocate,allocated,47,/// CXString contains a 'const char *' that it allocated with malloc().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.h:20,Integrability,Rout,Routines,20,"//===- CXString.h - Routines for manipulating CXStrings -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXStrings.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.h:401,Integrability,rout,routines,401,"//===- CXString.h - Routines for manipulating CXStrings -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXStrings.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.h:121,Availability,error,errors,121,"/// Create a CXString object for an NULL string.; ///; /// A NULL string should be used as an ""invalid"" value in case of errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXTranslationUnit.h:29,Integrability,Rout,Routines,29,"//===- CXTranslationUnit.h - Routines for manipulating CXTranslationUnits -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXTranslationUnits.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXTranslationUnit.h:401,Integrability,rout,routines,401,"//===- CXTranslationUnit.h - Routines for manipulating CXTranslationUnits -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXTranslationUnits.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:20,Security,expose,expose,20,// FIXME: We should expose the canThrow(...) result instead of the EST.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:305,Availability,error,error,305,"// [expr.sizeof] p1: return -1 on: func, incomplete, bitfield, incomplete; // enumeration; // Note: We get the cxtype, not the cxcursor, so we can't call; // FieldDecl->isBitField(); // [expr.sizeof] p3: pointer ok, function not ok.; // [gcc extension] lib/AST/ExprConstant.cpp:1372 HandleSizeof : vla == error",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:3,Security,validat,validate,3,// validate parent declaration,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:3,Security,validat,validate,3,// validate parent type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:62,Integrability,depend,dependent,62,// We recurse into all record fields to detect incomplete and dependent types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:40,Safety,detect,detect,40,// We recurse into all record fields to detect incomplete and dependent types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:35,Integrability,depend,dependent,35,// check that PT is not incomplete/dependent,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:15,Security,validat,validateFieldParentType,15,// verified in validateFieldParentType,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:202,Availability,failure,failure,202,"// If a field of the parent record is incomplete, lookup will fail.; // and we would return InvalidFieldName instead of Incomplete.; // But this erroneous results does protects again a hidden assertion failure; // in the RecordLayoutBuilder",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:192,Testability,assert,assertion,192,"// If a field of the parent record is incomplete, lookup will fail.; // and we would return InvalidFieldName instead of Incomplete.; // But this erroneous results does protects again a hidden assertion failure; // in the RecordLayoutBuilder",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:14,Security,validat,validate,14,// we need to validate the parent type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.h:19,Integrability,Rout,Routines,19,"//===- CXTypes.h - Routines for manipulating CXTypes ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXCursors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.h:401,Integrability,rout,routines,401,"//===- CXTypes.h - Routines for manipulating CXTypes ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXCursors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/CXType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/FatalErrorHandler.cpp:46,Availability,Error,Error,46,"/*===-- clang-c/FatalErrorHandler.cpp - Fatal Error Handling ------*- C -*-===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/FatalErrorHandler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/FatalErrorHandler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/FatalErrorHandler.cpp:34,Safety,avoid,avoiding,34,// Write the result out to stderr avoiding errs() because raw_ostreams can; // call report_fatal_error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/FatalErrorHandler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/FatalErrorHandler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:86,Safety,safe,safe,86,/// Keeps track of function bodies that have already been parsed.; ///; /// Is thread-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:131,Safety,safe,safe,131,/// Provides information whether source locations have already been parsed in; /// another FrontendAction.; ///; /// Is NOT thread-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:4,Deployability,Update,Updates,4,/// Updates ParsedRegionsStorage with newly parsed regions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:85,Deployability,release,released,85,/// MacroUndefined - This hook is called whenever a macro #undef is seen.; /// MI is released immediately following this callback.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Modifiability,Config,Configure,3,// Configure the diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:168,Performance,perform,performance,168,"// Since libclang is primarily used by batch tools dealing with; // (often very broken) source code, where spell-checking can have a; // significant negative impact on performance (particularly when ; // precompiled headers are involved), we disable it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:33,Performance,optimiz,optimization,33,// Enable the skip-parsed-bodies optimization only for C++; this may be; // revisited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Availability,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp:3,Safety,Recover,Recover,3,// Recover resources if we crash before exiting this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Indexing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Indexing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Index_Internal.h:20,Integrability,Rout,Routines,20,"//===- CXString.h - Routines for manipulating CXStrings -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXStrings.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Index_Internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Index_Internal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Index_Internal.h:401,Integrability,rout,routines,401,"//===- CXString.h - Routines for manipulating CXStrings -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for manipulating CXStrings.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Index_Internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Index_Internal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Rewrite.cpp:7,Modifiability,Rewrite,Rewrite,7,"//===- Rewrite.cpp --------------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/libclang/Rewrite.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/Rewrite.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp:28,Deployability,install,installed,28,"//===- NVPTXArch.cpp - list installed NVPTX devies ------*- C++ -*---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a tool for detecting name of CUDA gpus installed in the; // system.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp:443,Deployability,install,installed,443,"//===- NVPTXArch.cpp - list installed NVPTX devies ------*- C++ -*---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a tool for detecting name of CUDA gpus installed in the; // system.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp:415,Safety,detect,detecting,415,"//===- NVPTXArch.cpp - list installed NVPTX devies ------*- C++ -*---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a tool for detecting name of CUDA gpus installed in the; // system.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp:14,Performance,load,load,14,// Attempt to load the NVPTX driver runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js:125,Availability,Down,Download,125,"/*; SortTable; version 2; 7th April 2007; Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/. Instructions:; Download this file; Add <script src=""sorttable.js""></script> to your HTML; Add class=""sortable"" to any table you'd like to make sortable; Click on the headers to sort. Thanks to many, many people for contributions and suggestions.; Licenced as X11: http://www.kryogenix.org/code/browser/licence.html; This basically means: do what you want with it.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js:115,Integrability,depend,depending,115,/* ******************************************************************; Supporting functions: bundled here to avoid depending on a library; ****************************************************************** */; // Dean Edwards/Matthias Miller/John Resig; /* for Mozilla/Opera9 */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js:109,Safety,avoid,avoid,109,/* ******************************************************************; Supporting functions: bundled here to avoid depending on a library; ****************************************************************** */; // Dean Edwards/Matthias Miller/John Resig; /* for Mozilla/Opera9 */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js:12,Security,hash,hash,12,// create a hash table of event types for the element,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js:12,Security,hash,hash,12,// create a hash table of event handlers for each element/event pair,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js:34,Security,hash,hash,34,// store the event handler in the hash table,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js:37,Security,hash,hash,37,// delete the event handler from the hash table,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js:26,Security,hash,hash,26,// get a reference to the hash table of event handlers,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build/share/scan-build/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py:18,Integrability,interface,interface,18,"""""""part of public interface""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py:18,Integrability,interface,interface,18,"""""""part of public interface""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py:18,Integrability,interface,interface,18,"""""""part of public interface""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:130,Integrability,wrap,wrappers,130,"# Run against a build command. there are cases, when analyzer run; # is not required. But we need to set up everything for the; # wrappers, because 'configure' needs to capture the CC/CXX values; # for the Makefile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:149,Modifiability,config,configure,149,"# Run against a build command. there are cases, when analyzer run; # is not required. But we need to set up everything for the; # wrappers, because 'configure' needs to capture the CC/CXX values; # for the Makefile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:47,Integrability,wrap,wrappers,47,# Run build command and analyzer with compiler wrappers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:254,Integrability,wrap,wrappers,254,"""""""Check the intent of the build command. When static analyzer run against project configure step, it should be; silent and no need to run the analyzer or generate report. To run `scan-build` against the configure step might be necessary,; when compiler wrappers are used. That's the moment when build setup; check the compiler and capture the location for the build process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:83,Modifiability,config,configure,83,"""""""Check the intent of the build command. When static analyzer run against project configure step, it should be; silent and no need to run the analyzer or generate report. To run `scan-build` against the configure step might be necessary,; when compiler wrappers are used. That's the moment when build setup; check the compiler and capture the location for the build process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:204,Modifiability,config,configure,204,"""""""Check the intent of the build command. When static analyzer run against project configure step, it should be; silent and no need to run the analyzer or generate report. To run `scan-build` against the configure step might be necessary,; when compiler wrappers are used. That's the moment when build setup; check the compiler and capture the location for the build process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:7,Deployability,configurat,configuration,7,"""""""CTU configuration is created from the chosen phases and dir.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:7,Modifiability,config,configuration,7,"""""""CTU configuration is created from the chosen phases and dir.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:7,Deployability,configurat,configuration,7,"""""""CTU configuration is created from the chosen phases and dir.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:7,Modifiability,config,configuration,7,"""""""CTU configuration is created from the chosen phases and dir.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:2,Availability,Recover,Recover,2,# Recover namedtuple from json when coming from analyze-cc or analyze-c++,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:2,Safety,Recover,Recover,2,# Recover namedtuple from json when coming from analyze-cc or analyze-c++,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:10,Availability,error,error,10,# display error message from the static analyzer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:16,Integrability,message,message,16,# display error message from the static analyzer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:62,Integrability,wrap,wrapper,62,"""""""Set up environment for build command to interpose compiler wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:59,Integrability,wrap,wrappers,59,"""""""Entry point for `analyze-cc` and `analyze-c++` compiler wrappers.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:32,Integrability,wrap,wrapper,32,"""""""Implements analyzer compiler wrapper functionality.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:10,Availability,error,error,10,# display error message from the static analyzer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:16,Integrability,message,message,16,# display error message from the static analyzer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:461,Integrability,contract,contract,461,"""""""Entry point to run (or not) static analyzer against a single entry; of the compilation database. This complex task is decomposed into smaller methods which are calling; each other in chain. If the analysis is not possible the given method; just return and break the chain. The passed parameter is a python dictionary. Each method first check; that the needed parameters received. (This is done by the 'require'; decorator. It's like an 'assert' to check the contract between the; caller and the called method.)""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:440,Testability,assert,assert,440,"""""""Entry point to run (or not) static analyzer against a single entry; of the compilation database. This complex task is decomposed into smaller methods which are calling; each other in chain. If the analysis is not possible the given method; just return and break the chain. The passed parameter is a python dictionary. Each method first check; that the needed parameters received. (This is done by the 'require'; decorator. It's like an 'assert' to check the contract between the; caller and the called method.)""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:11,Availability,failure,failures,11,"""""""Creates failures directory if not exits yet.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:11,Availability,error,error,11,# Classify error type: when Clang terminated by a signal it's a 'Crash'.; # (python subprocess Popen.returncode is negative when child terminated; # by signal.) Everything else is 'Other Error'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:187,Availability,Error,Error,187,# Classify error type: when Clang terminated by a signal it's a 'Crash'.; # (python subprocess Popen.returncode is negative when child terminated; # by signal.) Everything else is 'Other Error'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:119,Availability,failure,failure,119,"""""""It assembles the analysis command line and executes it. Capture the; output of the analysis and returns with it. If failure reports are; requested, it calls the continuation to generate it.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:49,Modifiability,inherit,inherited,49,# will set up own output file; # flags below are inherited from the perl implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:64,Integrability,interface,interfaces,64,""""""" This module parses and validates arguments for command-line interfaces. It uses argparse module to create the command line parser. (This library is; in the standard python library since 3.2 and backported to 2.7, but not; earlier.). It also implements basic validation methods, related to the command.; Validations are mostly calling specific help methods, or mangling values.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:27,Security,validat,validates,27,""""""" This module parses and validates arguments for command-line interfaces. It uses argparse module to create the command line parser. (This library is; in the standard python library since 3.2 and backported to 2.7, but not; earlier.). It also implements basic validation methods, related to the command.; Validations are mostly calling specific help methods, or mangling values.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:262,Security,validat,validation,262,""""""" This module parses and validates arguments for command-line interfaces. It uses argparse module to create the command line parser. (This library is; in the standard python library since 3.2 and backported to 2.7, but not; earlier.). It also implements basic validation methods, related to the command.; Validations are mostly calling specific help methods, or mangling values.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:307,Security,Validat,Validations,307,""""""" This module parses and validates arguments for command-line interfaces. It uses argparse module to create the command line parser. (This library is; in the standard python library since 3.2 and backported to 2.7, but not; earlier.). It also implements basic validation methods, related to the command.; Validations are mostly calling specific help methods, or mangling values.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,Security,validat,validate,13,"""""""Parse and validate command-line arguments for intercept-build.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:8,Security,validat,validation,8,# short validation logic,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:19,Testability,log,logic,19,# short validation logic,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,Security,validat,validate,13,"""""""Parse and validate command-line arguments for analyze-build.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,Security,validat,validate,13,"""""""Parse and validate command-line arguments for scan-build.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:7,Modifiability,plugin,plugins,7,# make plugins always a list. (it might be None when not specified.),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:70,Security,validat,validation,70,"""""""Command line parsing is done by the argparse module, but semantic; validation still needs to be done. This method is doing it for; analyze-build and scan-build commands. :param parser: The command line parser object.; :param args: Parsed argument object.; :param from_build_command: Boolean value tells is the command suppose; to run the analyzer against a build command or a compilation db.; :return: No return value, but this call might throw when validation; fails.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:453,Security,validat,validation,453,"""""""Command line parsing is done by the argparse module, but semantic; validation still needs to be done. This method is doing it for; analyze-build and scan-build commands. :param parser: The command line parser object.; :param args: Parsed argument object.; :param from_build_command: Boolean value tells is the command suppose; to run the analyzer against a build command or a compilation db.; :return: No return value, but this call might throw when validation; fails.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:146,Deployability,continuous,continuously,146,"""""""Extend existing compilation database with new entries.; Duplicate entries are detected and not present in the final output.; The output is not continuously updated, it's done when the build; command finished. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:159,Deployability,update,updated,159,"""""""Extend existing compilation database with new entries.; Duplicate entries are detected and not present in the final output.; The output is not continuously updated, it's done when the build; command finished. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:3,Modifiability,Extend,Extend,3,"""""""Extend existing compilation database with new entries.; Duplicate entries are detected and not present in the final output.; The output is not continuously updated, it's done when the build; command finished. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:81,Safety,detect,detected,81,"""""""Extend existing compilation database with new entries.; Duplicate entries are detected and not present in the final output.; The output is not continuously updated, it's done when the build; command finished. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:210,Integrability,wrap,wrapper,210,"""""""Run the build commands first, intercept compiler; calls and then run the static analyzer afterwards.; Generally speaking it has better coverage on build commands.; With '--override-compiler' it use compiler wrapper, but does; not run the analyzer till the build is finished.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:20,Availability,failure,failures,20,"""""""Do not create a 'failures' subdirectory that includes analyzer; crash reports and preprocessed source files.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:96,Energy Efficiency,power,powerful,96,"""""""Specify the constraint engine used by the analyzer. Specifying; 'basic' uses a simpler, less powerful constraint model used by; checker-0.160 and earlier.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:82,Usability,simpl,simpler,82,"""""""Specify the constraint engine used by the analyzer. Specifying; 'basic' uses a simpler, less powerful constraint model used by; checker-0.160 and earlier.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:143,Availability,Avail,Available,143,"""""""Provide options to pass through to the analyzer's; -analyzer-config flag. Several options are separated with comma:; 'key1=val1,key2=val2'. Available options:; stable-report-filename=true or false (default). Switch the page naming to:; report-<filename>-<function/method name>-<id>.html; instead of report-XXXXXX.html""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:64,Modifiability,config,config,64,"""""""Provide options to pass through to the analyzer's; -analyzer-config flag. Several options are separated with comma:; 'key1=val1,key2=val2'. Available options:; stable-report-filename=true or false (default). Switch the page naming to:; report-<filename>-<function/method name>-<id>.html; instead of report-XXXXXX.html""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:28,Testability,assert,assertions,28,"""""""Tells analyzer to enable assertions in code even if they were; disabled during compilation, enabling more precise results.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:52,Integrability,interface,interface,52,"""""""Loading external checkers using the clang plugin interface.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:45,Modifiability,plugin,plugin,45,"""""""Loading external checkers using the clang plugin interface.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:3,Performance,Load,Loading,3,"""""""Loading external checkers using the clang plugin interface.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,Availability,avail,available,13,"""""""Print all available checkers and mark the enabled ones.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:3,Performance,Perform,Perform,3,"""""""Perform cross translation unit (ctu) analysis (both collect; and analyze phases) using default <ctu-dir> for temporary output.; At the end of the analysis, the temporary directory is removed.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:3,Performance,Perform,Perform,3,"""""""Perform only the collect phase of ctu.; Keep <ctu-dir> for further use.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:3,Performance,Perform,Perform,3,"""""""Perform only the analyze phase of ctu. <ctu-dir> should be; present and will not be removed after analysis.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:45,Integrability,wrap,wrapper,45,"""""""Creates command line parser for all build wrapper commands.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:81,Availability,avail,available,81,"""""""Always resort to the compiler wrapper even when better; intercept methods are available.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:33,Integrability,wrap,wrapper,33,"""""""Always resort to the compiler wrapper even when better; intercept methods are available.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:65,Integrability,wrap,wrapper,65,"""""""When '%(prog)s' analyzes a project by interposing a compiler; wrapper, which executes a real compiler for compilation and do other; tasks (record the compiler invocation). Because of this interposing,; '%(prog)s' does not know what compiler your project normally uses.; Instead, it simply overrides the CC environment variable, and guesses; your default compiler. If you need '%(prog)s' to use a specific compiler for *compilation*; then you can use this option to specify a path to that compiler.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:321,Modifiability,variab,variable,321,"""""""When '%(prog)s' analyzes a project by interposing a compiler; wrapper, which executes a real compiler for compilation and do other; tasks (record the compiler invocation). Because of this interposing,; '%(prog)s' does not know what compiler your project normally uses.; Instead, it simply overrides the CC environment variable, and guesses; your default compiler. If you need '%(prog)s' to use a specific compiler for *compilation*; then you can use this option to specify a path to that compiler.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:285,Usability,simpl,simply,285,"""""""When '%(prog)s' analyzes a project by interposing a compiler; wrapper, which executes a real compiler for compilation and do other; tasks (record the compiler invocation). Because of this interposing,; '%(prog)s' does not know what compiler your project normally uses.; Instead, it simply overrides the CC environment variable, and guesses; your default compiler. If you need '%(prog)s' to use a specific compiler for *compilation*; then you can use this option to specify a path to that compiler.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:82,Integrability,interface,interface,82,""""""" This module is responsible for the Clang executable. Since Clang command line interface is so rich, but this project is using only; a subset of that, it makes sense to create a function specific wrapper. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:199,Integrability,wrap,wrapper,199,""""""" This module is responsible for the Clang executable. Since Clang command line interface is so rich, but this project is using only; a subset of that, it makes sense to create a function specific wrapper. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:80,Modifiability,plugin,plugins,80,"""""""Get the active checker list. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: list of checker names which are active. To get the default checkers we execute Clang to print how this; compilation would be called. And take out the enabled checker from the; arguments. For input file we specify stdin and pass only language; information.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:97,Modifiability,plugin,plugins,97,"""""""Get the active checker list. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: list of checker names which are active. To get the default checkers we execute Clang to print how this; compilation would be called. And take out the enabled checker from the; arguments. For input file we specify stdin and pass only language; information.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:15,Availability,avail,available,15,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:204,Availability,avail,available,204,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:60,Modifiability,plugin,plugins,60,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:117,Modifiability,plugin,plugins,117,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:134,Modifiability,plugin,plugins,134,"""""""Get all the available checkers from default and from the plugins. :param clang: the compiler we are using; :param plugins: list of plugins which was requested by the user; :return: a dictionary of all available checkers and its status. {<checker name>: (<checker description>, <is active by default>)}""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py:3,Safety,Detect,Detects,3,"""""""Detects if the current (or given) clang and external definition mapping; executables are CTU compatible.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/clang.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:693,Integrability,wrap,wrappers,693,""""""" This module is responsible to capture the compiler invocation of any; build process. The result of that should be a compilation database. This implementation is using the LD_PRELOAD or DYLD_INSERT_LIBRARIES; mechanisms provided by the dynamic linker. The related library is implemented; in C language and can be found under 'libear' directory. The 'libear' library is capturing all child process creation and logging the; relevant information about it into separate files in a specified directory.; The parameter of this process is the output directory name, where the report; files shall be placed. This parameter is passed as an environment variable. The module also implements compiler wrappers to intercept the compiler calls. The module implements the build command execution and the post-processing of; the output files, which will condensates into a compilation database. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:647,Modifiability,variab,variable,647,""""""" This module is responsible to capture the compiler invocation of any; build process. The result of that should be a compilation database. This implementation is using the LD_PRELOAD or DYLD_INSERT_LIBRARIES; mechanisms provided by the dynamic linker. The related library is implemented; in C language and can be found under 'libear' directory. The 'libear' library is capturing all child process creation and logging the; relevant information about it into separate files in a specified directory.; The parameter of this process is the output directory name, where the report; files shall be placed. This parameter is passed as an environment variable. The module also implements compiler wrappers to intercept the compiler calls. The module implements the build command execution and the post-processing of; the output files, which will condensates into a compilation database. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:413,Testability,log,logging,413,""""""" This module is responsible to capture the compiler invocation of any; build process. The result of that should be a compilation database. This implementation is using the LD_PRELOAD or DYLD_INSERT_LIBRARIES; mechanisms provided by the dynamic linker. The related library is implemented; in C language and can be found under 'libear' directory. The 'libear' library is capturing all child process creation and logging the; relevant information about it into separate files in a specified directory.; The parameter of this process is the output directory name, where the report; files shall be placed. This parameter is passed as an environment variable. The module also implements compiler wrappers to intercept the compiler calls. The module implements the build command execution and the post-processing of; the output files, which will condensates into a compilation database. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:201,Integrability,wrap,wrapper,201,"""""""Sets up the environment for the build command. It sets the required environment variables and execute the given command.; The exec calls will be logged by the 'libear' preloaded library or by the; 'wrapper' programs.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:83,Modifiability,variab,variables,83,"""""""Sets up the environment for the build command. It sets the required environment variables and execute the given command.; The exec calls will be logged by the 'libear' preloaded library or by the; 'wrapper' programs.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:148,Testability,log,logged,148,"""""""Sets up the environment for the build command. It sets the required environment variables and execute the given command.; The exec calls will be logged by the 'libear' preloaded library or by the; 'wrapper' programs.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:32,Integrability,wrap,wrapper,32,"""""""Implement intercept compiler wrapper functionality. It does generate execution report into target directory.; The target directory name is from environment variables.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:159,Modifiability,variab,variables,159,"""""""Implement intercept compiler wrapper functionality. It does generate execution report into target directory.; The target directory name is from environment variables.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:169,Integrability,wrap,wrapper,169,"""""""Parse the file generated by the 'libear' preloaded library. Given filename points to a file which contains the basic report; generated by the interception library or wrapper command. A single; report file _might_ contain multiple process creation info.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:88,Safety,detect,detected,88,"""""""Library-based interposition will fail silently if SIP is enabled,; so this should be detected. You can detect whether SIP is enabled on; Darwin by checking whether (1) there is a binary called 'csrutil' in; the path and, if so, (2) whether the output of executing 'csrutil status'; contains 'System Integrity Protection status: enabled'. :param platform: name of the platform (returned by sys.platform),; :return: True if library preload will fail by the dynamic linker.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:106,Safety,detect,detect,106,"""""""Library-based interposition will fail silently if SIP is enabled,; so this should be detected. You can detect whether SIP is enabled on; Darwin by checking whether (1) there is a binary called 'csrutil' in; the path and, if so, (2) whether the output of executing 'csrutil status'; contains 'System Integrity Protection status: enabled'. :param platform: name of the platform (returned by sys.platform),; :return: True if library preload will fail by the dynamic linker.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:302,Security,Integrity,Integrity,302,"""""""Library-based interposition will fail silently if SIP is enabled,; so this should be detected. You can detect whether SIP is enabled on; Darwin by checking whether (1) there is a binary called 'csrutil' in; the path and, if so, (2) whether the output of executing 'csrutil status'; contains 'System Integrity Protection status: enabled'. :param platform: name of the platform (returned by sys.platform),; :return: True if library preload will fail by the dynamic linker.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:20,Security,hash,hash,20,"""""""Implement unique hash method for compilation database entries.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:43,Integrability,wrap,wrappers,43,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:107,Safety,avoid,avoid,107,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:125,Security,hash,hash,125,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:96,Testability,log,logged,96,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:153,Deployability,Toggle,ToggleDisplay,153,"""""""; | <tr>; | <td class=""SUMM_DESC"">{bug_type}</td>; | <td class=""Q"">{bug_count}</td>; | <td>; | <center>; | <input checked type=""checkbox""; | onClick=""ToggleDisplay(this,'{bug_type_class}');""/>; | </center>; | </td>; | </tr>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:19,Availability,Failure,Failures,19,"""""""; |<h2>Analyzer Failures</h2>; |<p>The analyzer had problems processing the following files:</p>; |<table>; | <thead>; | <tr>; | <td>Problem</td>; | <td>Source File</td>; | <td>Preprocessed File</td>; | <td>STDERR Output</td>; | </tr>; | </thead>; | <tbody>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:257,Integrability,message,messages,257,"""""""Reads and merges all .sarif files in the given output directory. Each sarif file in the output directory is understood as a single run; and thus appear separate in the top level runs array. This requires; modifying the run index of any embedded links in messages.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:98,Deployability,update,updates,98,"""""""; Given a SARIF object, checks its dictionary entries for a 'message' property.; If it exists, updates the message index of embedded links in the run index. Recursively looks through entries in the dictionary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:64,Integrability,message,message,64,"""""""; Given a SARIF object, checks its dictionary entries for a 'message' property.; If it exists, updates the message index of embedded links in the run index. Recursively looks through entries in the dictionary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:110,Integrability,message,message,110,"""""""; Given a SARIF object, checks its dictionary entries for a 'message' property.; If it exists, updates the message index of embedded links in the run index. Recursively looks through entries in the dictionary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:33,Deployability,update,update,33,# iterate through subobjects and update it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:94,Deployability,update,updates,94,"""""""; Given a SARIF message object, checks if the text property contains an embedded link and; updates the run index if necessary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:19,Integrability,message,message,19,"""""""; Given a SARIF message object, checks if the text property contains an embedded link and; updates the run index if necessary.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:41,Deployability,update,update,41,"# we only merge runs, so we only need to update the run index",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:2,Deployability,update,update,2,# update matches from right to left to make increasing character length (9->10) smoother,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:2,Security,expose,exposed,2,# exposed for testing since the order of files returned by glob is not guaranteed to be sorted,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:14,Testability,test,testing,14,# exposed for testing since the order of files returned by glob is not guaranteed to be sorted,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:8,Safety,safe,safe,8,"""""""Make safe this values to embed into HTML.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:8,Safety,safe,safe,8,"""""""Make safe this values to embed into HTML.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:46,Deployability,update,update,46,"""""""Run 'encode' on 'container[key]' value and update it.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:16,Safety,detect,detect,16,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:76,Safety,detect,detect,76,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:284,Safety,detect,detect,284,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:50,Security,hash,hash,50,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:158,Security,hash,hash,158,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:232,Security,hash,hash,232,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:40,Integrability,depend,depend,40,"""""""check_output returns bytes or string depend on python version""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:15,Testability,log,logging,15,"""""""Reconfigure logging level and format based on the verbose flag. :param verbose_level: number of `-v` flags received by the command; :return: no return value; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:2,Performance,Tune,Tune,2,# Tune logging level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:7,Testability,log,logging,7,# Tune logging level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:18,Integrability,message,messages,18,# Be verbose with messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:108,Availability,error,errors,108,"""""""Decorator for command entry methods. The decorator initialize/shutdown logging and guard on programming; errors (catch exceptions). The decorated method can have arbitrary parameters, the return value will; be the exit code of the process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:74,Testability,log,logging,74,"""""""Decorator for command entry methods. The decorator initialize/shutdown logging and guard on programming; errors (catch exceptions). The decorated method can have arbitrary parameters, the return value will; be the exit code of the process.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:41,Integrability,wrap,wrapped,41,"""""""Do housekeeping tasks and execute the wrapped method.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:39,Availability,error,errors,39,# Some non used exit code for internal errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:23,Integrability,wrap,wrapper,23,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:62,Integrability,wrap,wrapper,62,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:231,Integrability,wrap,wrapper,231,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:537,Integrability,wrap,wrapper,537,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:327,Testability,log,logged,327,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:49,Integrability,wrap,wrapper,49,"""""""Find out was it a C++ compiler call. Compiler wrapper names; contain the compiler type. C++ compiler wrappers ends with `c++`,; but might have `.exe` extension on windows.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:104,Integrability,wrap,wrappers,104,"""""""Find out was it a C++ compiler call. Compiler wrapper names; contain the compiler type. C++ compiler wrappers ends with `c++`,; but might have `.exe` extension on windows.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:11,Integrability,wrap,wrapped,11,# Call the wrapped method and ignore it's return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:45,Integrability,wrap,wrapper,45,"""""""Set up environment for interpose compiler wrapper.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js:125,Availability,Down,Download,125,"/*; SortTable; version 2; 7th April 2007; Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/. Instructions:; Download this file; Add <script src=""sorttable.js""></script> to your HTML; Add class=""sortable"" to any table you'd like to make sortable; Click on the headers to sort. Thanks to many, many people for contributions and suggestions.; Licenced as X11: http://www.kryogenix.org/code/browser/licence.html; This basically means: do what you want with it.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js:115,Integrability,depend,depending,115,/* ******************************************************************; Supporting functions: bundled here to avoid depending on a library; ****************************************************************** */; // Dean Edwards/Matthias Miller/John Resig; /* for Mozilla/Opera9 */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js:109,Safety,avoid,avoid,109,/* ******************************************************************; Supporting functions: bundled here to avoid depending on a library; ****************************************************************** */; // Dean Edwards/Matthias Miller/John Resig; /* for Mozilla/Opera9 */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js:12,Security,hash,hash,12,// create a hash table of event types for the element,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js:12,Security,hash,hash,12,// create a hash table of event handlers for each element/event pair,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js:34,Security,hash,hash,34,// store the event handler in the hash table,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js:37,Security,hash,hash,37,// delete the event handler from the hash table,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js:26,Security,hash,hash,26,// get a reference to the hash table of event handlers,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js:125,Availability,Down,Download,125,"/*; SortTable; version 2; 7th April 2007; Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/. Instructions:; Download this file; Add <script src=""sorttable.js""></script> to your HTML; Add class=""sortable"" to any table you'd like to make sortable; Click on the headers to sort. Thanks to many, many people for contributions and suggestions.; Licenced as X11: http://www.kryogenix.org/code/browser/licence.html; This basically means: do what you want with it.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js:115,Integrability,depend,depending,115,/* ******************************************************************; Supporting functions: bundled here to avoid depending on a library; ****************************************************************** */; // Dean Edwards/Matthias Miller/John Resig; /* for Mozilla/Opera9 */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js:109,Safety,avoid,avoid,109,/* ******************************************************************; Supporting functions: bundled here to avoid depending on a library; ****************************************************************** */; // Dean Edwards/Matthias Miller/John Resig; /* for Mozilla/Opera9 */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js:12,Security,hash,hash,12,// create a hash table of event types for the element,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js:12,Security,hash,hash,12,// create a hash table of event handlers for each element/event pair,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js:34,Security,hash,hash,34,// store the event handler in the hash table,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js:37,Security,hash,hash,37,// delete the event handler from the hash table,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js:26,Security,hash,hash,26,// get a reference to the hash table of event handlers,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/libscanbuild/resources/sorttable.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py:25,Availability,failure,failures,25,"""""""Generic exception for failures in bug reporting.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py:11,Integrability,interface,interfaces,11,# Reporter interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py:114,Usability,simpl,simple,114,"# Guess the content type based on the file's extension. Encoding; # will be ignored, although we should check for simple things like; # gzip'd or compressed files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py:13,Modifiability,config,config,13,# FIXME: Get config parameters,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/Reporter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:70,Performance,load,load,70,"""""""\; <script language=""javascript"" type=""text/javascript"">; function load(url) {; if (window.XMLHttpRequest) {; req = new XMLHttpRequest();; } else if (window.ActiveXObject) {; req = new ActiveXObject(""Microsoft.XMLHTTP"");; }; if (req != undefined) {; req.open(""GET"", url, true);; req.send("""");; }; }; </script>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:401,Usability,simpl,simple,401,"# Insert report crashes link.; # Disabled for the time being until we decide exactly when this should; # be enabled. Also the radar reporter needs to be fixed to report; # multiple files.; # kReportReplacements.append((re.compile('<!-- REPORTCRASHES -->'),; # '<br>These files will automatically be attached to ' +; # 'reports filed here: <a href=""report_crashes"">Report Crashes</a>.')); ###; # Other simple parameters",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:15,Availability,error,errors,15,# Ignore parse errors,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:9,Availability,error,errors,9,# Ignore errors (only called on exit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:16,Availability,error,errors,16,# Ignore socket errors,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:30,Usability,simpl,simplifications,30,"# Borrowed from Quixote, with simplifications.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:2,Deployability,Update,Update,2,# Update config defaults.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:9,Modifiability,config,config,9,# Update config defaults.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:719,Integrability,message,message,719,"""""""; <head>; <title>Bug Submission</title>; <link rel=""stylesheet"" type=""text/css"" href=""/scanview.css"" />; </head>; <body>; <h3>; <a href=""/"">Summary</a> > ; %(reportingFor)s; %(fileBug)s; Submit</h3>; <form name=""form"" action="""">; <table class=""form"">; <tr><td>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Title:</td>; <td class=""form_value"">; <input type=""text"" name=""title"" size=""50"" value=""%(title)s"" disabled>; </td>; </tr>; <tr>; <td class=""form_label"">Description:</td>; <td class=""form_value"">; <textarea rows=""10"" cols=""80"" name=""description"" disabled>; %(description)s; </textarea>; </td>; </table>; </td></tr>; </table>; </form>; <h1 class=""%(statusClass)s"">Submission %(statusName)s</h1>; %(message)s; <p>; <hr>; <a href=""/"">Return to Summary</a>; </body>; </html>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:218,Deployability,update,updateReporterOptions,218,"""""""<html>; <head>; <title>File Bug</title>; <link rel=""stylesheet"" type=""text/css"" href=""/scanview.css"" />; </head>; <script language=""javascript"" type=""text/javascript"">; var reporters = %(reportersArray)s;; function updateReporterOptions() {; index = document.getElementById('reporter').selectedIndex;; for (var i=0; i < reporters.length; ++i) {; o = document.getElementById(reporters[i] + ""ReporterOptions"");; if (i == index) {; o.style.display = """";; } else {; o.style.display = ""none"";; }; }; }; </script>; <body onLoad=""updateReporterOptions()"">; <h3>; <a href=""/"">Summary</a> > ; %(reportingFor)s; File Bug</h3>; <form name=""form"" action=""/report_submit"" method=""post"">; <input type=""hidden"" name=""report"" value=""%(report)s"">. <table class=""form"">; <tr><td>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Title:</td>; <td class=""form_value"">; <input type=""text"" name=""title"" size=""50"" value=""%(title)s"">; </td>; </tr>; <tr>; <td class=""form_label"">Description:</td>; <td class=""form_value"">; <textarea rows=""10"" cols=""80"" name=""description"">; %(description)s; </textarea>; </td>; </tr>. %(attachFileRow)s. </table>; <br>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Method:</td>; <td class=""form_value"">; <select id=""reporter"" name=""reporter"" onChange=""updateReporterOptions()"">; %(reporterSelections)s; </select>; </td>; </tr>; %(reporterOptionsDivs)s; </table>; <br>; </td></tr>; <tr><td class=""form_submit"">; <input align=""right"" type=""submit"" name=""Submit"" value=""Submit"">; </td></tr>; </table>; </form>. %(extraIFrame)s. </body>; </html>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:526,Deployability,update,updateReporterOptions,526,"""""""<html>; <head>; <title>File Bug</title>; <link rel=""stylesheet"" type=""text/css"" href=""/scanview.css"" />; </head>; <script language=""javascript"" type=""text/javascript"">; var reporters = %(reportersArray)s;; function updateReporterOptions() {; index = document.getElementById('reporter').selectedIndex;; for (var i=0; i < reporters.length; ++i) {; o = document.getElementById(reporters[i] + ""ReporterOptions"");; if (i == index) {; o.style.display = """";; } else {; o.style.display = ""none"";; }; }; }; </script>; <body onLoad=""updateReporterOptions()"">; <h3>; <a href=""/"">Summary</a> > ; %(reportingFor)s; File Bug</h3>; <form name=""form"" action=""/report_submit"" method=""post"">; <input type=""hidden"" name=""report"" value=""%(report)s"">. <table class=""form"">; <tr><td>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Title:</td>; <td class=""form_value"">; <input type=""text"" name=""title"" size=""50"" value=""%(title)s"">; </td>; </tr>; <tr>; <td class=""form_label"">Description:</td>; <td class=""form_value"">; <textarea rows=""10"" cols=""80"" name=""description"">; %(description)s; </textarea>; </td>; </tr>. %(attachFileRow)s. </table>; <br>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Method:</td>; <td class=""form_value"">; <select id=""reporter"" name=""reporter"" onChange=""updateReporterOptions()"">; %(reporterSelections)s; </select>; </td>; </tr>; %(reporterOptionsDivs)s; </table>; <br>; </td></tr>; <tr><td class=""form_submit"">; <input align=""right"" type=""submit"" name=""Submit"" value=""Submit"">; </td></tr>; </table>; </form>. %(extraIFrame)s. </body>; </html>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:1286,Deployability,update,updateReporterOptions,1286,"""""""<html>; <head>; <title>File Bug</title>; <link rel=""stylesheet"" type=""text/css"" href=""/scanview.css"" />; </head>; <script language=""javascript"" type=""text/javascript"">; var reporters = %(reportersArray)s;; function updateReporterOptions() {; index = document.getElementById('reporter').selectedIndex;; for (var i=0; i < reporters.length; ++i) {; o = document.getElementById(reporters[i] + ""ReporterOptions"");; if (i == index) {; o.style.display = """";; } else {; o.style.display = ""none"";; }; }; }; </script>; <body onLoad=""updateReporterOptions()"">; <h3>; <a href=""/"">Summary</a> > ; %(reportingFor)s; File Bug</h3>; <form name=""form"" action=""/report_submit"" method=""post"">; <input type=""hidden"" name=""report"" value=""%(report)s"">. <table class=""form"">; <tr><td>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Title:</td>; <td class=""form_value"">; <input type=""text"" name=""title"" size=""50"" value=""%(title)s"">; </td>; </tr>; <tr>; <td class=""form_label"">Description:</td>; <td class=""form_value"">; <textarea rows=""10"" cols=""80"" name=""description"">; %(description)s; </textarea>; </td>; </tr>. %(attachFileRow)s. </table>; <br>; <table class=""form_group"">; <tr>; <td class=""form_clabel"">Method:</td>; <td class=""form_value"">; <select id=""reporter"" name=""reporter"" onChange=""updateReporterOptions()"">; %(reporterSelections)s; </select>; </td>; </tr>; %(reporterOptionsDivs)s; </table>; <br>; </td></tr>; <tr><td class=""form_submit"">; <input align=""right"" type=""submit"" name=""Submit"" value=""Submit"">; </td></tr>; </table>; </form>. %(extraIFrame)s. </body>; </html>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:2,Deployability,Patch,Patch,2,# Patch file instead,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:2,Deployability,Patch,Patch,2,"# Patch files to add links, but skip binary files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py:30,Modifiability,variab,variables,30,# Allow a very limited set of variables. This is pretty gross.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/ScanView.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/startfile.py:3,Availability,Error,Error,3,# [Error 22] No application is associated with the specified; # file for this operation: '<URL>',MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/tools/scan-view/share/startfile.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-view/share/startfile.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ClangDataFormat.py:9,Performance,CACHE,CACHE,9,"# print ""CACHE MISS""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ClangDataFormat.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ClangDataFormat.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ClangDataFormat.py:9,Security,Hash,Hashing,9,"# FIXME: Hashing for SBTypes does not seem to work correctly, uses the typename instead,; # and not the canonical one unfortunately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ClangDataFormat.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ClangDataFormat.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:1680,Availability,avail,available,1680,""""""" Commands for managing clang diagnostic breakpoints. Syntax: clangdiag enable [<warning>|<diag-name>]; clangdiag disable; clangdiag diagtool [<path>|reset]. The following subcommands are supported:. enable -- Enable clang diagnostic breakpoints.; disable -- Disable all clang diagnostic breakpoints.; diagtool -- Return, set, or reset diagtool path. This command sets breakpoints in clang, and clang based tools, that; emit diagnostics. When a diagnostic is emitted, and clangdiag is; enabled, it will use the appropriate diagtool application to determine; the name of the DiagID, and set breakpoints in all locations that; 'diag::name' appears in the source. Since the new breakpoints are set; after they are encountered, users will need to launch the executable a; second time in order to hit the new breakpoints. For in-tree builds, the diagtool application, used to map DiagID's to; names, is found automatically in the same directory as the target; executable. However, out-or-tree builds must use the 'diagtool'; subcommand to set the appropriate path for diagtool in the clang debug; bin directory. Since this mapping is created at build-time, it's; important for users to use the same version that was generated when; clang was compiled, or else the id's won't match. Notes:; - Substrings can be passed for both <warning> and <diag-name>.; - If <warning> is passed, only enable the DiagID(s) for that warning.; - If <diag-name> is passed, only enable that DiagID.; - Rerunning enable clears existing breakpoints.; - diagtool is used in breakpoint callbacks, so it can be changed; without the need to rerun enable.; - Adding this to your ~.lldbinit file makes clangdiag available at startup:; ""command script import /path/to/clangdiag.py"". """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:1495,Usability,clear,clears,1495,""""""" Commands for managing clang diagnostic breakpoints. Syntax: clangdiag enable [<warning>|<diag-name>]; clangdiag disable; clangdiag diagtool [<path>|reset]. The following subcommands are supported:. enable -- Enable clang diagnostic breakpoints.; disable -- Disable all clang diagnostic breakpoints.; diagtool -- Return, set, or reset diagtool path. This command sets breakpoints in clang, and clang based tools, that; emit diagnostics. When a diagnostic is emitted, and clangdiag is; enabled, it will use the appropriate diagtool application to determine; the name of the DiagID, and set breakpoints in all locations that; 'diag::name' appears in the source. Since the new breakpoints are set; after they are encountered, users will need to launch the executable a; second time in order to hit the new breakpoints. For in-tree builds, the diagtool application, used to map DiagID's to; names, is found automatically in the same directory as the target; executable. However, out-or-tree builds must use the 'diagtool'; subcommand to set the appropriate path for diagtool in the clang debug; bin directory. Since this mapping is created at build-time, it's; important for users to use the same version that was generated when; clang was compiled, or else the id's won't match. Notes:; - Substrings can be passed for both <warning> and <diag-name>.; - If <warning> is passed, only enable the DiagID(s) for that warning.; - If <diag-name> is passed, only enable that DiagID.; - Rerunning enable clears existing breakpoints.; - diagtool is used in breakpoint callbacks, so it can be changed; without the need to rerun enable.; - Adding this to your ~.lldbinit file makes clangdiag available at startup:; ""command script import /path/to/clangdiag.py"". """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:16,Testability,test,test,16,"# Don't need to test this time, since we did that in enable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:29,Availability,error,errors,29,"# Make sure we only consider errors, warnings, and extensions.; # FIXME: Make this configurable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:83,Modifiability,config,configurable,83,"# Make sure we only consider errors, warnings, and extensions.; # FIXME: Make this configurable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:29,Availability,error,errors,29,"# Make sure we only consider errors, warnings, and extensions.; # FIXME: Make this configurable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:83,Modifiability,config,configurable,83,"# Make sure we only consider errors, warnings, and extensions.; # FIXME: Make this configurable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/clangdiag.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/convert_arm_neon.py:130,Deployability,release,release,130,"#!/usr/bin/env python3; # This script was committed on 20/11/2019 and it would probably make sense to remove; # it after the next release branches.; # This script is pipe based and converts an arm_neon.td (or arm_fp16.td) file; # using the old single-char type modifiers to an equivalent new-style form where; # each modifier is orthogonal and they can be composed.; #; # It was used to directly generate the .td files on main, so if you have any; # local additions I would suggest implementing any modifiers here, and running; # it over your entire pre-merge .td files rather than trying to resolve any; # conflicts manually.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/convert_arm_neon.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/convert_arm_neon.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:11,Energy Efficiency,Reduce,Reduce,11,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:85,Energy Efficiency,reduce,reduced,85,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:142,Energy Efficiency,reduce,reduced,142,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:161,Energy Efficiency,reduce,reduced,161,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:215,Energy Efficiency,Reduce,Reduce,215,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:177,Testability,test,test,177,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:204,Testability,test,test,204,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:40,Testability,test,test,40,# Make the path absolute so the creduce test can be run from any directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:20,Availability,error,error,20,# Look for specific error messages,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:26,Integrability,message,messages,26,# Look for specific error messages,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:8,Testability,assert,assert,8,# Linux assert(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:14,Testability,assert,assert,14,# FreeBSD/Mac assert(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:8,Integrability,message,message,8,"# If no message was found, use the top five stack trace functions,; # ignoring some common functions; # Five is a somewhat arbitrary number; the goal is to get a small number; # of identifying functions with some leeway for common functions",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:48,Safety,avoid,avoid,48,# Disable symbolization if it's not required to avoid slow symbolization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:31,Testability,log,log,31,"""""""#!/bin/bash; %s; if %s >& t.log ; then; exit 1; fi; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:17,Testability,test,test,17,# Check that the test considers the original file interesting,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:90,Testability,test,test,90,"# Check that an empty file is not interesting; # Instead of modifying the filename in the test file, just run the command",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:45,Energy Efficiency,Reduce,Reduce,45,"""""""Simplify clang arguments before running C-Reduce to reduce the time the; interestingness test takes to run.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:55,Energy Efficiency,reduce,reduce,55,"""""""Simplify clang arguments before running C-Reduce to reduce the time the; interestingness test takes to run.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:92,Testability,test,test,92,"""""""Simplify clang arguments before running C-Reduce to reduce the time the; interestingness test takes to run.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:3,Usability,Simpl,Simplify,3,"""""""Simplify clang arguments before running C-Reduce to reduce the time the; interestingness test takes to run.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:62,Testability,test,test,62,# Remove some clang arguments to speed up the interestingness test,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:30,Availability,error,error,30,# Try to make implicit int an error for more sensible test output,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:54,Testability,test,test,54,# Try to make implicit int an error for more sensible test output,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:48,Energy Efficiency,Reduce,Reduce,48,"""""""Minimize the clang arguments after running C-Reduce, to get the smallest; command that reproduces the crash on the reduced file.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:118,Energy Efficiency,reduce,reduced,118,"""""""Minimize the clang arguments after running C-Reduce, to get the smallest; command that reproduces the crash on the reduced file.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:17,Energy Efficiency,Reduce,Reduce,17,# Hack to kill C-Reduce because it jumps into its own pgid,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py:39,Deployability,Update,Update,39,#!/usr/bin/env python; # To use:; # 1) Update the 'decls' list below with your fuzzing configuration.; # 2) Run with the clang binary as the command-line argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/modfuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py:87,Deployability,configurat,configuration,87,#!/usr/bin/env python; # To use:; # 1) Update the 'decls' list below with your fuzzing configuration.; # 2) Run with the clang binary as the command-line argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/modfuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py:87,Modifiability,config,configuration,87,#!/usr/bin/env python; # To use:; # 1) Update the 'decls' list below with your fuzzing configuration.; # 2) Run with the clang binary as the command-line argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/modfuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/modfuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:73,Energy Efficiency,reduce,reduce,73,# There is no reason to cache successful tests because we will; # always reduce the changeset when we see one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:24,Performance,cache,cache,24,# There is no reason to cache successful tests because we will; # always reduce the changeset when we see one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:41,Testability,test,tests,41,# There is no reason to cache successful tests because we will; # always reduce the changeset when we see one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:168,Safety,Avoid,Avoid,168,"# Make sure the initial test passes, if not then (a) either; # the user doesn't expect monotonicity, and we may end up; # doing O(N^2) tests, or (b) the test is wrong. Avoid the; # O(N^2) case unless user requests it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:24,Testability,test,test,24,"# Make sure the initial test passes, if not then (a) either; # the user doesn't expect monotonicity, and we may end up; # doing O(N^2) tests, or (b) the test is wrong. Avoid the; # O(N^2) case unless user requests it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:135,Testability,test,tests,135,"# Make sure the initial test passes, if not then (a) either; # the user doesn't expect monotonicity, and we may end up; # doing O(N^2) tests, or (b) the test is wrong. Avoid the; # O(N^2) case unless user requests it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:153,Testability,test,test,153,"# Make sure the initial test passes, if not then (a) either; # the user doesn't expect monotonicity, and we may end up; # doing O(N^2) tests, or (b) the test is wrong. Avoid the; # O(N^2) case unless user requests it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:45,Testability,test,test,45,# Check empty set first to quickly find poor test functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:9,Energy Efficiency,reduce,reduce,9,"# assert(reduce(set.union, sets, set()) == c); # If there is nothing left we can remove, we are done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:2,Testability,assert,assert,2,"# assert(reduce(set.union, sets, set()) == c); # If there is nothing left we can remove, we are done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:5,Testability,test,test,5,"# If test passes on this subset alone, recurse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:50,Testability,test,test,50,"# Otherwise if we have more than two sets, see if test; # pases without this subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:39,Usability,simpl,simple,39,# Silly programmers refuse to print in simple machine readable; # formats. Whatever.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:26,Performance,cache,cache,26,# Avoid freeing our giant cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:2,Safety,Avoid,Avoid,2,# Avoid freeing our giant cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/token-delta.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:236,Availability,down,downstream,236,"""""""Update Options.td for the flags changes in https://reviews.llvm.org/Dxyz. This script translates Options.td from using Flags to control option visibility; to using Vis instead. It is meant to be idempotent and usable to help update; downstream forks if they have their own changes to Options.td. Usage:; ```sh; % update_options_td_flags.py path/to/Options.td > Options.td.new; % mv Options.td.new path/to/Options.td; ```. This script will be removed after the next LLVM release.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:3,Deployability,Update,Update,3,"""""""Update Options.td for the flags changes in https://reviews.llvm.org/Dxyz. This script translates Options.td from using Flags to control option visibility; to using Vis instead. It is meant to be idempotent and usable to help update; downstream forks if they have their own changes to Options.td. Usage:; ```sh; % update_options_td_flags.py path/to/Options.td > Options.td.new; % mv Options.td.new path/to/Options.td; ```. This script will be removed after the next LLVM release.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:228,Deployability,update,update,228,"""""""Update Options.td for the flags changes in https://reviews.llvm.org/Dxyz. This script translates Options.td from using Flags to control option visibility; to using Vis instead. It is meant to be idempotent and usable to help update; downstream forks if they have their own changes to Options.td. Usage:; ```sh; % update_options_td_flags.py path/to/Options.td > Options.td.new; % mv Options.td.new path/to/Options.td; ```. This script will be removed after the next LLVM release.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:473,Deployability,release,release,473,"""""""Update Options.td for the flags changes in https://reviews.llvm.org/Dxyz. This script translates Options.td from using Flags to control option visibility; to using Vis instead. It is meant to be idempotent and usable to help update; downstream forks if they have their own changes to Options.td. Usage:; ```sh; % update_options_td_flags.py path/to/Options.td > Options.td.new; % mv Options.td.new path/to/Options.td; ```. This script will be removed after the next LLVM release.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:213,Usability,usab,usable,213,"""""""Update Options.td for the flags changes in https://reviews.llvm.org/Dxyz. This script translates Options.td from using Flags to control option visibility; to using Vis instead. It is meant to be idempotent and usable to help update; downstream forks if they have their own changes to Options.td. Usage:; ```sh; % update_options_td_flags.py path/to/Options.td > Options.td.new; % mv Options.td.new path/to/Options.td; ```. This script will be removed after the next LLVM release.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:8,Integrability,wrap,wrapping,8,"# Avoid wrapping the , or ; to the new line",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py:2,Safety,Avoid,Avoid,2,"# Avoid wrapping the , or ; to the new line",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/update_options_td_flags.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/update_options_td_flags.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:40,Security,access,access,40,# FIXME: Use designated initializers to access non-first; # fields of unions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:45,Modifiability,portab,portably,45,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:2,Security,Access,Access,2,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:57,Security,access,access,57,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:45,Modifiability,portab,portably,45,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:2,Security,Access,Access,2,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:57,Security,access,access,57,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:24,Safety,avoid,avoid,24,"# Fully recursive, just avoid top-level arrays.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:30,Usability,Simpl,Simplifies,30,###; # Countable iteration; # Simplifies some calculations,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:2,Safety,Avoid,Avoid,2,# Avoid various singularities,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:2,Testability,assert,assert,2,# assert base(lo) <= N < base(hi),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:2,Usability,Simpl,Simple,2,# Simple case...,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:12,Usability,simpl,simplify,12,# Otherwise simplify by assuming W < H,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:63,Integrability,wrap,wrap,63,"# Otherwise, compile line and index from number of times we; # wrap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:7,Deployability,Toggle,Toggle,7,###; # Toggle to use checked versions of enumeration routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:53,Integrability,rout,routines,53,###; # Toggle to use checked versions of enumeration routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py:3,Modifiability,Flexible,Flexible,3,"""""""Flexible enumeration of C types.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/TypeGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py:34,Modifiability,flexible,flexible,34,"# TODO:; # - struct improvements (flexible arrays, packed &; # unpacked, alignment); # - objective-c qualified id; # - anonymous / transparent unions; # - VLAs; # - block types; # - K&R functions; # - pass arguments of different types (test extension, transparent union); # - varargs; ###; # Actual type types",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/TypeGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py:236,Testability,test,test,236,"# TODO:; # - struct improvements (flexible arrays, packed &; # unpacked, alignment); # - objective-c qualified id; # - anonymous / transparent unions; # - VLAs; # - block types; # - K&R functions; # - pass arguments of different types (test extension, transparent union); # - varargs; ###; # Actual type types",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/ABITest/TypeGen.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:368,Deployability,integrat,integrate,368,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:238,Energy Efficiency,monitor,monitor,238,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:368,Integrability,integrat,integrate,368,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:455,Performance,Load,Load,455,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:172,Testability,test,testing,172,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:323,Testability,test,testing,323,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:402,Testability,test,testing,402,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:17,Usability,simpl,simple,17,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:175,Energy Efficiency,efficient,efficient,175,# We want to retrieve the clang version even if there are no; # reports. Assume that all reports were created using the same; # clang version (this is always true and is more efficient).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:58,Testability,assert,assertion,58,"# Python 3.10 offers zip(..., strict=True). The following assertion; # mimics it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:7,Performance,Load,Load,7,"""""""; # Load results of the analyzes from a given output folder.; # - info is the SingleRunInfo object; # - delete_empty specifies if the empty plist files should be deleted. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:293,Integrability,depend,depend,293,"# FIXME: Add fuzzy matching. One simple and possible effective idea would; # be to bin the diagnostics, print them in a normalized form (based solely; # on the structure of the diagnostic), compute the diff, then use that as; # the basis for matching. This has the nice property that we don't depend; # in any way on the diagnostic format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:33,Usability,simpl,simple,33,"# FIXME: Add fuzzy matching. One simple and possible effective idea would; # be to bin the diagnostics, print them in a normalized form (based solely; # on the structure of the diagnostic), compute the diff, then use that as; # the basis for matching. This has the nice property that we don't depend; # in any way on the diagnostic format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:386,Testability,log,log,386,"""""""; Compare directories with analysis results and dump results. :param delete_empty: delete empty plist files; :param out: buffer to dump comparison results to.; :param show_stats: compare execution stats as well.; :param stats_only: compare ONLY execution stats.; :param histogram: optional histogram type to plot path differences.; :param verbose_log: optional path to an additional log file.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:19,Testability,log,log,19,"# Open the verbose log, if given.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:48,Modifiability,rewrite,rewriter,48,"#!/usr/bin/env python; #; # ===- exploded-graph-rewriter.py - ExplodedGraph dump tool -----*- python -*--#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===-----------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:15,Integrability,message,messages,15,# Deserialized messages from a single checker in a single program state.; # Basically a list of raw strings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:15,Integrability,message,messages,15,"# Deserialized messages of all checkers, separated by checker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:106,Testability,test,tests,106,"# Allow line breaks by waiting for ';'. This is not valid in; # a .dot file, but it is useful for writing tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:21,Testability,test,tests,21,"# Note: when writing tests you don't need to escape everything,; # even though in a valid dot file everything is escaped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:7,Safety,avoid,avoids,7,# This avoids pretty-printing huge statements such as CompoundStmt.; # Such statements show up only at [Pre|Post]StmtPurgeDeadSymbols,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:43,Deployability,install,installed,43,# The fallback behavior if graphviz is not installed!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py:2,Security,validat,validate,2,# validate that given projects are present in the project map file,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py:2,Deployability,update,update,2,# update subcommand,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py:2,Testability,benchmark,benchmark,2,# benchmark subcommand,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:689,Availability,down,download,689,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:758,Availability,down,download,758,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1395,Availability,down,download,1395,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1414,Availability,down,download,1414,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1205,Deployability,patch,patch,1205,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1225,Deployability,patch,patch,1225,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1379,Deployability,patch,patch,1379,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1512,Deployability,Patch,PatchedSource,1512,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1619,Deployability,Patch,PatchedSource,1619,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1659,Deployability,patch,patch,1659,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1270,Energy Efficiency,adapt,adapt,1270,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:636,Modifiability,config,configure,636,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1270,Modifiability,adapt,adapt,1270,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:719,Performance,Cache,CachedSource,719,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:859,Performance,Cache,CachedSource,859,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:907,Performance,Cache,CachedSource,907,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:978,Performance,Cache,CachedSource,978,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1036,Performance,Cache,CachedSource,1036,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1330,Performance,Cache,CachedSource,1330,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1439,Performance,Cache,CachedSource,1439,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1463,Performance,Cache,CachedSource,1463,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:1606,Performance,Cache,CachedSource,1606,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:124,Testability,test,testing,124,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:27,Testability,test,testing,27,"""""""; Add a new project for testing: build it and add to the Project Map file.; :param name: is a short string used to identify a project.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:401,Integrability,rout,routine,401,"""""""; Static Analyzer qualification infrastructure. This source file contains all the functionality related to benchmarking; the analyzer on a set projects. Right now, this includes measuring; execution time and peak memory usage. Benchmark runs analysis on every; project multiple times to get a better picture about the distribution; of measured values. Additionally, this file includes a comparison routine for two benchmarking; results that plots the result together on one chart.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:110,Testability,benchmark,benchmarking,110,"""""""; Static Analyzer qualification infrastructure. This source file contains all the functionality related to benchmarking; the analyzer on a set projects. Right now, this includes measuring; execution time and peak memory usage. Benchmark runs analysis on every; project multiple times to get a better picture about the distribution; of measured values. Additionally, this file includes a comparison routine for two benchmarking; results that plots the result together on one chart.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:230,Testability,Benchmark,Benchmark,230,"""""""; Static Analyzer qualification infrastructure. This source file contains all the functionality related to benchmarking; the analyzer on a set projects. Right now, this includes measuring; execution time and peak memory usage. Benchmark runs analysis on every; project multiple times to get a better picture about the distribution; of measured values. Additionally, this file includes a comparison routine for two benchmarking; results that plots the result together on one chart.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:417,Testability,benchmark,benchmarking,417,"""""""; Static Analyzer qualification infrastructure. This source file contains all the functionality related to benchmarking; the analyzer on a set projects. Right now, this includes measuring; execution time and peak memory usage. Benchmark runs analysis on every; project multiple times to get a better picture about the distribution; of measured values. Additionally, this file includes a comparison routine for two benchmarking; results that plots the result together on one chart.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:17,Testability,benchmark,benchmarking,17,"""""""; Compare two benchmarking results stored as .csv files; and produce a plot in the specified file.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:65,Testability,test,tests,65,# TODO: compare data in old and new dataframes using statistical tests; # to check if they belong to the same distribution,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:123,Availability,failure,failures,123,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:753,Availability,error,error,753,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:783,Availability,error,errors,783,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:853,Availability,failure,failure,853,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1195,Deployability,Release,Release,1195,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1252,Modifiability,variab,variables,1252,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1408,Modifiability,variab,variable,1408,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1496,Modifiability,variab,variable,1496,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:162,Performance,perform,performance,162,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:373,Performance,Perform,Performance,373,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:66,Testability,test,test,66,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:525,Testability,test,test,525,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:768,Testability,log,logs,768,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:972,Testability,log,log,972,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1203,Testability,Assert,Asserts,1203,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1231,Testability,log,logging,1231,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1371,Testability,test,tested,1371,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:1423,Testability,test,testing,1423,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:37,Integrability,message,messages,37,# TODO: use debug levels for VERBOSE messages,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:83,Deployability,Configurat,Configuration,83,###############################################################################; # Configuration setup.; ###############################################################################; # Find Clang for static analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:83,Modifiability,Config,Configuration,83,###############################################################################; # Configuration setup.; ###############################################################################; # Find Clang for static analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:60,Availability,down,downloads,60,# Names of the project specific scripts.; # The script that downloads the project.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:45,Integrability,wrap,wrapping,45,# A comment in a build script which disables wrapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:6,Testability,log,log,6,# The log file name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:45,Availability,failure,failures,45,# Summary file - contains the summary of the failures. Ex: This info can be be; # displayed when buildbot detects a build failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:122,Availability,failure,failure,122,# Summary file - contains the summary of the failures. Ex: This info can be be; # displayed when buildbot detects a build failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:106,Safety,detect,detects,106,# Summary file - contains the summary of the failures. Ex: This info can be be; # displayed when buildbot detects a build failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:104,Availability,down,download,104,"# The name of the directory storing the cached project source. If this; # directory does not exist, the download script will be executed.; # That script should create the ""CachedSource"" directory and download the; # project source into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:200,Availability,down,download,200,"# The name of the directory storing the cached project source. If this; # directory does not exist, the download script will be executed.; # That script should create the ""CachedSource"" directory and download the; # project source into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:40,Performance,cache,cached,40,"# The name of the directory storing the cached project source. If this; # directory does not exist, the download script will be executed.; # That script should create the ""CachedSource"" directory and download the; # project source into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:172,Performance,Cache,CachedSource,172,"# The name of the directory storing the cached project source. If this; # directory does not exist, the download script will be executed.; # That script should create the ""CachedSource"" directory and download the; # project source into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:182,Deployability,Patch,PatchedSource,182,"# The name of the directory containing the source code that will be analyzed.; # Each time a project is analyzed, a fresh copy of its CachedSource directory; # will be copied to the PatchedSource directory and then the local patches; # in PATCHFILE_NAME will be applied (if PATCHFILE_NAME exists).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:225,Deployability,patch,patches,225,"# The name of the directory containing the source code that will be analyzed.; # Each time a project is analyzed, a fresh copy of its CachedSource directory; # will be copied to the PatchedSource directory and then the local patches; # in PATCHFILE_NAME will be applied (if PATCHFILE_NAME exists).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:134,Performance,Cache,CachedSource,134,"# The name of the directory containing the source code that will be analyzed.; # Each time a project is analyzed, a fresh copy of its CachedSource directory; # will be copied to the PatchedSource directory and then the local patches; # in PATCHFILE_NAME will be applied (if PATCHFILE_NAME exists).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:18,Deployability,patch,patchfile,18,# The name of the patchfile specifying any changes that should be applied; # to the CachedSource before analyzing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:84,Performance,Cache,CachedSource,84,# The name of the patchfile specifying any changes that should be applied; # to the CachedSource before analyzing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:83,Testability,Test,Test,83,###############################################################################; # Test harness logic.; ###############################################################################,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:96,Testability,log,logic,96,###############################################################################; # Test harness logic.; ###############################################################################,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:50,Performance,Queue,Queue,50,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:133,Performance,queue,queue,133,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:112,Safety,safe,safe,112,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:75,Testability,stub,stub,75,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:340,Testability,stub,stubs-but-not-at-runtime,340,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:48,Testability,test,testing,48,"""""""; A component aggregating all of the project testing.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:2,Testability,Test,Test,2,# Test the projects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:41,Testability,test,tests,41,"""""""; Run all projects.; :return: whether tests have passed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:71,Testability,test,testing,71,"""""""; Run each project in a separate thread. This is OK despite GIL, as testing is blocked; on launching external processes. :return: whether tests have passed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:141,Testability,test,tests,141,"""""""; Run each project in a separate thread. This is OK despite GIL, as testing is blocked; on launching external processes. :return: whether tests have passed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:29,Testability,test,testing,29,"""""""; A component aggregating testing for one project.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:5,Testability,Test,Test,5,"""""""; Test a given project.; :return tests_passed: Whether tests have passed according; to the :param strictness: criteria.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:58,Testability,test,tests,58,"""""""; Test a given project.; :return tests_passed: Whether tests have passed according; to the :param strictness: criteria.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:33,Deployability,patch,patched,33,# Run scan-build from within the patched source directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:105,Modifiability,variab,variables,105,# Custom analyzer invocation specified by project.; # Communicate required information using environment variables; # instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:37,Testability,log,log,37,"# If command did not fail, erase the log file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:5,Availability,Down,Download,5,"""""""; Download the project and apply the local patchfile if it exists.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:46,Deployability,patch,patchfile,46,"""""""; Download the project and apply the local patchfile if it exists.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:71,Availability,down,download,71,"# If the we don't already have the cached source, run the project's; # download script to download it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:90,Availability,down,download,90,"# If the we don't already have the cached source, run the project's; # download script to download it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:35,Performance,cache,cached,35,"# If the we don't already have the cached source, run the project's; # download script to download it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:27,Deployability,patch,patched,27,# Remove potentially stale patched source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:39,Deployability,patch,patches,39,# Copy the cached source and apply any patches to the copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:11,Performance,cache,cached,11,# Copy the cached source and apply any patches to the copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:23,Availability,down,download,23,"""""""; Run the script to download the project, if it exists.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:130,Availability,failure,failure,130,"""""""; :param results_differ: Used to signify that results differ from; the canonical ones.; :param failure_flag: Used to signify a failure during the run.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:94,Availability,failure,failures,94,"""""""; Given the scan-build output directory, checks if the build failed; (by searching for the failures directories). If there are failures, it; creates a summary file in the output directory. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:130,Availability,failure,failures,130,"""""""; Given the scan-build output directory, checks if the build failed; (by searching for the failures directories). If there are failures, it; creates a summary file in the output directory. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:21,Availability,failure,failures,21,# Check if there are failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:102,Testability,benchmark,benchmark,102,"""""""; Delete html, css, and js files from reference results. These can; include multiple copies of the benchmark source and so get very large.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:13,Testability,log,log,13,# Remove the log file. It leaks absolute path names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:154,Availability,failure,failure,154,"""""""; Compare the warnings produced by scan-build.; strictness defines the success criteria for the test:; 0 - success if there are no crashes or analyzer failure.; 1 - success if there are no difference in the number of reported bugs.; 2 - success if all the bug reports are identical. :return success: Whether tests pass according to the strictness; criteria.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:99,Testability,test,test,99,"""""""; Compare the warnings produced by scan-build.; strictness defines the success criteria for the test:; 0 - success if there are no crashes or analyzer failure.; 1 - success if there are no difference in the number of reported bugs.; 2 - success if all the bug reports are identical. :return success: Whether tests pass according to the strictness; criteria.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:311,Testability,test,tests,311,"""""""; Compare the warnings produced by scan-build.; strictness defines the success criteria for the test:; 0 - success if there are no crashes or analyzer failure.; 1 - success if there are no difference in the number of reported bugs.; 2 - success if all the bug reports are identical. :return success: Whether tests pass according to the strictness; criteria.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:26,Availability,down,down,26,# We have to go one level down the directory tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:2,Testability,Log,Log,2,"# Log folders are also located in the results dir, so ignore them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:99,Modifiability,config,configure,99,# There might be more then one folder underneath - one per each scan-build; # command (Ex: one for configure and one for make).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:15,Testability,log,log,15,# Clean up the log file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUpdateDiffs.py:5,Deployability,Update,Update,5,"""""""; Update reference results for static analyzer.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestUpdateDiffs.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUpdateDiffs.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py:101,Modifiability,variab,variable,101,"""""""which(command, [paths]) - Look up the given command in the paths string; (or the PATH environment variable, if unspecified).""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py:15,Deployability,install,installed,15,"# no formatter installed, let's keep it in bytes",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py:106,Energy Efficiency,consumption,consumption,106,"""""""; Run command with arguments. Wait for command to complete and measure; execution time and peak memory consumption.; If the exit code was zero then return, otherwise raise; CalledProcessError. The CalledProcessError object will have the; return code in the returncode attribute. The arguments are the same as for the call and check_call functions. Return a tuple of execution time and peak memory.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py:49,Deployability,install,installed,49,# back off to subprocess if we don't have psutil installed,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestUtils.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:66,Integrability,wrap,wrapper,66,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:643,Integrability,wrap,wrapper,643,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:725,Integrability,wrap,wrapper,725,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:886,Integrability,wrap,wrapper,886,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:1251,Integrability,wrap,wrapper,1251,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:1432,Integrability,Wrap,WrapperCheck,1432,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:1497,Performance,perform,perform,1497,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:1014,Safety,detect,detected,1014,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:78,Testability,test,testing,78,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:318,Testability,test,test,318,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:812,Testability,test,test,812,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:988,Testability,test,test,988,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:20,Modifiability,variab,variable,20,"""""""Returns the PATH variable modified to remove the path to this program.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:2,Testability,Test,Test,2,# Test if it is a source file,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:20,Integrability,depend,dependency,20,# Options to output dependency files for make,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:43,Availability,failure,failure,43,"""""""Runs a step of the compilation. Reports failure as exception.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:20,Performance,perform,perform,20,"""""""Override this to perform the modified compilation and required; checks.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:9,Deployability,configurat,configuration,9,# Create configuration defaults from list of checks,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:9,Modifiability,config,configuration,9,# Create configuration defaults from list of checks,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:25,Integrability,Wrap,WrapperCheck,25,# Find all subclasses of WrapperCheck,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:79,Availability,error,error,79,# Bail out here if we can't apply checks in this case.; # Does not indicate an error.; # Maybe not straight compilation (e.g. -S or --version or -flto); # or maybe > 1 input files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:37,Modifiability,config,config,37,"# Run checks, if they are enabled in config and if they are appropriate for; # this command line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:8,Availability,failure,failure,8,# Check failure,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:15,Availability,failure,failure,15,# Compile step failure,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:3,Testability,Test,Test,3,"""""""Test internal functions within check_cfc.py.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Testability,Test,Test,2,# Test removing last thing in path,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Testability,Test,Test,2,# Test removing one entry and leaving others; # Also tests removing repeated path,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:53,Testability,test,tests,53,# Test removing one entry and leaving others; # Also tests removing repeated path,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Testability,Test,Test,2,# Test removing non-canonical path,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Testability,Test,Test,2,# Test getting implicit output file,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:13,Integrability,depend,dependency,13,# Outputting dependency files is not a normal compile,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:13,Integrability,depend,dependency,13,# Creating a dependency file as a side effect still outputs an object file,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Testability,Test,Test,2,# Test output not specified,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Testability,Test,Test,2,# Test output is specified,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Testability,Test,Test,2,# Test identifying input file with quotes,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Testability,Test,Test,2,# Test multiple quotes,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py:11,Testability,log,logging,11,# Open the logging file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py:10,Integrability,message,messages,10,# Receive messages,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:2,Usability,clear,clear,2,"# clear the profile file env, so that we don't generate profdata; # when capturing the cc1 command",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:104,Testability,log,logging,104,"# Extract the list of symbols from the given file, which is assumed to be; # the output of a dtrace run logging either probefunc or ustack(1) and; # nothing else. The dtrace -xdemangle option needs to be used.; #; # This is particular to OS X at the moment, because of the '_' handling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:178,Deployability,patch,patched,178,"# If there is a '`' in the line, assume it is a ustack(1) entry in; # the form of <modulename>`<modulefunc>, where <modulefunc> is never; # truncated (but does need the mangling patched).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:111,Modifiability,extend,extend,111,"# Otherwise, we have a symbol name which isn't present in the; # binary. We assume it is truncated, and try to extend it.; # Get all the symbols with this prefix.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:2,Usability,Simpl,Simply,2,"# Simply strategy, just return symbols in order of occurrence, even across; # multiple runs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:86,Testability,test,test,86,"# More complicated strategy that tries to respect the call order across all; # of the test cases, instead of giving a huge preference to the first test; # case.; # First, uniq all the lists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:147,Testability,test,test,147,"# More complicated strategy that tries to respect the call order across all; # of the test cases, instead of giving a huge preference to the first test; # case.; # First, uniq all the lists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:2,Performance,Load,Load,2,# Load all of the input files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.cpp:203,Usability,simpl,simply,203,"// Decl node names don't end in Decl for historical reasons, and it would; // be somewhat annoying to fix now. Conveniently, this means the ID matches; // is exactly the node name, and the class name is simply that plus Decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h:18,Modifiability,inherit,inherit,18,/// Does the node inherit from the given TableGen class?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h:116,Modifiability,inherit,inherited,116,/// Return a set of properties that are unnecessary when serializing; /// this AST node. Generally this is used for inherited properties; /// that are derived for this subclass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTNodesEmitter.cpp:3,Deployability,Update,Update,3,// Update the range of Base.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangASTNodesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTNodesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp:91,Performance,cache,cache,91,"/// The name of the node hierarchy. Not actually sensitive to IsReader,; /// but useful to cache here anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp:99,Availability,error,error,99,"// The existing property is more likely to be associated with a; // derived node, so use it as the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp:9,Availability,down,down,9,"// Focus down to the property:; // T prop = <READ>;; // W.find(""prop"").write##ValueType(prop);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp:85,Modifiability,variab,variable,85,// Write the property. Note that this will implicitly read the; // kind into a local variable with the right name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp:44,Modifiability,variab,variable,44,// Prepare a ReaderWriterInfo with a helper variable that will use; // the sub-reader/writer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:44,Integrability,interface,interface,44,"// Work around MinGW's macro definition of 'interface' to 'struct'. We; // have an attribute argument called 'Interface', so only the lower case; // name conflicts with the macro definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:110,Integrability,Interface,Interface,110,"// Work around MinGW's macro definition of 'interface' to 'struct'. We; // have an attribute argument called 'Interface', so only the lower case; // name conflicts with the macro definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:24,Availability,error,error,24,// FIXME: Emit a proper error,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:24,Availability,error,error,24,// FIXME: Emit a proper error,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:6,Safety,avoid,avoid,6,"// To avoid printing parentheses around an empty argument list or; // printing spurious commas at the end of an argument list, we need to; // determine where the last provided non-fake argument is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:85,Safety,detect,detect,85,"// FIXME: arg->getIsOmitted() == ""false"" means we haven't implemented; // any way to detect whether the argument was omitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:163,Safety,avoid,avoid,163,"// The enumerants are automatically generated based on the variety,; // namespace (if present) and name for each attribute spelling. However,; // care is taken to avoid trampling on the reserved namespace due to; // underscores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:47,Safety,avoid,avoid,47,"// Since we have been stripping underscores to avoid trampling on the; // reserved namespace, we may have inadvertently created duplicate; // enumerant names. These duplicates are not considered part of the; // semantic spelling, and can be elided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:90,Testability,test,test,90,"// FIXME: #pragma clang attribute does not currently support statement; // attributes, so test whether the subject is one that appertains to a; // declaration node. However, it may be reasonable for support for statement; // attributes to be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:12,Integrability,rout,routines,12,// Generate routines that check the names of sub-rules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:310,Availability,error,error,310,"// FIXME: Currently, documentation is generated as-needed due to the fact; // that there is no way to allow a generated project ""reach into"" the docs; // directory (for instance, it may be an out-of-tree build). However, we want; // to ensure that every attribute has a Documentation field, and produce an; // error if it has been neglected. Otherwise, the on-demand generation which; // happens server-side will fail. This code is ensuring that functionality,; // even though this Emitter doesn't technically need the documentation.; // When attribute documentation can be generated as part of the build; // itself, this code can be removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:37,Integrability,depend,dependent,37,"// When trying to determine if value-dependent expressions can populate; // the attribute without prior instantiation, the decision is made based; // on the assumption that only the last argument is ever variadic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:52,Integrability,depend,dependent,52,// Emit a CreateWithDelayedArgs that takes only the dependent argument; // expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:26,Integrability,rout,routines,26,// Don't write conversion routines for fake arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:73,Testability,Test,Test,73,"// Helper function for GenerateTargetSpecificAttrChecks that alters the 'Test'; // parameter with only a single check type, if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:178,Testability,Test,Test,178,"// Generate a conditional expression to check if the current target satisfies; // the conditions for a TargetSpecificAttr record, and append the code for; // those checks to the Test string. If the FnName string pointer is non-null,; // append a unique suffix to distinguish this set of target checks from other; // TargetSpecificAttr records.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:399,Testability,test,test-recommendations,399,"// C++11-style attributes have specific version information associated with; // them. If the attribute has no scope, the version information must not; // have the default value (1), as that's incorrect. Instead, the unscoped; // attribute version information should be taken from the SD-6 standing; // document, which can be found at:; // https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations; //; // C23-style attributes have the same kind of version information; // associated with them. The unscoped attribute version information should; // be taken from the specification of the attribute in the C Standard.; //; // Clang-specific attributes have the same kind of version information; // associated with them. This version is typically the default value (1).; // These version values are clang-specific and should typically be; // incremented once the attribute changes its syntax and/or semantics in a; // a way that is impactful to the end user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:58,Testability,test,test,58,"// If this is the C++11 variety, also add in the LangOpts test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:26,Integrability,rout,routine,26,// Write generic Traverse routine,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:29,Integrability,depend,dependent,29,// Emits code to instantiate dependent attributes on templates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:77,Testability,log,logic,77,"// If the arg is fake, it's the user's job to supply it: general parsing; // logic shouldn't need to know anything about it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:98,Testability,log,logic,98,"// If the attribute does not contain a Subjects definition, then use the; // default appertainsTo logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:77,Testability,assert,assertion,77,// We should have sorted all of the subjects into two lists.; // FIXME: this assertion will be wrong if we ever add type attribute subjects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:36,Modifiability,inherit,inherit,36,// Find all of the definitions that inherit from MutualExclusions and include; // the given attribute in the list of exclusions to generate the; // diagMutualExclusion() check.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:51,Testability,test,test,51,"// If we discovered any decl or stmt attributes to test for, generate the; // predicates for them now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:40,Testability,log,logic,40,// Generate the ParsedAttrInfo subclass logic for declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:105,Modifiability,inherit,inheritted,105,"// Also generate the declaration attribute merging logic if the current; // attribute is one that can be inheritted on a declaration. It is assumed; // this code will be executed in the context of a function with parameters:; // Sema &S, Decl *D, Attr *A and that returns a bool (false on diagnostic,; // true on success).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:51,Testability,log,logic,51,"// Also generate the declaration attribute merging logic if the current; // attribute is one that can be inheritted on a declaration. It is assumed; // this code will be executed in the context of a function with parameters:; // Sema &S, Decl *D, Attr *A and that returns a bool (false on diagnostic,; // true on success).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:329,Energy Efficiency,allocate,allocate,329,"// Statement attributes are a bit different from declarations. With; // declarations, each attribute is added to the declaration as it is; // processed, and so you can look on the Decl * itself to see if there is a; // conflicting attribute. Statement attributes are processed as a group; // because AttributedStmt needs to tail-allocate all of the attribute nodes; // at once. This means we cannot check whether the statement already contains; // an attribute to check for the conflict. Instead, we need to check whether; // the given list of semantic attributes contain any conflicts. It is assumed; // this code will be executed in the context of a function with parameters:; // Sema &S, const SmallVectorImpl<const Attr *> &C. The code will be within a; // loop which loops over the container C with a loop variable named A to; // represent the current attribute to check for conflicts.; //; // FIXME: it would be nice not to walk over the list of potential attributes; // to apply to the statement more than once, but statements typically don't; // have long lists of attributes on them, so re-walking the list should not; // be an expensive operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:811,Modifiability,variab,variable,811,"// Statement attributes are a bit different from declarations. With; // declarations, each attribute is added to the declaration as it is; // processed, and so you can look on the Decl * itself to see if there is a; // conflicting attribute. Statement attributes are processed as a group; // because AttributedStmt needs to tail-allocate all of the attribute nodes; // at once. This means we cannot check whether the statement already contains; // an attribute to check for the conflict. Instead, we need to check whether; // the given list of semantic attributes contain any conflicts. It is assumed; // this code will be executed in the context of a function with parameters:; // Sema &S, const SmallVectorImpl<const Attr *> &C. The code will be within a; // loop which loops over the container C with a loop variable named A to; // represent the current attribute to check for conflicts.; //; // FIXME: it would be nice not to walk over the list of potential attributes; // to apply to the statement more than once, but statements typically don't; // have long lists of attributes on them, so re-walking the list should not; // be an expensive operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:39,Testability,test,tested,39,// Get the list of architectures to be tested for.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:40,Usability,simpl,simply,40,// Only generate if Attr can be handled simply.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:89,Performance,perform,performing,89,// This stream is used to collect all of the declaration attribute merging; // logic for performing mutual exclusion checks. This gets emitted at the; // end of the file in a helper function of its own.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:79,Testability,log,logic,79,// This stream is used to collect all of the declaration attribute merging; // logic for performing mutual exclusion checks. This gets emitted at the; // end of the file in a helper function of its own.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:181,Testability,test,test,181,"// TODO: If the attribute's kind appears in the list of duplicates, that is; // because it is a target-specific attribute that appears multiple times.; // It would be beneficial to test whether the duplicates are ""similar; // enough"" to each other to not cause problems. For instance, check that; // the spellings are identical, and custom parsing rules match, etc.; // We need to generate struct instances based off ParsedAttrInfo from; // ParsedAttr.cpp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:43,Testability,log,logic,43,// Write out the declaration merging check logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:41,Testability,log,logic,41,// Write out the statement merging check logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:656,Integrability,depend,depending,656,"// Attribute spellings can be shared between target-specific attributes,; // and can be shared between syntaxes for the same attribute. For; // instance, an attribute can be spelled GNU<""interrupt""> for an ARM-; // specific attribute, or MSP430-specific attribute. Additionally, an; // attribute can be spelled GNU<""dllexport""> and Declspec<""dllexport"">; // for the same semantic attribute. Ultimately, we need to map each of; // these to a single AttributeCommonInfo::Kind value, but the; // StringMatcher class cannot handle duplicate match strings. So we; // generate a list of string to match based on the syntax, and emit; // multiple string matchers depending on the syntax used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:40,Usability,simpl,simply,40,"// If there's only one spelling, we can simply use that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:18,Usability,undo,undocumented,18,"// If it's in the undocumented category, just construct a header by; // concatenating all the spellings. Might not be great, but better than; // nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:43,Availability,error,error,43,"// If the heading is still empty, it is an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:43,Integrability,message,message,43,"// If the attribute is deprecated, print a message about it, and possibly; // provide a replacement attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangCommentCommandInfoEmitter.cpp:429,Energy Efficiency,efficient,efficient,429,"//===--- ClangCommentCommandInfoEmitter.cpp - Generate command lists -----====//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tablegen backend emits command lists and efficient matchers for command; // names that are used in documentation comments.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangCommentCommandInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangCommentCommandInfoEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangCommentHTMLNamedCharacterReferenceEmitter.cpp:414,Energy Efficiency,efficient,efficient,414,"//===--- ClangCommentHTMLNamedCharacterReferenceEmitter.cpp -----------------=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tablegen backend emits an efficient function to translate HTML named; // character references to UTF-8 sequences.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangCommentHTMLNamedCharacterReferenceEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangCommentHTMLNamedCharacterReferenceEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangCommentHTMLTagsEmitter.cpp:411,Energy Efficiency,efficient,efficient,411,"//===--- ClangCommentHTMLTagsEmitter.cpp - Generate HTML tag list for Clang -=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tablegen backend emits efficient matchers for HTML tags that are used; // in documentation comments.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangCommentHTMLTagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangCommentHTMLTagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp:236,Safety,safe,safely,236,"// If all the diagnostics and subgroups have been marked as being; // covered by -Wpedantic, increment the count of parent groups. Once the; // group's count is equal to the number of subgroups and diagnostics in; // that group, we can safely add this group to -Wpedantic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp:23,Availability,error,error,23,// Check if this is an error that is accidentally in a warning; // group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp:276,Integrability,message,messages,276,"/// Emit a list of group names.; ///; /// This creates a long string which by itself contains a list of pascal style; /// strings, which consist of a length byte directly followed by the string.; ///; /// \code; /// static const char DiagGroupNames[] = {; /// \000\020#pragma-messages\t#warnings\020CFString-literal""; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:604,Testability,test,test,604,"//===- ClangOpenCLBuiltinEmitter.cpp - Generate Clang OpenCL Builtin handling; //; // The LLVM Compiler Infrastructure; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // These backends consume the definitions of OpenCL builtin functions in; // clang/lib/Sema/OpenCLBuiltins.td and produce builtin handling code for; // inclusion in SemaLookup.cpp, or a test file that calls all declared builtins.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:26,Availability,avail,available,26,"// Contains a list of the available signatures, without the name of the; // function. Each pair consists of a signature and a cumulative index.; // E.g.: <<float, float>, 0>,; // <<float, int, int, 2>>,; // <<float>, 5>,; // ...; // <<double, double>, 35>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:51,Testability,test,test,51,/// Base class for emitting a file (e.g. header or test) from OpenCLBuiltins.td,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:44,Testability,test,testing,44,// Entrypoint to generate the functions for testing all OpenCL builtin; // functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:18,Testability,test,test,18,"// OpenCL builtin test generator. This class processes the same TableGen input; // as BuiltinNameEmitter, but generates a .cl file that contains a call to each; // builtin function described in the .td input.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:44,Testability,test,testing,44,// Entrypoint to generate the functions for testing all OpenCL builtin; // functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:109,Usability,simpl,simplifies,109,"// Extract generic types and non-generic types separately, to keep; // gentypes at the end of the enum which simplifies the special handling; // for gentypes in SemaLookup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:1424,Availability,avail,available,1424,"R""(; // Image access qualifier.; enum OpenCLAccessQual : unsigned char {; OCLAQ_None,; OCLAQ_ReadOnly,; OCLAQ_WriteOnly,; OCLAQ_ReadWrite; };. // Represents a return type or argument type.; struct OpenCLTypeStruct {; // A type (e.g. float, int, ...).; const OpenCLTypeID ID;; // Vector size (if applicable; 0 for scalars and generic types).; const unsigned VectorWidth;; // 0 if the type is not a pointer.; const bool IsPointer : 1;; // 0 if the type is not const.; const bool IsConst : 1;; // 0 if the type is not volatile.; const bool IsVolatile : 1;; // Access qualifier.; const OpenCLAccessQual AccessQualifier;; // Address space of the pointer (if applicable).; const LangAS AS;; };. // One overload of an OpenCL builtin function.; struct OpenCLBuiltinStruct {; // Index of the signature in the OpenCLTypeStruct table.; const unsigned SigTableIndex;; // Entries between index SigTableIndex and (SigTableIndex + NumTypes - 1) in; // the SignatureTable represent the complete signature. The first type at; // index SigTableIndex is the return type.; const unsigned NumTypes;; // Function attribute __attribute__((pure)); const bool IsPure : 1;; // Function attribute __attribute__((const)); const bool IsConst : 1;; // Function attribute __attribute__((convergent)); const bool IsConv : 1;; // OpenCL extension(s) required for this overload.; const unsigned short Extension;; // OpenCL versions in which this overload is available.; const unsigned short Versions;; };. )""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:14,Security,access,access,14,"R""(; // Image access qualifier.; enum OpenCLAccessQual : unsigned char {; OCLAQ_None,; OCLAQ_ReadOnly,; OCLAQ_WriteOnly,; OCLAQ_ReadWrite; };. // Represents a return type or argument type.; struct OpenCLTypeStruct {; // A type (e.g. float, int, ...).; const OpenCLTypeID ID;; // Vector size (if applicable; 0 for scalars and generic types).; const unsigned VectorWidth;; // 0 if the type is not a pointer.; const bool IsPointer : 1;; // 0 if the type is not const.; const bool IsConst : 1;; // 0 if the type is not volatile.; const bool IsVolatile : 1;; // Access qualifier.; const OpenCLAccessQual AccessQualifier;; // Address space of the pointer (if applicable).; const LangAS AS;; };. // One overload of an OpenCL builtin function.; struct OpenCLBuiltinStruct {; // Index of the signature in the OpenCLTypeStruct table.; const unsigned SigTableIndex;; // Entries between index SigTableIndex and (SigTableIndex + NumTypes - 1) in; // the SignatureTable represent the complete signature. The first type at; // index SigTableIndex is the return type.; const unsigned NumTypes;; // Function attribute __attribute__((pure)); const bool IsPure : 1;; // Function attribute __attribute__((const)); const bool IsConst : 1;; // Function attribute __attribute__((convergent)); const bool IsConv : 1;; // OpenCL extension(s) required for this overload.; const unsigned short Extension;; // OpenCL versions in which this overload is available.; const unsigned short Versions;; };. )""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:557,Security,Access,Access,557,"R""(; // Image access qualifier.; enum OpenCLAccessQual : unsigned char {; OCLAQ_None,; OCLAQ_ReadOnly,; OCLAQ_WriteOnly,; OCLAQ_ReadWrite; };. // Represents a return type or argument type.; struct OpenCLTypeStruct {; // A type (e.g. float, int, ...).; const OpenCLTypeID ID;; // Vector size (if applicable; 0 for scalars and generic types).; const unsigned VectorWidth;; // 0 if the type is not a pointer.; const bool IsPointer : 1;; // 0 if the type is not const.; const bool IsConst : 1;; // 0 if the type is not volatile.; const bool IsVolatile : 1;; // Access qualifier.; const OpenCLAccessQual AccessQualifier;; // Address space of the pointer (if applicable).; const LangAS AS;; };. // One overload of an OpenCL builtin function.; struct OpenCLBuiltinStruct {; // Index of the signature in the OpenCLTypeStruct table.; const unsigned SigTableIndex;; // Entries between index SigTableIndex and (SigTableIndex + NumTypes - 1) in; // the SignatureTable represent the complete signature. The first type at; // index SigTableIndex is the return type.; const unsigned NumTypes;; // Function attribute __attribute__((pure)); const bool IsPure : 1;; // Function attribute __attribute__((const)); const bool IsConst : 1;; // Function attribute __attribute__((convergent)); const bool IsConv : 1;; // OpenCL extension(s) required for this overload.; const unsigned short Extension;; // OpenCL versions in which this overload is available.; const unsigned short Versions;; };. )""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:599,Security,Access,AccessQualifier,599,"R""(; // Image access qualifier.; enum OpenCLAccessQual : unsigned char {; OCLAQ_None,; OCLAQ_ReadOnly,; OCLAQ_WriteOnly,; OCLAQ_ReadWrite; };. // Represents a return type or argument type.; struct OpenCLTypeStruct {; // A type (e.g. float, int, ...).; const OpenCLTypeID ID;; // Vector size (if applicable; 0 for scalars and generic types).; const unsigned VectorWidth;; // 0 if the type is not a pointer.; const bool IsPointer : 1;; // 0 if the type is not const.; const bool IsConst : 1;; // 0 if the type is not volatile.; const bool IsVolatile : 1;; // Access qualifier.; const OpenCLAccessQual AccessQualifier;; // Address space of the pointer (if applicable).; const LangAS AS;; };. // One overload of an OpenCL builtin function.; struct OpenCLBuiltinStruct {; // Index of the signature in the OpenCLTypeStruct table.; const unsigned SigTableIndex;; // Entries between index SigTableIndex and (SigTableIndex + NumTypes - 1) in; // the SignatureTable represent the complete signature. The first type at; // index SigTableIndex is the return type.; const unsigned NumTypes;; // Function attribute __attribute__((pure)); const bool IsPure : 1;; // Function attribute __attribute__((const)); const bool IsConst : 1;; // Function attribute __attribute__((convergent)); const bool IsConv : 1;; // OpenCL extension(s) required for this overload.; const unsigned short Extension;; // OpenCL versions in which this overload is available.; const unsigned short Versions;; };. )""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:301,Availability,error,error,301,"// Verify that the combination of GenTypes in a signature is supported.; // To simplify the logic for creating overloads in SemaLookup, only allow; // a signature to contain different GenTypes if these GenTypes represent; // the same number of actual scalar or vector types.; //; // Exit with a fatal error if an unsupported construct is encountered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:92,Testability,log,logic,92,"// Verify that the combination of GenTypes in a signature is supported.; // To simplify the logic for creating overloads in SemaLookup, only allow; // a signature to contain different GenTypes if these GenTypes represent; // the same number of actual scalar or vector types.; //; // Exit with a fatal error if an unsupported construct is encountered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:79,Usability,simpl,simplify,79,"// Verify that the combination of GenTypes in a signature is supported.; // To simplify the logic for creating overloads in SemaLookup, only allow; // a signature to contain different GenTypes if these GenTypes represent; // the same number of actual scalar or vector types.; //; // Exit with a fatal error if an unsupported construct is encountered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:23,Safety,avoid,avoid,23,// Reuse signatures to avoid unnecessary duplicates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:13,Availability,error,error,13,"// Report an error when seeing an entry that is too large for the; // current index type (unsigned short). When hitting this, the type; // of SignatureTable will need to be changed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:59,Availability,mask,mask,59,// Encode a range MinVersion..MaxVersion into a single bit mask that can be; // checked against LangOpts using isOpenCLVersionContainedInMask().; // This must be kept in sync with OpenCLVersionID in OpenCLOptions.h.; // (Including OpenCLOptions.h here would be a layering violation.),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:32,Availability,avail,available,32,// A maximum version of 0 means available in all later versions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:35,Security,access,access-qualified,35,"// Map an image type name to its 3 access-qualified types (RO, WO, RW).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:128,Security,Access,AccessQualifier,128,"// Emit the cases for the image types. For an image type name, there are 3; // corresponding QualTypes (""RO"", ""WO"", ""RW""). The ""AccessQualifier"" field; // tells which one is needed. Emit a switch statement that puts the; // corresponding QualType into ""QT"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:16,Integrability,depend,depends,16,"// If this type depends on an extension, ensure the extension macros are; // defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:15,Testability,test,test,15,// Ensure each test has a unique name by numbering them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:625,Modifiability,config,config,625,"// Emit a package option.; //; // PACKAGE_OPTION(OPTIONTYPE, PACKAGENAME, OPTIONNAME, DESCRIPTION, DEFAULT); // - OPTIONTYPE: Type of the option, whether it's integer or boolean etc.; // This is important for validating user input. Note that; // it's a string, rather than an actual type: since we can; // load checkers runtime, we can't use template hackery for; // sorting this out compile-time.; // - PACKAGENAME: Name of the package.; // - OPTIONNAME: Name of the option.; // - DESCRIPTION; // - DEFAULT: The default value for this option.; //; // The full option can be specified in the command like this:; // -analyzer-config PACKAGENAME:OPTIONNAME=VALUE",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:306,Performance,load,load,306,"// Emit a package option.; //; // PACKAGE_OPTION(OPTIONTYPE, PACKAGENAME, OPTIONNAME, DESCRIPTION, DEFAULT); // - OPTIONTYPE: Type of the option, whether it's integer or boolean etc.; // This is important for validating user input. Note that; // it's a string, rather than an actual type: since we can; // load checkers runtime, we can't use template hackery for; // sorting this out compile-time.; // - PACKAGENAME: Name of the package.; // - OPTIONNAME: Name of the option.; // - DESCRIPTION; // - DEFAULT: The default value for this option.; //; // The full option can be specified in the command like this:; // -analyzer-config PACKAGENAME:OPTIONNAME=VALUE",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:209,Security,validat,validating,209,"// Emit a package option.; //; // PACKAGE_OPTION(OPTIONTYPE, PACKAGENAME, OPTIONNAME, DESCRIPTION, DEFAULT); // - OPTIONTYPE: Type of the option, whether it's integer or boolean etc.; // This is important for validating user input. Note that; // it's a string, rather than an actual type: since we can; // load checkers runtime, we can't use template hackery for; // sorting this out compile-time.; // - PACKAGENAME: Name of the package.; // - OPTIONNAME: Name of the option.; // - DESCRIPTION; // - DEFAULT: The default value for this option.; //; // The full option can be specified in the command like this:; // -analyzer-config PACKAGENAME:OPTIONNAME=VALUE",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:8,Integrability,depend,dependencies,8,"// Emit dependencies.; //; // CHECKER_DEPENDENCY(FULLNAME, DEPENDENCY); // - FULLNAME: The full name of the checker that depends on another checker.; // - DEPENDENCY: The full name of the checker FULLNAME depends on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:59,Integrability,DEPEND,DEPENDENCY,59,"// Emit dependencies.; //; // CHECKER_DEPENDENCY(FULLNAME, DEPENDENCY); // - FULLNAME: The full name of the checker that depends on another checker.; // - DEPENDENCY: The full name of the checker FULLNAME depends on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:121,Integrability,depend,depends,121,"// Emit dependencies.; //; // CHECKER_DEPENDENCY(FULLNAME, DEPENDENCY); // - FULLNAME: The full name of the checker that depends on another checker.; // - DEPENDENCY: The full name of the checker FULLNAME depends on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:155,Integrability,DEPEND,DEPENDENCY,155,"// Emit dependencies.; //; // CHECKER_DEPENDENCY(FULLNAME, DEPENDENCY); // - FULLNAME: The full name of the checker that depends on another checker.; // - DEPENDENCY: The full name of the checker FULLNAME depends on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:205,Integrability,depend,depends,205,"// Emit dependencies.; //; // CHECKER_DEPENDENCY(FULLNAME, DEPENDENCY); // - FULLNAME: The full name of the checker that depends on another checker.; // - DEPENDENCY: The full name of the checker FULLNAME depends on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:13,Integrability,depend,dependencies,13,"// Emit weak dependencies.; //; // CHECKER_DEPENDENCY(FULLNAME, DEPENDENCY); // - FULLNAME: The full name of the checker that is supposed to be; // registered first.; // - DEPENDENCY: The full name of the checker FULLNAME weak depends on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:64,Integrability,DEPEND,DEPENDENCY,64,"// Emit weak dependencies.; //; // CHECKER_DEPENDENCY(FULLNAME, DEPENDENCY); // - FULLNAME: The full name of the checker that is supposed to be; // registered first.; // - DEPENDENCY: The full name of the checker FULLNAME weak depends on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:172,Integrability,DEPEND,DEPENDENCY,172,"// Emit weak dependencies.; //; // CHECKER_DEPENDENCY(FULLNAME, DEPENDENCY); // - FULLNAME: The full name of the checker that is supposed to be; // registered first.; // - DEPENDENCY: The full name of the checker FULLNAME weak depends on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:227,Integrability,depend,depends,227,"// Emit weak dependencies.; //; // CHECKER_DEPENDENCY(FULLNAME, DEPENDENCY); // - FULLNAME: The full name of the checker that is supposed to be; // registered first.; // - DEPENDENCY: The full name of the checker FULLNAME weak depends on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:625,Modifiability,config,config,625,"// Emit a package option.; //; // CHECKER_OPTION(OPTIONTYPE, CHECKERNAME, OPTIONNAME, DESCRIPTION, DEFAULT); // - OPTIONTYPE: Type of the option, whether it's integer or boolean etc.; // This is important for validating user input. Note that; // it's a string, rather than an actual type: since we can; // load checkers runtime, we can't use template hackery for; // sorting this out compile-time.; // - CHECKERNAME: Name of the package.; // - OPTIONNAME: Name of the option.; // - DESCRIPTION; // - DEFAULT: The default value for this option.; //; // The full option can be specified in the command like this:; // -analyzer-config CHECKERNAME:OPTIONNAME=VALUE",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:306,Performance,load,load,306,"// Emit a package option.; //; // CHECKER_OPTION(OPTIONTYPE, CHECKERNAME, OPTIONNAME, DESCRIPTION, DEFAULT); // - OPTIONTYPE: Type of the option, whether it's integer or boolean etc.; // This is important for validating user input. Note that; // it's a string, rather than an actual type: since we can; // load checkers runtime, we can't use template hackery for; // sorting this out compile-time.; // - CHECKERNAME: Name of the package.; // - OPTIONNAME: Name of the option.; // - DESCRIPTION; // - DEFAULT: The default value for this option.; //; // The full option can be specified in the command like this:; // -analyzer-config CHECKERNAME:OPTIONNAME=VALUE",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:209,Security,validat,validating,209,"// Emit a package option.; //; // CHECKER_OPTION(OPTIONTYPE, CHECKERNAME, OPTIONNAME, DESCRIPTION, DEFAULT); // - OPTIONTYPE: Type of the option, whether it's integer or boolean etc.; // This is important for validating user input. Note that; // it's a string, rather than an actual type: since we can; // load checkers runtime, we can't use template hackery for; // sorting this out compile-time.; // - CHECKERNAME: Name of the package.; // - OPTIONNAME: Name of the option.; // - DESCRIPTION; // - DEFAULT: The default value for this option.; //; // The full option can be specified in the command like this:; // -analyzer-config CHECKERNAME:OPTIONNAME=VALUE",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp:1811,Availability,reliab,reliably,1811,"m.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tblgen backend emits the node table (the .def file) for Clang; // type nodes.; //; // This file defines the AST type info database. Each type node is; // enumerated by providing its name (e.g., ""Builtin"" or ""Enum"") and; // base class (e.g., ""Type"" or ""TagType""). Depending on where in the; // abstract syntax tree the type will show up, the enumeration uses; // one of five different macros:; //; // TYPE(Class, Base) - A type that can show up anywhere in the AST,; // and might be dependent, canonical, or non-canonical. All clients; // will need to understand these types.; //; // ABSTRACT_TYPE(Class, Base) - An abstract class that shows up in; // the type hierarchy but has no concrete instances.; //; // NON_CANONICAL_TYPE(Class, Base) - A type that can show up; // anywhere in the AST but will never be a part of a canonical; // type. Clients that only need to deal with canonical types; // (ignoring, e.g., typedefs and other type aliases used for; // pretty-printing) can ignore these types.; //; // DEPENDENT_TYPE(Class, Base) - A type that will only show up; // within a C++ template that has not been instantiated, e.g., a; // type that is always dependent. Clients that do not need to deal; // with uninstantiated C++ templates can ignore these types.; //; // NON_CANONICAL_UNLESS_DEPENDENT_TYPE(Class, Base) - A type that; // is non-canonical unless it is dependent. Defaults to TYPE because; // it is neither reliably dependent nor reliably non-canonical.; //; // There is a sixth macro, independent of the others. Most clients; // will not need to use it.; //; // LEAF_TYPE(Class) - A type that never has inner types. Clients; // which can operate on such types more efficiently may wish to do so.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp:1834,Availability,reliab,reliably,1834,"m.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tblgen backend emits the node table (the .def file) for Clang; // type nodes.; //; // This file defines the AST type info database. Each type node is; // enumerated by providing its name (e.g., ""Builtin"" or ""Enum"") and; // base class (e.g., ""Type"" or ""TagType""). Depending on where in the; // abstract syntax tree the type will show up, the enumeration uses; // one of five different macros:; //; // TYPE(Class, Base) - A type that can show up anywhere in the AST,; // and might be dependent, canonical, or non-canonical. All clients; // will need to understand these types.; //; // ABSTRACT_TYPE(Class, Base) - An abstract class that shows up in; // the type hierarchy but has no concrete instances.; //; // NON_CANONICAL_TYPE(Class, Base) - A type that can show up; // anywhere in the AST but will never be a part of a canonical; // type. Clients that only need to deal with canonical types; // (ignoring, e.g., typedefs and other type aliases used for; // pretty-printing) can ignore these types.; //; // DEPENDENT_TYPE(Class, Base) - A type that will only show up; // within a C++ template that has not been instantiated, e.g., a; // type that is always dependent. Clients that do not need to deal; // with uninstantiated C++ templates can ignore these types.; //; // NON_CANONICAL_UNLESS_DEPENDENT_TYPE(Class, Base) - A type that; // is non-canonical unless it is dependent. Defaults to TYPE because; // it is neither reliably dependent nor reliably non-canonical.; //; // There is a sixth macro, independent of the others. Most clients; // will not need to use it.; //; // LEAF_TYPE(Class) - A type that never has inner types. Clients; // which can operate on such types more efficiently may wish to do so.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp:2070,Energy Efficiency,efficient,efficiently,2070,"m.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tblgen backend emits the node table (the .def file) for Clang; // type nodes.; //; // This file defines the AST type info database. Each type node is; // enumerated by providing its name (e.g., ""Builtin"" or ""Enum"") and; // base class (e.g., ""Type"" or ""TagType""). Depending on where in the; // abstract syntax tree the type will show up, the enumeration uses; // one of five different macros:; //; // TYPE(Class, Base) - A type that can show up anywhere in the AST,; // and might be dependent, canonical, or non-canonical. All clients; // will need to understand these types.; //; // ABSTRACT_TYPE(Class, Base) - An abstract class that shows up in; // the type hierarchy but has no concrete instances.; //; // NON_CANONICAL_TYPE(Class, Base) - A type that can show up; // anywhere in the AST but will never be a part of a canonical; // type. Clients that only need to deal with canonical types; // (ignoring, e.g., typedefs and other type aliases used for; // pretty-printing) can ignore these types.; //; // DEPENDENT_TYPE(Class, Base) - A type that will only show up; // within a C++ template that has not been instantiated, e.g., a; // type that is always dependent. Clients that do not need to deal; // with uninstantiated C++ templates can ignore these types.; //; // NON_CANONICAL_UNLESS_DEPENDENT_TYPE(Class, Base) - A type that; // is non-canonical unless it is dependent. Defaults to TYPE because; // it is neither reliably dependent nor reliably non-canonical.; //; // There is a sixth macro, independent of the others. Most clients; // will not need to use it.; //; // LEAF_TYPE(Class) - A type that never has inner types. Clients; // which can operate on such types more efficiently may wish to do so.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp:651,Integrability,Depend,Depending,651,"//=== ClangTypeNodesEmitter.cpp - Generate type node tables -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tblgen backend emits the node table (the .def file) for Clang; // type nodes.; //; // This file defines the AST type info database. Each type node is; // enumerated by providing its name (e.g., ""Builtin"" or ""Enum"") and; // base class (e.g., ""Type"" or ""TagType""). Depending on where in the; // abstract syntax tree the type will show up, the enumeration uses; // one of five different macros:; //; // TYPE(Class, Base) - A type that can show up anywhere in the AST,; // and might be dependent, canonical, or non-canonical. All clients; // will need to understand these types.; //; // ABSTRACT_TYPE(Class, Base) - An abstract class that shows up in; // the type hierarchy but has no concrete instances.; //; // NON_CANONICAL_TYPE(Class, Base) - A type that can show up; // anywhere in the AST but will never be a part of a canonical; // type. Clients that only need to deal with canonical types; // (ignoring, e.g., typedefs and other type aliases used for; // pretty-printing) can ignore these types.; //; // DEPENDENT_TYPE(Class, Base) - A type that will only show up; // within a C++ template that has not been instantiated, e.g., a; // type that is always dependent. Clients that do not need to deal; // with uninstantiated C++ templates can ignore these types.; //; // NON_CANONICAL_UNLESS_DEPENDENT_TYPE(Class, Base) - A type that; // is non-canonical unless it is dependent. Defaults to TYPE because; // it is neither reliably dependent nor reliably non-canonical.; //; // There is a sixth macro, independent of the others. Most clients; // will not need to use it.; //; // LEAF_TYPE(Class) - A type that nev",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp:870,Integrability,depend,dependent,870,"//=== ClangTypeNodesEmitter.cpp - Generate type node tables -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tblgen backend emits the node table (the .def file) for Clang; // type nodes.; //; // This file defines the AST type info database. Each type node is; // enumerated by providing its name (e.g., ""Builtin"" or ""Enum"") and; // base class (e.g., ""Type"" or ""TagType""). Depending on where in the; // abstract syntax tree the type will show up, the enumeration uses; // one of five different macros:; //; // TYPE(Class, Base) - A type that can show up anywhere in the AST,; // and might be dependent, canonical, or non-canonical. All clients; // will need to understand these types.; //; // ABSTRACT_TYPE(Class, Base) - An abstract class that shows up in; // the type hierarchy but has no concrete instances.; //; // NON_CANONICAL_TYPE(Class, Base) - A type that can show up; // anywhere in the AST but will never be a part of a canonical; // type. Clients that only need to deal with canonical types; // (ignoring, e.g., typedefs and other type aliases used for; // pretty-printing) can ignore these types.; //; // DEPENDENT_TYPE(Class, Base) - A type that will only show up; // within a C++ template that has not been instantiated, e.g., a; // type that is always dependent. Clients that do not need to deal; // with uninstantiated C++ templates can ignore these types.; //; // NON_CANONICAL_UNLESS_DEPENDENT_TYPE(Class, Base) - A type that; // is non-canonical unless it is dependent. Defaults to TYPE because; // it is neither reliably dependent nor reliably non-canonical.; //; // There is a sixth macro, independent of the others. Most clients; // will not need to use it.; //; // LEAF_TYPE(Class) - A type that nev",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp:1546,Integrability,depend,dependent,1546,"m.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tblgen backend emits the node table (the .def file) for Clang; // type nodes.; //; // This file defines the AST type info database. Each type node is; // enumerated by providing its name (e.g., ""Builtin"" or ""Enum"") and; // base class (e.g., ""Type"" or ""TagType""). Depending on where in the; // abstract syntax tree the type will show up, the enumeration uses; // one of five different macros:; //; // TYPE(Class, Base) - A type that can show up anywhere in the AST,; // and might be dependent, canonical, or non-canonical. All clients; // will need to understand these types.; //; // ABSTRACT_TYPE(Class, Base) - An abstract class that shows up in; // the type hierarchy but has no concrete instances.; //; // NON_CANONICAL_TYPE(Class, Base) - A type that can show up; // anywhere in the AST but will never be a part of a canonical; // type. Clients that only need to deal with canonical types; // (ignoring, e.g., typedefs and other type aliases used for; // pretty-printing) can ignore these types.; //; // DEPENDENT_TYPE(Class, Base) - A type that will only show up; // within a C++ template that has not been instantiated, e.g., a; // type that is always dependent. Clients that do not need to deal; // with uninstantiated C++ templates can ignore these types.; //; // NON_CANONICAL_UNLESS_DEPENDENT_TYPE(Class, Base) - A type that; // is non-canonical unless it is dependent. Defaults to TYPE because; // it is neither reliably dependent nor reliably non-canonical.; //; // There is a sixth macro, independent of the others. Most clients; // will not need to use it.; //; // LEAF_TYPE(Class) - A type that never has inner types. Clients; // which can operate on such types more efficiently may wish to do so.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp:1757,Integrability,depend,dependent,1757,"m.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tblgen backend emits the node table (the .def file) for Clang; // type nodes.; //; // This file defines the AST type info database. Each type node is; // enumerated by providing its name (e.g., ""Builtin"" or ""Enum"") and; // base class (e.g., ""Type"" or ""TagType""). Depending on where in the; // abstract syntax tree the type will show up, the enumeration uses; // one of five different macros:; //; // TYPE(Class, Base) - A type that can show up anywhere in the AST,; // and might be dependent, canonical, or non-canonical. All clients; // will need to understand these types.; //; // ABSTRACT_TYPE(Class, Base) - An abstract class that shows up in; // the type hierarchy but has no concrete instances.; //; // NON_CANONICAL_TYPE(Class, Base) - A type that can show up; // anywhere in the AST but will never be a part of a canonical; // type. Clients that only need to deal with canonical types; // (ignoring, e.g., typedefs and other type aliases used for; // pretty-printing) can ignore these types.; //; // DEPENDENT_TYPE(Class, Base) - A type that will only show up; // within a C++ template that has not been instantiated, e.g., a; // type that is always dependent. Clients that do not need to deal; // with uninstantiated C++ templates can ignore these types.; //; // NON_CANONICAL_UNLESS_DEPENDENT_TYPE(Class, Base) - A type that; // is non-canonical unless it is dependent. Defaults to TYPE because; // it is neither reliably dependent nor reliably non-canonical.; //; // There is a sixth macro, independent of the others. Most clients; // will not need to use it.; //; // LEAF_TYPE(Class) - A type that never has inner types. Clients; // which can operate on such types more efficiently may wish to do so.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp:1820,Integrability,depend,dependent,1820,"m.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tblgen backend emits the node table (the .def file) for Clang; // type nodes.; //; // This file defines the AST type info database. Each type node is; // enumerated by providing its name (e.g., ""Builtin"" or ""Enum"") and; // base class (e.g., ""Type"" or ""TagType""). Depending on where in the; // abstract syntax tree the type will show up, the enumeration uses; // one of five different macros:; //; // TYPE(Class, Base) - A type that can show up anywhere in the AST,; // and might be dependent, canonical, or non-canonical. All clients; // will need to understand these types.; //; // ABSTRACT_TYPE(Class, Base) - An abstract class that shows up in; // the type hierarchy but has no concrete instances.; //; // NON_CANONICAL_TYPE(Class, Base) - A type that can show up; // anywhere in the AST but will never be a part of a canonical; // type. Clients that only need to deal with canonical types; // (ignoring, e.g., typedefs and other type aliases used for; // pretty-printing) can ignore these types.; //; // DEPENDENT_TYPE(Class, Base) - A type that will only show up; // within a C++ template that has not been instantiated, e.g., a; // type that is always dependent. Clients that do not need to deal; // with uninstantiated C++ templates can ignore these types.; //; // NON_CANONICAL_UNLESS_DEPENDENT_TYPE(Class, Base) - A type that; // is non-canonical unless it is dependent. Defaults to TYPE because; // it is neither reliably dependent nor reliably non-canonical.; //; // There is a sixth macro, independent of the others. Most clients; // will not need to use it.; //; // LEAF_TYPE(Class) - A type that never has inner types. Clients; // which can operate on such types more efficiently may wish to do so.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangTypeNodesEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2169,Availability,error,error,2169,"ser-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribute, mapping each one directly to the clang builtin. And the; // polymorphic ones have __attribute__((overloadable)) as well. So once the; // compiler has resolved the overload, it knows the internal builtin ID of the; // selected function, and can check the immediate arguments against that; and; // if the user gets the types wrong in a call to a polymorphic intrinsic, they; // get a completely clear error message showing all the declarations of that; // function in the header file and explaining why each one doesn't fit their; // call.; //; // The downside of this is that if",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2897,Availability,error,error,2897,"builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribute, mapping each one directly to the clang builtin. And the; // polymorphic ones have __attribute__((overloadable)) as well. So once the; // compiler has resolved the overload, it knows the internal builtin ID of the; // selected function, and can check the immediate arguments against that; and; // if the user gets the types wrong in a call to a polymorphic intrinsic, they; // get a completely clear error message showing all the declarations of that; // function in the header file and explaining why each one doesn't fit their; // call.; //; // The downside of this is that if every clang builtin has to correspond; // exactly to a user-facing ACLE intrinsic, then you can't save work in the; // frontend by doing it in the header file: CGBuiltin.cpp has to do the entire; // job of converting an ACLE intrinsic call into LLVM IR. So the Tablegen; // description for an MVE intrinsic has to contain a full description of the; // sequence of IRBuilder calls that clang will need to make.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:3048,Availability,down,downside,3048,"builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribute, mapping each one directly to the clang builtin. And the; // polymorphic ones have __attribute__((overloadable)) as well. So once the; // compiler has resolved the overload, it knows the internal builtin ID of the; // selected function, and can check the immediate arguments against that; and; // if the user gets the types wrong in a call to a polymorphic intrinsic, they; // get a completely clear error message showing all the declarations of that; // function in the header file and explaining why each one doesn't fit their; // call.; //; // The downside of this is that if every clang builtin has to correspond; // exactly to a user-facing ACLE intrinsic, then you can't save work in the; // frontend by doing it in the header file: CGBuiltin.cpp has to do the entire; // job of converting an ACLE intrinsic call into LLVM IR. So the Tablegen; // description for an MVE intrinsic has to contain a full description of the; // sequence of IRBuilder calls that clang will need to make.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:918,Integrability,depend,depending,918,"//===- MveEmitter.cpp - Generate arm_mve.h for use with clang -*- C++ -*-=====//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This set of linked tablegen backends is responsible for emitting the bits; // and pieces that implement <arm_mve.h>, which is defined by the ACLE standard; // and provides a set of types and functions for (more or less) direct access; // to the MVE instruction set, including the scalar shifts as well as the; // vector instructions.; //; // MVE's standard intrinsic functions are unusual in that they have a system of; // polymorphism. For example, the function vaddq() can behave like vaddq_u16(),; // vaddq_f32(), vaddq_s8(), etc., depending on the types of the vector; // arguments you give it.; //; // This constrains the implementation strategies. The usual approach to making; // the user-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1224,Integrability,wrap,wrappers,1224,"LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This set of linked tablegen backends is responsible for emitting the bits; // and pieces that implement <arm_mve.h>, which is defined by the ACLE standard; // and provides a set of types and functions for (more or less) direct access; // to the MVE instruction set, including the scalar shifts as well as the; // vector instructions.; //; // MVE's standard intrinsic functions are unusual in that they have a system of; // polymorphism. For example, the function vaddq() can behave like vaddq_u16(),; // vaddq_f32(), vaddq_s8(), etc., depending on the types of the vector; // arguments you give it.; //; // This constrains the implementation strategies. The usual approach to making; // the user-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the u",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1368,Integrability,wrap,wrappers,1368,".h>, which is defined by the ACLE standard; // and provides a set of types and functions for (more or less) direct access; // to the MVE instruction set, including the scalar shifts as well as the; // vector instructions.; //; // MVE's standard intrinsic functions are unusual in that they have a system of; // polymorphism. For example, the function vaddq() can behave like vaddq_u16(),; // vaddq_f32(), vaddq_s8(), etc., depending on the types of the vector; // arguments you give it.; //; // This constrains the implementation strategies. The usual approach to making; // the user-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribut",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1528,Integrability,wrap,wrap,1528,".h>, which is defined by the ACLE standard; // and provides a set of types and functions for (more or less) direct access; // to the MVE instruction set, including the scalar shifts as well as the; // vector instructions.; //; // MVE's standard intrinsic functions are unusual in that they have a system of; // polymorphism. For example, the function vaddq() can behave like vaddq_u16(),; // vaddq_f32(), vaddq_s8(), etc., depending on the types of the vector; // arguments you give it.; //; // This constrains the implementation strategies. The usual approach to making; // the user-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribut",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2175,Integrability,message,messages,2175,"ser-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribute, mapping each one directly to the clang builtin. And the; // polymorphic ones have __attribute__((overloadable)) as well. So once the; // compiler has resolved the overload, it knows the internal builtin ID of the; // selected function, and can check the immediate arguments against that; and; // if the user gets the types wrong in a call to a polymorphic intrinsic, they; // get a completely clear error message showing all the declarations of that; // function in the header file and explaining why each one doesn't fit their; // call.; //; // The downside of this is that if",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2903,Integrability,message,message,2903,"builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribute, mapping each one directly to the clang builtin. And the; // polymorphic ones have __attribute__((overloadable)) as well. So once the; // compiler has resolved the overload, it knows the internal builtin ID of the; // selected function, and can check the immediate arguments against that; and; // if the user gets the types wrong in a call to a polymorphic intrinsic, they; // get a completely clear error message showing all the declarations of that; // function in the header file and explaining why each one doesn't fit their; // call.; //; // The downside of this is that if every clang builtin has to correspond; // exactly to a user-facing ACLE intrinsic, then you can't save work in the; // frontend by doing it in the header file: CGBuiltin.cpp has to do the entire; // job of converting an ACLE intrinsic call into LLVM IR. So the Tablegen; // description for an MVE intrinsic has to contain a full description of the; // sequence of IRBuilder calls that clang will need to make.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:806,Modifiability,polymorphi,polymorphism,806,"//===- MveEmitter.cpp - Generate arm_mve.h for use with clang -*- C++ -*-=====//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This set of linked tablegen backends is responsible for emitting the bits; // and pieces that implement <arm_mve.h>, which is defined by the ACLE standard; // and provides a set of types and functions for (more or less) direct access; // to the MVE instruction set, including the scalar shifts as well as the; // vector instructions.; //; // MVE's standard intrinsic functions are unusual in that they have a system of; // polymorphism. For example, the function vaddq() can behave like vaddq_u16(),; // vaddq_f32(), vaddq_s8(), etc., depending on the types of the vector; // arguments you give it.; //; // This constrains the implementation strategies. The usual approach to making; // the user-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1096,Modifiability,polymorphi,polymorphic,1096,"LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This set of linked tablegen backends is responsible for emitting the bits; // and pieces that implement <arm_mve.h>, which is defined by the ACLE standard; // and provides a set of types and functions for (more or less) direct access; // to the MVE instruction set, including the scalar shifts as well as the; // vector instructions.; //; // MVE's standard intrinsic functions are unusual in that they have a system of; // polymorphism. For example, the function vaddq() can behave like vaddq_u16(),; // vaddq_f32(), vaddq_s8(), etc., depending on the types of the vector; // arguments you give it.; //; // This constrains the implementation strategies. The usual approach to making; // the user-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the u",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2558,Modifiability,polymorphi,polymorphic,2558,"builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribute, mapping each one directly to the clang builtin. And the; // polymorphic ones have __attribute__((overloadable)) as well. So once the; // compiler has resolved the overload, it knows the internal builtin ID of the; // selected function, and can check the immediate arguments against that; and; // if the user gets the types wrong in a call to a polymorphic intrinsic, they; // get a completely clear error message showing all the declarations of that; // function in the header file and explaining why each one doesn't fit their; // call.; //; // The downside of this is that if every clang builtin has to correspond; // exactly to a user-facing ACLE intrinsic, then you can't save work in the; // frontend by doing it in the header file: CGBuiltin.cpp has to do the entire; // job of converting an ACLE intrinsic call into LLVM IR. So the Tablegen; // description for an MVE intrinsic has to contain a full description of the; // sequence of IRBuilder calls that clang will need to make.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2842,Modifiability,polymorphi,polymorphic,2842,"builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribute, mapping each one directly to the clang builtin. And the; // polymorphic ones have __attribute__((overloadable)) as well. So once the; // compiler has resolved the overload, it knows the internal builtin ID of the; // selected function, and can check the immediate arguments against that; and; // if the user gets the types wrong in a call to a polymorphic intrinsic, they; // get a completely clear error message showing all the declarations of that; // function in the header file and explaining why each one doesn't fit their; // call.; //; // The downside of this is that if every clang builtin has to correspond; // exactly to a user-facing ACLE intrinsic, then you can't save work in the; // frontend by doing it in the header file: CGBuiltin.cpp has to do the entire; // job of converting an ACLE intrinsic call into LLVM IR. So the Tablegen; // description for an MVE intrinsic has to contain a full description of the; // sequence of IRBuilder calls that clang will need to make.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:610,Security,access,access,610,"//===- MveEmitter.cpp - Generate arm_mve.h for use with clang -*- C++ -*-=====//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This set of linked tablegen backends is responsible for emitting the bits; // and pieces that implement <arm_mve.h>, which is defined by the ACLE standard; // and provides a set of types and functions for (more or less) direct access; // to the MVE instruction set, including the scalar shifts as well as the; // vector instructions.; //; // MVE's standard intrinsic functions are unusual in that they have a system of; // polymorphism. For example, the function vaddq() can behave like vaddq_u16(),; // vaddq_f32(), vaddq_s8(), etc., depending on the types of the vector; // arguments you give it.; //; // This constrains the implementation strategies. The usual approach to making; // the user-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2891,Usability,clear,clear,2891,"builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribute, mapping each one directly to the clang builtin. And the; // polymorphic ones have __attribute__((overloadable)) as well. So once the; // compiler has resolved the overload, it knows the internal builtin ID of the; // selected function, and can check the immediate arguments against that; and; // if the user gets the types wrong in a call to a polymorphic intrinsic, they; // get a completely clear error message showing all the declarations of that; // function in the header file and explaining why each one doesn't fit their; // call.; //; // The downside of this is that if every clang builtin has to correspond; // exactly to a user-facing ACLE intrinsic, then you can't save work in the; // frontend by doing it in the header file: CGBuiltin.cpp has to do the entire; // job of converting an ACLE intrinsic call into LLVM IR. So the Tablegen; // description for an MVE intrinsic has to contain a full description of the; // sequence of IRBuilder calls that clang will need to make.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:90,Performance,load,load,90,"// MultiVector is used for the {uint,int,float}NxMxK_t types used by the; // interleaving load/store intrinsics v{ld,st}{2,4}q.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:225,Testability,log,logically,225,"// Predicate is used by all the predicated intrinsics. Its C; // representation is mve_pred16_t (which is just an alias for uint16_t).; // But we give more detail here, by indicating that a given predicate; // instruction is logically regarded as a vector of i1 containing the; // same number of lanes as the input vector type. So our Predicate type; // comes with a lane count, which we use to decide which kind of <n x i1>; // we'll invoke the pred_i2v IR intrinsic to translate it into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1448,Energy Efficiency,allocate,allocate,1448,"ing a few constant or type parameters.; //; // Most obviously, the intrinsics in a single parametrised family will have; // code generation sequences that only differ in a type or two, e.g. vaddq_s8; // and vaddq_u16 will look the same apart from putting a different vector type; // in the call to CGM.getIntrinsic(). But also, completely different intrinsics; // will often code-generate in the same way, with only a different choice of; // _which_ IR intrinsic they lower to (e.g. vaddq_m_s8 and vmulq_m_s8), but; // marshalling the arguments and return values of the IR intrinsic in exactly; // the same way. And others might differ only in some other kind of constant,; // such as a lane index.; //; // So, when we generate the IR-building code for all these intrinsics, we keep; // track of every value that could possibly be pulled out of the code and; // stored ahead of time in a local variable. Then we group together intrinsics; // by textual equivalence of the code that would result if _all_ those; // parameters were stored in local variables. That gives us maximal sets that; // can be implemented by a single piece of IR-building code by changing; // parameter values ahead of time.; //; // After we've done that, we do a second pass in which we only allocate _some_; // of the parameters into local variables, by tracking which ones have the same; // values as each other (so that a single variable can be reused) and which; // ones are the same across the whole set (so that no variable is needed at; // all).; //; // Hence the class below. Its allocParam method is invoked during code; // generation by every method of a Result subclass (see below) that wants to; // give it the opportunity to pull something out into a switchable parameter.; // It returns a variable name for the parameter, or (if it's being used in the; // second pass once we've decided that some parameters don't need to be stored; // in variables after all) it might just return the input expression unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1076,Modifiability,variab,variable,1076,"// -----------------------------------------------------------------------------; // Class to facilitate merging together the code generation for many intrinsics; // by means of varying a few constant or type parameters.; //; // Most obviously, the intrinsics in a single parametrised family will have; // code generation sequences that only differ in a type or two, e.g. vaddq_s8; // and vaddq_u16 will look the same apart from putting a different vector type; // in the call to CGM.getIntrinsic(). But also, completely different intrinsics; // will often code-generate in the same way, with only a different choice of; // _which_ IR intrinsic they lower to (e.g. vaddq_m_s8 and vmulq_m_s8), but; // marshalling the arguments and return values of the IR intrinsic in exactly; // the same way. And others might differ only in some other kind of constant,; // such as a lane index.; //; // So, when we generate the IR-building code for all these intrinsics, we keep; // track of every value that could possibly be pulled out of the code and; // stored ahead of time in a local variable. Then we group together intrinsics; // by textual equivalence of the code that would result if _all_ those; // parameters were stored in local variables. That gives us maximal sets that; // can be implemented by a single piece of IR-building code by changing; // parameter values ahead of time.; //; // After we've done that, we do a second pass in which we only allocate _some_; // of the parameters into local variables, by tracking which ones have the same; // values as each other (so that a single variable can be reused) and which; // ones are the same across the whole set (so that no variable is needed at; // all).; //; // Hence the class below. Its allocParam method is invoked during code; // generation by every method of a Result subclass (see below) that wants to; // give it the opportunity to pull something out into a switchable parameter.; // It returns a variable name for the parameter, or (if it",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1228,Modifiability,variab,variables,1228,"; // by means of varying a few constant or type parameters.; //; // Most obviously, the intrinsics in a single parametrised family will have; // code generation sequences that only differ in a type or two, e.g. vaddq_s8; // and vaddq_u16 will look the same apart from putting a different vector type; // in the call to CGM.getIntrinsic(). But also, completely different intrinsics; // will often code-generate in the same way, with only a different choice of; // _which_ IR intrinsic they lower to (e.g. vaddq_m_s8 and vmulq_m_s8), but; // marshalling the arguments and return values of the IR intrinsic in exactly; // the same way. And others might differ only in some other kind of constant,; // such as a lane index.; //; // So, when we generate the IR-building code for all these intrinsics, we keep; // track of every value that could possibly be pulled out of the code and; // stored ahead of time in a local variable. Then we group together intrinsics; // by textual equivalence of the code that would result if _all_ those; // parameters were stored in local variables. That gives us maximal sets that; // can be implemented by a single piece of IR-building code by changing; // parameter values ahead of time.; //; // After we've done that, we do a second pass in which we only allocate _some_; // of the parameters into local variables, by tracking which ones have the same; // values as each other (so that a single variable can be reused) and which; // ones are the same across the whole set (so that no variable is needed at; // all).; //; // Hence the class below. Its allocParam method is invoked during code; // generation by every method of a Result subclass (see below) that wants to; // give it the opportunity to pull something out into a switchable parameter.; // It returns a variable name for the parameter, or (if it's being used in the; // second pass once we've decided that some parameters don't need to be stored; // in variables after all) it might just return the input e",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1497,Modifiability,variab,variables,1497,"ing a few constant or type parameters.; //; // Most obviously, the intrinsics in a single parametrised family will have; // code generation sequences that only differ in a type or two, e.g. vaddq_s8; // and vaddq_u16 will look the same apart from putting a different vector type; // in the call to CGM.getIntrinsic(). But also, completely different intrinsics; // will often code-generate in the same way, with only a different choice of; // _which_ IR intrinsic they lower to (e.g. vaddq_m_s8 and vmulq_m_s8), but; // marshalling the arguments and return values of the IR intrinsic in exactly; // the same way. And others might differ only in some other kind of constant,; // such as a lane index.; //; // So, when we generate the IR-building code for all these intrinsics, we keep; // track of every value that could possibly be pulled out of the code and; // stored ahead of time in a local variable. Then we group together intrinsics; // by textual equivalence of the code that would result if _all_ those; // parameters were stored in local variables. That gives us maximal sets that; // can be implemented by a single piece of IR-building code by changing; // parameter values ahead of time.; //; // After we've done that, we do a second pass in which we only allocate _some_; // of the parameters into local variables, by tracking which ones have the same; // values as each other (so that a single variable can be reused) and which; // ones are the same across the whole set (so that no variable is needed at; // all).; //; // Hence the class below. Its allocParam method is invoked during code; // generation by every method of a Result subclass (see below) that wants to; // give it the opportunity to pull something out into a switchable parameter.; // It returns a variable name for the parameter, or (if it's being used in the; // second pass once we've decided that some parameters don't need to be stored; // in variables after all) it might just return the input expression unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1588,Modifiability,variab,variable,1588,"ing a few constant or type parameters.; //; // Most obviously, the intrinsics in a single parametrised family will have; // code generation sequences that only differ in a type or two, e.g. vaddq_s8; // and vaddq_u16 will look the same apart from putting a different vector type; // in the call to CGM.getIntrinsic(). But also, completely different intrinsics; // will often code-generate in the same way, with only a different choice of; // _which_ IR intrinsic they lower to (e.g. vaddq_m_s8 and vmulq_m_s8), but; // marshalling the arguments and return values of the IR intrinsic in exactly; // the same way. And others might differ only in some other kind of constant,; // such as a lane index.; //; // So, when we generate the IR-building code for all these intrinsics, we keep; // track of every value that could possibly be pulled out of the code and; // stored ahead of time in a local variable. Then we group together intrinsics; // by textual equivalence of the code that would result if _all_ those; // parameters were stored in local variables. That gives us maximal sets that; // can be implemented by a single piece of IR-building code by changing; // parameter values ahead of time.; //; // After we've done that, we do a second pass in which we only allocate _some_; // of the parameters into local variables, by tracking which ones have the same; // values as each other (so that a single variable can be reused) and which; // ones are the same across the whole set (so that no variable is needed at; // all).; //; // Hence the class below. Its allocParam method is invoked during code; // generation by every method of a Result subclass (see below) that wants to; // give it the opportunity to pull something out into a switchable parameter.; // It returns a variable name for the parameter, or (if it's being used in the; // second pass once we've decided that some parameters don't need to be stored; // in variables after all) it might just return the input expression unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1677,Modifiability,variab,variable,1677,"ing a few constant or type parameters.; //; // Most obviously, the intrinsics in a single parametrised family will have; // code generation sequences that only differ in a type or two, e.g. vaddq_s8; // and vaddq_u16 will look the same apart from putting a different vector type; // in the call to CGM.getIntrinsic(). But also, completely different intrinsics; // will often code-generate in the same way, with only a different choice of; // _which_ IR intrinsic they lower to (e.g. vaddq_m_s8 and vmulq_m_s8), but; // marshalling the arguments and return values of the IR intrinsic in exactly; // the same way. And others might differ only in some other kind of constant,; // such as a lane index.; //; // So, when we generate the IR-building code for all these intrinsics, we keep; // track of every value that could possibly be pulled out of the code and; // stored ahead of time in a local variable. Then we group together intrinsics; // by textual equivalence of the code that would result if _all_ those; // parameters were stored in local variables. That gives us maximal sets that; // can be implemented by a single piece of IR-building code by changing; // parameter values ahead of time.; //; // After we've done that, we do a second pass in which we only allocate _some_; // of the parameters into local variables, by tracking which ones have the same; // values as each other (so that a single variable can be reused) and which; // ones are the same across the whole set (so that no variable is needed at; // all).; //; // Hence the class below. Its allocParam method is invoked during code; // generation by every method of a Result subclass (see below) that wants to; // give it the opportunity to pull something out into a switchable parameter.; // It returns a variable name for the parameter, or (if it's being used in the; // second pass once we've decided that some parameters don't need to be stored; // in variables after all) it might just return the input expression unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1959,Modifiability,variab,variable,1959,"ing a few constant or type parameters.; //; // Most obviously, the intrinsics in a single parametrised family will have; // code generation sequences that only differ in a type or two, e.g. vaddq_s8; // and vaddq_u16 will look the same apart from putting a different vector type; // in the call to CGM.getIntrinsic(). But also, completely different intrinsics; // will often code-generate in the same way, with only a different choice of; // _which_ IR intrinsic they lower to (e.g. vaddq_m_s8 and vmulq_m_s8), but; // marshalling the arguments and return values of the IR intrinsic in exactly; // the same way. And others might differ only in some other kind of constant,; // such as a lane index.; //; // So, when we generate the IR-building code for all these intrinsics, we keep; // track of every value that could possibly be pulled out of the code and; // stored ahead of time in a local variable. Then we group together intrinsics; // by textual equivalence of the code that would result if _all_ those; // parameters were stored in local variables. That gives us maximal sets that; // can be implemented by a single piece of IR-building code by changing; // parameter values ahead of time.; //; // After we've done that, we do a second pass in which we only allocate _some_; // of the parameters into local variables, by tracking which ones have the same; // values as each other (so that a single variable can be reused) and which; // ones are the same across the whole set (so that no variable is needed at; // all).; //; // Hence the class below. Its allocParam method is invoked during code; // generation by every method of a Result subclass (see below) that wants to; // give it the opportunity to pull something out into a switchable parameter.; // It returns a variable name for the parameter, or (if it's being used in the; // second pass once we've decided that some parameters don't need to be stored; // in variables after all) it might just return the input expression unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2109,Modifiability,variab,variables,2109,"ing a few constant or type parameters.; //; // Most obviously, the intrinsics in a single parametrised family will have; // code generation sequences that only differ in a type or two, e.g. vaddq_s8; // and vaddq_u16 will look the same apart from putting a different vector type; // in the call to CGM.getIntrinsic(). But also, completely different intrinsics; // will often code-generate in the same way, with only a different choice of; // _which_ IR intrinsic they lower to (e.g. vaddq_m_s8 and vmulq_m_s8), but; // marshalling the arguments and return values of the IR intrinsic in exactly; // the same way. And others might differ only in some other kind of constant,; // such as a lane index.; //; // So, when we generate the IR-building code for all these intrinsics, we keep; // track of every value that could possibly be pulled out of the code and; // stored ahead of time in a local variable. Then we group together intrinsics; // by textual equivalence of the code that would result if _all_ those; // parameters were stored in local variables. That gives us maximal sets that; // can be implemented by a single piece of IR-building code by changing; // parameter values ahead of time.; //; // After we've done that, we do a second pass in which we only allocate _some_; // of the parameters into local variables, by tracking which ones have the same; // values as each other (so that a single variable can be reused) and which; // ones are the same across the whole set (so that no variable is needed at; // all).; //; // Hence the class below. Its allocParam method is invoked during code; // generation by every method of a Result subclass (see below) that wants to; // give it the opportunity to pull something out into a switchable parameter.; // It returns a variable name for the parameter, or (if it's being used in the; // second pass once we've decided that some parameters don't need to be stored; // in variables after all) it might just return the input expression unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:331,Energy Efficiency,allocate,allocate,331,"// Provided ahead of time in pass 2, to indicate which parameters are being; // assigned to what. This vector contains an entry for each call to; // allocParam expected during code gen (which we counted up in pass 1), and; // indicates the number of the parameter variable that should be returned, or; // -1 if this call shouldn't allocate a parameter variable at all.; //; // We rely on the recursive code generation working identically in passes 1; // and 2, so that the same list of calls to allocParam happen in the same; // order. That guarantees that the parameter numbers recorded in pass 1 will; // match the entries in this vector that store what EmitterBase::EmitBuiltinCG; // decided to do about each one in pass 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:264,Modifiability,variab,variable,264,"// Provided ahead of time in pass 2, to indicate which parameters are being; // assigned to what. This vector contains an entry for each call to; // allocParam expected during code gen (which we counted up in pass 1), and; // indicates the number of the parameter variable that should be returned, or; // -1 if this call shouldn't allocate a parameter variable at all.; //; // We rely on the recursive code generation working identically in passes 1; // and 2, so that the same list of calls to allocParam happen in the same; // order. That guarantees that the parameter numbers recorded in pass 1 will; // match the entries in this vector that store what EmitterBase::EmitBuiltinCG; // decided to do about each one in pass 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:352,Modifiability,variab,variable,352,"// Provided ahead of time in pass 2, to indicate which parameters are being; // assigned to what. This vector contains an entry for each call to; // allocParam expected during code gen (which we counted up in pass 1), and; // indicates the number of the parameter variable that should be returned, or; // -1 if this call shouldn't allocate a parameter variable at all.; //; // We rely on the recursive code generation working identically in passes 1; // and 2, so that the same list of calls to allocParam happen in the same; // order. That guarantees that the parameter numbers recorded in pass 1 will; // match the entries in this vector that store what EmitterBase::EmitBuiltinCG; // decided to do about each one in pass 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:42,Energy Efficiency,allocate,allocated,42,// Internally track how many things we've allocated,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:53,Modifiability,variab,variable,53,"// In pass 1, unconditionally assign a new parameter variable to every; // value we're asked to process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:75,Modifiability,variab,variable,75,"// In pass 2, consult the map provided by the caller to find out which; // variable we should be keeping things in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:12,Energy Efficiency,allocate,allocated,12,"// If we've allocated a new parameter variable for the first time, store; // its type and value to be retrieved after codegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:38,Modifiability,variab,variable,38,"// If we've allocated a new parameter variable for the first time, store; // its type and value to be retrieved after codegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:45,Modifiability,variab,variables,45,// Unimaginative naming scheme for parameter variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:308,Performance,load,loads,308,"// -----------------------------------------------------------------------------; // System of classes that represent all the intermediate values used during; // code-generation for an intrinsic.; //; // The base class 'Result' can represent a value of the LLVM type 'Value', or; // sometimes 'Address' (for loads/stores, including an alignment requirement).; //; // In the case where the Tablegen provides a value in the codegen dag as a; // plain integer literal, the Result object we construct here will be one that; // returns true from hasIntegerConstantValue(). This allows the generated C++; // code to use the constant directly in contexts which can take a literal; // integer, such as Builder.CreateExtractValue(thing, 1), without going to the; // effort of calling llvm::ConstantInt::get() and then pulling the constant; // back out of the resulting llvm:Value later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:50,Integrability,depend,dependency,50,"// Mostly, when a code-generation operation has a dependency on prior; // operations, it's because it uses the output values of those operations as; // inputs. But there's one exception, which is the use of 'seq' in Tablegen; // to indicate that operations have to be performed in sequence regardless of; // whether they use each others' output values.; //; // So, the actual generation of code is done by depth-first search, using the; // prerequisites() method to get a list of all the other Results that have to; // be computed before this one. That method divides into the 'predecessor',; // set by setPredecessor() while processing a 'seq' dag node, and the list; // returned by 'morePrerequisites', which each subclass implements to return; // a list of the Results it uses as input to whatever its own computation is; // doing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:268,Performance,perform,performed,268,"// Mostly, when a code-generation operation has a dependency on prior; // operations, it's because it uses the output values of those operations as; // inputs. But there's one exception, which is the use of 'seq' in Tablegen; // to indicate that operations have to be performed in sequence regardless of; // whether they use each others' output values.; //; // So, the actual generation of code is done by depth-first search, using the; // prerequisites() method to get a list of all the other Results that have to; // be computed before this one. That method divides into the 'predecessor',; // set by setPredecessor() while processing a 'seq' dag node, and the list; // returned by 'morePrerequisites', which each subclass implements to return; // a list of the Results it uses as input to whatever its own computation is; // doing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:34,Modifiability,variab,variable,34,"// Each Result will be assigned a variable name in the output code, but not; // all those variable names will actually be used (e.g. the return value of; // Builder.CreateStore has void type, so nobody will want to refer to it). To; // prevent annoying compiler warnings, we track whether each Result's; // variable name was ever actually mentioned in subsequent statements, so; // that it can be left out of the final generated code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:90,Modifiability,variab,variable,90,"// Each Result will be assigned a variable name in the output code, but not; // all those variable names will actually be used (e.g. the return value of; // Builder.CreateStore has void type, so nobody will want to refer to it). To; // prevent annoying compiler warnings, we track whether each Result's; // variable name was ever actually mentioned in subsequent statements, so; // that it can be left out of the final generated code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:307,Modifiability,variab,variable,307,"// Each Result will be assigned a variable name in the output code, but not; // all those variable names will actually be used (e.g. the return value of; // Builder.CreateStore has void type, so nobody will want to refer to it). To; // prevent annoying compiler warnings, we track whether each Result's; // variable name was ever actually mentioned in subsequent statements, so; // that it can be left out of the final generated code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:199,Modifiability,variab,variable,199,"// Result subclass that retrieves one of the arguments to the clang builtin; // function. In cases where the argument has pointer type, we call; // EmitPointerWithAlignment and store the result in a variable of type Address,; // so that load and store IR nodes can know the right alignment. Otherwise, we; // call EmitScalarExpr.; //; // There are aggregate parameters in the MVE intrinsics API, but we don't deal; // with them in this Tablegen back end: they only arise in the vld2q/vld4q and; // vst2q/vst4q family, which is few enough that we just write the code by hand; // for those in CGBuiltin.cpp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:237,Performance,load,load,237,"// Result subclass that retrieves one of the arguments to the clang builtin; // function. In cases where the argument has pointer type, we call; // EmitPointerWithAlignment and store the result in a variable of type Address,; // so that load and store IR nodes can know the right alignment. Otherwise, we; // call EmitScalarExpr.; //; // There are aggregate parameters in the MVE intrinsics API, but we don't deal; // with them in this Tablegen back end: they only arise in the vld2q/vld4q and; // vst2q/vst4q family, which is few enough that we just write the code by hand; // for those in CGBuiltin.cpp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:201,Integrability,depend,depending,201,"// Result subclass for an integer literal appearing in Tablegen. This may need; // to be turned into an llvm::Result by means of llvm::ConstantInt::get(), or; // it may be used directly as an integer, depending on which IRBuilder method; // it's being passed to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:7,Modifiability,polymorphi,polymorphic,7,"// For polymorphic intrinsics, FullName is the explicit name that uniquely; // identifies this variant of the intrinsic, and ShortName is the name it; // shares with at least one other intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:51,Modifiability,polymorphi,polymorphic,51,// A very small number of intrinsics _only_ have a polymorphic; // variant (vuninitializedq taking an unevaluated argument).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:29,Integrability,wrap,wrapper,29,"// Pass to a subfield of any wrapper records. We don't expect more than one; // of these: immediate operands are used as plain numbers rather than as; // llvm::Value, so it's meaningless to promote their type anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:26,Modifiability,polymorphi,polymorphic,26,"// Derive the intrinsic's polymorphic name, by removing components from the; // full name as specified by its 'pnt' member ('polymorphic name type'),; // which indicates how many type suffixes to remove, and any other piece of; // the name that should be removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:125,Modifiability,polymorphi,polymorphic,125,"// Derive the intrinsic's polymorphic name, by removing components from the; // full name as specified by its 'pnt' member ('polymorphic name type'),; // which indicates how many type suffixes to remove, and any other piece of; // the name that should be removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:87,Modifiability,variab,variable-name,87,"// The argument will usually have a name in the arguments dag, which goes; // into the variable-name scope that the code gen will refer to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:107,Integrability,depend,depended-on,107,"// Finally, go through the codegen dag and translate it into a Result object; // (with an arbitrary DAG of depended-on Results hanging off it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:116,Modifiability,variab,variables,116,"// Or, if it's the special case of CustomCodegen, just accumulate; // a list of parameters we're going to assign to variables before; // breaking from the loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:6,Integrability,wrap,wrapper,6,"/// A wrapper on raw_string_ostream that contains its own buffer rather than; /// having to point it at one elsewhere. (In other words, it works just like; /// std::ostringstream; also, this makes it convenient to declare a whole array; /// of them at once.); ///; /// We have to set this up using multiple inheritance, to ensure that the; /// string member has been constructed before raw_string_ostream's constructor; /// is given a pointer to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:307,Modifiability,inherit,inheritance,307,"/// A wrapper on raw_string_ostream that contains its own buffer rather than; /// having to point it at one elsewhere. (In other words, it works just like; /// std::ostringstream; also, this makes it convenient to declare a whole array; /// of them at once.); ///; /// We have to set this up using multiple inheritance, to ensure that the; /// string member has been constructed before raw_string_ostream's constructor; /// is given a pointer to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:277,Modifiability,variab,variables,277,"// Machinery for the grouping of intrinsics by similar codegen.; //; // The general setup is that 'MergeableGroup' stores the things that a set of; // similarly shaped intrinsics have in common: the text of their code; // generation, and the number and type of their parameter variables.; // MergeableGroup is the key in a std::map whose value is a set of; // OutputIntrinsic, which stores the ways in which a particular intrinsic; // specializes the MergeableGroup's generic description: the function name and; // the _values_ of the parameter variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:545,Modifiability,variab,variables,545,"// Machinery for the grouping of intrinsics by similar codegen.; //; // The general setup is that 'MergeableGroup' stores the things that a set of; // similarly shaped intrinsics have in common: the text of their code; // generation, and the number and type of their parameter variables.; // MergeableGroup is the key in a std::map whose value is a set of; // OutputIntrinsic, which stores the ways in which a particular intrinsic; // specializes the MergeableGroup's generic description: the function name and; // the _values_ of the parameter variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:134,Modifiability,variab,variable,134,// Pass 1: generate code for all the intrinsics as if every type or constant; // that can possibly be abstracted out into a parameter variable will be.; // This identifies the sets of intrinsics we'll group together into a single; // piece of code generation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:60,Modifiability,variab,variable,60,"// Pass 2: for each of those groups, optimize the parameter variable set by; // eliminating 'parameters' that are the same for all intrinsics in the; // group, and merging together pairs of parameter variables that take the; // same values as each other for all intrinsics in the group.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:200,Modifiability,variab,variables,200,"// Pass 2: for each of those groups, optimize the parameter variable set by; // eliminating 'parameters' that are the same for all intrinsics in the; // group, and merging together pairs of parameter variables that take the; // same values as each other for all intrinsics in the group.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:37,Performance,optimiz,optimize,37,"// Pass 2: for each of those groups, optimize the parameter variable set by; // eliminating 'parameters' that are the same for all intrinsics in the; // group, and merging together pairs of parameter variables that take the; // same values as each other for all intrinsics in the group.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:49,Modifiability,variab,variable,49,"// If so, record it as -1, meaning 'no parameter variable needed'. Then; // the corresponding call to allocParam in pass 2 will not generate a; // variable at all, and just use the value inline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:147,Modifiability,variab,variable,147,"// If so, record it as -1, meaning 'no parameter variable needed'. Then; // the corresponding call to allocParam in pass 2 will not generate a; // variable at all, and just use the value inline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:244,Modifiability,variab,variables,244,"// Otherwise, make a list of the values this parameter takes for each; // intrinsic, and see if that value vector matches anything we already; // have. We also record the parameter type, so that we don't accidentally; // match up two parameter variables with different types. (Not that; // there's much chance of them having textually equivalent values, but in; // _principle_ it could happen.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:30,Modifiability,variab,variable,30,"// Yes, an existing parameter variable can be reused for this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:31,Modifiability,variab,variable,31,"// No, we need a new parameter variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:77,Energy Efficiency,reduce,reduced,77,"// Now we're ready to do the pass 2 code generation, which will emit the; // reduced set of parameter variables we've just worked out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:102,Modifiability,variab,variables,102,"// Now we're ready to do the pass 2 code generation, which will emit the; // reduced set of parameter variables we've just worked out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:31,Modifiability,variab,variables,31,"// If we've got some parameter variables, then emit their declarations...",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:76,Modifiability,polymorphi,polymorphic,76,// Build a sorted table of:; // - intrinsic id number; // - full name; // - polymorphic name or -1,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:89,Modifiability,polymorphi,polymorphic,89,"// We generate each intrinsic twice, under its full unambiguous; // name and its shorter polymorphic name (if the latter exists).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:131,Safety,safe,safe,131,"// We also generate each intrinsic under a name like __arm_vfooq; // (which is in C language implementation namespace, so it's; // safe to define in any conforming user program) and a shorter; // one like vfooq (which is in user namespace, so a user might; // reasonably have used it for something already). If so, they; // can #define __ARM_MVE_PRESERVE_USER_NAMESPACE before; // including the header, which will suppress the shorter names; // and leave only the implementation-namespace ones. Then they; // have to write __arm_vfooq everywhere, of course.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:757,Availability,error,error,757,"// Emit the actual declaration. All these functions are; // declared 'static inline' without a body, which is fine; // provided clang recognizes them as builtins, and has the; // effect that this type signature is used in place of the one; // that Builtins.def didn't provide. That's how we can get; // structure types that weren't defined until this header was; // included to be part of the type signature of a builtin that; // was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1164,Availability,error,error,1164,"provided clang recognizes them as builtins, and has the; // effect that this type signature is used in place of the one; // that Builtins.def didn't provide. That's how we can get; // structure types that weren't defined until this header was; // included to be part of the type signature of a builtin that; // was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this way, clang will print just; // the _final_ line of each declaration in the header, to show; // the type signatures th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1896,Availability,error,error,1896,"/ was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this way, clang will print just; // the _final_ line of each declaration in the header, to show; // the type signatures that would have been legal. So all the; // confusing machinery with __attribute__ is left out of the; // error message, and the user sees something that's more or; // less self-documenting: ""here's a list of actually readable; // type signatures for vfooq(), and here's why each one didn't; // match your call"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2222,Availability,error,error,2222,"/ was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this way, clang will print just; // the _final_ line of each declaration in the header, to show; // the type signatures that would have been legal. So all the; // confusing machinery with __attribute__ is left out of the; // error message, and the user sees something that's more or; // less self-documenting: ""here's a list of actually readable; // type signatures for vfooq(), and here's why each one didn't; // match your call"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:696,Integrability,wrap,wrapper,696,"// Emit the actual declaration. All these functions are; // declared 'static inline' without a body, which is fine; // provided clang recognizes them as builtins, and has the; // effect that this type signature is used in place of the one; // that Builtins.def didn't provide. That's how we can get; // structure types that weren't defined until this header was; // included to be part of the type signature of a builtin that; // was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:763,Integrability,message,message,763,"// Emit the actual declaration. All these functions are; // declared 'static inline' without a body, which is fine; // provided clang recognizes them as builtins, and has the; // effect that this type signature is used in place of the one; // that Builtins.def didn't provide. That's how we can get; // structure types that weren't defined until this header was; // included to be part of the type signature of a builtin that; // was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:786,Integrability,wrap,wrapper,786,"// Emit the actual declaration. All these functions are; // declared 'static inline' without a body, which is fine; // provided clang recognizes them as builtins, and has the; // effect that this type signature is used in place of the one; // that Builtins.def didn't provide. That's how we can get; // structure types that weren't defined until this header was; // included to be part of the type signature of a builtin that; // was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:995,Integrability,wrap,wrapper,995,"// Emit the actual declaration. All these functions are; // declared 'static inline' without a body, which is fine; // provided clang recognizes them as builtins, and has the; // effect that this type signature is used in place of the one; // that Builtins.def didn't provide. That's how we can get; // structure types that weren't defined until this header was; // included to be part of the type signature of a builtin that; // was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1170,Integrability,message,messages,1170,"provided clang recognizes them as builtins, and has the; // effect that this type signature is used in place of the one; // that Builtins.def didn't provide. That's how we can get; // structure types that weren't defined until this header was; // included to be part of the type signature of a builtin that; // was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this way, clang will print just; // the _final_ line of each declaration in the header, to show; // the type signatures th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1906,Integrability,message,messages,1906,"/ was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this way, clang will print just; // the _final_ line of each declaration in the header, to show; // the type signatures that would have been legal. So all the; // confusing machinery with __attribute__ is left out of the; // error message, and the user sees something that's more or; // less self-documenting: ""here's a list of actually readable; // type signatures for vfooq(), and here's why each one didn't; // match your call"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2228,Integrability,message,message,2228,"/ was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this way, clang will print just; // the _final_ line of each declaration in the header, to show; // the type signatures that would have been legal. So all the; // confusing machinery with __attribute__ is left out of the; // error message, and the user sees something that's more or; // less self-documenting: ""here's a list of actually readable; // type signatures for vfooq(), and here's why each one didn't; // match your call"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1249,Modifiability,polymorphi,polymorphic,1249,"fined until this header was; // included to be part of the type signature of a builtin that; // was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this way, clang will print just; // the _final_ line of each declaration in the header, to show; // the type signatures that would have been legal. So all the; // confusing machinery with __attribute__ is left out of the; // error message, and the user sees something that's more or; // less self-documenting: ""here's a list of actually r",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:1975,Modifiability,polymorphi,polymorphic,1975,"/ was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this way, clang will print just; // the _final_ line of each declaration in the header, to show; // the type signatures that would have been legal. So all the; // confusing machinery with __attribute__ is left out of the; // error message, and the user sees something that's more or; // less self-documenting: ""here's a list of actually readable; // type signatures for vfooq(), and here's why each one didn't; // match your call"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:737,Safety,avoid,avoids,737,"// Emit the actual declaration. All these functions are; // declared 'static inline' without a body, which is fine; // provided clang recognizes them as builtins, and has the; // effect that this type signature is used in place of the one; // that Builtins.def didn't provide. That's how we can get; // structure types that weren't defined until this header was; // included to be part of the type signature of a builtin that; // was known to clang already.; //; // The declarations use __attribute__(__clang_arm_builtin_alias),; // so that each function declared will be recognized as the; // appropriate MVE builtin in spite of its user-facing name.; //; // (That's better than making them all wrapper functions,; // partly because it avoids any compiler error message citing; // the wrapper function definition instead of the user's code,; // and mostly because some MVE intrinsics have arguments; // required to be compile-time constants, and that property; // can't be propagated through a wrapper function. It can be; // propagated through a macro, but macros can't be overloaded; // on argument types very easily - you have to use _Generic,; // which makes error messages very confusing when the user; // gets it wrong.); //; // Finally, the polymorphic versions of the intrinsics are; // also defined with __attribute__(overloadable), so that when; // the same name is defined with several type signatures, the; // right thing happens. Each one of the overloaded; // declarations is given a different builtin id, which; // has exactly the effect we want: first clang resolves the; // overload to the right function, then it knows which builtin; // it's referring to, and then the Sema checking for that; // builtin can check further things like the constant; // arguments.; //; // One more subtlety is the newline just before the return; // type name. That's a cosmetic tweak to make the error; // messages legible if the user gets the types wrong in a call; // to a polymorphic function: this",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:197,Modifiability,polymorphi,polymorphic,197,"// -----------------------------------------------------------------------------; // Class that describes an ACLE intrinsic implemented as a macro.; //; // This class is used when the intrinsic is polymorphic in 2 or 3 types, but we; // want to avoid a combinatorial explosion by reinterpreting the arguments to; // fixed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:245,Safety,avoid,avoid,245,"// -----------------------------------------------------------------------------; // Class that describes an ACLE intrinsic implemented as a macro.; //; // This class is used when the intrinsic is polymorphic in 2 or 3 types, but we; // want to avoid a combinatorial explosion by reinterpreting the arguments to; // fixed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:89,Modifiability,polymorphi,polymorphic,89,"// We generate each intrinsic twice, under its full unambiguous; // name and its shorter polymorphic name (if the latter exists).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:549,Integrability,interface,interface,549,"//===- NeonEmitter.cpp - Generate arm_neon.h for use with clang -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tablegen backend is responsible for emitting arm_neon.h, which includes; // a declaration and definition of each function specified by the ARM NEON; // compiler interface. See ARM document DUI0348B.; //; // Each NEON instruction is implemented in terms of 1 or more functions which; // are suffixed with the element type of the input vectors. Functions may be; // implemented in terms of generic vector operations such as +, *, -, etc. or; // by calling a __builtin_-prefixed function which will be handled by clang's; // CodeGen library.; //; // Additional validation code can be generated by this file when runHeader() is; // called, rather than the normal run() entry point.; //; // See also the documentation in include/clang/Basic/arm_neon.td.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:946,Security,validat,validation,946,"//===- NeonEmitter.cpp - Generate arm_neon.h for use with clang -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tablegen backend is responsible for emitting arm_neon.h, which includes; // a declaration and definition of each function specified by the ARM NEON; // compiler interface. See ARM document DUI0348B.; //; // Each NEON instruction is implemented in terms of 1 or more functions which; // are suffixed with the element type of the input vectors. Functions may be; // implemented in terms of generic vector operations such as +, *, -, etc. or; // by calling a __builtin_-prefixed function which will be handled by clang's; // CodeGen library.; //; // Additional validation code can be generated by this file when runHeader() is; // called, rather than the normal run() entry point.; //; // See also the documentation in include/clang/Basic/arm_neon.td.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:58,Performance,perform,perform,58,"// While globals are generally bad, this one allows us to perform assertions; // liberally and somehow still trace them back to the def they indirectly; // came from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:66,Testability,assert,assertions,66,"// While globals are generally bad, this one allows us to perform assertions; // liberally and somehow still trace them back to the def they indirectly; // came from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:3,Testability,Log,Logical,3,// Logical instructions which are op instructions; // but we need to not emit any suffix for in our; // tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:104,Testability,test,tests,104,// Logical instructions which are op instructions; // but we need to not emit any suffix for in our; // tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:32,Testability,test,test,32,// Instructions which we do not test since they are; // not TRUE instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:209,Integrability,wrap,wrapper,209,"//===----------------------------------------------------------------------===//; // TypeSpec; //===----------------------------------------------------------------------===//; /// A TypeSpec is just a simple wrapper around a string, but gets its own type; /// for strong typing purposes.; ///; /// A TypeSpec can be used to create a type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:202,Usability,simpl,simple,202,"//===----------------------------------------------------------------------===//; // TypeSpec; //===----------------------------------------------------------------------===//; /// A TypeSpec is just a simple wrapper around a string, but gets its own type; /// for strong typing purposes.; ///; /// A TypeSpec can be used to create a type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:85,Modifiability,Variab,Variable,85,//===----------------------------------------------------------------------===//; // Variable; //===----------------------------------------------------------------------===//; /// A variable is a simple class that just has a type and a name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:183,Modifiability,variab,variable,183,//===----------------------------------------------------------------------===//; // Variable; //===----------------------------------------------------------------------===//; /// A variable is a simple class that just has a type and a name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:197,Usability,simpl,simple,197,//===----------------------------------------------------------------------===//; // Variable; //===----------------------------------------------------------------------===//; /// A variable is a simple class that just has a type and a name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:22,Safety,safe,safe,22,/// Is this intrinsic safe for big-endian? or does it need its arguments; /// reversing?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:58,Modifiability,polymorphi,polymorphic,58,/// The index of the key type passed to CGBuiltin.cpp for polymorphic calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:14,Modifiability,variab,variables,14,/// The local variables defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:45,Integrability,depend,depends,45,/// NeededEarly - set if any other intrinsic depends on this intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:15,Modifiability,variab,variable,15,/// The return variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:32,Modifiability,variab,variable,32,"/// A postfix to apply to every variable. Defaults to """".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:81,Modifiability,variab,variables,81,"// Modify the TypeSpec per-argument to get a concrete Type, and create; // known variables for each.; // Types[0] is the return value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:233,Safety,avoid,avoid,233,"// If this builtin takes an immediate argument, we need to #define it rather; // than use a standard declaration, so that SemaChecking can range check; // the immediate passed by the user.; // Pointer arguments need to use macros to avoid hiding aligned attributes; // from the pointer type.; // It is not permitted to pass or return an __fp16 by value, so intrinsics; // taking a scalar float16_t must be implemented as macros.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:91,Integrability,depend,dependencies,91,"/// Get the set of Intrinsics that this intrinsic calls.; /// this is the set of immediate dependencies, NOT the; /// transitive closure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:43,Integrability,depend,dependency,43,"/// Perform type checking and populate the dependency graph, but; /// don't generate code yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:4,Performance,Perform,Perform,4,"/// Perform type checking and populate the dependency graph, but; /// don't generate code yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:81,Modifiability,variab,variables,81,"// Modify the TypeSpec per-argument to get a concrete Type, and create; // known variables for each.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:19,Modifiability,variab,variable,19,"// Create a return variable, if we're not void.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:72,Modifiability,variab,variable,72,"// MOD can take several forms:; // 1. $X - take the type of parameter / variable X.; // 2. The value ""R"" - take the type of the return type.; // 3. a type string; // 4. The value ""U"" or ""S"" to switch the signedness.; // 5. The value ""H"" or ""D"" to half or double the bitwidth.; // 6. The value ""8"" to convert to 8-bit (signed) integer lanes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:3,Safety,Avoid,Avoid,3,// Avoid duplicated code for big and little endian,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:32,Usability,simpl,simple,32,// Little endian intrinsics are simple and don't require any argument; // swapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:113,Performance,load,loaded,113,"// Big endian intrinsics are more complex. The user intended these; // intrinsics to operate on a vector ""as-if"" loaded by (V)LDR,; // but we load as-if (V)LD1. So we should swap all arguments and; // swap the return value too.; //; // If we call sub-intrinsics, we should call a version that does; // not re-swap the arguments!",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:142,Performance,load,load,142,"// Big endian intrinsics are more complex. The user intended these; // intrinsics to operate on a vector ""as-if"" loaded by (V)LDR,; // but we load as-if (V)LD1. So we should swap all arguments and; // swap the return value too.; //; // If we call sub-intrinsics, we should call a version that does; // not re-swap the arguments!",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:203,Integrability,Depend,Dependencies,203,"// If we call a macro, our local variables may be corrupted due to; // lack of proper lexical scoping. So, add a globally unique postfix; // to every variable.; //; // indexBody() should have set up the Dependencies set by now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:33,Modifiability,variab,variables,33,"// If we call a macro, our local variables may be corrupted due to; // lack of proper lexical scoping. So, add a globally unique postfix; // to every variable.; //; // indexBody() should have set up the Dependencies set by now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:150,Modifiability,variab,variable,150,"// If we call a macro, our local variables may be corrupted due to; // lack of proper lexical scoping. So, add a globally unique postfix; // to every variable.; //; // indexBody() should have set up the Dependencies set by now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:15,Modifiability,variab,variable,15,// Emit return variable declaration first as to not trigger; // -Wdeclaration-after-statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:15,Modifiability,variab,variable,15,// Emit return variable declaration first as to not trigger; // -Wdeclaration-after-statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:157,Availability,Mask,Mask,157,// We record each overload check line before emitting because subsequent Inst; // definitions may extend the number of permitted types (i.e. augment the; // Mask). Use std::map to avoid sorting the table by hash number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:98,Modifiability,extend,extend,98,// We record each overload check line before emitting because subsequent Inst; // definitions may extend the number of permitted types (i.e. augment the; // Mask). Use std::map to avoid sorting the table by hash number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:180,Safety,avoid,avoid,180,// We record each overload check line before emitting because subsequent Inst; // definitions may extend the number of permitted types (i.e. augment the; // Mask). Use std::map to avoid sorting the table by hash number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:207,Security,hash,hash,207,// We record each overload check line before emitting because subsequent Inst; // definitions may extend the number of permitted types (i.e. augment the; // Mask). Use std::map to avoid sorting the table by hash number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:243,Performance,load,load,243,"// Omit type checking for the pointer arguments of vld1_lane, vld1_dup,; // vst1_lane, vldap1_lane, and vstl1_lane intrinsics. Using a pointer to; // the vector element type with one of those operations causes codegen to; // select an aligned load/store instruction. If you want an unaligned; // operation, the pointer argument needs to have less alignment than element; // type, so just accept any pointer type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:217,Security,validat,validation,217,/// runHeader - Emit a file with sections defining:; /// 1. the NEON section of BuiltinsARM.def and BuiltinsAArch64.def.; /// 2. the SemaChecking code for the type overload checking.; /// 3. the SemaChecking code for validation of intrinsic immediate arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:43,Integrability,depend,depends,43,"// For now, signedness of polynomial types depends on target",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp:19,Availability,mask,mask,19,"// Supported type, mask of BasicType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp:49,Performance,load,load,49,"// Number of field, large than 1 if it's segment load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp:3,Availability,Mask,Masked,3,// Masked reduction cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp:134,Energy Efficiency,reduce,reduce,134,"// Sort signature entries by length, let longer signature insert first, to; // make it more possible to reuse table entries, that can reduce ~10% table; // size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp:12,Availability,mask,masked,12,// Create a masked intrinsic,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/RISCVVEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/SveEmitter.cpp:50,Availability,mask,mask,50,// Returns the SVETypeFlags for a given value and mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/SveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/SveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/TableGen.cpp:132,Security,sanitiz,sanitizer,132,// Disable LeakSanitizer for this binary as it has too many leaks that are not; // very interesting to fix. See compiler-rt/include/sanitizer/lsan_interface.h .,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/TableGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/TableGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/TableGenBackends.h:267,Modifiability,inherit,inherit,267,"/**; @param PriorizeIfSubclassOf These classes should be prioritized in the output.; This is useful to force enum generation/jump tables/lookup tables to be more; compact in both size and surrounding code in hot functions. An example use is; in Decl for classes that inherit from DeclContext, for functions like; castFromDeclContext.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/TableGen/TableGenBackends.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/TableGenBackends.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc:58,Testability,test,testcase,58,// The return type for each function when doing covariant testcase generation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/VtableTest/gen.cc,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc:56,Modifiability,polymorphi,polymorphic,56,"// We have a vtable and rtti, but technically we're not polymorphic; // polymorphic = true;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/VtableTest/gen.cc,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc:72,Modifiability,polymorphi,polymorphic,72,"// We have a vtable and rtti, but technically we're not polymorphic; // polymorphic = true;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/VtableTest/gen.cc,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc:48,Deployability,update,update,48,"// The previous base dominates the new base, no update necessary",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/VtableTest/gen.cc,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc:24,Testability,test,testcases,24,// PARAM: Randomly size testcases or large testcases?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/VtableTest/gen.cc,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc:43,Testability,test,testcases,43,// PARAM: Randomly size testcases or large testcases?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/utils/VtableTest/gen.cc,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/builtins.py:98,Integrability,depend,depending,98,"# Special unhandled cases:; # __builtin_ia32_vec_ext_*(__P, idx) -> _mm_store_sd/_mm_storeh_pd; # depending on index. No abstract insert/extract for these oddly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/www/builtins.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/builtins.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scripts/expandcollapse.js:18,Integrability,wrap,wrapping,18,// We found a div wrapping a cell content whose height exceeds ; // CLIP_HEIGHT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/www/analyzer/scripts/expandcollapse.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scripts/expandcollapse.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scripts/expandcollapse.js:40,Integrability,wrap,wrapper,40,// Create an expander and an additional wrapper for a cell content.; //; // --- expandableDiv ----; // --- expandableDiv --- | ------ data ------ |; // | cell content | -> | | cell content | | ; // --------------------- | ------------------ |; // | ---- expander ---- |; // ----------------------,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/www/analyzer/scripts/expandcollapse.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scripts/expandcollapse.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scripts/expandcollapse.js:3,Deployability,Update,Update,3,// Update all cells (height and expanded/collapsed state) in a row according ; // to the new height of the row.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/www/analyzer/scripts/expandcollapse.js,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scripts/expandcollapse.js
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:55,Deployability,configurat,configuration,55,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:193,Deployability,configurat,configuration,193,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:267,Deployability,configurat,configuration,267,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:55,Modifiability,config,configuration,55,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:193,Modifiability,config,configuration,193,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:267,Modifiability,config,configuration,267,# -*- coding: utf-8 -*-; #; # LLVM documentation build configuration file.; #; # This file is execfile()d with the current directory set to its containing dir.; #; # Note that not all possible configuration values are present in this; # autogenerated file.; #; # All configuration values have a default; values that are commented out; # serve to show the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:13,Deployability,configurat,configuration,13,"# -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; # needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:13,Modifiability,config,configuration,13,"# -- General configuration -----------------------------------------------------; # If your documentation needs a minimal Sphinx version, state it here.; # needs_sphinx = '1.0'; # Add any Sphinx extension module names here, as strings. They can be extensions; # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:112,Availability,avail,available,112,"# Theme options are theme-specific and customize the look and feel of a theme; # further. For a list of options available for each theme, see the; # documentation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:85,Deployability,release,release,85,"# The name for this set of Sphinx documents. If None, it defaults to; # ""<project> v<release> documentation"".; # html_title = None; # A shorter title for the navigation bar. Default is the same as html_title.; # html_short_title = None; # The name of an image file (relative to this directory) to place at the top; # of the sidebar.; # html_logo = None; # The name of an image file (within the static path) to use as favicon of the; # docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32; # pixels large.; # html_favicon = None; # Add any paths that contain custom static files (such as style sheets) here,; # relative to this directory. They are copied after the builtin static files,; # so a file named ""default.css"" will overwrite the builtin ""default.css"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:21,Deployability,update,updated,21,"# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,; # using the given strftime format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:81,Usability,guid,guide,81,# Automatically derive the list of man pages from the contents of the command; # guide subdirectory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:106,Deployability,configurat,configuration,106,"# If true, show URL addresses after external links.; # man_show_urls = False; # FIXME: Define intersphinx configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:106,Modifiability,config,configuration,106,"# If true, show URL addresses after external links.; # man_show_urls = False; # FIXME: Define intersphinx configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py:129,Safety,abort,abort,129,# Pygment lexer are sometimes out of date (when parsing LLVM for example) or; # wrong. Suppress the warning so the build doesn't abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/docs/conf.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/conf.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:2,Availability,Error,Error,2,//Error block for array out of bounds,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:13,Performance,load,load,13,//%tape.%d = load i8 *%head.%d,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:2,Availability,Error,Error,2,//Error block for array out of bounds,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:3,Testability,test,test,3,"//%test.%d = icmp uge i8 *%head.%d, %arrmax",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:3,Testability,test,test,3,"//%test.%d = icmp ult i8 *%head.%d, %arr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:3,Testability,test,test,3,"//%test.%d = or i1 %test.%d, %test.%d",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:20,Testability,test,test,20,"//%test.%d = or i1 %test.%d, %test.%d",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:30,Testability,test,test,30,"//%test.%d = or i1 %test.%d, %test.%d",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:9,Testability,test,test,9,"//br i1 %test.%d, label %main.%d, label %main.%d",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:13,Performance,load,load,13,//%tape.%d = load i8 *%head.%d,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:14,Testability,test,test,14,// Write loop test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:13,Performance,load,load,13,//%tape.%d = load i8 *%head.%d,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:3,Testability,test,test,3,"//%test.%d = icmp eq i8 %tape.%d, 0",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:9,Testability,test,test,9,"//br i1 %test.%d, label %main.%d, label %main.%d",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h:162,Availability,error,error,162,"/// This is the main method. It parses BrainF from in1; /// and returns the module with a function; /// void brainf(); /// containing the resulting code.; /// On error, it calls abort.; /// The caller must delete the returned module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h:178,Safety,abort,abort,178,"/// This is the main method. It parses BrainF from in1; /// and returns the module with a function; /// void brainf(); /// containing the resulting code.; /// On error, it calls abort.; /// The caller must delete the returned module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h:213,Testability,test,testreg,213,/// Names of the different parts of the language.; /// Tape is used for reading and writing the tape.; /// headreg is used for the position of the head.; /// label is used for the labels for the BasicBlocks.; /// testreg is used for testing the loop exit condition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h:233,Testability,test,testing,233,/// Names of the different parts of the language.; /// Tape is used for reading and writing the tape.; /// headreg is used for the position of the head.; /// label is used for the labels for the BasicBlocks.; /// testreg is used for testing the loop exit condition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h:4,Modifiability,Variab,Variables,4,/// Variables,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainFDriver.cpp:794,Safety,safe,safely,794,"//===-- BrainFDriver.cpp - BrainF compiler driver -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program converts the BrainF language into LLVM assembly,; // which it can then run using the JIT or output as BitCode.; //; // This implementation has a tape of 65536 bytes,; // with the head starting in the middle.; // Range checking is off by default, so be careful.; // It can be enabled with -abc.; //; // Use:; // ./BrainF -jit prog.bf #Run program now; // ./BrainF -jit -abc prog.bf #Run program now safely; // ./BrainF prog.bf #Write as BitCode; //; // lli prog.bf.bc #Run generated BitCode; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainFDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainFDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainFDriver.cpp:208,Integrability,depend,depends,208,"// Genereated code calls putchar, and output is not guaranteed without fflush.; // The better place for fflush(stdout) call would be the generated code, but it; // is unmanageable because stdout linkage name depends on stdlib implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/BrainF/BrainFDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainFDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:477,Testability,test,test,477,"//===-- ExceptionDemo.cpp - An example using llvm Exceptions --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated e",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:591,Testability,test,test,591,"//===-- ExceptionDemo.cpp - An example using llvm Exceptions --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated e",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:863,Testability,test,test,863,"//===-- ExceptionDemo.cpp - An example using llvm Exceptions --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated e",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:959,Testability,test,test,959,"//===-- ExceptionDemo.cpp - An example using llvm Exceptions --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated e",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:1104,Testability,test,test,1104,"se v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated exception with a; // type info type of 7 is explained by: example in rules 1.6.4 in; // http://itanium-cxx-abi.github.io/cxx-abi/abi-eh.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:1171,Testability,test,test,1171,"se v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated exception with a; // type info type of 7 is explained by: example in rules 1.6.4 in; // http://itanium-cxx-abi.github.io/cxx-abi/abi-eh.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:1499,Testability,test,test,1499,"----------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated exception with a; // type info type of 7 is explained by: example in rules 1.6.4 in; // http://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html (v1.22); //; // This code uses code from the llvm compiler-rt project and the llvm; // Kaleidoscope project.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:1625,Testability,test,test,1625,"----------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated exception with a; // type info type of 7 is explained by: example in rules 1.6.4 in; // http://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html (v1.22); //; // This code uses code from the llvm compiler-rt project and the llvm; // Kaleidoscope project.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:1913,Testability,test,test,1913,"----------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated exception with a; // type info type of 7 is explained by: example in rules 1.6.4 in; // http://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html (v1.22); //; // This code uses code from the llvm compiler-rt project and the llvm; // Kaleidoscope project.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:318,Availability,redundant,redundant,318,"// FIXME: Although all systems tested with (Linux, OS X), do not need this; // header file included. A user on ubuntu reported, undefined symbols; // for stderr, and fprintf, and the addition of this include fixed the; // issue for them. Given that LLVM's best practices include the goal; // of reducing the number of redundant header files included, the; // correct solution would be to find out why these symbols are not; // defined for the system in question, and fix the issue by finding out; // which LLVM header file, if any, would include these symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:318,Safety,redund,redundant,318,"// FIXME: Although all systems tested with (Linux, OS X), do not need this; // header file included. A user on ubuntu reported, undefined symbols; // for stderr, and fprintf, and the addition of this include fixed the; // issue for them. Given that LLVM's best practices include the goal; // of reducing the number of redundant header files included, the; // correct solution would be to find out why these symbols are not; // defined for the system in question, and fix the issue by finding out; // which LLVM header file, if any, would include these symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:31,Testability,test,tested,31,"// FIXME: Although all systems tested with (Linux, OS X), do not need this; // header file included. A user on ubuntu reported, undefined symbols; // for stderr, and fprintf, and the addition of this include fixed the; // issue for them. Given that LLVM's best practices include the goal; // of reducing the number of redundant header files included, the; // correct solution would be to find out why these symbols are not; // defined for the system in question, and fix the issue by finding out; // which LLVM header file, if any, would include these symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:42,Usability,simpl,simplistic,42,//; // Example types; //; /// This is our simplistic type info,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:106,Modifiability,variab,variables,106,/// Create an alloca instruction in the entry block of; /// the parent function. This is used for mutable variables etc.; /// @param function parent instance; /// @param varName stack variable name; /// @param type stack variable type; /// @param initWith optional constant initialization value; /// @returns AllocaInst instance,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:184,Modifiability,variab,variable,184,/// Create an alloca instruction in the entry block of; /// the parent function. This is used for mutable variables etc.; /// @param function parent instance; /// @param varName stack variable name; /// @param type stack variable type; /// @param initWith optional constant initialization value; /// @returns AllocaInst instance,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:221,Modifiability,variab,variable,221,/// Create an alloca instruction in the entry block of; /// the parent function. This is used for mutable variables etc.; /// @param function parent instance; /// @param varName stack variable name; /// @param type stack variable type; /// @param initWith optional constant initialization value; /// @returns AllocaInst instance,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:32,Energy Efficiency,allocate,allocated,32,"/// Deletes the true previously allocated exception whose address; /// is calculated from the supplied OurBaseException_t::unwindException; /// member address. Handles (ignores), NULL pointers.; /// @param expToDelete exception to delete",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:13,Energy Efficiency,allocate,allocates,13,"/// Creates (allocates on the heap), an exception (OurException instance),; /// of the supplied type info type.; /// @param type type info type",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:62,Modifiability,Variab,Variable,62,/// Read a uleb128 encoded value and advance pointer; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// @param data reference variable holding memory pointer to decode from; /// @returns decoded value,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:164,Modifiability,variab,variable,164,/// Read a uleb128 encoded value and advance pointer; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// @param data reference variable holding memory pointer to decode from; /// @returns decoded value,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:62,Modifiability,Variab,Variable,62,/// Read a sleb128 encoded value and advance pointer; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// @param data reference variable holding memory pointer to decode from; /// @returns decoded value,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:164,Modifiability,variab,variable,164,/// Read a sleb128 encoded value and advance pointer; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// @param data reference variable holding memory pointer to decode from; /// @returns decoded value,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:62,Modifiability,Variab,Variable,62,/// Read a pointer encoded value and advance pointer; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// @param data reference variable holding memory pointer to decode from; /// @param encoding dwarf encoding type; /// @returns decoded value,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:164,Modifiability,variab,variable,164,/// Read a pointer encoded value and advance pointer; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// @param data reference variable holding memory pointer to decode from; /// @param encoding dwarf encoding type; /// @returns decoded value,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:32,Testability,test,tested,32,// Note: This case has not been tested,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:405,Modifiability,Variab,Variable,405,"/// Deals with Dwarf actions matching our type infos; /// (OurExceptionType_t instances). Returns whether or not a dwarf emitted; /// action matches the supplied exception type. If such a match succeeds,; /// the resultAction argument will be set with > 0 index value. Only; /// corresponding llvm.eh.selector type info arguments, cleanup arguments; /// are supported. Filters are not supported.; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// Also see @link http://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html @unlink; /// @param resultAction reference variable which will be set with result; /// @param classInfo our array of type info pointers (to globals); /// @param actionEntry index into above type info array or 0 (clean up).; /// We do not support filters.; /// @param exceptionClass exception class (_Unwind_Exception::exception_class); /// of thrown exception.; /// @param exceptionObject thrown _Unwind_Exception instance.; /// @returns whether or not a type info was found. False is returned if only; /// a cleanup was found",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:596,Modifiability,variab,variable,596,"/// Deals with Dwarf actions matching our type infos; /// (OurExceptionType_t instances). Returns whether or not a dwarf emitted; /// action matches the supplied exception type. If such a match succeeds,; /// the resultAction argument will be set with > 0 index value. Only; /// corresponding llvm.eh.selector type info arguments, cleanup arguments; /// are supported. Filters are not supported.; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// Also see @link http://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html @unlink; /// @param resultAction reference variable which will be set with result; /// @param classInfo our array of type info pointers (to globals); /// @param actionEntry index into above type info array or 0 (clean up).; /// We do not support filters.; /// @param exceptionClass exception class (_Unwind_Exception::exception_class); /// of thrown exception.; /// @param exceptionObject thrown _Unwind_Exception instance.; /// @returns whether or not a type info was found. False is returned if only; /// a cleanup was found",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:167,Usability,simpl,simply,167,"/// Generates code to handle finally block type semantics: always runs; /// regardless of whether a thrown exception is passing through or the; /// parent function is simply exiting. In addition to printing some state; /// to stderr, this code will resume the exception handling--runs the; /// unwind resume block, if the exception has not been previously caught; /// by a catch clause, and will otherwise execute the end block (terminator; /// block). In addition this function creates the corresponding function's; /// stack storage for the exception pointer and catch flag status.; /// @param context llvm context; /// @param module code for module instance; /// @param builder builder instance; /// @param toAddTo parent function to add block to; /// @param blockName block name of new ""finally"" block.; /// @param functionId output id used for printing; /// @param terminatorBlock terminator ""end"" block; /// @param unwindResumeBlock unwind resume block; /// @param exceptionCaughtFlag reference exception caught/thrown status storage; /// @param exceptionStorage reference to exception pointer storage; /// @param caughtResultStorage reference to landingpad result storage; /// @returns newly created block",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:249,Usability,resume,resume,249,"/// Generates code to handle finally block type semantics: always runs; /// regardless of whether a thrown exception is passing through or the; /// parent function is simply exiting. In addition to printing some state; /// to stderr, this code will resume the exception handling--runs the; /// unwind resume block, if the exception has not been previously caught; /// by a catch clause, and will otherwise execute the end block (terminator; /// block). In addition this function creates the corresponding function's; /// stack storage for the exception pointer and catch flag status.; /// @param context llvm context; /// @param module code for module instance; /// @param builder builder instance; /// @param toAddTo parent function to add block to; /// @param blockName block name of new ""finally"" block.; /// @param functionId output id used for printing; /// @param terminatorBlock terminator ""end"" block; /// @param unwindResumeBlock unwind resume block; /// @param exceptionCaughtFlag reference exception caught/thrown status storage; /// @param exceptionStorage reference to exception pointer storage; /// @param caughtResultStorage reference to landingpad result storage; /// @returns newly created block",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:301,Usability,resume,resume,301,"/// Generates code to handle finally block type semantics: always runs; /// regardless of whether a thrown exception is passing through or the; /// parent function is simply exiting. In addition to printing some state; /// to stderr, this code will resume the exception handling--runs the; /// unwind resume block, if the exception has not been previously caught; /// by a catch clause, and will otherwise execute the end block (terminator; /// block). In addition this function creates the corresponding function's; /// stack storage for the exception pointer and catch flag status.; /// @param context llvm context; /// @param module code for module instance; /// @param builder builder instance; /// @param toAddTo parent function to add block to; /// @param blockName block name of new ""finally"" block.; /// @param functionId output id used for printing; /// @param terminatorBlock terminator ""end"" block; /// @param unwindResumeBlock unwind resume block; /// @param exceptionCaughtFlag reference exception caught/thrown status storage; /// @param exceptionStorage reference to exception pointer storage; /// @param caughtResultStorage reference to landingpad result storage; /// @returns newly created block",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:946,Usability,resume,resume,946,"/// Generates code to handle finally block type semantics: always runs; /// regardless of whether a thrown exception is passing through or the; /// parent function is simply exiting. In addition to printing some state; /// to stderr, this code will resume the exception handling--runs the; /// unwind resume block, if the exception has not been previously caught; /// by a catch clause, and will otherwise execute the end block (terminator; /// block). In addition this function creates the corresponding function's; /// stack storage for the exception pointer and catch flag status.; /// @param context llvm context; /// @param module code for module instance; /// @param builder builder instance; /// @param toAddTo parent function to add block to; /// @param blockName block name of new ""finally"" block.; /// @param functionId output id used for printing; /// @param terminatorBlock terminator ""end"" block; /// @param unwindResumeBlock unwind resume block; /// @param exceptionCaughtFlag reference exception caught/thrown status storage; /// @param exceptionStorage reference to exception pointer storage; /// @param caughtResultStorage reference to landingpad result storage; /// @returns newly created block",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:15,Integrability,rout,routes,15,// Block which routes exception to correct catch handler block,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:100,Energy Efficiency,allocate,allocates,100,// Finally block which will branch to unwindResumeBlock if; // exception is not caught. Initializes/allocates stack locations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:10,Usability,Resume,Resume,10,// Unwind Resume Block,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:10,Availability,Redundant,Redundant,10,"// FIXME: Redundant storage which, beyond utilizing value of; // caughtResultStore for unwindException storage, may be alleviated; // altogether with a block rearrangement",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:10,Safety,Redund,Redundant,10,"// FIXME: Redundant storage which, beyond utilizing value of; // caughtResultStore for unwindException storage, may be alleviated; // altogether with a block rearrangement",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:86,Integrability,rout,router,86,// Branch to the externalExceptionBlock if the exception is foreign or; // to a catch router if not. Either way the finally block will be run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:13,Integrability,Rout,Route,13,// Exception Route Block,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:3,Integrability,Rout,Route,3,// Route to matched type info catch block or run cleanup finally block,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:64,Integrability,depend,depending,64,// Throws either one of our exception or a native C++ exception depending; // on a runtime argument value containing a type info type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:514,Modifiability,config,configured,514,"/// Creates test code by generating and organizing these functions into the; /// test case. The test case consists of an outer function setup to invoke; /// an inner function within an environment having multiple catch and single; /// finally blocks. This inner function is also setup to invoke a throw; /// function within an evironment similar in nature to the outer function's; /// catch and finally blocks. Each of these two functions catch mutually; /// exclusive subsets (even or odd) of the type info types configured; /// for this this. All generated functions have a runtime argument which; /// holds a type info type to throw that each function takes and passes it; /// to the inner one if such a inner function exists. This type info type is; /// looked at by the generated throw function to see whether or not it should; /// throw a generated exception with the same type info type, or instead call; /// a supplied a function which in turn will throw a foreign exception.; /// @param module code for module instance; /// @param builder builder instance; /// @param fpm a function pass manager holding optional IR to IR; /// transformations; /// @param nativeThrowFunctName name of external function which will throw; /// a foreign exception; /// @returns outermost generated test function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:12,Testability,test,test,12,"/// Creates test code by generating and organizing these functions into the; /// test case. The test case consists of an outer function setup to invoke; /// an inner function within an environment having multiple catch and single; /// finally blocks. This inner function is also setup to invoke a throw; /// function within an evironment similar in nature to the outer function's; /// catch and finally blocks. Each of these two functions catch mutually; /// exclusive subsets (even or odd) of the type info types configured; /// for this this. All generated functions have a runtime argument which; /// holds a type info type to throw that each function takes and passes it; /// to the inner one if such a inner function exists. This type info type is; /// looked at by the generated throw function to see whether or not it should; /// throw a generated exception with the same type info type, or instead call; /// a supplied a function which in turn will throw a foreign exception.; /// @param module code for module instance; /// @param builder builder instance; /// @param fpm a function pass manager holding optional IR to IR; /// transformations; /// @param nativeThrowFunctName name of external function which will throw; /// a foreign exception; /// @returns outermost generated test function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:81,Testability,test,test,81,"/// Creates test code by generating and organizing these functions into the; /// test case. The test case consists of an outer function setup to invoke; /// an inner function within an environment having multiple catch and single; /// finally blocks. This inner function is also setup to invoke a throw; /// function within an evironment similar in nature to the outer function's; /// catch and finally blocks. Each of these two functions catch mutually; /// exclusive subsets (even or odd) of the type info types configured; /// for this this. All generated functions have a runtime argument which; /// holds a type info type to throw that each function takes and passes it; /// to the inner one if such a inner function exists. This type info type is; /// looked at by the generated throw function to see whether or not it should; /// throw a generated exception with the same type info type, or instead call; /// a supplied a function which in turn will throw a foreign exception.; /// @param module code for module instance; /// @param builder builder instance; /// @param fpm a function pass manager holding optional IR to IR; /// transformations; /// @param nativeThrowFunctName name of external function which will throw; /// a foreign exception; /// @returns outermost generated test function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:96,Testability,test,test,96,"/// Creates test code by generating and organizing these functions into the; /// test case. The test case consists of an outer function setup to invoke; /// an inner function within an environment having multiple catch and single; /// finally blocks. This inner function is also setup to invoke a throw; /// function within an evironment similar in nature to the outer function's; /// catch and finally blocks. Each of these two functions catch mutually; /// exclusive subsets (even or odd) of the type info types configured; /// for this this. All generated functions have a runtime argument which; /// holds a type info type to throw that each function takes and passes it; /// to the inner one if such a inner function exists. This type info type is; /// looked at by the generated throw function to see whether or not it should; /// throw a generated exception with the same type info type, or instead call; /// a supplied a function which in turn will throw a foreign exception.; /// @param module code for module instance; /// @param builder builder instance; /// @param fpm a function pass manager holding optional IR to IR; /// transformations; /// @param nativeThrowFunctName name of external function which will throw; /// a foreign exception; /// @returns outermost generated test function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:1287,Testability,test,test,1287,"/// Creates test code by generating and organizing these functions into the; /// test case. The test case consists of an outer function setup to invoke; /// an inner function within an environment having multiple catch and single; /// finally blocks. This inner function is also setup to invoke a throw; /// function within an evironment similar in nature to the outer function's; /// catch and finally blocks. Each of these two functions catch mutually; /// exclusive subsets (even or odd) of the type info types configured; /// for this this. All generated functions have a runtime argument which; /// holds a type info type to throw that each function takes and passes it; /// to the inner one if such a inner function exists. This type info type is; /// looked at by the generated throw function to see whether or not it should; /// throw a generated exception with the same type info type, or instead call; /// a supplied a function which in turn will throw a foreign exception.; /// @param module code for module instance; /// @param builder builder instance; /// @param fpm a function pass manager holding optional IR to IR; /// transformations; /// @param nativeThrowFunctName name of external function which will throw; /// a foreign exception; /// @returns outermost generated test function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:162,Integrability,contract,contract,162,// end anonymous namespace; /// Throws foreign C++ exception.; /// @param ignoreIt unused parameter that allows function to match implied; /// generated function contract.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:120,Integrability,wrap,wraps,120,"/// This is a test harness which runs test by executing generated; /// function with a type info type to throw. Harness wraps the execution; /// of generated function in a C++ try catch clause.; /// @param engine execution engine to use for executing generated function.; /// This demo program expects this to be a JIT instance for demo; /// purposes.; /// @param function generated test function to run; /// @param typeToThrow type info type of generated exception to throw, or; /// indicator to cause foreign exception to be thrown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:14,Testability,test,test,14,"/// This is a test harness which runs test by executing generated; /// function with a type info type to throw. Harness wraps the execution; /// of generated function in a C++ try catch clause.; /// @param engine execution engine to use for executing generated function.; /// This demo program expects this to be a JIT instance for demo; /// purposes.; /// @param function generated test function to run; /// @param typeToThrow type info type of generated exception to throw, or; /// indicator to cause foreign exception to be thrown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:38,Testability,test,test,38,"/// This is a test harness which runs test by executing generated; /// function with a type info type to throw. Harness wraps the execution; /// of generated function in a C++ try catch clause.; /// @param engine execution engine to use for executing generated function.; /// This demo program expects this to be a JIT instance for demo; /// purposes.; /// @param function generated test function to run; /// @param typeToThrow type info type of generated exception to throw, or; /// indicator to cause foreign exception to be thrown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:383,Testability,test,test,383,"/// This is a test harness which runs test by executing generated; /// function with a type info type to throw. Harness wraps the execution; /// of generated function in a C++ try catch clause.; /// @param engine execution engine to use for executing generated function.; /// This demo program expects this to be a JIT instance for demo; /// purposes.; /// @param function generated test function to run; /// @param typeToThrow type info type of generated exception to throw, or; /// indicator to cause foreign exception to be thrown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:8,Testability,test,test,8,// Find test's function pointer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:7,Testability,test,test,7,// Run test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:11,Testability,test,test,11,//; // End test functions; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:24,Integrability,rout,routine,24,"/// This initialization routine creates type info globals and; /// adds external function declarations to module.; /// @param numTypeInfos number of linear type info associated type info types; /// to create as GlobalVariable instances, starting with the value 1.; /// @param module code for module instance; /// @param builder builder instance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:205,Integrability,rout,routine,205,//===----------------------------------------------------------------------===//; // Main test driver code.; //===----------------------------------------------------------------------===//; /// Demo main routine which takes the type info types to throw. A test will; /// be run for each given type info type. While type info types with the value; /// of -1 will trigger a foreign C++ exception to be thrown; type info types; /// <= 6 and >= 1 will be caught by test functions; and type info types > 6; /// will result in exceptions which pass through to the test harness. All other; /// type info types are not supported and could cause a crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:90,Testability,test,test,90,//===----------------------------------------------------------------------===//; // Main test driver code.; //===----------------------------------------------------------------------===//; /// Demo main routine which takes the type info types to throw. A test will; /// be run for each given type info type. While type info types with the value; /// of -1 will trigger a foreign C++ exception to be thrown; type info types; /// <= 6 and >= 1 will be caught by test functions; and type info types > 6; /// will result in exceptions which pass through to the test harness. All other; /// type info types are not supported and could cause a crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:257,Testability,test,test,257,//===----------------------------------------------------------------------===//; // Main test driver code.; //===----------------------------------------------------------------------===//; /// Demo main routine which takes the type info types to throw. A test will; /// be run for each given type info type. While type info types with the value; /// of -1 will trigger a foreign C++ exception to be thrown; type info types; /// <= 6 and >= 1 will be caught by test functions; and type info types > 6; /// will result in exceptions which pass through to the test harness. All other; /// type info types are not supported and could cause a crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:462,Testability,test,test,462,//===----------------------------------------------------------------------===//; // Main test driver code.; //===----------------------------------------------------------------------===//; /// Demo main routine which takes the type info types to throw. A test will; /// be run for each given type info type. While type info types with the value; /// of -1 will trigger a foreign C++ exception to be thrown; type info types; /// <= 6 and >= 1 will be caught by test functions; and type info types > 6; /// will result in exceptions which pass through to the test harness. All other; /// type info types are not supported and could cause a crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:559,Testability,test,test,559,//===----------------------------------------------------------------------===//; // Main test driver code.; //===----------------------------------------------------------------------===//; /// Demo main routine which takes the type info types to throw. A test will; /// be run for each given type info type. While type info types with the value; /// of -1 will trigger a foreign C++ exception to be thrown; type info types; /// <= 6 and >= 1 will be caught by test functions; and type info types > 6; /// will result in exceptions which pass through to the test harness. All other; /// type info types are not supported and could cause a crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:24,Deployability,pipeline,pipeline,24,// Set up the optimizer pipeline.; // Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:14,Performance,optimiz,optimizer,14,// Set up the optimizer pipeline.; // Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:3,Performance,Optimiz,Optimizations,3,// Optimizations turned on,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:24,Performance,optimiz,optimizations,24,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:6,Usability,simpl,simple,6,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable; // blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:12,Testability,test,test,12,// Generate test code using function throwCppException(...) as; // the function which throws foreign exceptions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:7,Testability,test,test,7,// Run test for each argument whose value is the exception; // type to throw.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:941,Availability,avail,available,941,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:7,Usability,Simpl,SimplifyCFG,7,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:437,Usability,simpl,simplifications,437,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:663,Usability,simpl,simplifications,663,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:885,Usability,simpl,simplify,885,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:951,Usability,simpl,simplifications,951,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:1044,Usability,simpl,simplifications,1044,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:1212,Usability,simpl,simplification,1212,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:1408,Usability,simpl,simplification,1408,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:85,Deployability,update,update,85,"// TODO: Find a better place to put such small variations.; // Alternatively, we can update the PHI nodes manually:; // for (PHINode &PN : make_early_inc_range(Succ->phis())); // PN.removeIncomingValue(&BB);; // Replace all instructions in BB with a poison constant. The block is; // unreachable, so the results of the instructions should never get used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:11,Deployability,update,updates,11,// Collect updates that need to be applied to the dominator tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:9,Deployability,update,updates,9,"// Apply updates permissively, to remove duplicates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:9,Deployability,update,updates,9,"// Apply updates permissively, to remove duplicates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:9,Deployability,update,updates,9,"// Apply updates permissively, to remove duplicates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:9,Deployability,update,updates,9,"// Apply updates permissively, to remove duplicates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h:29,Usability,simpl,simple,29,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h:394,Usability,simpl,simple,394,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:225,Availability,error,error,225,// Assignment requires the LHS to be an identifier.; // This assume we're building without RTTI because LLVM builds that way by; // default. If you build LLVM with RTTI this can be changed to a; // dynamic_cast for automatic error checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:225,Performance,load,load,225,"// Output for-loop as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:50,Energy Efficiency,allocate,allocated,50,// Create a ResourceTracker to track JIT'd memory allocated to our; // anonymous expression -- that way we can free it after executing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h:29,Usability,simpl,simple,29,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h:394,Usability,simpl,simple,394,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h:12,Performance,optimiz,optimizations,12,// Add some optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h:11,Performance,optimiz,optimizations,11,// Run the optimizations over all functions in the module being added to; // the JIT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:225,Availability,error,error,225,// Assignment requires the LHS to be an identifier.; // This assume we're building without RTTI because LLVM builds that way by; // default. If you build LLVM with RTTI this can be changed to a; // dynamic_cast for automatic error checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:225,Performance,load,load,225,"// Output for-loop as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:50,Energy Efficiency,allocate,allocated,50,// Create a ResourceTracker to track JIT'd memory allocated to our; // anonymous expression -- that way we can free it after executing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h:29,Usability,simpl,simple,29,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h:394,Usability,simpl,simple,394,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h:12,Performance,optimiz,optimizations,12,// Add some optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h:11,Performance,optimiz,optimizations,11,// Run the optimizations over all functions in the module being added to; // the JIT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:225,Availability,error,error,225,// Assignment requires the LHS to be an identifier.; // This assume we're building without RTTI because LLVM builds that way by; // default. If you build LLVM with RTTI this can be changed to a; // dynamic_cast for automatic error checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:225,Performance,load,load,225,"// Output for-loop as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:50,Energy Efficiency,allocate,allocated,50,// Create a ResourceTracker to track JIT'd memory allocated to our; // anonymous expression -- that way we can free it after executing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h:29,Usability,simpl,simple,29,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h:394,Usability,simpl,simple,394,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h:136,Testability,stub,stub,136,"/// This will compile FnAST to IR, rename the function to add the given; /// suffix (needed to prevent a name-clash with the function's stub),; /// and then take ownership of the module that the function was compiled; /// into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h:12,Performance,optimiz,optimizations,12,// Add some optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h:11,Performance,optimiz,optimizations,11,// Run the optimizations over all functions in the module being added to; // the JIT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:348,Deployability,update,updates,348,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:211,Usability,simpl,simple,211,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:225,Availability,error,error,225,// Assignment requires the LHS to be an identifier.; // This assume we're building without RTTI because LLVM builds that way by; // default. If you build LLVM with RTTI this can be changed to a; // dynamic_cast for automatic error checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:225,Performance,load,load,225,"// Output for-loop as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:50,Energy Efficiency,allocate,allocated,50,// Create a ResourceTracker to track JIT'd memory allocated to our; // anonymous expression -- that way we can free it after executing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter2/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter3/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:11,Performance,optimiz,optimizer,11,// Run the optimizer on the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:50,Performance,optimiz,optimizations,50,"// Add transform passes.; // Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:32,Usability,simpl,simple,32,"// Add transform passes.; // Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:50,Energy Efficiency,allocate,allocated,50,// Create a ResourceTracker to track JIT'd memory allocated to our; // anonymous expression -- that way we can free it after executing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter4/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:81,Modifiability,variab,variable,81,"// Output for-loop as:; // ...; // start = startexpr; // goto loop; // loop:; // variable = phi [start, loopheader], [nextvariable, loopend]; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // nextvariable = variable + step; // endcond = endexpr; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:222,Modifiability,variab,variable,222,"// Output for-loop as:; // ...; // start = startexpr; // goto loop; // loop:; // variable = phi [start, loopheader], [nextvariable, loopend]; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // nextvariable = variable + step; // endcond = endexpr; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:11,Performance,optimiz,optimizer,11,// Run the optimizer on the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:50,Performance,optimiz,optimizations,50,"// Add transform passes.; // Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:32,Usability,simpl,simple,32,"// Add transform passes.; // Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:50,Energy Efficiency,allocate,allocated,50,// Create a ResourceTracker to track JIT'd memory allocated to our; // anonymous expression -- that way we can free it after executing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:4,Availability,Error,Error,4,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:51,Availability,error,error,51,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:81,Modifiability,variab,variable,81,"// Output for-loop as:; // ...; // start = startexpr; // goto loop; // loop:; // variable = phi [start, loopheader], [nextvariable, loopend]; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // nextvariable = variable + step; // endcond = endexpr; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:222,Modifiability,variab,variable,222,"// Output for-loop as:; // ...; // start = startexpr; // goto loop; // loop:; // variable = phi [start, loopheader], [nextvariable, loopend]; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // nextvariable = variable + step; // endcond = endexpr; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:11,Performance,optimiz,optimizer,11,// Run the optimizer on the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:50,Performance,optimiz,optimizations,50,"// Add transform passes.; // Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:32,Usability,simpl,simple,32,"// Add transform passes.; // Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:50,Energy Efficiency,allocate,allocated,50,// Create a ResourceTracker to track JIT'd memory allocated to our; // anonymous expression -- that way we can free it after executing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter6/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:225,Availability,error,error,225,// Assignment requires the LHS to be an identifier.; // This assume we're building without RTTI because LLVM builds that way by; // default. If you build LLVM with RTTI this can be changed to a; // dynamic_cast for automatic error checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:225,Performance,load,load,225,"// Output for-loop as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:11,Performance,optimiz,optimizer,11,// Run the optimizer on the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:50,Performance,optimiz,optimizations,50,"// Add transform passes.; // Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:32,Usability,simpl,simple,32,"// Add transform passes.; // Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:50,Energy Efficiency,allocate,allocated,50,// Create a ResourceTracker to track JIT'd memory allocated to our; // anonymous expression -- that way we can free it after executing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter7/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:225,Availability,error,error,225,// Assignment requires the LHS to be an identifier.; // This assume we're building without RTTI because LLVM builds that way by; // default. If you build LLVM with RTTI this can be changed to a; // dynamic_cast for automatic error checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:225,Performance,load,load,225,"// Output for-loop as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp:12,Availability,error,error,12,// Print an error and exit if we couldn't find the requested target.; // This generally occurs if we've forgotten to initialise the; // TargetRegistry or we have a bogus target triple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter8/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:376,Deployability,update,updates,376,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:239,Usability,simpl,simple,239,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:54,Availability,error,error,54,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:4,Testability,Log,LogError,4,/// LogError* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:225,Availability,error,error,225,// Assignment requires the LHS to be an identifier.; // This assume we're building without RTTI because LLVM builds that way by; // default. If you build LLVM with RTTI this can be changed to a; // dynamic_cast for automatic error checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:225,Performance,load,load,225,"// Output for-loop as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:37,Modifiability,variab,variable,37,// Create a debug descriptor for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp:57,Availability,down,down,57,"// Create the compile unit for the module.; // Currently down as ""fib.ks"" as a filename since we're redirecting stdin; // but we'd like actual source locations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter9/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/include/KaleidoscopeJIT.h:29,Usability,simpl,simple,29,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/include/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/include/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/include/KaleidoscopeJIT.h:394,Usability,simpl,simple,394,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/include/KaleidoscopeJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/include/KaleidoscopeJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py:3,Availability,Echo,Echo,3,"""""""Echo some comments and invoke both versions of toy""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py:2,Deployability,Update,Update,2,# Update the total call count,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py:17,Modifiability,variab,variable,17,# Initialize the variable names to be rotated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py:13,Modifiability,variab,variables,13,# Rotate the variables,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/split-lib.py:3,Availability,Echo,Echo,3,"""""""Echo some comments and invoke both versions of toy""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/split-lib.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/split-lib.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:348,Deployability,update,updates,348,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:211,Usability,simpl,simple,211,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:4,Availability,Error,Error,4,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:51,Availability,error,error,51,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:222,Performance,load,load,222,"// Output this as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop: ; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:3,Performance,Optimiz,Optimize,3,// Optimize the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Deployability,pipeline,pipeline,24,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:14,Performance,optimiz,optimizer,14,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:24,Performance,optimiz,optimizations,24,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:6,Usability,simpl,simple,6,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:348,Deployability,update,updates,348,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:211,Usability,simpl,simple,211,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:4,Availability,Error,Error,4,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:51,Availability,error,error,51,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:98,Performance,cache,cache,98,//===----------------------------------------------------------------------===//; // MCJIT object cache class; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:10,Performance,cache,cache,10,// Set IR cache directory,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:40,Performance,cache,cache,40,"// If we've flagged this as an IR file, cache it",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:40,Performance,cache,cache,40,"// If we've flagged this as an IR file, cache it",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:26,Performance,cache,cache,26,// This file isn't in our cache,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:181,Deployability,release,released,181,"// MCJIT will want to write into this buffer, and we don't want that; // because the file has probably just been mmapped. Instead we make; // a copy. The filed-based buffer will be released when it goes; // out of scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:396,Integrability,message,message,396,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:255,Safety,Abort,AbortOnFailure,255,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:418,Safety,abort,aborts,418,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:63,Safety,abort,abort,63,"// Try the standard symbol resolution first, but ask it not to abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Deployability,pipeline,pipeline,24,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:14,Performance,optimiz,optimizer,14,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Performance,optimiz,optimizations,24,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:6,Usability,simpl,simple,6,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:221,Performance,load,load,221,"// Output this as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py:3,Availability,Echo,Echo,3,"""""""Echo some comments and invoke both versions of toy""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py:2,Deployability,Update,Update,2,# Update the total call count,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py:17,Modifiability,variab,variable,17,# Initialize the variable names to be rotated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py:13,Modifiability,variab,variables,13,# Rotate the variables,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/split-lib.py:3,Availability,Echo,Echo,3,"""""""Echo some comments and invoke both versions of toy""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/split-lib.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/split-lib.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:348,Deployability,update,updates,348,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:211,Usability,simpl,simple,211,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:4,Availability,Error,Error,4,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:51,Availability,error,error,51,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:98,Performance,cache,cache,98,//===----------------------------------------------------------------------===//; // MCJIT object cache class; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:10,Performance,cache,cache,10,// Set IR cache directory,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:40,Performance,cache,cache,40,"// If we've flagged this as an IR file, cache it",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:40,Performance,cache,cache,40,"// If we've flagged this as an IR file, cache it",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:26,Performance,cache,cache,26,// This file isn't in our cache,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:181,Deployability,release,released,181,"// MCJIT will want to write into this buffer, and we don't want that; // because the file has probably just been mmapped. Instead we make; // a copy. The filed-based buffer will be released when it goes; // out of scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:396,Integrability,message,message,396,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:255,Safety,Abort,AbortOnFailure,255,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:418,Safety,abort,aborts,418,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:63,Safety,abort,abort,63,"// Try the standard symbol resolution first, but ask it not to abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Deployability,pipeline,pipeline,24,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:14,Performance,optimiz,optimizer,14,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Performance,optimiz,optimizations,24,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:6,Usability,simpl,simple,6,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:225,Availability,error,error,225,// Assignment requires the LHS to be an identifier.; // This assume we're building without RTTI because LLVM builds that way by; // default. If you build LLVM with RTTI this can be changed to a; // dynamic_cast for automatic error checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:221,Performance,load,load,221,"// Output this as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:39,Safety,detect,detection,39,"// FIXME: Implement duplicate function detection.; // The check below will only work if the duplicate is in the open module.; // If F conflicted, there was already something named 'Name'. If it has a; // body, don't allow redefinition or reextern.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:348,Deployability,update,updates,348,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:211,Usability,simpl,simple,211,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:4,Availability,Error,Error,4,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:51,Availability,error,error,51,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:396,Integrability,message,message,396,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:255,Safety,Abort,AbortOnFailure,255,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:418,Safety,abort,aborts,418,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:63,Safety,abort,abort,63,"// Try the standard symbol resolution first, but ask it not to abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Deployability,pipeline,pipeline,24,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:14,Performance,optimiz,optimizer,14,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Performance,optimiz,optimizations,24,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:6,Usability,simpl,simple,6,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:221,Performance,load,load,221,"// Output this as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py:3,Availability,Echo,Echo,3,"""""""Echo some comments and invoke both versions of toy""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py:2,Deployability,Update,Update,2,# Update the total call count,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py:17,Modifiability,variab,variable,17,# Initialize the variable names to be rotated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py:13,Modifiability,variab,variables,13,# Rotate the variables,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/genk-timing.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:348,Deployability,update,updates,348,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:211,Usability,simpl,simple,211,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:4,Availability,Error,Error,4,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:51,Availability,error,error,51,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:222,Performance,load,load,222,"// Output this as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop: ; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:3,Performance,Optimiz,Optimize,3,// Optimize the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Deployability,pipeline,pipeline,24,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:14,Performance,optimiz,optimizer,14,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:24,Performance,optimiz,optimizations,24,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:6,Usability,simpl,simple,6,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:4,Modifiability,Variab,VariableExprAST,4,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:57,Modifiability,variab,variable,57,"/// VariableExprAST - Expression class for referencing a variable, like ""a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:348,Deployability,update,updates,348,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:211,Usability,simpl,simple,211,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:4,Availability,Error,Error,4,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:51,Availability,error,error,51,/// Error* - These are little helper functions for error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:10,Modifiability,variab,variable,10,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:3,Usability,Simpl,Simple,3,// Simple variable ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:16,Modifiability,variab,variable,16,// At least one variable name is required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:396,Integrability,message,message,396,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:255,Safety,Abort,AbortOnFailure,255,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:418,Safety,abort,aborts,418,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:63,Safety,abort,abort,63,"// Try the standard symbol resolution first, but ask it not to abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Deployability,pipeline,pipeline,24,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:14,Performance,optimiz,optimizer,14,// Set up the optimizer pipeline. Start with registering info about how the; // target lays out data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Performance,optimiz,optimizations,24,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:6,Usability,simpl,simple,6,"// Do simple ""peephole"" optimizations and bit-twiddling optzns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the control flow graph (deleting unreachable blocks, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:124,Modifiability,variab,variables,124,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:13,Modifiability,variab,variable,13,// Look this variable up in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:3,Performance,Load,Load,3,// Load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Availability,error,error,24,// If argument mismatch error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Then' can change the current block, update ThenBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:51,Deployability,update,update,51,"// Codegen of 'Else' can change the current block, update ElseBB for the PHI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:221,Performance,load,load,221,"// Output this as:; // var = alloca double; // ...; // start = startexpr; // store start -> var; // goto loop; // loop:; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // endcond = endexpr; //; // curvar = load var; // nextvar = curvar + step; // store nextvar -> var; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:28,Modifiability,variab,variable,28,// Create an alloca for the variable in the entry block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:39,Modifiability,variab,variable,39,"// Emit the start code first, without 'variable' in scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Modifiability,variab,variable,24,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:97,Modifiability,variab,variable,97,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:163,Availability,error,error,163,"// Emit the body of the loop. This, like any other expr, can change the; // current BB. Note that we ignore the value computed by the body, but don't; // allow an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:111,Modifiability,variab,variable,111,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:26,Modifiability,variab,variable,26,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:16,Modifiability,variab,variables,16,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:42,Modifiability,variab,variable,42,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:116,Modifiability,variab,variable,116,"// Emit the initializer before adding the variable to scope, this prevents; // the initializer from referencing the variable itself, and permits stuff; // like this:; // var a = 1 in; // var a = a in ... # refers to outer 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:20,Modifiability,variab,variable,20,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:15,Modifiability,variab,variables,15,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:29,Modifiability,variab,variable,29,// Create an alloca for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:20,Modifiability,variab,variable,20,// Add arguments to variable symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:27,Deployability,install,install,27,"// If this is an operator, install it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:3,Security,Validat,Validate,3,"// Validate the generated code, checking for consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:3,Availability,Error,Error,3,"// Error reading body, remove function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:18,Availability,error,error,18,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Availability,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:24,Safety,recover,recovery,24,// Skip token for error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:3,Deployability,Install,Install,3,// Install standard binary operators.; // 1 is lowest precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ModuleMaker/ModuleMaker.cpp:402,Usability,simpl,simple,402,"//===- examples/ModuleMaker/ModuleMaker.cpp - Example project ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This programs is a simple example that creates an LLVM module ""from scratch"",; // emitting it as a bitcode file to standard out. This is just to show how; // LLVM projects work and to demonstrate some of the LLVM APIs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ModuleMaker/ModuleMaker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ModuleMaker/ModuleMaker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITRemovableCode/LLJITRemovableCode.cpp:235,Usability,clear,clear,235,"// (3) Add the 'foo' module with no explicit resource tracker. The resources; // for 'foo' will be tracked by the default tracker for JD. We will not be; // able to free it separately, but its resources will still be freed when we; // clear or remove JD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITRemovableCode/LLJITRemovableCode.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITRemovableCode/LLJITRemovableCode.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITRemovableCode/LLJITRemovableCode.cpp:7,Usability,Clear,Clear,7,// (9) Clear JD. This should remove all symbols currently in the JITDylib.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITRemovableCode/LLJITRemovableCode.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITRemovableCode/LLJITRemovableCode.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithCustomObjectLinkingLayer/LLJITWithCustomObjectLinkingLayer.cpp:3,Safety,Detect,Detect,3,// Detect the host and set code model to small.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithCustomObjectLinkingLayer/LLJITWithCustomObjectLinkingLayer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithCustomObjectLinkingLayer/LLJITWithCustomObjectLinkingLayer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:549,Deployability,Install,Install,549,"//===- LLJITWithExecutorProcessControl.cpp - LLJIT example with EPC utils -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use the lazy re-exports utility to lazily compile; // IR modules. We will do this in seven steps:; //; // 1. Create an LLJIT instance.; // 2. Install a transform so that we can see what is being compiled.; // 3. Create an indirect stubs manager and lazy call-through manager.; // 4. Add two modules that will be conditionally compiled, plus a main module.; // 5. Add lazy-rexports of the symbols in the conditionally compiled modules.; // 6. Dump the ExecutionSession state to see the symbol table prior to; // executing any code.; // 7. Verify that only modules containing executed code are compiled.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:638,Testability,stub,stubs,638,"//===- LLJITWithExecutorProcessControl.cpp - LLJIT example with EPC utils -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use the lazy re-exports utility to lazily compile; // IR modules. We will do this in seven steps:; //; // 1. Create an LLJIT instance.; // 2. Install a transform so that we can see what is being compiled.; // 3. Create an indirect stubs manager and lazy call-through manager.; // 4. Add two modules that will be conditionally compiled, plus a main module.; // 5. Add lazy-rexports of the symbols in the conditionally compiled modules.; // 6. Dump the ExecutionSession state to see the symbol table prior to; // executing any code.; // 7. Verify that only modules containing executed code are compiled.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:321,Performance,cache,cached,321,"// Example IR modules.; //; // Note that in the conditionally compiled modules, FooMod and BarMod, functions; // have been given an _body suffix. This is to ensure that their names do not; // clash with their lazy-reexports.; // For clients who do not wish to rename function bodies (e.g. because they want; // to re-use cached objects between static and JIT compiles) techniques exist to; // avoid renaming. See the lazy-reexports section of the ORCv2 design doc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:393,Safety,avoid,avoid,393,"// Example IR modules.; //; // Note that in the conditionally compiled modules, FooMod and BarMod, functions; // have been given an _body suffix. This is to ensure that their names do not; // clash with their lazy-reexports.; // For clients who do not wish to rename function bodies (e.g. because they want; // to re-use cached objects between static and JIT compiles) techniques exist to; // avoid renaming. See the lazy-reexports section of the ORCv2 design doc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:7,Deployability,Install,Install,7,// (2) Install transform to print modules as they are compiled:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:9,Availability,redundant,redundant,9,// Not a redundant move: fix build on gcc-7.5,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:9,Safety,redund,redundant,9,// Not a redundant move: fix build on gcc-7.5,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:14,Testability,stub,stubs,14,// (3) Create stubs and call-through managers:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:204,Integrability,depend,depending,204,"// (7) Execute the JIT'd main function and pass the example's command line; // arguments unmodified. This should cause either ExampleMod1 or ExampleMod2; // to be compiled, and either ""1"" or ""2"" returned depending on the number of; // arguments passed.; // Look up the JIT'd function, cast it to a function pointer, then call it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithGDBRegistrationListener/LLJITWithGDBRegistrationListener.cpp:3,Safety,Detect,Detect,3,// Detect the host and set code model to small.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithGDBRegistrationListener/LLJITWithGDBRegistrationListener.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithGDBRegistrationListener/LLJITWithGDBRegistrationListener.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithGDBRegistrationListener/LLJITWithGDBRegistrationListener.cpp:3,Performance,Load,Load,3,// Load the input modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithGDBRegistrationListener/LLJITWithGDBRegistrationListener.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithGDBRegistrationListener/LLJITWithGDBRegistrationListener.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithInitializers/LLJITWithInitializers.cpp:3,Performance,Load,Load,3,// Load the module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithInitializers/LLJITWithInitializers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithInitializers/LLJITWithInitializers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:549,Deployability,Install,Install,549,"//===--- LLJITWithLazyReexports.cpp - LLJIT example with custom laziness --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use the lazy re-exports utility to lazily compile; // IR modules. We will do this in seven steps:; //; // 1. Create an LLJIT instance.; // 2. Install a transform so that we can see what is being compiled.; // 3. Create an indirect stubs manager and lazy call-through manager.; // 4. Add two modules that will be conditionally compiled, plus a main module.; // 5. Add lazy-rexports of the symbols in the conditionally compiled modules.; // 6. Dump the ExecutionSession state to see the symbol table prior to; // executing any code.; // 7. Verify that only modules containing executed code are compiled.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:638,Testability,stub,stubs,638,"//===--- LLJITWithLazyReexports.cpp - LLJIT example with custom laziness --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use the lazy re-exports utility to lazily compile; // IR modules. We will do this in seven steps:; //; // 1. Create an LLJIT instance.; // 2. Install a transform so that we can see what is being compiled.; // 3. Create an indirect stubs manager and lazy call-through manager.; // 4. Add two modules that will be conditionally compiled, plus a main module.; // 5. Add lazy-rexports of the symbols in the conditionally compiled modules.; // 6. Dump the ExecutionSession state to see the symbol table prior to; // executing any code.; // 7. Verify that only modules containing executed code are compiled.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:321,Performance,cache,cached,321,"// Example IR modules.; //; // Note that in the conditionally compiled modules, FooMod and BarMod, functions; // have been given an _body suffix. This is to ensure that their names do not; // clash with their lazy-reexports.; // For clients who do not wish to rename function bodies (e.g. because they want; // to re-use cached objects between static and JIT compiles) techniques exist to; // avoid renaming. See the lazy-reexports section of the ORCv2 design doc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:393,Safety,avoid,avoid,393,"// Example IR modules.; //; // Note that in the conditionally compiled modules, FooMod and BarMod, functions; // have been given an _body suffix. This is to ensure that their names do not; // clash with their lazy-reexports.; // For clients who do not wish to rename function bodies (e.g. because they want; // to re-use cached objects between static and JIT compiles) techniques exist to; // avoid renaming. See the lazy-reexports section of the ORCv2 design doc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:7,Deployability,Install,Install,7,// (2) Install transform to print modules as they are compiled:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:9,Availability,redundant,redundant,9,// Not a redundant move: fix build on gcc-7.5,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:9,Safety,redund,redundant,9,// Not a redundant move: fix build on gcc-7.5,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:14,Testability,stub,stubs,14,// (3) Create stubs and call-through managers:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp:204,Integrability,depend,depending,204,"// (7) Execute the JIT'd main function and pass the example's command line; // arguments unmodified. This should cause either ExampleMod1 or ExampleMod2; // to be compiled, and either ""1"" or ""2"" returned depending on the number of; // arguments passed.; // Look up the JIT'd function, cast it to a function pointer, then call it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithLazyReexports/LLJITWithLazyReexports.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp:285,Availability,Error,Error,285,"// The modifyPassConfig callback gives us a chance to inspect the; // MaterializationResponsibility and target triple for the object being; // linked, then add any JITLink passes that we would like to run on the; // link graph. A pass is just a function object that is callable as; // Error(jitlink::LinkGraph&). In this case we will add two passes; // defined as lambdas that call the printLinkerGraph method on our; // plugin: One to run before the linker applies fixups and another to; // run afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp:421,Modifiability,plugin,plugin,421,"// The modifyPassConfig callback gives us a chance to inspect the; // MaterializationResponsibility and target triple for the object being; // linked, then add any JITLink passes that we would like to run on the; // link graph. A pass is just a function object that is callable as; // Error(jitlink::LinkGraph&). In this case we will add two passes; // defined as lambdas that call the printLinkerGraph method on our; // plugin: One to run before the linker applies fixups and another to; // run afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp:330,Deployability,pipeline,pipeline,330,"// Print sections, symbol names and addresses, and any edges for the; // associated blocks at the 'PostPrune' phase of JITLink (after; // dead-stripping, but before addresses are allocated in the target; // address space. See llvm/docs/JITLink.rst).; //; // Experiment with adding the 'printGraph' pass at other points in the; // pipeline. E.g. PrePrunePasses, PostAllocationPasses, and; // PostFixupPasses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp:179,Energy Efficiency,allocate,allocated,179,"// Print sections, symbol names and addresses, and any edges for the; // associated blocks at the 'PostPrune' phase of JITLink (after; // dead-stripping, but before addresses are allocated in the target; // address space. See llvm/docs/JITLink.rst).; //; // Experiment with adding the 'printGraph' pass at other points in the; // pipeline. E.g. PrePrunePasses, PostAllocationPasses, and; // PostFixupPasses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp:3,Safety,Detect,Detect,3,// Detect the host and set code model to small.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp:92,Modifiability,plugin,plugin,92,// Create an LLJIT instance with an ObjectLinkingLayer as the base layer.; // We attach our plugin in to the newly created ObjectLinkingLayer before; // returning it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp:26,Modifiability,plugin,plugin,26,// Add an instance of our plugin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp:3,Performance,Load,Load,3,// Load the input objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp:60,Performance,optimiz,optimization,60,"//===-- LLJITWithOptimizingIRTransform.cpp -- LLJIT with IR optimization --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use an IR transform to optimize a module as it; // passes through LLJIT's IRTransformLayer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp:430,Performance,optimiz,optimize,430,"//===-- LLJITWithOptimizingIRTransform.cpp -- LLJIT with IR optimization --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use an IR transform to optimize a module as it; // passes through LLJIT's IRTransformLayer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp:291,Performance,optimiz,optimization,291,"// Example IR module.; //; // This IR contains a recursive definition of the factorial function:; //; // fac(n) | n == 0 = 1; // | otherwise = n * fac(n - 1); //; // It also contains an entry function which calls the factorial function with; // an input value of 5.; //; // We expect the IR optimization transform that we build below to transform; // this into a non-recursive factorial function and an entry function that; // returns a constant value of 5!, or 120.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp:48,Deployability,pipeline,pipeline,48,// A function object that creates a simple pass pipeline to apply to each; // module as it passes through the IRTransformLayer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp:36,Usability,simpl,simple,36,// A function object that creates a simple pass pipeline to apply to each; // module as it passes through the IRTransformLayer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp:7,Deployability,Install,Install,7,// (2) Install transform to optimize modules when they're materialized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp:28,Performance,optimiz,optimize,28,// (2) Install transform to optimize modules when they're materialized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:555,Integrability,interface,interface,555,"//===--- LLJITWithRemoteDebugging.cpp - LLJIT targeting a child process ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This example shows how to use LLJIT and JITLink for out-of-process execution; // with debug support. A few notes beforehand:; //; // * Debuggers must implement the GDB JIT interface (gdb, udb, lldb 12+).; // * Debug support is currently limited to ELF on x86-64 platforms that run; // Unix-like systems.; // * There is a test for this example and it ships an IR file that is prepared; // for the instructions below.; //; //; // The following command line session provides a complete walkthrough of the; // feature using LLDB 12:; //; // [Terminal 1] Prepare a debuggable out-of-process JIT session:; //; // > cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:1497,Modifiability,plugin,plugin,1497,"-of-process execution; // with debug support. A few notes beforehand:; //; // * Debuggers must implement the GDB JIT interface (gdb, udb, lldb 12+).; // * Debug support is currently limited to ELF on x86-64 platforms that run; // Unix-like systems.; // * There is a test for this example and it ships an IR file that is prepared; // for the instructions below.; //; //; // The following command line session provides a complete walkthrough of the; // feature using LLDB 12:; //; // [Terminal 1] Prepare a debuggable out-of-process JIT session:; //; // > cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; // [Terminal 1] Press a key to start code generation and execution:; //; // Parsed input IR code from: argc_sub1_elf.ll; // Initialized LLJIT for remote executor; // Running: argc_sub1_elf.ll; //; //; // [Terminal 2] Breakpoint hits; we change the argc value from 1 to 42:; //; // (lldb) JITLoaderGDB::JITDebugBreakpointHit hit JIT breakpoint; // JITLoaderGDB::ReadJITDescriptorImpl registering JIT entry at 0x106b34000; // 1 location add",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:1508,Performance,load,loader,1508,"//; // * Debuggers must implement the GDB JIT interface (gdb, udb, lldb 12+).; // * Debug support is currently limited to ELF on x86-64 platforms that run; // Unix-like systems.; // * There is a test for this example and it ships an IR file that is prepared; // for the instructions below.; //; //; // The following command line session provides a complete walkthrough of the; // feature using LLDB 12:; //; // [Terminal 1] Prepare a debuggable out-of-process JIT session:; //; // > cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; // [Terminal 1] Press a key to start code generation and execution:; //; // Parsed input IR code from: argc_sub1_elf.ll; // Initialized LLJIT for remote executor; // Running: argc_sub1_elf.ll; //; //; // [Terminal 2] Breakpoint hits; we change the argc value from 1 to 42:; //; // (lldb) JITLoaderGDB::JITDebugBreakpointHit hit JIT breakpoint; // JITLoaderGDB::ReadJITDescriptorImpl registering JIT entry at 0x106b34000; // 1 location added to breakpoint 1; // Process 65535 stopped; // * thread #1, queue = 'c",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:2500,Performance,queue,queue,2500," cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; // [Terminal 1] Press a key to start code generation and execution:; //; // Parsed input IR code from: argc_sub1_elf.ll; // Initialized LLJIT for remote executor; // Running: argc_sub1_elf.ll; //; //; // [Terminal 2] Breakpoint hits; we change the argc value from 1 to 42:; //; // (lldb) JITLoaderGDB::JITDebugBreakpointHit hit JIT breakpoint; // JITLoaderGDB::ReadJITDescriptorImpl registering JIT entry at 0x106b34000; // 1 location added to breakpoint 1; // Process 65535 stopped; // * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1; // frame #0: JIT(0x106b34000)`sub1(x=1) at argc_sub1.c:1:28; // -> 1 	int sub1(int x) { return x - 1; }; // 2 	int main(int argc, char **argv) { return sub1(argc); }; // (lldb) p x; // (int) $0 = 1; // (lldb) expr x = 42; // (int) $1 = 42; // (lldb) c; //; //; // [Terminal 1] Example output reflects the modified value:; //; // Exit code: 41; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:704,Testability,test,test,704,"//===--- LLJITWithRemoteDebugging.cpp - LLJIT targeting a child process ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This example shows how to use LLJIT and JITLink for out-of-process execution; // with debug support. A few notes beforehand:; //; // * Debuggers must implement the GDB JIT interface (gdb, udb, lldb 12+).; // * Debug support is currently limited to ELF on x86-64 platforms that run; // Unix-like systems.; // * There is a test for this example and it ships an IR file that is prepared; // for the instructions below.; //; //; // The following command line session provides a complete walkthrough of the; // feature using LLDB 12:; //; // [Terminal 1] Prepare a debuggable out-of-process JIT session:; //; // > cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:1090,Testability,test,test,1090,"ct, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This example shows how to use LLJIT and JITLink for out-of-process execution; // with debug support. A few notes beforehand:; //; // * Debuggers must implement the GDB JIT interface (gdb, udb, lldb 12+).; // * Debug support is currently limited to ELF on x86-64 platforms that run; // Unix-like systems.; // * There is a test for this example and it ships an IR file that is prepared; // for the instructions below.; //; //; // The following command line session provides a complete walkthrough of the; // feature using LLDB 12:; //; // [Terminal 1] Prepare a debuggable out-of-process JIT session:; //; // > cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; // [Terminal 1] Press a key to start code generation and execution:; //; // Parsed input IR code from: argc_sub1",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:1453,Testability,log,log,1453,"-of-process execution; // with debug support. A few notes beforehand:; //; // * Debuggers must implement the GDB JIT interface (gdb, udb, lldb 12+).; // * Debug support is currently limited to ELF on x86-64 platforms that run; // Unix-like systems.; // * There is a test for this example and it ships an IR file that is prepared; // for the instructions below.; //; //; // The following command line session provides a complete walkthrough of the; // feature using LLDB 12:; //; // [Terminal 1] Prepare a debuggable out-of-process JIT session:; //; // > cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; // [Terminal 1] Press a key to start code generation and execution:; //; // Parsed input IR code from: argc_sub1_elf.ll; // Initialized LLJIT for remote executor; // Running: argc_sub1_elf.ll; //; //; // [Terminal 2] Breakpoint hits; we change the argc value from 1 to 42:; //; // (lldb) JITLoaderGDB::JITDebugBreakpointHit hit JIT breakpoint; // JITLoaderGDB::ReadJITDescriptorImpl registering JIT entry at 0x106b34000; // 1 location add",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:1612,Testability,test,test,1612,"mple and it ships an IR file that is prepared; // for the instructions below.; //; //; // The following command line session provides a complete walkthrough of the; // feature using LLDB 12:; //; // [Terminal 1] Prepare a debuggable out-of-process JIT session:; //; // > cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; // [Terminal 1] Press a key to start code generation and execution:; //; // Parsed input IR code from: argc_sub1_elf.ll; // Initialized LLJIT for remote executor; // Running: argc_sub1_elf.ll; //; //; // [Terminal 2] Breakpoint hits; we change the argc value from 1 to 42:; //; // (lldb) JITLoaderGDB::JITDebugBreakpointHit hit JIT breakpoint; // JITLoaderGDB::ReadJITDescriptorImpl registering JIT entry at 0x106b34000; // 1 location added to breakpoint 1; // Process 65535 stopped; // * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1; // frame #0: JIT(0x106b34000)`sub1(x=1) at argc_sub1.c:1:28; // -> 1 	int sub1(int x) { return x - 1; }; // 2 	int main(int argc, char **argv) { return sub1(ar",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:3,Performance,Load,Load,3,// Load the given IR files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:7,Modifiability,plugin,plugin,7,// Add plugin for debug support.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:3,Performance,Load,Load,3,"// Load required shared libraries on the remote target and add a generator; // for each of it, so the compiler can lookup their symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:11,Performance,load,loaded,11,// Add the loaded IR module to the JIT. This will set up symbol tables and; // prepare for materialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:39,Usability,simpl,simplicity,39,"// The example uses a non-lazy JIT for simplicity. Thus, looking up the main; // function will materialize all reachable code. It also triggers debug; // registration in the remote target process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp:990,Testability,test,test,990,"//===--- LLJITWithThinLTOSummaries.cpp - Module summaries as LLJIT input --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use a module summary index file produced for ThinLTO; // to (A) find the module that defines the main entry point and (B) find all; // extra modules that we need. We will do this in five steps:; //; // (1) Read the index file and parse the module summary index.; // (2) Find the path of the module that defines ""main"".; // (3) Parse the main module and create a matching LLJIT.; // (4) Add all modules to the LLJIT that are covered by the index.; // (5) Look up and run the JIT'd function.; //; // The index file name must be passed in as command line argument. Please find; // this test for instructions on creating the index file:; //; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; // If you use ""build"" as the build directory, you can run the test from the root; // of the monorepo like this:; //; // > build/bin/llvm-lit -a \; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp:1053,Testability,test,test,1053,"//===--- LLJITWithThinLTOSummaries.cpp - Module summaries as LLJIT input --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use a module summary index file produced for ThinLTO; // to (A) find the module that defines the main entry point and (B) find all; // extra modules that we need. We will do this in five steps:; //; // (1) Read the index file and parse the module summary index.; // (2) Find the path of the module that defines ""main"".; // (3) Parse the main module and create a matching LLJIT.; // (4) Add all modules to the LLJIT that are covered by the index.; // (5) Look up and run the JIT'd function.; //; // The index file name must be passed in as command line argument. Please find; // this test for instructions on creating the index file:; //; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; // If you use ""build"" as the build directory, you can run the test from the root; // of the monorepo like this:; //; // > build/bin/llvm-lit -a \; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp:1110,Testability,test,test,1110,"//===--- LLJITWithThinLTOSummaries.cpp - Module summaries as LLJIT input --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use a module summary index file produced for ThinLTO; // to (A) find the module that defines the main entry point and (B) find all; // extra modules that we need. We will do this in five steps:; //; // (1) Read the index file and parse the module summary index.; // (2) Find the path of the module that defines ""main"".; // (3) Parse the main module and create a matching LLJIT.; // (4) Add all modules to the LLJIT that are covered by the index.; // (5) Look up and run the JIT'd function.; //; // The index file name must be passed in as command line argument. Please find; // this test for instructions on creating the index file:; //; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; // If you use ""build"" as the build directory, you can run the test from the root; // of the monorepo like this:; //; // > build/bin/llvm-lit -a \; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp:1182,Testability,test,test,1182,"//===--- LLJITWithThinLTOSummaries.cpp - Module summaries as LLJIT input --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use a module summary index file produced for ThinLTO; // to (A) find the module that defines the main entry point and (B) find all; // extra modules that we need. We will do this in five steps:; //; // (1) Read the index file and parse the module summary index.; // (2) Find the path of the module that defines ""main"".; // (3) Parse the main module and create a matching LLJIT.; // (4) Add all modules to the LLJIT that are covered by the index.; // (5) Look up and run the JIT'd function.; //; // The index file name must be passed in as command line argument. Please find; // this test for instructions on creating the index file:; //; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; // If you use ""build"" as the build directory, you can run the test from the root; // of the monorepo like this:; //; // > build/bin/llvm-lit -a \; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp:1275,Testability,test,test,1275,"//===--- LLJITWithThinLTOSummaries.cpp - Module summaries as LLJIT input --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use a module summary index file produced for ThinLTO; // to (A) find the module that defines the main entry point and (B) find all; // extra modules that we need. We will do this in five steps:; //; // (1) Read the index file and parse the module summary index.; // (2) Find the path of the module that defines ""main"".; // (3) Parse the main module and create a matching LLJIT.; // (4) Add all modules to the LLJIT that are covered by the index.; // (5) Look up and run the JIT'd function.; //; // The index file name must be passed in as command line argument. Please find; // this test for instructions on creating the index file:; //; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; // If you use ""build"" as the build directory, you can run the test from the root; // of the monorepo like this:; //; // > build/bin/llvm-lit -a \; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp:1332,Testability,test,test,1332,"//===--- LLJITWithThinLTOSummaries.cpp - Module summaries as LLJIT input --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In this example we will use a module summary index file produced for ThinLTO; // to (A) find the module that defines the main entry point and (B) find all; // extra modules that we need. We will do this in five steps:; //; // (1) Read the index file and parse the module summary index.; // (2) Find the path of the module that defines ""main"".; // (3) Parse the main module and create a matching LLJIT.; // (4) Add all modules to the LLJIT that are covered by the index.; // (5) Look up and run the JIT'd function.; //; // The index file name must be passed in as command line argument. Please find; // this test for instructions on creating the index file:; //; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; // If you use ""build"" as the build directory, you can run the test from the root; // of the monorepo like this:; //; // > build/bin/llvm-lit -a \; // llvm/test/Examples/OrcV2Examples/lljit-with-thinlto-summaries.test; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp:165,Usability,GUID,GUID,165,// Describe a fail state that is caused by the given ModuleSummaryIndex; // providing multiple definitions of the given global value name. It will dump; // name and GUID for the global value and list the paths of the modules covered; // by the index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp:132,Usability,GUID,GUID,132,// Describe a fail state where the given global value name was not found in the; // given ModuleSummaryIndex. It will dump name and GUID for the global value and; // list the paths of the modules covered by the index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithThinLTOSummaries/LLJITWithThinLTOSummaries.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:894,Availability,error,errors,894,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:604,Modifiability,variab,variable,604,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:666,Modifiability,variab,variable,666,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:736,Performance,perform,performed,736,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:65,Safety,safe,safe,65,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:409,Testability,test,test,409,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:875,Testability,test,test,875,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:884,Testability,assert,assertion,884,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:57,Deployability,release,releaseThreads,57,// All threads will stop here until another thread calls releaseThreads,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:48,Deployability,release,release,48,// There are enough threads blocked that we can release all of them,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:145,Deployability,release,release,145,"// Reset the counters to zero: this way, if any new threads; // enter while threads are exiting, they will block instead; // of triggering a new release of threads",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:140,Deployability,release,release,140,"// Reset waitFor to zero: this way, if waitFor threads enter; // while threads are exiting, they will block instead of; // triggering a new release of threads",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/SpeculativeJIT/SpeculativeJIT.cpp:7,Modifiability,Layers,Layers,7,// Add Layers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/SpeculativeJIT/SpeculativeJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/SpeculativeJIT/SpeculativeJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/SpeculativeJIT/SpeculativeJIT.cpp:3,Performance,Load,Load,3,// Load the IR inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/examples/SpeculativeJIT/SpeculativeJIT.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/SpeculativeJIT/SpeculativeJIT.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InitializePasses.h:447,Integrability,rout,routines,447,"//===- llvm/InitializePasses.h - Initialize All Passes ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declarations for the pass initialization routines; // for the entire LLVM project.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InitializePasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InitializePasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LinkAllIR.h:122,Performance,optimiz,optimization,122,"// We must reference VMCore in such a way that compilers will not; // delete it all as dead code, even with whole program optimization,; // yet is effectively a NO-OP. As the compiler isn't smart enough; // to know that getenv() never returns -1, this will do the job.; // This is so that globals in the translation units where these functions; // are defined are forced to be initialized, populating various; // registries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LinkAllIR.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LinkAllIR.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LinkAllPasses.h:126,Performance,optimiz,optimization,126,"// We must reference the passes in such a way that compilers will not; // delete it all as dead code, even with whole program optimization,; // yet is effectively a NO-OP. As the compiler isn't smart enough; // to know that getenv() never returns -1, this will do the job.; // This is so that globals in the translation units where these functions; // are defined are forced to be initialized, populating various; // registries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/LinkAllPasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LinkAllPasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:1253,Availability,avail,available,1253,"//===- llvm/Pass.h - Base class for Passes ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a base class that indicates that a specified class is a; // transformation pass implementation.; //; // Passes are designed this way so that it is possible to run passes in a cache; // and organizationally optimal order without having to specify it at the front; // end. This allows arbitrary passes to be strung together and have them; // executed as efficiently as possible.; //; // Passes should extend one of the classes below, depending on the guarantees; // that it can make about what will be modified as it is run. For example, most; // global optimizations should derive from FunctionPass, because they do not add; // or delete functions, they operate on the internals of the function.; //; // Note that this file #includes PassSupport.h and PassAnalysisSupport.h (at the; // bottom), so the APIs exposed by these files are also automatically available; // to all users of this file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:753,Energy Efficiency,efficient,efficiently,753,"//===- llvm/Pass.h - Base class for Passes ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a base class that indicates that a specified class is a; // transformation pass implementation.; //; // Passes are designed this way so that it is possible to run passes in a cache; // and organizationally optimal order without having to specify it at the front; // end. This allows arbitrary passes to be strung together and have them; // executed as efficiently as possible.; //; // Passes should extend one of the classes below, depending on the guarantees; // that it can make about what will be modified as it is run. For example, most; // global optimizations should derive from FunctionPass, because they do not add; // or delete functions, they operate on the internals of the function.; //; // Note that this file #includes PassSupport.h and PassAnalysisSupport.h (at the; // bottom), so the APIs exposed by these files are also automatically available; // to all users of this file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:833,Integrability,depend,depending,833,"//===- llvm/Pass.h - Base class for Passes ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a base class that indicates that a specified class is a; // transformation pass implementation.; //; // Passes are designed this way so that it is possible to run passes in a cache; // and organizationally optimal order without having to specify it at the front; // end. This allows arbitrary passes to be strung together and have them; // executed as efficiently as possible.; //; // Passes should extend one of the classes below, depending on the guarantees; // that it can make about what will be modified as it is run. For example, most; // global optimizations should derive from FunctionPass, because they do not add; // or delete functions, they operate on the internals of the function.; //; // Note that this file #includes PassSupport.h and PassAnalysisSupport.h (at the; // bottom), so the APIs exposed by these files are also automatically available; // to all users of this file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:800,Modifiability,extend,extend,800,"//===- llvm/Pass.h - Base class for Passes ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a base class that indicates that a specified class is a; // transformation pass implementation.; //; // Passes are designed this way so that it is possible to run passes in a cache; // and organizationally optimal order without having to specify it at the front; // end. This allows arbitrary passes to be strung together and have them; // executed as efficiently as possible.; //; // Passes should extend one of the classes below, depending on the guarantees; // that it can make about what will be modified as it is run. For example, most; // global optimizations should derive from FunctionPass, because they do not add; // or delete functions, they operate on the internals of the function.; //; // Note that this file #includes PassSupport.h and PassAnalysisSupport.h (at the; // bottom), so the APIs exposed by these files are also automatically available; // to all users of this file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:576,Performance,cache,cache,576,"//===- llvm/Pass.h - Base class for Passes ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a base class that indicates that a specified class is a; // transformation pass implementation.; //; // Passes are designed this way so that it is possible to run passes in a cache; // and organizationally optimal order without having to specify it at the front; // end. This allows arbitrary passes to be strung together and have them; // executed as efficiently as possible.; //; // Passes should extend one of the classes below, depending on the guarantees; // that it can make about what will be modified as it is run. For example, most; // global optimizations should derive from FunctionPass, because they do not add; // or delete functions, they operate on the internals of the function.; //; // Note that this file #includes PassSupport.h and PassAnalysisSupport.h (at the; // bottom), so the APIs exposed by these files are also automatically available; // to all users of this file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:953,Performance,optimiz,optimizations,953,"//===- llvm/Pass.h - Base class for Passes ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a base class that indicates that a specified class is a; // transformation pass implementation.; //; // Passes are designed this way so that it is possible to run passes in a cache; // and organizationally optimal order without having to specify it at the front; // end. This allows arbitrary passes to be strung together and have them; // executed as efficiently as possible.; //; // Passes should extend one of the classes below, depending on the guarantees; // that it can make about what will be modified as it is run. For example, most; // global optimizations should derive from FunctionPass, because they do not add; // or delete functions, they operate on the internals of the function.; //; // Note that this file #includes PassSupport.h and PassAnalysisSupport.h (at the; // bottom), so the APIs exposed by these files are also automatically available; // to all users of this file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:1207,Security,expose,exposed,1207,"//===- llvm/Pass.h - Base class for Passes ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a base class that indicates that a specified class is a; // transformation pass implementation.; //; // Passes are designed this way so that it is possible to run passes in a cache; // and organizationally optimal order without having to specify it at the front; // end. This allows arbitrary passes to be strung together and have them; // executed as efficiently as possible.; //; // Passes should extend one of the classes below, depending on the guarantees; // that it can make about what will be modified as it is run. For example, most; // global optimizations should derive from FunctionPass, because they do not add; // or delete functions, they operate on the internals of the function.; //; // Note that this file #includes PassSupport.h and PassAnalysisSupport.h (at the; // bottom), so the APIs exposed by these files are also automatically available; // to all users of this file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:49,Performance,optimiz,optimization,49,/// This enumerates the LLVM full LTO or ThinLTO optimization phases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:91,Integrability,interface,interface,91,//===----------------------------------------------------------------------===//; /// Pass interface - Implemented by all 'passes'. Subclass this if you are an; /// interprocedural optimization or you do not fit into any of the more; /// constrained passes described below.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:181,Performance,optimiz,optimization,181,//===----------------------------------------------------------------------===//; /// Pass interface - Implemented by all 'passes'. Subclass this if you are an; /// interprocedural optimization or you do not fit into any of the more; /// constrained passes described below.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:94,Availability,avail,available,94,/// Each pass is responsible for assigning a pass manager to itself.; /// PMS is the stack of available pass manager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:13,Availability,avail,available,13,/// Check if available pass managers are suitable for this pass or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:3,Security,Access,Access,3,// Access AnalysisResolver,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:4,Deployability,release,releaseMemory,4,"/// releaseMemory() - This member can be implemented by a pass if it wants to; /// be able to release its memory when it is no longer needed. The default; /// behavior of passes is to hold onto memory for the entire duration of their; /// lifetime (which is the entire compile time). For pipelined passes, this; /// is not a big deal because that memory gets recycled every time the pass is; /// invoked on another program unit. For IP passes, it is more important to; /// free memory when it is unused.; ///; /// Optionally implement this function to release pass memory when it is no; /// longer used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:94,Deployability,release,release,94,"/// releaseMemory() - This member can be implemented by a pass if it wants to; /// be able to release its memory when it is no longer needed. The default; /// behavior of passes is to hold onto memory for the entire duration of their; /// lifetime (which is the entire compile time). For pipelined passes, this; /// is not a big deal because that memory gets recycled every time the pass is; /// invoked on another program unit. For IP passes, it is more important to; /// free memory when it is unused.; ///; /// Optionally implement this function to release pass memory when it is no; /// longer used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:288,Deployability,pipeline,pipelined,288,"/// releaseMemory() - This member can be implemented by a pass if it wants to; /// be able to release its memory when it is no longer needed. The default; /// behavior of passes is to hold onto memory for the entire duration of their; /// lifetime (which is the entire compile time). For pipelined passes, this; /// is not a big deal because that memory gets recycled every time the pass is; /// invoked on another program unit. For IP passes, it is more important to; /// free memory when it is unused.; ///; /// Optionally implement this function to release pass memory when it is no; /// longer used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:552,Deployability,release,release,552,"/// releaseMemory() - This member can be implemented by a pass if it wants to; /// be able to release its memory when it is no longer needed. The default; /// behavior of passes is to hold onto memory for the entire duration of their; /// lifetime (which is the entire compile time). For pipelined passes, this; /// is not a big deal because that memory gets recycled every time the pass is; /// invoked on another program unit. For IP passes, it is more important to; /// free memory when it is unused.; ///; /// Optionally implement this function to release pass memory when it is no; /// longer used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:93,Integrability,interface,interface,93,"/// getAdjustedAnalysisPointer - This method is used when a pass implements; /// an analysis interface through multiple inheritance. If needed, it should; /// override this to adjust the this pointer as needed for the specified pass; /// info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:120,Modifiability,inherit,inheritance,120,"/// getAdjustedAnalysisPointer - This method is used when a pass implements; /// an analysis interface through multiple inheritance. If needed, it should; /// override this to adjust the this pointer as needed for the specified pass; /// info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:349,Availability,avail,available,349,"/// getAnalysisIfAvailable<AnalysisType>() - Subclasses use this function to; /// get analysis information that might be around, for example to update it.; /// This is different than getAnalysis in that it can fail (if the analysis; /// results haven't been computed), so should only be used if you can handle; /// the case when the analysis is not available. This method is often used by; /// transformation APIs to update analysis results for a pass automatically as; /// the transform is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:144,Deployability,update,update,144,"/// getAnalysisIfAvailable<AnalysisType>() - Subclasses use this function to; /// get analysis information that might be around, for example to update it.; /// This is different than getAnalysis in that it can fail (if the analysis; /// results haven't been computed), so should only be used if you can handle; /// the case when the analysis is not available. This method is often used by; /// transformation APIs to update analysis results for a pass automatically as; /// the transform is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:417,Deployability,update,update,417,"/// getAnalysisIfAvailable<AnalysisType>() - Subclasses use this function to; /// get analysis information that might be around, for example to update it.; /// This is different than getAnalysis in that it can fail (if the analysis; /// results haven't been computed), so should only be used if you can handle; /// the case when the analysis is not available. This method is often used by; /// transformation APIs to update analysis results for a pass automatically as; /// the transform is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:491,Performance,perform,performed,491,"/// getAnalysisIfAvailable<AnalysisType>() - Subclasses use this function to; /// get analysis information that might be around, for example to update it.; /// This is different than getAnalysis in that it can fail (if the analysis; /// results haven't been computed), so should only be used if you can handle; /// the case when the analysis is not available. This method is often used by; /// transformation APIs to update analysis results for a pass automatically as; /// the transform is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:290,Availability,avail,available,290,"// Defined in PassAnalysisSupport.h; /// mustPreserveAnalysisID - This method serves the same function as; /// getAnalysisIfAvailable, but works if you just have an AnalysisID. This; /// obviously cannot give you a properly typed instance of the class if you; /// don't have the class name available (use getAnalysisIfAvailable if you; /// do), but it can tell you if you need to preserve the pass at least.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:30,Safety,detect,detect,30,/// Hash a module in order to detect when a module (or more specific) pass has; /// modified it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:4,Security,Hash,Hash,4,/// Hash a module in order to detect when a module (or more specific) pass has; /// modified it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:32,Safety,detect,detect,32,/// Hash a function in order to detect when a function (or more specific) pass; /// has modified it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:4,Security,Hash,Hash,4,/// Hash a function in order to detect when a function (or more specific) pass; /// has modified it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:171,Performance,optimiz,optimizations,171,//===----------------------------------------------------------------------===//; /// ModulePass class - This class is used to implement unstructured; /// interprocedural optimizations and analyses. ModulePasses may do anything; /// they want to the program.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:111,Performance,optimiz,optimization,111,/// Optional passes call this function to check whether the pass should be; /// skipped. This is the case when optimization bisect is over the limit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:92,Performance,perform,perform,92,"/// initializePass - This method may be overriden by immutable passes to allow; /// them to perform various initialization actions they require. This is; /// primarily because an ImmutablePass can ""require"" another ImmutablePass,; /// and if it does, the overloaded version of initializePass may get access to; /// these passes with getAnalysis<>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:300,Security,access,access,300,"/// initializePass - This method may be overriden by immutable passes to allow; /// them to perform various initialization actions they require. This is; /// primarily because an ImmutablePass can ""require"" another ImmutablePass,; /// and if it does, the overloaded version of initializePass may get access to; /// these passes with getAnalysis<>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:156,Performance,optimiz,optimizations,156,"//===----------------------------------------------------------------------===//; /// FunctionPass class - This class is used to implement most global; /// optimizations. Optimizations should subclass this class if they meet the; /// following constraints:; ///; /// 1. Optimizations are organized globally, i.e., a function at a time; /// 2. Optimizing a function does not cause the addition or removal of any; /// functions in the module; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:171,Performance,Optimiz,Optimizations,171,"//===----------------------------------------------------------------------===//; /// FunctionPass class - This class is used to implement most global; /// optimizations. Optimizations should subclass this class if they meet the; /// following constraints:; ///; /// 1. Optimizations are organized globally, i.e., a function at a time; /// 2. Optimizing a function does not cause the addition or removal of any; /// functions in the module; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:270,Performance,Optimiz,Optimizations,270,"//===----------------------------------------------------------------------===//; /// FunctionPass class - This class is used to implement most global; /// optimizations. Optimizations should subclass this class if they meet the; /// following constraints:; ///; /// 1. Optimizations are organized globally, i.e., a function at a time; /// 2. Optimizing a function does not cause the addition or removal of any; /// functions in the module; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:343,Performance,Optimiz,Optimizing,343,"//===----------------------------------------------------------------------===//; /// FunctionPass class - This class is used to implement most global; /// optimizations. Optimizations should subclass this class if they meet the; /// following constraints:; ///; /// 1. Optimizations are organized globally, i.e., a function at a time; /// 2. Optimizing a function does not cause the addition or removal of any; /// functions in the module; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:122,Performance,Optimiz,OptimizeNone,122,/// Optional passes call this function to check whether the pass should be; /// skipped. This is the case when Attribute::OptimizeNone is set or when; /// optimization bisect is over the limit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:155,Performance,optimiz,optimization,155,/// Optional passes call this function to check whether the pass should be; /// skipped. This is the case when Attribute::OptimizeNone is set or when; /// optimization bisect is over the limit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Pass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:196,Availability,avail,available,196,"//===----------------------------------------------------------------------===//; /// Represent the analysis usage information of a pass. This tracks analyses; /// that the pass REQUIRES (must be available when the pass runs), REQUIRES; /// TRANSITIVE (must be available throughout the lifetime of the pass), and; /// analyses that the pass PRESERVES (the pass does not invalidate the results; /// of these analyses). This information is provided by a pass to the Pass; /// infrastructure through the getAnalysisUsage virtual function.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:261,Availability,avail,available,261,"//===----------------------------------------------------------------------===//; /// Represent the analysis usage information of a pass. This tracks analyses; /// that the pass REQUIRES (must be available when the pass runs), REQUIRES; /// TRANSITIVE (must be available throughout the lifetime of the pass), and; /// analyses that the pass PRESERVES (the pass does not invalidate the results; /// of these analyses). This information is provided by a pass to the Pass; /// infrastructure through the getAnalysisUsage virtual function.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:73,Usability,clear,clear,73,"/// Sets of analyses required and preserved by a pass; // TODO: It's not clear that SmallVector is an appropriate data structure for; // this usecase. The sizes were picked to minimize wasted space, but are; // otherwise fairly meaningless.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:97,Availability,avail,available,97,///@}; ///@{; /// Add the specified ID to the set of analyses used by this pass if they are; /// available..,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:274,Integrability,depend,depend,274,"/// This function should be called by the pass, iff they do not:; ///; /// 1. Add or remove basic blocks from the function; /// 2. Modify terminator instructions in any way.; ///; /// This function annotates the AnalysisUsage info object to say that analyses; /// that only depend on the CFG are preserved by this pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:112,Integrability,interface,interface,112,//===----------------------------------------------------------------------===//; /// AnalysisResolver - Simple interface used by Pass objects to pull all; /// analysis information out of pass manager that is responsible to manage; /// the pass.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:105,Usability,Simpl,Simple,105,//===----------------------------------------------------------------------===//; /// AnalysisResolver - Simple interface used by Pass objects to pull all; /// analysis information out of pass manager that is responsible to manage; /// the pass.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:10,Performance,cache,cache,10,/// Clear cache that is used to connect a pass to the analysis (PassInfo).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:4,Usability,Clear,Clear,4,/// Clear cache that is used to connect a pass to the analysis (PassInfo).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:52,Integrability,interface,interfaces,52,/// This keeps track of which passes implements the interfaces that are; /// required by the current pass (to implement getAnalysis()).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:349,Availability,avail,available,349,"/// getAnalysisIfAvailable<AnalysisType>() - Subclasses use this function to; /// get analysis information that might be around, for example to update it.; /// This is different than getAnalysis in that it can fail (if the analysis; /// results haven't been computed), so should only be used if you can handle; /// the case when the analysis is not available. This method is often used by; /// transformation APIs to update analysis results for a pass automatically as; /// the transform is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:144,Deployability,update,update,144,"/// getAnalysisIfAvailable<AnalysisType>() - Subclasses use this function to; /// get analysis information that might be around, for example to update it.; /// This is different than getAnalysis in that it can fail (if the analysis; /// results haven't been computed), so should only be used if you can handle; /// the case when the analysis is not available. This method is often used by; /// transformation APIs to update analysis results for a pass automatically as; /// the transform is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:417,Deployability,update,update,417,"/// getAnalysisIfAvailable<AnalysisType>() - Subclasses use this function to; /// get analysis information that might be around, for example to update it.; /// This is different than getAnalysis in that it can fail (if the analysis; /// results haven't been computed), so should only be used if you can handle; /// the case when the analysis is not available. This method is often used by; /// transformation APIs to update analysis results for a pass automatically as; /// the transform is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:491,Performance,perform,performed,491,"/// getAnalysisIfAvailable<AnalysisType>() - Subclasses use this function to; /// get analysis information that might be around, for example to update it.; /// This is different than getAnalysis in that it can fail (if the analysis; /// results haven't been computed), so should only be used if you can handle; /// the case when the analysis is not available. This method is often used by; /// transformation APIs to update analysis results for a pass automatically as; /// the transform is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:200,Modifiability,inherit,inherit,200,"// Because the AnalysisType may not be a subclass of pass (for; // AnalysisGroups), we use getAdjustedAnalysisPointer here to potentially; // adjust the return pointer (because the class may multiply inherit, once; // from pass, once from AnalysisType).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:200,Modifiability,inherit,inherit,200,"// Because the AnalysisType may not be a subclass of pass (for; // AnalysisGroups), we use getAdjustedAnalysisPointer here to potentially; // adjust the return pointer (because the class may multiply inherit, once; // from pass, once from AnalysisType).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:353,Deployability,update,updated,353,"/// getAnalysis<AnalysisType>() - This function is used by subclasses to get; /// to the analysis information that they claim to use by overriding the; /// getAnalysisUsage function. If as part of the dependencies, an IR; /// transformation is triggered (e.g. because the analysis requires; /// BreakCriticalEdges), and Changed is non null, *Changed is updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:201,Integrability,depend,dependencies,201,"/// getAnalysis<AnalysisType>() - This function is used by subclasses to get; /// to the analysis information that they claim to use by overriding the; /// getAnalysisUsage function. If as part of the dependencies, an IR; /// transformation is triggered (e.g. because the analysis requires; /// BreakCriticalEdges), and Changed is non null, *Changed is updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:200,Modifiability,inherit,inherit,200,"// Because the AnalysisType may not be a subclass of pass (for; // AnalysisGroups), we use getAdjustedAnalysisPointer here to potentially; // adjust the return pointer (because the class may multiply inherit, once; // from pass, once from AnalysisType).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassInfo.h:3,Integrability,Interface,Interfaces,3,// Interfaces implemented by this pass,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassInfo.h:79,Integrability,interface,interfaces,79,/// getInterfacesImplemented - Return a list of all of the analysis group; /// interfaces implemented by this pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h:614,Integrability,depend,dependency,614,"//===- llvm/PassRegistry.h - Pass Information Registry ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines PassRegistry, a class that is used in the initialization; // and registration of passes. At application startup, passes are registered; // with the PassRegistry, which is later provided to the PassManager for; // dependency resolution and similar tasks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h:177,Integrability,depend,dependencies,177,"/// PassRegistry - This class manages the registration and intitialization of; /// the pass subsystem as application startup, and assists the PassManager; /// in resolving pass dependencies.; /// NOTE: PassRegistry is NOT thread-safe. If you want to use LLVM on multiple; /// threads simultaneously, you will need to use a separate PassRegistry on; /// each thread.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h:229,Safety,safe,safe,229,"/// PassRegistry - This class manages the registration and intitialization of; /// the pass subsystem as application startup, and assists the PassManager; /// in resolving pass dependencies.; /// NOTE: PassRegistry is NOT thread-safe. If you want to use LLVM on multiple; /// threads simultaneously, you will need to use a separate PassRegistry on; /// each thread.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h:22,Security,Access,Access,22,"/// getPassRegistry - Access the global registry object, which is; /// automatically initialized at application launch and destroyed by; /// llvm_shutdown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:38,Testability,test,testable,38,"// Some codegen passes should only be testable via; // `llc -{start|stop}-{before|after}=<passname>`, not via `opt -<passname>`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:182,Availability,avail,available,182,"//===---------------------------------------------------------------------------; /// RegisterPass<t> template - This template class is used to notify the system; /// that a Pass is available for use, and registers it into the internal; /// database maintained by the PassManager. Unless this template is used, opt,; /// for example will not be able to see the pass and attempts to create the pass; /// will fail. This template is used in the follow manner (at global scope, in; /// your .cpp file):; ///; /// static RegisterPass<YourPassClassName> tmp(""passopt"", ""My Pass Name"");; ///; /// This statement will cause your pass to be created by calling the default; /// constructor exposed by the pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:681,Security,expose,exposed,681,"//===---------------------------------------------------------------------------; /// RegisterPass<t> template - This template class is used to notify the system; /// that a Pass is available for use, and registers it into the internal; /// database maintained by the PassManager. Unless this template is used, opt,; /// for example will not be able to see the pass and attempts to create the pass; /// will fail. This template is used in the follow manner (at global scope, in; /// your .cpp file):; ///; /// static RegisterPass<YourPassClassName> tmp(""passopt"", ""My Pass Name"");; ///; /// This statement will cause your pass to be created by calling the default; /// constructor exposed by the pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:277,Availability,avail,available,277,"/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.; /// Analysis groups are used to define an interface (which need not derive from; /// Pass) that is required by passes to do their job. Analysis Groups differ; /// from normal analyses because any available implementation of the group will; /// be used if it is available.; ///; /// If no analysis implementing the interface is available, a default; /// implementation is created and added. A pass registers itself as the default; /// implementation by specifying 'true' as the second template argument of this; /// class.; ///; /// In addition to registering itself as an analysis group member, a pass must; /// register itself normally as well. Passes may be members of multiple groups; /// and may still be ""required"" specifically by name.; ///; /// The actual interface may also be registered as well (by not specifying the; /// second template argument). The interface should be registered to associate; /// a nice name with the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:342,Availability,avail,available,342,"/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.; /// Analysis groups are used to define an interface (which need not derive from; /// Pass) that is required by passes to do their job. Analysis Groups differ; /// from normal analyses because any available implementation of the group will; /// be used if it is available.; ///; /// If no analysis implementing the interface is available, a default; /// implementation is created and added. A pass registers itself as the default; /// implementation by specifying 'true' as the second template argument of this; /// class.; ///; /// In addition to registering itself as an analysis group member, a pass must; /// register itself normally as well. Passes may be members of multiple groups; /// and may still be ""required"" specifically by name.; ///; /// The actual interface may also be registered as well (by not specifying the; /// second template argument). The interface should be registered to associate; /// a nice name with the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:408,Availability,avail,available,408,"/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.; /// Analysis groups are used to define an interface (which need not derive from; /// Pass) that is required by passes to do their job. Analysis Groups differ; /// from normal analyses because any available implementation of the group will; /// be used if it is available.; ///; /// If no analysis implementing the interface is available, a default; /// implementation is created and added. A pass registers itself as the default; /// implementation by specifying 'true' as the second template argument of this; /// class.; ///; /// In addition to registering itself as an analysis group member, a pass must; /// register itself normally as well. Passes may be members of multiple groups; /// and may still be ""required"" specifically by name.; ///; /// The actual interface may also be registered as well (by not specifying the; /// second template argument). The interface should be registered to associate; /// a nice name with the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:123,Integrability,interface,interface,123,"/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.; /// Analysis groups are used to define an interface (which need not derive from; /// Pass) that is required by passes to do their job. Analysis Groups differ; /// from normal analyses because any available implementation of the group will; /// be used if it is available.; ///; /// If no analysis implementing the interface is available, a default; /// implementation is created and added. A pass registers itself as the default; /// implementation by specifying 'true' as the second template argument of this; /// class.; ///; /// In addition to registering itself as an analysis group member, a pass must; /// register itself normally as well. Passes may be members of multiple groups; /// and may still be ""required"" specifically by name.; ///; /// The actual interface may also be registered as well (by not specifying the; /// second template argument). The interface should be registered to associate; /// a nice name with the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:395,Integrability,interface,interface,395,"/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.; /// Analysis groups are used to define an interface (which need not derive from; /// Pass) that is required by passes to do their job. Analysis Groups differ; /// from normal analyses because any available implementation of the group will; /// be used if it is available.; ///; /// If no analysis implementing the interface is available, a default; /// implementation is created and added. A pass registers itself as the default; /// implementation by specifying 'true' as the second template argument of this; /// class.; ///; /// In addition to registering itself as an analysis group member, a pass must; /// register itself normally as well. Passes may be members of multiple groups; /// and may still be ""required"" specifically by name.; ///; /// The actual interface may also be registered as well (by not specifying the; /// second template argument). The interface should be registered to associate; /// a nice name with the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:844,Integrability,interface,interface,844,"/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.; /// Analysis groups are used to define an interface (which need not derive from; /// Pass) that is required by passes to do their job. Analysis Groups differ; /// from normal analyses because any available implementation of the group will; /// be used if it is available.; ///; /// If no analysis implementing the interface is available, a default; /// implementation is created and added. A pass registers itself as the default; /// implementation by specifying 'true' as the second template argument of this; /// class.; ///; /// In addition to registering itself as an analysis group member, a pass must; /// register itself normally as well. Passes may be members of multiple groups; /// and may still be ""required"" specifically by name.; ///; /// The actual interface may also be registered as well (by not specifying the; /// second template argument). The interface should be registered to associate; /// a nice name with the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:944,Integrability,interface,interface,944,"/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.; /// Analysis groups are used to define an interface (which need not derive from; /// Pass) that is required by passes to do their job. Analysis Groups differ; /// from normal analyses because any available implementation of the group will; /// be used if it is available.; ///; /// If no analysis implementing the interface is available, a default; /// implementation is created and added. A pass registers itself as the default; /// implementation by specifying 'true' as the second template argument of this; /// class.; ///; /// In addition to registering itself as an analysis group member, a pass must; /// register itself normally as well. Passes may be members of multiple groups; /// and may still be ""required"" specifically by name.; ///; /// The actual interface may also be registered as well (by not specifying the; /// second template argument). The interface should be registered to associate; /// a nice name with the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:1014,Integrability,interface,interface,1014,"/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.; /// Analysis groups are used to define an interface (which need not derive from; /// Pass) that is required by passes to do their job. Analysis Groups differ; /// from normal analyses because any available implementation of the group will; /// be used if it is available.; ///; /// If no analysis implementing the interface is available, a default; /// implementation is created and added. A pass registers itself as the default; /// implementation by specifying 'true' as the second template argument of this; /// class.; ///; /// In addition to registering itself as an analysis group member, a pass must; /// register itself normally as well. Passes may be members of multiple groups; /// and may still be ""required"" specifically by name.; ///; /// The actual interface may also be registered as well (by not specifying the; /// second template argument). The interface should be registered to associate; /// a nice name with the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:402,Performance,load,loaded,402,"//===---------------------------------------------------------------------------; /// PassRegistrationListener class - This class is meant to be derived from by; /// clients that are interested in which passes get registered and unregistered; /// at runtime (which can be because of the RegisterPass constructors being run; /// as the program starts up, or may be because a shared object just got; /// loaded).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:72,Performance,load,loaded,72,/// Callback functions - These functions are invoked whenever a pass is loaded; /// or removed from the current executable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h:207,Energy Efficiency,efficient,efficiently,207,"/// The AddressRangesBase class presents the base functionality for the; /// normalized address ranges collection. This class keeps a sorted vector; /// of AddressRange-like objects and can perform searches efficiently.; /// The address ranges are always sorted and never contain any invalid,; /// empty or intersected address ranges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h:190,Performance,perform,perform,190,"/// The AddressRangesBase class presents the base functionality for the; /// normalized address ranges collection. This class keeps a sorted vector; /// of AddressRange-like objects and can perform searches efficiently.; /// The address ranges are always sorted and never contain any invalid,; /// empty or intersected address ranges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h:178,Energy Efficiency,efficient,efficiently,178,"/// The AddressRanges class helps normalize address range collections.; /// This class keeps a sorted vector of AddressRange objects and can perform; /// insertions and searches efficiently. Intersecting([100,200), [150,300)); /// and adjacent([100,200), [200,300)) address ranges are combined during; /// insertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h:141,Performance,perform,perform,141,"/// The AddressRanges class helps normalize address range collections.; /// This class keeps a sorted vector of AddressRange objects and can perform; /// insertions and searches efficiently. Intersecting([100,200), [150,300)); /// and adjacent([100,200), [200,300)) address ranges are combined during; /// insertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h:244,Energy Efficiency,efficient,efficiently,244,"/// AddressRangesMap class maps values to the address ranges.; /// It keeps normalized address ranges and corresponding values.; /// This class keeps a sorted vector of AddressRangeValuePair objects; /// and can perform insertions and searches efficiently.; /// Intersecting([100,200), [150,300)) ranges splitted into non-conflicting; /// parts([100,200), [200,300)). Adjacent([100,200), [200,300)) address; /// ranges are not combined during insertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h:212,Performance,perform,perform,212,"/// AddressRangesMap class maps values to the address ranges.; /// It keeps normalized address ranges and corresponding values.; /// This class keeps a sorted vector of AddressRangeValuePair objects; /// and can perform insertions and searches efficiently.; /// Intersecting([100,200), [150,300)) ranges splitted into non-conflicting; /// parts([100,200), [200,300)). Adjacent([100,200), [200,300)) address; /// ranges are not combined during insertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AddressRanges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:33,Integrability,depend,dependent,33,"//===- llvm/ADT/ADL.h - Argument dependent lookup utilities -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:94,Testability,test,test,94,// Only used by compiler if both template types are the same. Useful when; // using SFINAE to test for the existence of member functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:132,Integrability,Depend,Dependent,132,// end namespace adl_detail; /// Returns the begin iterator to \p range using `std::begin` and; /// function found through Argument-Dependent Lookup (ADL).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:100,Integrability,Depend,Dependent,100,/// Returns the end iterator to \p range using `std::end` and; /// functions found through Argument-Dependent Lookup (ADL).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:89,Integrability,Depend,Dependent,89,/// Swaps \p lhs with \p rhs using `std::swap` and functions found through; /// Argument-Dependent Lookup (ADL).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:93,Integrability,Depend,Dependent,93,/// Returns the size of \p range using `std::size` and functions found through; /// Argument-Dependent Lookup (ADL).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h:84,Integrability,interface,interface,84,"/// A linked-list with a custom, local allocator.; ///; /// Expose a std::list-like interface that owns and uses a custom LLVM-style; /// allocator (e.g., BumpPtrAllocator), leveraging \a simple_ilist for the; /// implementation details.; ///; /// Because this list owns the allocator, calling \a splice() with a different; /// list isn't generally safe. As such, \a splice has been left out of the; /// interface entirely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h:404,Integrability,interface,interface,404,"/// A linked-list with a custom, local allocator.; ///; /// Expose a std::list-like interface that owns and uses a custom LLVM-style; /// allocator (e.g., BumpPtrAllocator), leveraging \a simple_ilist for the; /// implementation details.; ///; /// Because this list owns the allocator, calling \a splice() with a different; /// list isn't generally safe. As such, \a splice has been left out of the; /// interface entirely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h:349,Safety,safe,safe,349,"/// A linked-list with a custom, local allocator.; ///; /// Expose a std::list-like interface that owns and uses a custom LLVM-style; /// allocator (e.g., BumpPtrAllocator), leveraging \a simple_ilist for the; /// implementation details.; ///; /// Because this list owns the allocator, calling \a splice() with a different; /// list isn't generally safe. As such, \a splice has been left out of the; /// interface entirely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h:60,Security,Expose,Expose,60,"/// A linked-list with a custom, local allocator.; ///; /// Expose a std::list-like interface that owns and uses a custom LLVM-style; /// allocator (e.g., BumpPtrAllocator), leveraging \a simple_ilist for the; /// implementation details.; ///; /// Because this list owns the allocator, calling \a splice() with a different; /// list isn't generally safe. As such, \a splice has been left out of the; /// interface entirely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/AllocatorList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h:511,Safety,safe,safe,511,"//===- Any.h - Generic type erased holder of any type -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides Any, a non-template class modeled in the spirit of; /// std::any. The idea is to provide a type-safe replacement for C's void*.; /// It can hold a value of any copy-constructible copy-assignable type; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Any.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h:202,Performance,load,loader,202,"// The `Typeid<T>::Id` static data member below is a globally unique; // identifier for the type `T`. It is explicitly marked with default; // visibility so that when `-fvisibility=hidden` is used, the loader still; // merges duplicate definitions across DSO boundaries.; // We also cannot mark it as `const`, otherwise msvc merges all definitions; // when lto is enabled, making any comparison return true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Any.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h:214,Availability,error,errors,214,"// Define the type id and initialize with a non-zero value.; // Initializing with a zero value means the variable can end up in either the; // .data or the .bss section. This can lead to multiple definition linker errors; // when some object files are compiled with a compiler that puts the variable; // into .data but they are linked to object files from a different compiler that; // put the variable into .bss. To prevent this issue from happening, initialize; // the variable with a non-zero value, which forces it to land in .data (because; // .bss is zero-initialized).; // See also https://github.com/llvm/llvm-project/issues/62270",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Any.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h:105,Modifiability,variab,variable,105,"// Define the type id and initialize with a non-zero value.; // Initializing with a zero value means the variable can end up in either the; // .data or the .bss section. This can lead to multiple definition linker errors; // when some object files are compiled with a compiler that puts the variable; // into .data but they are linked to object files from a different compiler that; // put the variable into .bss. To prevent this issue from happening, initialize; // the variable with a non-zero value, which forces it to land in .data (because; // .bss is zero-initialized).; // See also https://github.com/llvm/llvm-project/issues/62270",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Any.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h:291,Modifiability,variab,variable,291,"// Define the type id and initialize with a non-zero value.; // Initializing with a zero value means the variable can end up in either the; // .data or the .bss section. This can lead to multiple definition linker errors; // when some object files are compiled with a compiler that puts the variable; // into .data but they are linked to object files from a different compiler that; // put the variable into .bss. To prevent this issue from happening, initialize; // the variable with a non-zero value, which forces it to land in .data (because; // .bss is zero-initialized).; // See also https://github.com/llvm/llvm-project/issues/62270",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Any.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h:394,Modifiability,variab,variable,394,"// Define the type id and initialize with a non-zero value.; // Initializing with a zero value means the variable can end up in either the; // .data or the .bss section. This can lead to multiple definition linker errors; // when some object files are compiled with a compiler that puts the variable; // into .data but they are linked to object files from a different compiler that; // put the variable into .bss. To prevent this issue from happening, initialize; // the variable with a non-zero value, which forces it to land in .data (because; // .bss is zero-initialized).; // See also https://github.com/llvm/llvm-project/issues/62270",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Any.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h:471,Modifiability,variab,variable,471,"// Define the type id and initialize with a non-zero value.; // Initializing with a zero value means the variable can end up in either the; // .data or the .bss section. This can lead to multiple definition linker errors; // when some object files are compiled with a compiler that puts the variable; // into .data but they are linked to object files from a different compiler that; // put the variable into .bss. To prevent this issue from happening, initialize; // the variable with a non-zero value, which forces it to land in .data (because; // .bss is zero-initialized).; // See also https://github.com/llvm/llvm-project/issues/62270",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Any.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h:427,Integrability,interface,interface,427,"//===- APFixedPoint.h - Fixed point constant handling -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the fixed point number interface.; /// This is a class for abstracting various operations performed on fixed point; /// types.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h:494,Performance,perform,performed,494,"//===- APFixedPoint.h - Fixed point constant handling -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the fixed point number interface.; /// This is a class for abstracting various operations performed on fixed point; /// types.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h:386,Performance,perform,performed,386,"/// The APFixedPoint class works similarly to APInt/APSInt in that it is a; /// functional replacement for a scaled integer. It supports a wide range of; /// semantics including the one used by fixed point types proposed in ISO/IEC; /// JTC1 SC22 WG14 N1169. The class carries the value and semantics of; /// a fixed point, and provides different operations that would normally be; /// performed on fixed point types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h:3,Performance,Perform,Perform,3,"// Perform binary operations on a fixed point type. The resulting fixed point; // value will be in the common, full precision semantics that can represent; // the precision and ranges of both input values. See convert() for an; // explanation of the Overflow parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h:3,Performance,Perform,Perform,3,"// Perform shift operations on a fixed point type. Unlike the other binary; // operations, the resulting fixed point value will be in the original; // semantic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h:4,Performance,Perform,Perform,4,"/// Perform a unary negation (-X) on this fixed point type, taking into; /// account saturation if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFixedPoint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:1548,Availability,mask,mask,1548,"ance should nonetheless be reasonable,; /// particularly for its intended use. It may be useful as a base; /// implementation for a run-time library during development of a faster; /// target-specific one.; ///; /// All 5 rounding modes in the IEEE-754R draft are handled correctly for all; /// implemented operations. Currently implemented operations are add, subtract,; /// multiply, divide, fused-multiply-add, conversion-to-float,; /// conversion-to-integer and conversion-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the specified rounding mode.; /// Syntax is required to have been validated by the caller. It also converts; /// floating point numbers to hexadecimal text as per the C99 %a and %A; /// conversions. The output precision (or alternatively the natural minimal; /// precision) can be specified; if the requested precision is less ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:1259,Modifiability,extend,extended,1259," will work with bignum integers whose parts are; /// any unsigned type at least 16 bits wide, but 64 bits is recommended.; ///; /// Written for clarity rather than speed, in particular with a view to use in; /// the front-end of a cross compiler so that target arithmetic can be correctly; /// performed on the host. Performance should nonetheless be reasonable,; /// particularly for its intended use. It may be useful as a base; /// implementation for a run-time library during development of a faster; /// target-specific one.; ///; /// All 5 rounding modes in the IEEE-754R draft are handled correctly for all; /// implemented operations. Currently implemented operations are add, subtract,; /// multiply, divide, fused-multiply-add, conversion-to-float,; /// conversion-to-integer and conversion-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:1306,Modifiability,extend,extended,1306," will work with bignum integers whose parts are; /// any unsigned type at least 16 bits wide, but 64 bits is recommended.; ///; /// Written for clarity rather than speed, in particular with a view to use in; /// the front-end of a cross compiler so that target arithmetic can be correctly; /// performed on the host. Performance should nonetheless be reasonable,; /// particularly for its intended use. It may be useful as a base; /// implementation for a run-time library during development of a faster; /// target-specific one.; ///; /// All 5 rounding modes in the IEEE-754R draft are handled correctly for all; /// implemented operations. Currently implemented operations are add, subtract,; /// multiply, divide, fused-multiply-add, conversion-to-float,; /// conversion-to-integer and conversion-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:4413,Modifiability,extend,extended,4413,"imal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not currently implemented.; ///; /// Non-zero finite numbers are represented internally as a sign bit, a 16-bit; /// signed exponent, and the significand as an array of integer parts. After; /// normalization of a number of precision P the exponent is within the range of; /// the format, and if the number is not denormal the P-th bit of the; /// significand is set as an explicit integer bit. For denormals the most; /// significant bit is shifted right so that the exponent is maintained at the; /// format's minimum, so that the smallest denormal has just the least; /// significant bit of the significand set. The sign of zeroes and infinities; /// is significant; the exponent and significand of such numbers is not stored,; /// but has a known implicit (deterministic) value: 0 for the significands, 0; /// for zero exponent, all 1 bits for infinity exponent. For NaNs the sign and; /// significand are deterministic, although not really meaningful, and preserved; /// in non-conversion operations. The exponent is implicitly all 1 bits.; ///; /// APFloat does not provide any exception handling beyond default exception; /// handling. We represent Signaling NaNs via IEEE-754R 2008 6.2.1 should clause; /// by encoding Signaling NaNs with the first bit of its trailing significand as; /// 0.; ///; /// TODO; /// ====; ///; /// Some features that may or may not be worth adding:; ///; /// Binary to decimal conversion (hard).; ///; /// Optional ability to detect underflow tininess before rounding.; ///; /// New formats: x87 in single and double precision mode (IEEE apart from; /// extended exponent range) (hard).; ///; /// New operations: sqrt, IEEE remainder, C90 fmod, nexttoward.; ///; // This is the common type definitions shared by APFloat and its internal; // implementation classes. This struct should not define any non-static data; // members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:526,Performance,perform,performed,526,"/// A self-contained host- and target-independent arbitrary-precision; /// floating-point software implementation.; ///; /// APFloat uses bignum integer arithmetic as provided by static functions in; /// the APInt class. The library will work with bignum integers whose parts are; /// any unsigned type at least 16 bits wide, but 64 bits is recommended.; ///; /// Written for clarity rather than speed, in particular with a view to use in; /// the front-end of a cross compiler so that target arithmetic can be correctly; /// performed on the host. Performance should nonetheless be reasonable,; /// particularly for its intended use. It may be useful as a base; /// implementation for a run-time library during development of a faster; /// target-specific one.; ///; /// All 5 rounding modes in the IEEE-754R draft are handled correctly for all; /// implemented operations. Currently implemented operations are add, subtract,; /// multiply, divide, fused-multiply-add, conversion-to-float,; /// conversion-to-integer and conversion-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detecte",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:549,Performance,Perform,Performance,549,"/// A self-contained host- and target-independent arbitrary-precision; /// floating-point software implementation.; ///; /// APFloat uses bignum integer arithmetic as provided by static functions in; /// the APInt class. The library will work with bignum integers whose parts are; /// any unsigned type at least 16 bits wide, but 64 bits is recommended.; ///; /// Written for clarity rather than speed, in particular with a view to use in; /// the front-end of a cross compiler so that target arithmetic can be correctly; /// performed on the host. Performance should nonetheless be reasonable,; /// particularly for its intended use. It may be useful as a base; /// implementation for a run-time library during development of a faster; /// target-specific one.; ///; /// All 5 rounding modes in the IEEE-754R draft are handled correctly for all; /// implemented operations. Currently implemented operations are add, subtract,; /// multiply, divide, fused-multiply-add, conversion-to-float,; /// conversion-to-integer and conversion-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detecte",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:1814,Performance,optimiz,optimizers,1814,"rrectly for all; /// implemented operations. Currently implemented operations are add, subtract,; /// multiply, divide, fused-multiply-add, conversion-to-float,; /// conversion-to-integer and conversion-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the specified rounding mode.; /// Syntax is required to have been validated by the caller. It also converts; /// floating point numbers to hexadecimal text as per the C99 %a and %A; /// conversions. The output precision (or alternatively the natural minimal; /// precision) can be specified; if the requested precision is less than the; /// natural precision the output is correctly rounded for the specified rounding; /// mode.; ///; /// It also reads decimal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not curre",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:1902,Performance,optimiz,optimize,1902,"rrectly for all; /// implemented operations. Currently implemented operations are add, subtract,; /// multiply, divide, fused-multiply-add, conversion-to-float,; /// conversion-to-integer and conversion-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the specified rounding mode.; /// Syntax is required to have been validated by the caller. It also converts; /// floating point numbers to hexadecimal text as per the C99 %a and %A; /// conversions. The output precision (or alternatively the natural minimal; /// precision) can be specified; if the requested precision is less than the; /// natural precision the output is correctly rounded for the specified rounding; /// mode.; ///; /// It also reads decimal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not curre",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:1927,Performance,optimiz,optimize,1927,"rrectly for all; /// implemented operations. Currently implemented operations are add, subtract,; /// multiply, divide, fused-multiply-add, conversion-to-float,; /// conversion-to-integer and conversion-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the specified rounding mode.; /// Syntax is required to have been validated by the caller. It also converts; /// floating point numbers to hexadecimal text as per the C99 %a and %A; /// conversions. The output precision (or alternatively the natural minimal; /// precision) can be specified; if the requested precision is less than the; /// natural precision the output is correctly rounded for the specified rounding; /// mode.; ///; /// It also reads decimal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not curre",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:1994,Safety,detect,detected,1994,"version-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the specified rounding mode.; /// Syntax is required to have been validated by the caller. It also converts; /// floating point numbers to hexadecimal text as per the C99 %a and %A; /// conversions. The output precision (or alternatively the natural minimal; /// precision) can be specified; if the requested precision is less than the; /// natural precision the output is correctly rounded for the specified rounding; /// mode.; ///; /// It also reads decimal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not currently implemented.; ///; /// Non-zero finite numbers are represented internally as a sign bit, a 16-bit; /// signed exponent, and the significand as an array of integer parts. After; /// normaliza",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:4285,Safety,detect,detect,4285,"imal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not currently implemented.; ///; /// Non-zero finite numbers are represented internally as a sign bit, a 16-bit; /// signed exponent, and the significand as an array of integer parts. After; /// normalization of a number of precision P the exponent is within the range of; /// the format, and if the number is not denormal the P-th bit of the; /// significand is set as an explicit integer bit. For denormals the most; /// significant bit is shifted right so that the exponent is maintained at the; /// format's minimum, so that the smallest denormal has just the least; /// significant bit of the significand set. The sign of zeroes and infinities; /// is significant; the exponent and significand of such numbers is not stored,; /// but has a known implicit (deterministic) value: 0 for the significands, 0; /// for zero exponent, all 1 bits for infinity exponent. For NaNs the sign and; /// significand are deterministic, although not really meaningful, and preserved; /// in non-conversion operations. The exponent is implicitly all 1 bits.; ///; /// APFloat does not provide any exception handling beyond default exception; /// handling. We represent Signaling NaNs via IEEE-754R 2008 6.2.1 should clause; /// by encoding Signaling NaNs with the first bit of its trailing significand as; /// 0.; ///; /// TODO; /// ====; ///; /// Some features that may or may not be worth adding:; ///; /// Binary to decimal conversion (hard).; ///; /// Optional ability to detect underflow tininess before rounding.; ///; /// New formats: x87 in single and double precision mode (IEEE apart from; /// extended exponent range) (hard).; ///; /// New operations: sqrt, IEEE remainder, C90 fmod, nexttoward.; ///; // This is the common type definitions shared by APFloat and its internal; // implementation classes. This struct should not define any non-static data; // members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:2296,Security,validat,validated,2296,"g with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the specified rounding mode.; /// Syntax is required to have been validated by the caller. It also converts; /// floating point numbers to hexadecimal text as per the C99 %a and %A; /// conversions. The output precision (or alternatively the natural minimal; /// precision) can be specified; if the requested precision is less than the; /// natural precision the output is correctly rounded for the specified rounding; /// mode.; ///; /// It also reads decimal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not currently implemented.; ///; /// Non-zero finite numbers are represented internally as a sign bit, a 16-bit; /// signed exponent, and the significand as an array of integer parts. After; /// normalization of a number of precision P the exponent is within the range of; /// the format, and if the number is not denormal the P-th bit of the; /// significand is set as an explicit integer bit. For denormals the most; /// significant bit is shifted right so that the",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:160,Performance,throughput,throughput,160,"// Floating point number that occupies 32 bits or less of storage, providing; // improved range compared to half (16-bit) formats, at (potentially); // greater throughput than single precision (32-bit) formats.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:28,Availability,error,error,28,/// Enumeration of \c ilogb error results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:42,Energy Efficiency,allocate,allocated,42,/// @}; /// Returns whether this instance allocated memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:18,Usability,Simpl,Simple,18,/// @}; /// \name Simple Queries; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:26,Security,hash,hash,26,"/// Overload to compute a hash code for an APFloat value.; ///; /// Note that the use of hash codes for floating point values is in general; /// frought with peril. Equality is hard to define for these values. For; /// example, should negative and positive zero hash to different codes? Are; /// they equal or not? This hash value implementation specifically; /// emphasizes producing different codes for different inputs in order to; /// be used in canonicalization and memoization. As such, equality is; /// bitwiseIsEqual, and 0 != -0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:89,Security,hash,hash,89,"/// Overload to compute a hash code for an APFloat value.; ///; /// Note that the use of hash codes for floating point values is in general; /// frought with peril. Equality is hard to define for these values. For; /// example, should negative and positive zero hash to different codes? Are; /// they equal or not? This hash value implementation specifically; /// emphasizes producing different codes for different inputs in order to; /// be used in canonicalization and memoization. As such, equality is; /// bitwiseIsEqual, and 0 != -0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:262,Security,hash,hash,262,"/// Overload to compute a hash code for an APFloat value.; ///; /// Note that the use of hash codes for floating point values is in general; /// frought with peril. Equality is hard to define for these values. For; /// example, should negative and positive zero hash to different codes? Are; /// they equal or not? This hash value implementation specifically; /// emphasizes producing different codes for different inputs in order to; /// be used in canonicalization and memoization. As such, equality is; /// bitwiseIsEqual, and 0 != -0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:320,Security,hash,hash,320,"/// Overload to compute a hash code for an APFloat value.; ///; /// Note that the use of hash codes for floating point values is in general; /// frought with peril. Equality is hard to define for these values. For; /// example, should negative and positive zero hash to different codes? Are; /// they equal or not? This hash value implementation specifically; /// emphasizes producing different codes for different inputs in order to; /// be used in canonicalization and memoization. As such, equality is; /// bitwiseIsEqual, and 0 != -0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:164,Availability,avail,available,164,"/// Converts this value into a decimal string.; ///; /// \param FormatPrecision The maximum number of digits of; /// precision to output. If there are fewer digits available,; /// zero padding will not be used unless the value is; /// integral and small enough to be expressed in; /// FormatPrecision digits. 0 means to use the natural; /// precision of the number.; /// \param FormatMaxPadding The maximum number of zeros to; /// consider inserting before falling back to scientific; /// notation. 0 means to always use scientific notation.; ///; /// \param TruncateZero Indicate whether to remove the trailing zero in; /// fraction part or not. Also setting this parameter to false forcing; /// producing of output more similar to default printf behavior.; /// Specifically the lower e is used as exponent delimiter and exponent; /// always contains no less than two digits.; ///; /// Number Precision MaxPadding Result; /// ------ --------- ---------- ------; /// 1.01E+4 5 2 10100; /// 1.01E+4 4 2 1.01E+4; /// 1.01E+4 5 1 1.01E+4; /// 1.01E-2 5 2 0.0101; /// 1.01E-2 4 2 0.0101; /// 1.01E-2 4 1 1.01E-2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:23,Energy Efficiency,power,power,23,"// If this is an exact power of two, return the exponent while ignoring the; // sign bit. If it's not an exact power of 2, return INT_MIN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:111,Energy Efficiency,power,power,111,"// If this is an exact power of two, return the exponent while ignoring the; // sign bit. If it's not an exact power of 2, return INT_MIN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:23,Energy Efficiency,power,power,23,"// If this is an exact power of two, return the exponent. If it's not an exact; // power of 2, return INT_MIN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:83,Energy Efficiency,power,power,83,"// If this is an exact power of two, return the exponent. If it's not an exact; // power of 2, return INT_MIN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:209,Availability,error,error,209,"/// Returns the exponent of the internal representation of the APFloat.; ///; /// Because the radix of APFloat is 2, this is equivalent to floor(log2(x)).; /// For special APFloat values, this returns special error codes:; ///; /// NaN -> \c IEK_NaN; /// 0 -> \c IEK_Zero; /// Inf -> \c IEK_Inf; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:10,Usability,Simpl,Simple,10,/// \name Simple Queries; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:118,Modifiability,extend,extends,118,"/// What kind of floating point number this is.; ///; /// Only 2 bits are required, but VisualStudio incorrectly sign extends it.; /// Using the extra bit keeps it from failing under VisualStudio.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:77,Integrability,interface,interface,77,"// This mode implements more precise float in terms of two APFloats.; // The interface and layout is designed for arbitrary underlying semantics,; // though currently only PPCDoubleDouble semantics are supported, whose; // corresponding underlying semantics are IEEEdouble.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:38,Integrability,interface,interface,38,// End detail namespace; // This is a interface class that is currently forwarding functionalities from; // detail::IEEEFloat.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:65,Availability,error,error,65,"/// Add two APFloats, rounding ties to the nearest even.; /// No error checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:70,Availability,error,error,70,"/// Subtract two APFloats, rounding ties to the nearest even.; /// No error checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:70,Availability,error,error,70,"/// Multiply two APFloats, rounding ties to the nearest even.; /// No error checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:87,Availability,error,error,87,"/// Divide the first APFloat by the second, rounding ties to the nearest even.; /// No error checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:432,Testability,log,logic,432,"/// We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.; ///; /// We leave the version with the double argument here because it's just so; /// convenient to write ""2.0"" and the like. Without this function we'd; /// have to duplicate its logic everywhere it's called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:102,Usability,clear,clearly,102,"/// We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.; ///; /// We leave the version with the double argument here because it's just so; /// convenient to write ""2.0"" and the like. Without this function we'd; /// have to duplicate its logic everywhere it's called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:41,Availability,avail,available,41,"// We want the following functions to be available in the header for inlining.; // We cannot define them inline in the class definition of `DoubleAPFloat`; // because doing so would instantiate `std::unique_ptr<APFloat[]>` before; // `APFloat` is defined, and that would be undefined behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:2002,Security,hash,hash,2002,"----------===//; // APInt Class; //===----------------------------------------------------------------------===//; /// Class for arbitrary precision integers.; ///; /// APInt is a functional replacement for common case unsigned integer type like; /// ""unsigned"", ""unsigned long"" or ""uint64_t"", but also allows non-byte-width; /// integer sizes and large integer value types such as 3-bits, 15-bits, or more; /// than 64-bits of precision. APInt provides a variety of arithmetic operators; /// and methods to manipulate integer values of any bit-width. It supports both; /// the typical integer arithmetic and comparison operations as well as bitwise; /// manipulation.; ///; /// The class has several invariants worth noting:; /// * All bit, byte, and word positions are zero-based.; /// * Once the bit width is set, it doesn't change except by the Truncate,; /// SignExtend, or ZeroExtend operations.; /// * All binary operators must be on APInt instances of the same bit width.; /// Attempting to use these operators on instances with different bit; /// widths will yield an assertion.; /// * The value is stored canonically as an unsigned value. For operations; /// where it makes a difference, there are both signed and unsigned variants; /// of the operation. For example, sdiv and udiv. However, because the bit; /// widths must be the same, operations such as Mul and Add produce the same; /// results regardless of whether the values are interpreted as signed or; /// not.; /// * In general, the class tries to follow the style of computation that LLVM; /// uses in its IR. This simplifies its use for LLVM.; /// * APInt supports zero-bit-width values, but operations that require bits; /// are not defined on it (e.g. you cannot ask for the sign of a zero-bit; /// integer). This means that operations like zero extension and logical; /// shifts are defined, but sign extension and ashr is not. Zero bit values; /// compare and hash equal to themselves, and countLeadingZeros returns 0.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:1142,Testability,assert,assertion,1142,"----------===//; // APInt Class; //===----------------------------------------------------------------------===//; /// Class for arbitrary precision integers.; ///; /// APInt is a functional replacement for common case unsigned integer type like; /// ""unsigned"", ""unsigned long"" or ""uint64_t"", but also allows non-byte-width; /// integer sizes and large integer value types such as 3-bits, 15-bits, or more; /// than 64-bits of precision. APInt provides a variety of arithmetic operators; /// and methods to manipulate integer values of any bit-width. It supports both; /// the typical integer arithmetic and comparison operations as well as bitwise; /// manipulation.; ///; /// The class has several invariants worth noting:; /// * All bit, byte, and word positions are zero-based.; /// * Once the bit width is set, it doesn't change except by the Truncate,; /// SignExtend, or ZeroExtend operations.; /// * All binary operators must be on APInt instances of the same bit width.; /// Attempting to use these operators on instances with different bit; /// widths will yield an assertion.; /// * The value is stored canonically as an unsigned value. For operations; /// where it makes a difference, there are both signed and unsigned variants; /// of the operation. For example, sdiv and udiv. However, because the bit; /// widths must be the same, operations such as Mul and Add produce the same; /// results regardless of whether the values are interpreted as signed or; /// not.; /// * In general, the class tries to follow the style of computation that LLVM; /// uses in its IR. This simplifies its use for LLVM.; /// * APInt supports zero-bit-width values, but operations that require bits; /// are not defined on it (e.g. you cannot ask for the sign of a zero-bit; /// integer). This means that operations like zero extension and logical; /// shifts are defined, but sign extension and ashr is not. Zero bit values; /// compare and hash equal to themselves, and countLeadingZeros returns 0.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:1900,Testability,log,logical,1900,"----------===//; // APInt Class; //===----------------------------------------------------------------------===//; /// Class for arbitrary precision integers.; ///; /// APInt is a functional replacement for common case unsigned integer type like; /// ""unsigned"", ""unsigned long"" or ""uint64_t"", but also allows non-byte-width; /// integer sizes and large integer value types such as 3-bits, 15-bits, or more; /// than 64-bits of precision. APInt provides a variety of arithmetic operators; /// and methods to manipulate integer values of any bit-width. It supports both; /// the typical integer arithmetic and comparison operations as well as bitwise; /// manipulation.; ///; /// The class has several invariants worth noting:; /// * All bit, byte, and word positions are zero-based.; /// * Once the bit width is set, it doesn't change except by the Truncate,; /// SignExtend, or ZeroExtend operations.; /// * All binary operators must be on APInt instances of the same bit width.; /// Attempting to use these operators on instances with different bit; /// widths will yield an assertion.; /// * The value is stored canonically as an unsigned value. For operations; /// where it makes a difference, there are both signed and unsigned variants; /// of the operation. For example, sdiv and udiv. However, because the bit; /// widths must be the same, operations such as Mul and Add produce the same; /// results regardless of whether the values are interpreted as signed or; /// not.; /// * In general, the class tries to follow the style of computation that LLVM; /// uses in its IR. This simplifies its use for LLVM.; /// * APInt supports zero-bit-width values, but operations that require bits; /// are not defined on it (e.g. you cannot ask for the sign of a zero-bit; /// integer). This means that operations like zero extension and logical; /// shifts are defined, but sign extension and ashr is not. Zero bit values; /// compare and hash equal to themselves, and countLeadingZeros returns 0.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:1652,Usability,simpl,simplifies,1652,"----------===//; // APInt Class; //===----------------------------------------------------------------------===//; /// Class for arbitrary precision integers.; ///; /// APInt is a functional replacement for common case unsigned integer type like; /// ""unsigned"", ""unsigned long"" or ""uint64_t"", but also allows non-byte-width; /// integer sizes and large integer value types such as 3-bits, 15-bits, or more; /// than 64-bits of precision. APInt provides a variety of arithmetic operators; /// and methods to manipulate integer values of any bit-width. It supports both; /// the typical integer arithmetic and comparison operations as well as bitwise; /// manipulation.; ///; /// The class has several invariants worth noting:; /// * All bit, byte, and word positions are zero-based.; /// * Once the bit width is set, it doesn't change except by the Truncate,; /// SignExtend, or ZeroExtend operations.; /// * All binary operators must be on APInt instances of the same bit width.; /// Attempting to use these operators on instances with different bit; /// widths will yield an assertion.; /// * The value is stored canonically as an unsigned value. For operations; /// where it makes a difference, there are both signed and unsigned variants; /// of the operation. For example, sdiv and udiv. However, because the bit; /// widths must be the same, operations such as Mul and Add produce the same; /// results regardless of whether the values are interpreted as signed or; /// not.; /// * In general, the class tries to follow the style of computation that LLVM; /// uses in its IR. This simplifies its use for LLVM.; /// * APInt supports zero-bit-width values, but operations that require bits; /// are not defined on it (e.g. you cannot ask for the sign of a zero-bit; /// integer). This means that operations like zero extension and logical; /// shifts are defined, but sign extension and ashr is not. Zero bit values; /// compare and hash equal to themselves, and countLeadingZeros returns 0.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:330,Availability,error,error,330,"/// Construct an APInt from a string representation.; ///; /// This constructor interprets the string \p str in the given radix. The; /// interpretation stops when the first character that is not suitable for the; /// radix is encountered, or the end of the string. Acceptable radix values; /// are 2, 8, 10, 16, and 36. It is an error for the value implied by the; /// string to require more bits than numBits.; ///; /// \param numBits the bit width of the constructed APInt; /// \param str the string to be interpreted; /// \param radix the radix to use for the conversion",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:72,Integrability,wrap,wrapper,72,"/// Get the SignMask for a specific bit width.; ///; /// This is just a wrapper function of getSignedMinValue(), and it helps code; /// readability when we want to get a SignMask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Integrability,Wrap,Wrap,4,"/// Wrap version of getBitsSet.; /// If \p hiBit is bigger than \p loBit, this is same with getBitsSet.; /// If \p hiBit is not bigger than \p loBit, the set bits ""wrap"". For example,; /// with parameters (32, 28, 4), you would get 0xF000000F.; /// If \p hiBit is equal to \p loBit, you would get a result with all bits; /// set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:164,Integrability,wrap,wrap,164,"/// Wrap version of getBitsSet.; /// If \p hiBit is bigger than \p loBit, this is same with getBitsSet.; /// If \p hiBit is not bigger than \p loBit, the set bits ""wrap"". For example,; /// with parameters (32, 28, 4), you would get 0xF000000F.; /// If \p hiBit is equal to \p loBit, you would get a result with all bits; /// set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:24,Testability,Test,Tests,24,"/// @}; /// \name Value Tests; /// @{; /// Determine if this APInt just has one word to store value.; ///; /// \returns true if the number of bits <= 64, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:49,Testability,test,tests,49,"/// Determine sign of this APInt.; ///; /// This tests the high bit of this APInt to determine if it is set.; ///; /// \returns true if this APInt is negative, false otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:72,Testability,test,tests,72,/// Determine if this APInt Value is non-negative (>= 0); ///; /// This tests the high bit of the APInt to determine if it is unset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:63,Testability,test,tests,63,"/// Determine if sign bit of this APInt is set.; ///; /// This tests the high bit of this APInt to determine if it is set.; ///; /// \returns true if this APInt has its sign bit set, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:65,Testability,test,tests,65,"/// Determine if sign bit of this APInt is clear.; ///; /// This tests the high bit of this APInt to determine if it is clear.; ///; /// \returns true if this APInt has its sign bit clear, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:43,Usability,clear,clear,43,"/// Determine if sign bit of this APInt is clear.; ///; /// This tests the high bit of this APInt to determine if it is clear.; ///; /// \returns true if this APInt has its sign bit clear, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:120,Usability,clear,clear,120,"/// Determine if sign bit of this APInt is clear.; ///; /// This tests the high bit of this APInt to determine if it is clear.; ///; /// \returns true if this APInt has its sign bit clear, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:182,Usability,clear,clear,182,"/// Determine if sign bit of this APInt is clear.; ///; /// This tests the high bit of this APInt to determine if it is clear.; ///; /// \returns true if this APInt has its sign bit clear, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:62,Testability,test,tests,62,/// Determine if this APInt Value is positive.; ///; /// This tests if the value of this APInt is positive (> 0). Note; /// that 0 is not a positive value.; ///; /// \returns true if this APInt is positive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:55,Usability,clear,clear,55,"/// Determine if this value is zero, i.e. all bits are clear.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:37,Energy Efficiency,power,power,37,/// Check if this APInt's value is a power of two greater than zero.; ///; /// \returns true if the argument APInt value is a power of two > 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:126,Energy Efficiency,power,power,126,/// Check if this APInt's value is a power of two greater than zero.; ///; /// \returns true if the argument APInt value is a power of two > 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:45,Energy Efficiency,power,power,45,/// Check if this APInt's negated value is a power of two greater than zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:29,Availability,mask,mask,29,// NegatedPowerOf2 - shifted mask in the top bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:96,Testability,test,test,96,/// Convert APInt to a boolean value.; ///; /// This converts the APInt to a boolean value as a test against zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:116,Availability,Mask,MaskIdx,116,"/// Return true if this APInt value contains a non-empty sequence of ones with; /// the remainder zero. If true, \p MaskIdx will specify the index of the; /// lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:181,Availability,Mask,MaskLen,181,"/// Return true if this APInt value contains a non-empty sequence of ones with; /// the remainder zero. If true, \p MaskIdx will specify the index of the; /// lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:234,Availability,mask,mask,234,"/// Return true if this APInt value contains a non-empty sequence of ones with; /// the remainder zero. If true, \p MaskIdx will specify the index of the; /// lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:192,Deployability,update,updated,192,"/// Return true if this APInt value contains a non-empty sequence of ones with; /// the remainder zero. If true, \p MaskIdx will specify the index of the; /// lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:257,Deployability,update,updated,257,"/// Return true if this APInt value contains a non-empty sequence of ones with; /// the remainder zero. If true, \p MaskIdx will specify the index of the; /// lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:137,Availability,mask,mask,137,"/// Compute an APInt containing numBits highbits from this APInt.; ///; /// Get an APInt with the same BitWidth as this APInt, just zero mask the low; /// bits and right shift to the least significant bit.; ///; /// \returns the high ""numBits"" bits of this APInt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:136,Availability,mask,mask,136,"/// Compute an APInt containing numBits lowbits from this APInt.; ///; /// Get an APInt with the same BitWidth as this APInt, just zero mask the high; /// bits.; ///; /// \returns the low ""numBits"" bits of this APInt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:60,Modifiability,extend,extending,60,"/// Determine if two APInts have the same value, after zero-extending; /// one of them (if needed!) to ensure that the bit-widths match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Testability,Log,Logical,4,"/// Logical negation operation on this APInt returns true if zero, like normal; /// integers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:47,Performance,Perform,Performs,47,/// Bitwise AND assignment operator.; ///; /// Performs a bitwise AND operation on this APInt and RHS. The result is; /// assigned to *this.; ///; /// \returns *this after ANDing with RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:130,Modifiability,extend,extended,130,/// Bitwise AND assignment operator.; ///; /// Performs a bitwise AND operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:47,Performance,Perform,Performs,47,/// Bitwise AND assignment operator.; ///; /// Performs a bitwise AND operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:115,Testability,log,logically,115,/// Bitwise AND assignment operator.; ///; /// Performs a bitwise AND operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:46,Performance,Perform,Performs,46,/// Bitwise OR assignment operator.; ///; /// Performs a bitwise OR operation on this APInt and RHS. The result is; /// assigned *this;; ///; /// \returns *this after ORing with RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:128,Modifiability,extend,extended,128,/// Bitwise OR assignment operator.; ///; /// Performs a bitwise OR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:46,Performance,Perform,Performs,46,/// Bitwise OR assignment operator.; ///; /// Performs a bitwise OR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:113,Testability,log,logically,113,/// Bitwise OR assignment operator.; ///; /// Performs a bitwise OR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:47,Performance,Perform,Performs,47,/// Bitwise XOR assignment operator.; ///; /// Performs a bitwise XOR operation on this APInt and RHS. The result is; /// assigned to *this.; ///; /// \returns *this after XORing with RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:130,Modifiability,extend,extended,130,/// Bitwise XOR assignment operator.; ///; /// Performs a bitwise XOR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:47,Performance,Perform,Performs,47,/// Bitwise XOR assignment operator.; ///; /// Performs a bitwise XOR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:115,Testability,log,logically,115,/// Bitwise XOR assignment operator.; ///; /// Performs a bitwise XOR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:9,Testability,log,logical,9,/// Left logical shift operator.; ///; /// Shifts this APInt left by \p Bits and returns the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:9,Testability,log,logical,9,/// Left logical shift operator.; ///; /// Shifts this APInt left by \p Bits and returns the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Testability,Log,Logical,4,/// Logical right-shift function.; ///; /// Logical right-shift this APInt by shiftAmt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:44,Testability,Log,Logical,44,/// Logical right-shift function.; ///; /// Logical right-shift this APInt by shiftAmt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Testability,Log,Logical,4,/// Logical right-shift this APInt by ShiftAmt in place.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,Testability,log,logical,13,/// relative logical shift right,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,Testability,log,logical,13,/// relative logical shift left,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Testability,Log,Logical,4,/// Logical right-shift function.; ///; /// Logical right-shift this APInt by shiftAmt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:44,Testability,Log,Logical,44,/// Logical right-shift function.; ///; /// Logical right-shift this APInt by shiftAmt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Testability,Log,Logical,4,/// Logical right-shift this APInt by ShiftAmt in place.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:43,Performance,Perform,Perform,43,"/// Unsigned division operation.; ///; /// Perform an unsigned divide operation on this APInt by RHS. Both this and; /// RHS are treated as unsigned quantities for purposes of this division.; ///; /// \returns a new APInt value containing the division result, rounded towards; /// zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:44,Performance,Perform,Perform,44,/// Unsigned remainder operation.; ///; /// Perform an unsigned remainder operation on this APInt with RHS being the; /// divisor. Both this and RHS are treated as unsigned quantities for purposes; /// of this operation.; ///; /// \returns a new APInt value containing the remainder result,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:240,Energy Efficiency,efficient,efficient,240,"/// Dual division/remainder interface.; ///; /// Sometimes it is convenient to divide two APInt values and obtain both the; /// quotient and remainder. This function does both operations in the same; /// computation making it a little more efficient. The pair of input arguments; /// may overlap with the pair of output arguments. It is safe to call; /// udivrem(X, Y, X, Y), for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:28,Integrability,interface,interface,28,"/// Dual division/remainder interface.; ///; /// Sometimes it is convenient to divide two APInt values and obtain both the; /// quotient and remainder. This function does both operations in the same; /// computation making it a little more efficient. The pair of input arguments; /// may overlap with the pair of output arguments. It is safe to call; /// udivrem(X, Y, X, Y), for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:337,Safety,safe,safe,337,"/// Dual division/remainder interface.; ///; /// Sometimes it is convenient to divide two APInt values and obtain both the; /// quotient and remainder. This function does both operations in the same; /// computation making it a little more efficient. The pair of input arguments; /// may overlap with the pair of output arguments. It is safe to call; /// udivrem(X, Y, X, Y), for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:19,Testability,test,tests,19,/// This operation tests if there are any pairs of corresponding bits; /// between this APInt and RHS that are both set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:133,Availability,error,error,133,/// @}; /// \name Resizing Operators; /// @{; /// Truncate to new width.; ///; /// Truncate the APInt to a specified width. It is an error to specify a width; /// that is greater than the current width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:208,Availability,error,error,208,"/// Sign extend to a new width.; ///; /// This operation sign extends the APInt to a new width. If the high order; /// bit is set, the fill on the left will be done with 1 bits, otherwise zero.; /// It is an error to specify a width that is less than the; /// current width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:9,Modifiability,extend,extend,9,"/// Sign extend to a new width.; ///; /// This operation sign extends the APInt to a new width. If the high order; /// bit is set, the fill on the left will be done with 1 bits, otherwise zero.; /// It is an error to specify a width that is less than the; /// current width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:62,Modifiability,extend,extends,62,"/// Sign extend to a new width.; ///; /// This operation sign extends the APInt to a new width. If the high order; /// bit is set, the fill on the left will be done with 1 bits, otherwise zero.; /// It is an error to specify a width that is less than the; /// current width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:154,Availability,error,error,154,/// Zero extend to a new width.; ///; /// This operation zero extends the APInt to a new width. The high order bits; /// are filled with 0 bits. It is an error to specify a width that is less; /// than the current width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:9,Modifiability,extend,extend,9,/// Zero extend to a new width.; ///; /// This operation zero extends the APInt to a new width. The high order bits; /// are filled with 0 bits. It is an error to specify a width that is less; /// than the current width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:62,Modifiability,extend,extends,62,/// Zero extend to a new width.; ///; /// This operation zero extends the APInt to a new width. The high order bits; /// are filled with 0 bits. It is an error to specify a width that is less; /// than the current width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:9,Modifiability,extend,extend,9,"/// Sign extend or truncate to width; ///; /// Make this APInt have the bit width given by \p width. The value is sign; /// extended, truncated, or left alone to make it that width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:124,Modifiability,extend,extended,124,"/// Sign extend or truncate to width; ///; /// Make this APInt have the bit width given by \p width. The value is sign; /// extended, truncated, or left alone to make it that width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:9,Modifiability,extend,extend,9,"/// Zero extend or truncate to width; ///; /// Make this APInt have the bit width given by \p width. The value is zero; /// extended, truncated, or left alone to make it that width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:124,Modifiability,extend,extended,124,"/// Zero extend or truncate to width; ///; /// Make this APInt have the bit width given by \p width. The value is zero; /// extended, truncated, or left alone to make it that width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:3,Usability,Clear,Clear,3,// Clear the unused ones,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:95,Integrability,wrap,wrap,95,"/// Set the bits from loBit (inclusive) to hiBit (exclusive) to 1.; /// This function handles ""wrap"" case when \p loBit >= \p hiBit, and calls; /// setBits when \p loBit < \p hiBit.; /// For \p loBit == \p hiBit wrap case, set every bit to 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:212,Integrability,wrap,wrap,212,"/// Set the bits from loBit (inclusive) to hiBit (exclusive) to 1.; /// This function handles ""wrap"" case when \p loBit >= \p hiBit, and calls; /// setBits when \p loBit < \p hiBit.; /// For \p loBit == \p hiBit wrap case, set every bit to 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Deployability,Toggle,Toggle,4,/// Toggle every bit to its opposite value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Deployability,Toggle,Toggles,4,"/// Toggles a given bit to its opposite value.; ///; /// Toggle a given bit to its opposite value whose position is given; /// as ""bitPosition"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:57,Deployability,Toggle,Toggle,57,"/// Toggles a given bit to its opposite value.; ///; /// Toggle a given bit to its opposite value whose position is given; /// as ""bitPosition"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,Modifiability,extend,extended,13,/// Get zero extended value; ///; /// This method attempts to return the value of this APInt as a zero extended; /// uint64_t. The bitwidth must be <= 64 or the value must fit within a; /// uint64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:103,Modifiability,extend,extended,103,/// Get zero extended value; ///; /// This method attempts to return the value of this APInt as a zero extended; /// uint64_t. The bitwidth must be <= 64 or the value must fit within a; /// uint64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:213,Testability,assert,assertion,213,/// Get zero extended value; ///; /// This method attempts to return the value of this APInt as a zero extended; /// uint64_t. The bitwidth must be <= 64 or the value must fit within a; /// uint64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,Modifiability,extend,extended,13,/// Get zero extended value if possible; ///; /// This method attempts to return the value of this APInt as a zero extended; /// uint64_t. The bitwidth must be <= 64 or the value must fit within a; /// uint64_t. Otherwise no value is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:115,Modifiability,extend,extended,115,/// Get zero extended value if possible; ///; /// This method attempts to return the value of this APInt as a zero extended; /// uint64_t. The bitwidth must be <= 64 or the value must fit within a; /// uint64_t. Otherwise no value is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,Modifiability,extend,extended,13,/// Get sign extended value; ///; /// This method attempts to return the value of this APInt as a sign extended; /// int64_t. The bit width must be <= 64 or the value must fit within an; /// int64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:103,Modifiability,extend,extended,103,/// Get sign extended value; ///; /// This method attempts to return the value of this APInt as a sign extended; /// int64_t. The bit width must be <= 64 or the value must fit within an; /// int64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:213,Testability,assert,assertion,213,/// Get sign extended value; ///; /// This method attempts to return the value of this APInt as a sign extended; /// int64_t. The bit width must be <= 64 or the value must fit within an; /// int64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,Modifiability,extend,extended,13,/// Get sign extended value if possible; ///; /// This method attempts to return the value of this APInt as a sign extended; /// int64_t. The bitwidth must be <= 64 or the value must fit within an; /// int64_t. Otherwise no value is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:115,Modifiability,extend,extended,115,/// Get sign extended value if possible; ///; /// This method attempts to return the value of this APInt as a sign extended; /// int64_t. The bitwidth must be <= 64 or the value must fit within an; /// int64_t. Otherwise no value is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:73,Testability,log,log,73,/// @}; /// \name Mathematics Operations; /// @{; /// \returns the floor log base 2 of this APInt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:22,Testability,log,log,22,/// \returns the ceil log base 2 of this APInt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:25,Testability,log,log,25,"/// \returns the nearest log base 2 of this APInt. Ties round up.; ///; /// NOTE: When we have a BitWidth of 1, we define:; ///; /// log2(0) = UINT32_MAX; /// log2(1) = 0; ///; /// to get around any mathematical concerns resulting from; /// referencing 2 in a space where 2 does no exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:58,Energy Efficiency,power,power,58,"/// \returns the log base 2 of this APInt if its an exact power of two, -1; /// otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:17,Testability,log,log,17,"/// \returns the log base 2 of this APInt if its an exact power of two, -1; /// otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Usability,Clear,Clear,4,/// Clear the given bit of a bignum. Zero-based.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:332,Integrability,rout,routine,332,"/// If RHS is zero LHS and REMAINDER are left unchanged, return one.; /// Otherwise set LHS to LHS / RHS with the fractional part discarded, set; /// REMAINDER to the remainder, return zero. i.e.; ///; /// OLD_LHS = RHS * LHS + REMAINDER; ///; /// SCRATCH is a bignum of the same size as the operands and result for use by; /// the routine; its contents need not be initialized and are destroyed. LHS,; /// REMAINDER and SCRATCH must be distinct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:34,Energy Efficiency,allocate,allocated,34,/// Returns whether this instance allocated memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:98,Safety,unsafe,unsafe,98,"/// This constructor is used only internally for speed of construction of; /// temporaries. It is unsafe since it takes ownership of the pointer, so it; /// is not public.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:21,Availability,mask,mask,21,"/// Get a single bit mask.; ///; /// \returns a uint64_t with only bit at ""whichBit(bitPosition)"" set; /// This method generates and returns a uint64_t (word) mask for a single; /// bit at a specific bit position. This is used to mask the bit in the; /// corresponding word.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:159,Availability,mask,mask,159,"/// Get a single bit mask.; ///; /// \returns a uint64_t with only bit at ""whichBit(bitPosition)"" set; /// This method generates and returns a uint64_t (word) mask for a single; /// bit at a specific bit position. This is used to mask the bit in the; /// corresponding word.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:230,Availability,mask,mask,230,"/// Get a single bit mask.; ///; /// \returns a uint64_t with only bit at ""whichBit(bitPosition)"" set; /// This method generates and returns a uint64_t (word) mask for a single; /// bit at a specific bit position. This is used to mask the bit in the; /// corresponding word.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Usability,Clear,Clear,4,"/// Clear unused high order bits; ///; /// This method is used internally to clear the top ""N"" bits in the high order; /// word that are not used by the APInt. This is needed after the most; /// significant word is assigned a value to ensure that those bits are; /// zero'd out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:77,Usability,clear,clear,77,"/// Clear unused high order bits; ///; /// This method is used internally to clear the top ""N"" bits in the high order; /// word that are not used by the APInt. This is needed after the most; /// significant word is assigned a value to ensure that those bits are; /// zero'd out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:3,Availability,Mask,Mask,3,// Mask out the high bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:128,Usability,simpl,simply,128,/// An internal division function for dividing APInts.; ///; /// This is used by the toString method to divide by the radix. It simply; /// provides a more convenient form of divide for internal use since KnuthDiv; /// has specific constraints on its inputs. If those constraints are not met; /// then it provides a simpler form of divide.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:316,Usability,simpl,simpler,316,/// An internal division function for dividing APInts.; ///; /// This is used by the toString method to divide by the radix. It simply; /// provides a more convenient form of divide for internal use since KnuthDiv; /// has specific constraints on its inputs. If those constraints are not met; /// then it provides a simpler form of divide.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Performance,Load,LoadIntFromMemory,4,"/// LoadIntFromMemory - Loads the integer stored in the LoadBytes bytes starting; /// from Src into IntVal, which is assumed to be wide enough and to hold zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:24,Performance,Load,Loads,24,"/// LoadIntFromMemory - Loads the integer stored in the LoadBytes bytes starting; /// from Src into IntVal, which is assumed to be wide enough and to hold zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:56,Performance,Load,LoadBytes,56,"/// LoadIntFromMemory - Loads the integer stored in the LoadBytes bytes starting; /// from Src into IntVal, which is assumed to be wide enough and to hold zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:446,Usability,simpl,simple,446,"//===-- llvm/ADT/APSInt.h - Arbitrary Precision Signed Int -----*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements the APSInt class, which is a simple class that; /// represents an arbitrary sized integer that knows its signedness.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:63,Testability,test,tests,63,/// Determine if this APSInt Value is positive.; ///; /// This tests if the value of this APSInt is positive (> 0). Note; /// that 0 is not a positive value.; ///; /// \returns true if this APSInt is positive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:22,Modifiability,extend,extended,22,/// Get the correctly-extended \c int64_t value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:32,Integrability,wrap,wrap,32,"// The remaining operators just wrap the logic of APInt, but retain the; // signedness information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:41,Testability,log,logic,41,"// The remaining operators just wrap the logic of APInt, but retain the; // signedness information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:69,Modifiability,extend,extending,69,"/// Determine if two APSInts have the same value, zero- or; /// sign-extending as needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:36,Integrability,Wrap,Wrapper,36,"//===- ArrayRef.h - Array Reference Wrapper ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:391,Modifiability,extend,extends,391,"/// ArrayRef - Represent a constant reference to an array (0 or more elements; /// consecutively in memory), i.e. a start pointer and a length. It allows; /// various APIs to take consecutive elements easily and conveniently.; ///; /// This class does not own the underlying data, it is expected to be used in; /// situations where the data resides in some other buffer, whose lifetime; /// extends past that of the ArrayRef. For this reason, it is not in general; /// safe to store an ArrayRef.; ///; /// This is intended to be trivially copyable, so it should be passed by; /// value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:469,Safety,safe,safe,469,"/// ArrayRef - Represent a constant reference to an array (0 or more elements; /// consecutively in memory), i.e. a start pointer and a length. It allows; /// various APIs to take consecutive elements easily and conveniently.; ///; /// This class does not own the underlying data, it is expected to be used in; /// situations where the data resides in some other buffer, whose lifetime; /// extends past that of the ArrayRef. For this reason, it is not in general; /// safe to store an ArrayRef.; ///; /// This is intended to be trivially copyable, so it should be passed by; /// value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:81,Safety,avoid,avoid,81,/// Construct an ArrayRef from a SmallVector. This is templated in order to; /// avoid instantiating SmallVectorTemplateCommon<T> whenever we; /// copy-construct an ArrayRef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:87,Integrability,message,messages,87,// Disable gcc's warning in this constructor as it generates an enormous amount; // of messages. Anyone using ArrayRef should already be aware of the fact that; // it does not do lifetime extension.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:95,Safety,avoid,avoid,95,/// Construct an ArrayRef<const T*> from a SmallVector<T*>. This is; /// templated in order to avoid instantiating SmallVectorTemplateCommon<T>; /// whenever we copy-construct an ArrayRef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:18,Usability,Simpl,Simple,18,/// @}; /// @name Simple Operations; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:10,Energy Efficiency,Allocate,Allocate,10,// copy - Allocate copy in Allocator and return ArrayRef<T> to it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:413,Modifiability,extend,extends,413,"/// MutableArrayRef - Represent a mutable reference to an array (0 or more; /// elements consecutively in memory), i.e. a start pointer and a length. It; /// allows various APIs to take and modify consecutive elements easily and; /// conveniently.; ///; /// This class does not own the underlying data, it is expected to be used in; /// situations where the data resides in some other buffer, whose lifetime; /// extends past that of the MutableArrayRef. For this reason, it is not in; /// general safe to store a MutableArrayRef.; ///; /// This is intended to be trivially copyable, so it should be passed by; /// value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:498,Safety,safe,safe,498,"/// MutableArrayRef - Represent a mutable reference to an array (0 or more; /// elements consecutively in memory), i.e. a start pointer and a length. It; /// allows various APIs to take and modify consecutive elements easily and; /// conveniently.; ///; /// This class does not own the underlying data, it is expected to be used in; /// situations where the data resides in some other buffer, whose lifetime; /// extends past that of the MutableArrayRef. For this reason, it is not in; /// general safe to store a MutableArrayRef.; ///; /// This is intended to be trivially copyable, so it should be passed by; /// value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:29,Usability,guid,guides,29,/// @name ArrayRef Deduction guides; /// @{; /// Deduction guide to construct an ArrayRef from a single element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:59,Usability,guid,guide,59,/// @name ArrayRef Deduction guides; /// @{; /// Deduction guide to construct an ArrayRef from a single element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct an ArrayRef from a pointer and length,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct an ArrayRef from a range,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct an ArrayRef from a SmallVector,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct an ArrayRef from a SmallVector,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct an ArrayRef from a std::vector,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct an ArrayRef from a std::array,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct an ArrayRef from an ArrayRef (const),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct an ArrayRef from an ArrayRef,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct an ArrayRef from a C array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:36,Usability,guid,guides,36,/// @name MutableArrayRef Deduction guides; /// @{; /// Deduction guide to construct a `MutableArrayRef` from a single element,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:66,Usability,guid,guide,66,/// @name MutableArrayRef Deduction guides; /// @{; /// Deduction guide to construct a `MutableArrayRef` from a single element,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct a `MutableArrayRef` from a pointer and; /// length.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct a `MutableArrayRef` from a `SmallVector`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct a `MutableArrayRef` from a `std::vector`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct a `MutableArrayRef` from a `std::array`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,Usability,guid,guide,14,/// Deduction guide to construct a `MutableArrayRef` from a C array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h:194,Safety,avoid,avoid,194,"// This implementation of bit_cast is different from the C++20 one in two ways:; // - It isn't constexpr because that requires compiler support.; // - It requires trivially-constructible To, to avoid UB in the implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/bit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h:78,Deployability,release,release,78,"// The DLL version of the runtime lacks these functions (bug!?), but in a; // release build they're replaced with BSWAP instructions anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/bit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h:33,Energy Efficiency,power,power,33,/// Returns the largest integral power of two no greater than Value if Value is; /// nonzero. Returns 0 otherwise.; ///; /// Ex. bit_floor(5) == 4.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/bit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h:34,Energy Efficiency,power,power,34,/// Returns the smallest integral power of two no smaller than Value if Value is; /// nonzero. Returns 1 otherwise.; ///; /// Ex. bit_ceil(5) == 8.; ///; /// The return value is undefined if the input is larger than the largest power; /// of two representable in T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/bit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h:228,Energy Efficiency,power,power,228,/// Returns the smallest integral power of two no smaller than Value if Value is; /// nonzero. Returns 1 otherwise.; ///; /// Ex. bit_ceil(5) == 8.; ///; /// The return value is undefined if the input is larger than the largest power; /// of two representable in T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/bit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/bit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:2421,Energy Efficiency,efficient,efficiently,2421,";; ///; /// // Store and retrieve a single bit as bool.; /// using Bool = Bitfield::Element<bool, 0, 1>;; /// Bitfield::set<Bool>(Storage, true);; /// EXPECT_EQ(Storage, 0b00000001);; /// // ^; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), true);; ///; /// // Store and retrieve a 2 bit typed enum.; /// // Note: enum underlying type must be unsigned.; /// enum class SuitEnum : uint8_t { CLUBS, DIAMONDS, HEARTS, SPADES };; /// // Note: enum maximum value needs to be passed in as last parameter.; /// using Suit = Bitfield::Element<SuitEnum, 1, 2, SuitEnum::SPADES>;; /// Bitfield::set<Suit>(Storage, SuitEnum::HEARTS);; /// EXPECT_EQ(Storage, 0b00000101);; /// // ^^; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::HEARTS);; ///; /// // Store and retrieve a 5 bit value as unsigned.; /// using Value = Bitfield::Element<unsigned, 3, 5>;; /// Bitfield::set<Value>(Storage, 10);; /// EXPECT_EQ(Storage, 0b01010101);; /// // ^^^^^; /// EXPECT_EQ(Bitfield::get<Value>(Storage), 10U);; ///; /// // Interpret the same 5 bit value as signed.; /// using SignedValue = Bitfield::Element<int, 3, 5>;; /// Bitfield::set<SignedValue>(Storage, -2);; /// EXPECT_EQ(Storage, 0b11110101);; /// // ^^^^^; /// EXPECT_EQ(Bitfield::get<SignedValue>(Storage), -2);; ///; /// // Ability to efficiently test if a field is non zero.; /// EXPECT_TRUE(Bitfield::test<Value>(Storage));; ///; /// // Alter Storage changes value.; /// Storage = 0;; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), false);; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::CLUBS);; /// EXPECT_EQ(Bitfield::get<Value>(Storage), 0U);; /// EXPECT_EQ(Bitfield::get<SignedValue>(Storage), 0);; ///; /// Storage = 255;; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), true);; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::SPADES);; /// EXPECT_EQ(Bitfield::get<Value>(Storage), 31U);; /// EXPECT_EQ(Bitfield::get<SignedValue>(Storage), -1);; /// \endcode; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:428,Testability,test,test,428,"//===-- llvm/ADT/Bitfield.h - Get and Set bits in an integer ---*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements methods to test, set and extract typed bits from packed; /// unsigned integers.; ///; /// Why not C++ bitfields?; /// ----------------------; /// C++ bitfields do not offer control over the bit layout nor consistent; /// behavior when it comes to out of range values.; /// For instance, the layout is implementation defined and adjacent bits may be; /// packed together but are not required to. This is problematic when storage is; /// sparse and data must be stored in a particular integer type.; ///; /// The methods provided in this file ensure precise control over the; /// layout/storage as well as protection against out of range values.; ///; /// Usage example; /// -------------; /// \code{.cpp}; /// uint8_t Storage = 0;; ///; /// // Store and retrieve a single bit as bool.; /// using Bool = Bitfield::Element<bool, 0, 1>;; /// Bitfield::set<Bool>(Storage, true);; /// EXPECT_EQ(Storage, 0b00000001);; /// // ^; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), true);; ///; /// // Store and retrieve a 2 bit typed enum.; /// // Note: enum underlying type must be unsigned.; /// enum class SuitEnum : uint8_t { CLUBS, DIAMONDS, HEARTS, SPADES };; /// // Note: enum maximum value needs to be passed in as last parameter.; /// using Suit = Bitfield::Element<SuitEnum, 1, 2, SuitEnum::SPADES>;; /// Bitfield::set<Suit>(Storage, SuitEnum::HEARTS);; /// EXPECT_EQ(Storage, 0b00000101);; /// // ^^; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::HEARTS);; ///; /// // Store and retrieve a 5 bit value as unsigned.; /// using Value = Bitfield::Element<unsigned, 3, 5>;; /// Bitfie",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:2433,Testability,test,test,2433,";; ///; /// // Store and retrieve a single bit as bool.; /// using Bool = Bitfield::Element<bool, 0, 1>;; /// Bitfield::set<Bool>(Storage, true);; /// EXPECT_EQ(Storage, 0b00000001);; /// // ^; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), true);; ///; /// // Store and retrieve a 2 bit typed enum.; /// // Note: enum underlying type must be unsigned.; /// enum class SuitEnum : uint8_t { CLUBS, DIAMONDS, HEARTS, SPADES };; /// // Note: enum maximum value needs to be passed in as last parameter.; /// using Suit = Bitfield::Element<SuitEnum, 1, 2, SuitEnum::SPADES>;; /// Bitfield::set<Suit>(Storage, SuitEnum::HEARTS);; /// EXPECT_EQ(Storage, 0b00000101);; /// // ^^; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::HEARTS);; ///; /// // Store and retrieve a 5 bit value as unsigned.; /// using Value = Bitfield::Element<unsigned, 3, 5>;; /// Bitfield::set<Value>(Storage, 10);; /// EXPECT_EQ(Storage, 0b01010101);; /// // ^^^^^; /// EXPECT_EQ(Bitfield::get<Value>(Storage), 10U);; ///; /// // Interpret the same 5 bit value as signed.; /// using SignedValue = Bitfield::Element<int, 3, 5>;; /// Bitfield::set<SignedValue>(Storage, -2);; /// EXPECT_EQ(Storage, 0b11110101);; /// // ^^^^^; /// EXPECT_EQ(Bitfield::get<SignedValue>(Storage), -2);; ///; /// // Ability to efficiently test if a field is non zero.; /// EXPECT_TRUE(Bitfield::test<Value>(Storage));; ///; /// // Alter Storage changes value.; /// Storage = 0;; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), false);; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::CLUBS);; /// EXPECT_EQ(Bitfield::get<Value>(Storage), 0U);; /// EXPECT_EQ(Bitfield::get<SignedValue>(Storage), 0);; ///; /// Storage = 255;; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), true);; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::SPADES);; /// EXPECT_EQ(Bitfield::get<Value>(Storage), 31U);; /// EXPECT_EQ(Bitfield::get<SignedValue>(Storage), -1);; /// \endcode; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:2489,Testability,test,test,2489,";; ///; /// // Store and retrieve a single bit as bool.; /// using Bool = Bitfield::Element<bool, 0, 1>;; /// Bitfield::set<Bool>(Storage, true);; /// EXPECT_EQ(Storage, 0b00000001);; /// // ^; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), true);; ///; /// // Store and retrieve a 2 bit typed enum.; /// // Note: enum underlying type must be unsigned.; /// enum class SuitEnum : uint8_t { CLUBS, DIAMONDS, HEARTS, SPADES };; /// // Note: enum maximum value needs to be passed in as last parameter.; /// using Suit = Bitfield::Element<SuitEnum, 1, 2, SuitEnum::SPADES>;; /// Bitfield::set<Suit>(Storage, SuitEnum::HEARTS);; /// EXPECT_EQ(Storage, 0b00000101);; /// // ^^; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::HEARTS);; ///; /// // Store and retrieve a 5 bit value as unsigned.; /// using Value = Bitfield::Element<unsigned, 3, 5>;; /// Bitfield::set<Value>(Storage, 10);; /// EXPECT_EQ(Storage, 0b01010101);; /// // ^^^^^; /// EXPECT_EQ(Bitfield::get<Value>(Storage), 10U);; ///; /// // Interpret the same 5 bit value as signed.; /// using SignedValue = Bitfield::Element<int, 3, 5>;; /// Bitfield::set<SignedValue>(Storage, -2);; /// EXPECT_EQ(Storage, 0b11110101);; /// // ^^^^^; /// EXPECT_EQ(Bitfield::get<SignedValue>(Storage), -2);; ///; /// // Ability to efficiently test if a field is non zero.; /// EXPECT_TRUE(Bitfield::test<Value>(Storage));; ///; /// // Alter Storage changes value.; /// Storage = 0;; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), false);; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::CLUBS);; /// EXPECT_EQ(Bitfield::get<Value>(Storage), 0U);; /// EXPECT_EQ(Bitfield::get<SignedValue>(Storage), 0);; ///; /// Storage = 255;; /// EXPECT_EQ(Bitfield::get<Bool>(Storage), true);; /// EXPECT_EQ(Bitfield::get<Suit>(Storage), SuitEnum::SPADES);; /// EXPECT_EQ(Bitfield::get<Value>(Storage), 31U);; /// EXPECT_EQ(Bitfield::get<SignedValue>(Storage), -1);; /// \endcode; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:67,Testability,test,test,67,"// namespace bitfields_details; /// Holds functions to get, set or test bitfields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:70,Energy Efficiency,efficient,efficient,70,/// Return a non-zero value if the field is non-zero.; /// It is more efficient than `getField`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:78,Testability,assert,asserts,78,/// Sets the typed value in the provided `Packed` value.; /// The method will asserts if the provided value is too big to fit in.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitmaskEnum.h:86,Performance,perform,perform,86,"/// LLVM_MARK_AS_BITMASK_ENUM lets you opt in an individual enum type so you can; /// perform bitwise operations on it without putting static_cast everywhere.; ///; /// \code; /// enum MyEnum {; /// E1 = 1, E2 = 2, E3 = 4, E4 = 8,; /// LLVM_MARK_AS_BITMASK_ENUM(/* LargestValue = */ E4); /// };; ///; /// void Foo() {; /// MyEnum A = (E1 | E2) & E3 ^ ~E4; // Look, ma: No static_cast!; /// }; /// \endcode; ///; /// Normally when you do a bitwise operation on an enum value, you get back an; /// instance of the underlying type (e.g. int). But using this macro, bitwise; /// ops on your enum will return you back instances of the enum. This is; /// particularly useful for enums which represent a combination of flags.; ///; /// The parameter to LLVM_MARK_AS_BITMASK_ENUM should be the largest individual; /// value in your enum.; ///; /// All of the enum's values must be non-negative.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitmaskEnum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitmaskEnum.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitmaskEnum.h:100,Availability,mask,mask,100,"// On overflow, NextPowerOf2 returns zero with the type uint64_t, so; // subtracting 1 gives us the mask with all bits set, like we want.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitmaskEnum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitmaskEnum.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:12,Testability,Test,Tests,12,/// empty - Tests whether there are no bits in this bitvector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:73,Integrability,depend,depending,73,"/// find_first_in - Returns the index of the first set / unset bit,; /// depending on \p Set, in the range [Begin, End).; /// Returns -1 if all bits in the range are unset / set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,Usability,clear,clear,4,/// clear - Removes all bits from the bitvector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:10,Energy Efficiency,Efficient,Efficiently,10,"/// set - Efficiently set a range of bits in [I, E)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:12,Energy Efficiency,Efficient,Efficiently,12,"/// reset - Efficiently reset a range of bits in [I, E)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,Testability,Test,Test,4,/// Test if any common bits are set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,Testability,test,test,4,/// test - Check if (This - RHS) is zero.; /// This is the same as reset(RHS) and any().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:96,Availability,mask,mask,96,"//===--------------------------------------------------------------------===//; // Portable bit mask operations.; //===--------------------------------------------------------------------===//; //; // These methods all operate on arrays of uint32_t, each holding 32 bits. The; // fixed word size makes it easier to work with literal bit vector constants; // in portable code.; //; // The LSB in each word is the lowest numbered bit. The size of a portable; // bit mask is always a whole multiple of 32 bits. If no bit mask size is; // given, the bit mask is assumed to cover the entire BitVector.; /// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:464,Availability,mask,mask,464,"//===--------------------------------------------------------------------===//; // Portable bit mask operations.; //===--------------------------------------------------------------------===//; //; // These methods all operate on arrays of uint32_t, each holding 32 bits. The; // fixed word size makes it easier to work with literal bit vector constants; // in portable code.; //; // The LSB in each word is the lowest numbered bit. The size of a portable; // bit mask is always a whole multiple of 32 bits. If no bit mask size is; // given, the bit mask is assumed to cover the entire BitVector.; /// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:518,Availability,mask,mask,518,"//===--------------------------------------------------------------------===//; // Portable bit mask operations.; //===--------------------------------------------------------------------===//; //; // These methods all operate on arrays of uint32_t, each holding 32 bits. The; // fixed word size makes it easier to work with literal bit vector constants; // in portable code.; //; // The LSB in each word is the lowest numbered bit. The size of a portable; // bit mask is always a whole multiple of 32 bits. If no bit mask size is; // given, the bit mask is assumed to cover the entire BitVector.; /// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:550,Availability,mask,mask,550,"//===--------------------------------------------------------------------===//; // Portable bit mask operations.; //===--------------------------------------------------------------------===//; //; // These methods all operate on arrays of uint32_t, each holding 32 bits. The; // fixed word size makes it easier to work with literal bit vector constants; // in portable code.; //; // The LSB in each word is the lowest numbered bit. The size of a portable; // bit mask is always a whole multiple of 32 bits. If no bit mask size is; // given, the bit mask is assumed to cover the entire BitVector.; /// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:636,Availability,Mask,Mask,636,"//===--------------------------------------------------------------------===//; // Portable bit mask operations.; //===--------------------------------------------------------------------===//; //; // These methods all operate on arrays of uint32_t, each holding 32 bits. The; // fixed word size makes it easier to work with literal bit vector constants; // in portable code.; //; // The LSB in each word is the lowest numbered bit. The size of a portable; // bit mask is always a whole multiple of 32 bits. If no bit mask size is; // given, the bit mask is assumed to cover the entire BitVector.; /// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:700,Availability,Mask,Mask,700,"//===--------------------------------------------------------------------===//; // Portable bit mask operations.; //===--------------------------------------------------------------------===//; //; // These methods all operate on arrays of uint32_t, each holding 32 bits. The; // fixed word size makes it easier to work with literal bit vector constants; // in portable code.; //; // The LSB in each word is the lowest numbered bit. The size of a portable; // bit mask is always a whole multiple of 32 bits. If no bit mask size is; // given, the bit mask is assumed to cover the entire BitVector.; /// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:83,Modifiability,Portab,Portable,83,"//===--------------------------------------------------------------------===//; // Portable bit mask operations.; //===--------------------------------------------------------------------===//; //; // These methods all operate on arrays of uint32_t, each holding 32 bits. The; // fixed word size makes it easier to work with literal bit vector constants; // in portable code.; //; // The LSB in each word is the lowest numbered bit. The size of a portable; // bit mask is always a whole multiple of 32 bits. If no bit mask size is; // given, the bit mask is assumed to cover the entire BitVector.; /// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:361,Modifiability,portab,portable,361,"//===--------------------------------------------------------------------===//; // Portable bit mask operations.; //===--------------------------------------------------------------------===//; //; // These methods all operate on arrays of uint32_t, each holding 32 bits. The; // fixed word size makes it easier to work with literal bit vector constants; // in portable code.; //; // The LSB in each word is the lowest numbered bit. The size of a portable; // bit mask is always a whole multiple of 32 bits. If no bit mask size is; // given, the bit mask is assumed to cover the entire BitVector.; /// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:447,Modifiability,portab,portable,447,"//===--------------------------------------------------------------------===//; // Portable bit mask operations.; //===--------------------------------------------------------------------===//; //; // These methods all operate on arrays of uint32_t, each holding 32 bits. The; // fixed word size makes it easier to work with literal bit vector constants; // in portable code.; //; // The LSB in each word is the lowest numbered bit. The size of a portable; // bit mask is always a whole multiple of 32 bits. If no bit mask size is; // given, the bit mask is assumed to cover the entire BitVector.; /// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:68,Availability,Mask,Mask,68,"/// clearBitsInMask - Clear any bits in this vector that are set in Mask.; /// Don't resize. This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:118,Availability,Mask,Mask,118,"/// clearBitsInMask - Clear any bits in this vector that are set in Mask.; /// Don't resize. This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,Usability,clear,clearBitsInMask,4,"/// clearBitsInMask - Clear any bits in this vector that are set in Mask.; /// Don't resize. This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:22,Usability,Clear,Clear,22,"/// clearBitsInMask - Clear any bits in this vector that are set in Mask.; /// Don't resize. This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:69,Availability,Mask,Mask,69,"/// setBitsNotInMask - Add a bit to this vector for every '0' bit in Mask.; /// Don't resize. This computes ""*this |= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:119,Availability,Mask,Mask,119,"/// setBitsNotInMask - Add a bit to this vector for every '0' bit in Mask.; /// Don't resize. This computes ""*this |= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:73,Availability,Mask,Mask,73,"/// clearBitsNotInMask - Clear a bit in this vector for every '0' bit in Mask.; /// Don't resize. This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:122,Availability,Mask,Mask,122,"/// clearBitsNotInMask - Clear a bit in this vector for every '0' bit in Mask.; /// Don't resize. This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,Usability,clear,clearBitsNotInMask,4,"/// clearBitsNotInMask - Clear a bit in this vector for every '0' bit in Mask.; /// Don't resize. This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:25,Usability,Clear,Clear,25,"/// clearBitsNotInMask - Clear a bit in this vector for every '0' bit in Mask.; /// Don't resize. This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,Performance,Perform,Perform,4,"/// Perform a logical left shift of \p Count words by moving everything; /// \p Count words to the right in memory.; ///; /// While confusing, words are stored from least significant at Bits[0] to; /// most significant at Bits[NumWords-1]. A logical shift left, however,; /// moves the current least significant bit to a higher logical index, and; /// fills the previous least significant bits with 0. Thus, we actually; /// need to move the bytes of the memory to the right, not to the left.; /// Example:; /// Words = [0xBBBBAAAA, 0xDDDDFFFF, 0x00000000, 0xDDDD0000]; /// represents a BitVector where 0xBBBBAAAA contain the least significant; /// bits. So if we want to shift the BitVector left by 2 words, we need; /// to turn this into 0x00000000 0x00000000 0xBBBBAAAA 0xDDDDFFFF by using a; /// memmove which moves right, not left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:14,Testability,log,logical,14,"/// Perform a logical left shift of \p Count words by moving everything; /// \p Count words to the right in memory.; ///; /// While confusing, words are stored from least significant at Bits[0] to; /// most significant at Bits[NumWords-1]. A logical shift left, however,; /// moves the current least significant bit to a higher logical index, and; /// fills the previous least significant bits with 0. Thus, we actually; /// need to move the bytes of the memory to the right, not to the left.; /// Example:; /// Words = [0xBBBBAAAA, 0xDDDDFFFF, 0x00000000, 0xDDDD0000]; /// represents a BitVector where 0xBBBBAAAA contain the least significant; /// bits. So if we want to shift the BitVector left by 2 words, we need; /// to turn this into 0x00000000 0x00000000 0xBBBBAAAA 0xDDDDFFFF by using a; /// memmove which moves right, not left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:242,Testability,log,logical,242,"/// Perform a logical left shift of \p Count words by moving everything; /// \p Count words to the right in memory.; ///; /// While confusing, words are stored from least significant at Bits[0] to; /// most significant at Bits[NumWords-1]. A logical shift left, however,; /// moves the current least significant bit to a higher logical index, and; /// fills the previous least significant bits with 0. Thus, we actually; /// need to move the bytes of the memory to the right, not to the left.; /// Example:; /// Words = [0xBBBBAAAA, 0xDDDDFFFF, 0x00000000, 0xDDDD0000]; /// represents a BitVector where 0xBBBBAAAA contain the least significant; /// bits. So if we want to shift the BitVector left by 2 words, we need; /// to turn this into 0x00000000 0x00000000 0xBBBBAAAA 0xDDDDFFFF by using a; /// memmove which moves right, not left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:328,Testability,log,logical,328,"/// Perform a logical left shift of \p Count words by moving everything; /// \p Count words to the right in memory.; ///; /// While confusing, words are stored from least significant at Bits[0] to; /// most significant at Bits[NumWords-1]. A logical shift left, however,; /// moves the current least significant bit to a higher logical index, and; /// fills the previous least significant bits with 0. Thus, we actually; /// need to move the bytes of the memory to the right, not to the left.; /// Example:; /// Words = [0xBBBBAAAA, 0xDDDDFFFF, 0x00000000, 0xDDDD0000]; /// represents a BitVector where 0xBBBBAAAA contain the least significant; /// bits. So if we want to shift the BitVector left by 2 words, we need; /// to turn this into 0x00000000 0x00000000 0xBBBBAAAA 0xDDDDFFFF by using a; /// memmove which moves right, not left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,Performance,Perform,Perform,4,/// Perform a logical right shift of \p Count words by moving those; /// words to the left in memory. See wordShl for more information.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:14,Testability,log,logical,14,/// Perform a logical right shift of \p Count words by moving those; /// words to the left in memory. See wordShl for more information.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:3,Usability,Clear,Clear,3,// Clear the unused bits in the high words.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h:507,Security,expose,exposes,507,"//===- llvm/ADT/BreadthFirstIterator.h - Breadth First iterator -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file builds on the ADT/GraphTraits.h file to build a generic breadth; /// first graph iterator. This file exposes the following functions/types:; ///; /// bf_begin/bf_end/bf_iterator; /// * Normal breadth-first iteration - visit a graph level-by-level.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h:44,Usability,simpl,simple,44,// The visited state for the iteration is a simple set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h:9,Performance,queue,queue,9,// Visit queue - used to maintain BFS ordering.; // std::optional<> because we need markers for levels.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h:14,Security,access,accessor,14,// Provide an accessor method to use them in range-based patterns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:16,Performance,Cache,CachedHashString,16,"//===- llvm/ADT/CachedHashString.h - Prehashed string/StringRef -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines CachedHashString and CachedHashStringRef. These are; /// owning and not-owning string types that store their hash in addition to; /// their string data.; ///; /// Unlike std::string, CachedHashString can be used in DenseSet/DenseMap; /// (because, unlike std::string, CachedHashString lets us have empty and; /// tombstone values).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:414,Performance,Cache,CachedHashString,414,"//===- llvm/ADT/CachedHashString.h - Prehashed string/StringRef -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines CachedHashString and CachedHashStringRef. These are; /// owning and not-owning string types that store their hash in addition to; /// their string data.; ///; /// Unlike std::string, CachedHashString can be used in DenseSet/DenseMap; /// (because, unlike std::string, CachedHashString lets us have empty and; /// tombstone values).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:435,Performance,Cache,CachedHashStringRef,435,"//===- llvm/ADT/CachedHashString.h - Prehashed string/StringRef -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines CachedHashString and CachedHashStringRef. These are; /// owning and not-owning string types that store their hash in addition to; /// their string data.; ///; /// Unlike std::string, CachedHashString can be used in DenseSet/DenseMap; /// (because, unlike std::string, CachedHashString lets us have empty and; /// tombstone values).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:597,Performance,Cache,CachedHashString,597,"//===- llvm/ADT/CachedHashString.h - Prehashed string/StringRef -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines CachedHashString and CachedHashStringRef. These are; /// owning and not-owning string types that store their hash in addition to; /// their string data.; ///; /// Unlike std::string, CachedHashString can be used in DenseSet/DenseMap; /// (because, unlike std::string, CachedHashString lets us have empty and; /// tombstone values).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:682,Performance,Cache,CachedHashString,682,"//===- llvm/ADT/CachedHashString.h - Prehashed string/StringRef -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines CachedHashString and CachedHashStringRef. These are; /// owning and not-owning string types that store their hash in addition to; /// their string data.; ///; /// Unlike std::string, CachedHashString can be used in DenseSet/DenseMap; /// (because, unlike std::string, CachedHashString lets us have empty and; /// tombstone values).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:523,Security,hash,hash,523,"//===- llvm/ADT/CachedHashString.h - Prehashed string/StringRef -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines CachedHashString and CachedHashStringRef. These are; /// owning and not-owning string types that store their hash in addition to; /// their string data.; ///; /// Unlike std::string, CachedHashString can be used in DenseSet/DenseMap; /// (because, unlike std::string, CachedHashString lets us have empty and; /// tombstone values).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:62,Security,hash,hash,62,/// A container which contains a StringRef plus a precomputed hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:20,Security,hash,hashing,20,// Explicit because hashing a string isn't free.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:75,Security,hash,hash,75,"/// A container which contains a string, which it owns, plus a precomputed hash.; ///; /// We do not null-terminate the string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:26,Performance,optimiz,optimization,26,// TODO: Use small-string optimization to avoid allocating.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:42,Safety,avoid,avoid,42,// TODO: Use small-string optimization to avoid allocating.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:32,Security,hash,hashing,32,// Explicit because copying and hashing a string isn't free.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:110,Usability,usab,usable,110,"// Ideally this class would not be copyable. But SetVector requires copyable; // keys, and we want this to be usable there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:11,Safety,safe,safe,11,"// This is safe because if RHS.P is the empty or tombstone key, it will have; // length 0, so we'll never dereference its pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:339,Performance,perform,performance,339,"/// A bitvector that, under the hood, relies on an IntervalMap to coalesce; /// elements into intervals. Good for representing sets which predominantly; /// contain contiguous ranges. Bad for representing sets with lots of gaps; /// between elements.; ///; /// Compared to SparseBitVector, CoalescingBitVector offers more predictable; /// performance for non-sequential find() operations.; ///; /// \tparam IndexT - The type of the index into the bitvector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:322,Safety,predict,predictable,322,"/// A bitvector that, under the hood, relies on an IntervalMap to coalesce; /// elements into intervals. Good for representing sets which predominantly; /// contain contiguous ranges. Bad for representing sets with lots of gaps; /// between elements.; ///; /// Compared to SparseBitVector, CoalescingBitVector offers more predictable; /// performance for non-sequential find() operations.; ///; /// \tparam IndexT - The type of the index into the bitvector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:12,Usability,Clear,Clear,12,/// @}; /// Clear all the bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:144,Safety,safe,safe,144,"/// Set the bits set in \p Other.; ///; /// This method does /not/ support setting already-set bits, see \ref set; /// for the rationale. For a safe set union operation, use \ref operator|=.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:41,Testability,test,testing,41,"/// Set the bits at \p Indices. Used for testing, primarily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:249,Usability,simpl,simply,249,"// Split the interval containing Index into up to two parts: one from; // [Start, Index-1] and another from [Index+1, Stop]. If Index is equal to; // either Start or Stop, we create one new interval. If Index is equal to; // both Start and Stop, we simply erase the existing interval.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:7,Performance,perform,performance,7,"// For performance reasons, make the offset at the end different than the; // one used in \ref begin, to optimize the common `It == end()` pattern.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:105,Performance,optimiz,optimize,105,"// For performance reasons, make the offset at the end different than the; // one used in \ref begin, to optimize the common `It == end()` pattern.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:81,Performance,Cache,Cache,81,// Querying the start/stop of an IntervalMap iterator can be very expensive.; // Cache these values for performance reasons.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:104,Performance,perform,performance,104,// Querying the start/stop of an IntervalMap iterator can be very expensive.; // Cache these values for performance reasons.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:44,Performance,cache,cached,44,"/// MapIterator has just changed, reset the cached state to point to the; /// start of the new underlying iterator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:81,Performance,cache,cached,81,"// Do /not/ compare MapIterator for equality, as this is very expensive.; // The cached start/stop values make that check unnecessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:285,Performance,perform,performance,285,"/// Advance the iterator to the first set bit AT, OR AFTER, \p Index. If; /// no such set bit exists, advance to end(). This is like std::lower_bound.; /// This is useful if \p Index is close to the current iterator position.; /// However, unlike \ref find(), this has worst-case O(n) performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:191,Performance,perform,performance,191,"/// Return an iterator pointing to the first set bit AT, OR AFTER, \p Index.; /// If no such set bit exists, return end(). This is like std::lower_bound.; /// This has worst-case logarithmic performance (roughly O(log(gaps between; /// contiguous ranges))).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:179,Testability,log,logarithmic,179,"/// Return an iterator pointing to the first set bit AT, OR AFTER, \p Index.; /// If no such set bit exists, return end(). This is like std::lower_bound.; /// This has worst-case logarithmic performance (roughly O(log(gaps between; /// contiguous ranges))).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:214,Testability,log,log,214,"/// Return an iterator pointing to the first set bit AT, OR AFTER, \p Index.; /// If no such set bit exists, return end(). This is like std::lower_bound.; /// This has worst-case logarithmic performance (roughly O(log(gaps between; /// contiguous ranges))).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:1126,Integrability,wrap,wrapped,1126,"//===-- llvm/ADT/CombinationGenerator.h ------------------------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Combination generator.; ///; /// Example: given input {{0, 1}, {2}, {3, 4}} it will produce the following; /// combinations: {0, 2, 3}, {0, 2, 4}, {1, 2, 3}, {1, 2, 4}.; ///; /// It is useful to think of input as vector-of-vectors, where the; /// outer vector is the variable space, and inner vector is choice space.; /// The number of choices for each variable can be different.; ///; /// As for implementation, it is useful to think of this as a weird number,; /// where each digit (==variable) may have different base (==number of choices).; /// Thus modelling of 'produce next combination' is exactly analogous to the; /// incrementing of an number - increment lowest digit (pick next choice for the; /// variable), and if it wrapped to the beginning then increment next digit.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:663,Modifiability,variab,variable,663,"//===-- llvm/ADT/CombinationGenerator.h ------------------------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Combination generator.; ///; /// Example: given input {{0, 1}, {2}, {3, 4}} it will produce the following; /// combinations: {0, 2, 3}, {0, 2, 4}, {1, 2, 3}, {1, 2, 4}.; ///; /// It is useful to think of input as vector-of-vectors, where the; /// outer vector is the variable space, and inner vector is choice space.; /// The number of choices for each variable can be different.; ///; /// As for implementation, it is useful to think of this as a weird number,; /// where each digit (==variable) may have different base (==number of choices).; /// Thus modelling of 'produce next combination' is exactly analogous to the; /// incrementing of an number - increment lowest digit (pick next choice for the; /// variable), and if it wrapped to the beginning then increment next digit.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:749,Modifiability,variab,variable,749,"//===-- llvm/ADT/CombinationGenerator.h ------------------------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Combination generator.; ///; /// Example: given input {{0, 1}, {2}, {3, 4}} it will produce the following; /// combinations: {0, 2, 3}, {0, 2, 4}, {1, 2, 3}, {1, 2, 4}.; ///; /// It is useful to think of input as vector-of-vectors, where the; /// outer vector is the variable space, and inner vector is choice space.; /// The number of choices for each variable can be different.; ///; /// As for implementation, it is useful to think of this as a weird number,; /// where each digit (==variable) may have different base (==number of choices).; /// Thus modelling of 'produce next combination' is exactly analogous to the; /// incrementing of an number - increment lowest digit (pick next choice for the; /// variable), and if it wrapped to the beginning then increment next digit.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:883,Modifiability,variab,variable,883,"//===-- llvm/ADT/CombinationGenerator.h ------------------------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Combination generator.; ///; /// Example: given input {{0, 1}, {2}, {3, 4}} it will produce the following; /// combinations: {0, 2, 3}, {0, 2, 4}, {1, 2, 3}, {1, 2, 4}.; ///; /// It is useful to think of input as vector-of-vectors, where the; /// outer vector is the variable space, and inner vector is choice space.; /// The number of choices for each variable can be different.; ///; /// As for implementation, it is useful to think of this as a weird number,; /// where each digit (==variable) may have different base (==number of choices).; /// Thus modelling of 'produce next combination' is exactly analogous to the; /// incrementing of an number - increment lowest digit (pick next choice for the; /// variable), and if it wrapped to the beginning then increment next digit.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:1105,Modifiability,variab,variable,1105,"//===-- llvm/ADT/CombinationGenerator.h ------------------------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Combination generator.; ///; /// Example: given input {{0, 1}, {2}, {3, 4}} it will produce the following; /// combinations: {0, 2, 3}, {0, 2, 4}, {1, 2, 3}, {1, 2, 4}.; ///; /// It is useful to think of input as vector-of-vectors, where the; /// outer vector is the variable space, and inner vector is choice space.; /// The number of choices for each variable can be different.; ///; /// As for implementation, it is useful to think of this as a weird number,; /// where each digit (==variable) may have different base (==number of choices).; /// Thus modelling of 'produce next combination' is exactly analogous to the; /// incrementing of an number - increment lowest digit (pick next choice for the; /// variable), and if it wrapped to the beginning then increment next digit.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:38,Integrability,wrap,wrapping,38,"// Advance position forward, possibly wrapping to the beginning.; // Returns whether the wrap happened.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:89,Integrability,wrap,wrap,89,"// Advance position forward, possibly wrapping to the beginning.; // Returns whether the wrap happened.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:173,Integrability,wrap,wrapped,173,"// 'increment' of the whole VariablesState is defined identically to the; // increment of a number: starting from the least significant element,; // increment it, and if it wrapped, then propagate that carry by also; // incrementing next (more significant) element.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:28,Modifiability,Variab,VariablesState,28,"// 'increment' of the whole VariablesState is defined identically to the; // increment of a number: starting from the least significant element,; // increment it, and if it wrapped, then propagate that carry by also; // incrementing next (more significant) element.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:91,Modifiability,variab,variable,91,"// There you go, next combination is ready.; // We have carry - increment more significant variable next..",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:16,Integrability,wrap,wrapped,16,"// MSB variable wrapped, no more unique combinations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:7,Modifiability,variab,variable,7,"// MSB variable wrapped, no more unique combinations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:22,Modifiability,variab,variable,22,// Initialize the per-variable state to refer to the possible choices for; // that variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:83,Modifiability,variab,variable,83,// Initialize the per-variable state to refer to the possible choices for; // that variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:53,Performance,perform,performing,53,// Temporary buffer to store each combination before performing Callback.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:33,Modifiability,variab,variable,33,// Gather the currently-selected variable choices into a vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:2,Safety,Abort,Abort,2,/*Abort=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:12,Performance,perform,perform,12,// Actually perform exhaustive combination generation.; // Each result will be passed into the callback.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:7,Performance,Concurren,ConcurrentHashtable,7,"//===- ConcurrentHashtable.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:152,Energy Efficiency,efficient,efficient,152,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:1739,Energy Efficiency,allocate,allocate,1739,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:774,Modifiability,extend,extended,774,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:4,Performance,Concurren,ConcurrentHashTable,4,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:42,Performance,concurren,concurrent,42,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:309,Performance,concurren,concurrent,309,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:1672,Performance,Concurren,ConcurrentHashTableByPtr,1672,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:1721,Safety,safe,safe,1721,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:53,Security,hash,hashtable,53,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:119,Security,hash,hashtable,119,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:162,Security,access,access,162,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:287,Security,hash,hashtable,287,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:457,Security,hash,hash,457,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:497,Security,Hash,Hash,497,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:1150,Security,hash,hashes,1150,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:1192,Security,Hash,Hashes,1192,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:1279,Security,Hash,Hashes,1279,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:1383,Security,Hash,Hashes,1383,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:1557,Security,Hash,Hashes,1557,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:13,Security,Hash,Hash,13,/// \returns Hash value for the specified \p Key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Energy Efficiency,Allocate,Allocate,3,// Allocate buckets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:13,Availability,mask,masks,13,// Calculate masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:105,Energy Efficiency,power,power,105,// We keep only high 32-bits of hash value. So bucket size cannot; // exceed 2^31. Bucket size is always power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:32,Security,hash,hash,32,// We keep only high 32-bits of hash value. So bucket size cannot; // exceed 2^31. Bucket size is always power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:13,Availability,mask,mask,13,// Calculate mask for extended hash bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:22,Modifiability,extend,extended,22,// Calculate mask for extended hash bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:31,Security,hash,hash,31,// Calculate mask for extended hash bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Security,Hash,Hash,3,// Hash matched. Check value for equality.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:45,Security,hash,hash,45,/// Print information about current state of hash table structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Security,Hash,Hashes,3,// Hashes for [Size] entries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:23,Security,hash,hashes,23,// Store old entries & hashes arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Energy Efficiency,Allocate,Allocate,3,// Allocate new entries&hashes arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:24,Security,hash,hashes,24,// Allocate new entries&hashes arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Deployability,Update,Update,3,// Update bucket fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:26,Availability,mask,mask,26,// Number of bits in hash mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:21,Security,hash,hash,21,// Number of bits in hash mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:8,Availability,mask,mask,8,// Hash mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Security,Hash,Hash,3,// Hash mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:8,Availability,mask,mask,8,// Hash mask for the extended hash bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:21,Modifiability,extend,extended,21,// Hash mask for the extended hash bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Security,Hash,Hash,3,// Hash mask for the extended hash bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:30,Security,hash,hash,30,// Hash mask for the extended hash bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:426,Integrability,depend,dependencies,426,"/// DAGDeltaAlgorithm - Implements a ""delta debugging"" algorithm for minimizing; /// directed acyclic graphs using a predicate function.; ///; /// The result of the algorithm is a subset of the input change set which is; /// guaranteed to satisfy the predicate, assuming that the input set did. For; /// well formed predicates, the result set is guaranteed to be such that; /// removing any single element not required by the dependencies on the other; /// elements would falsify the predicate.; ///; /// The DAG should be used to represent dependencies in the changes which are; /// likely to hold across the predicate function. That is, for a particular; /// changeset S and predicate P:; ///; /// P(S) => P(S union pred(S)); ///; /// The minimization algorithm uses this dependency information to attempt to; /// eagerly prune large subsets of changes. As with \see DeltaAlgorithm, the DAG; /// is not required to satisfy this property, but the algorithm will run; /// substantially fewer tests with appropriate dependencies. \see DeltaAlgorithm; /// for more information on the properties which the predicate function itself; /// should satisfy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:541,Integrability,depend,dependencies,541,"/// DAGDeltaAlgorithm - Implements a ""delta debugging"" algorithm for minimizing; /// directed acyclic graphs using a predicate function.; ///; /// The result of the algorithm is a subset of the input change set which is; /// guaranteed to satisfy the predicate, assuming that the input set did. For; /// well formed predicates, the result set is guaranteed to be such that; /// removing any single element not required by the dependencies on the other; /// elements would falsify the predicate.; ///; /// The DAG should be used to represent dependencies in the changes which are; /// likely to hold across the predicate function. That is, for a particular; /// changeset S and predicate P:; ///; /// P(S) => P(S union pred(S)); ///; /// The minimization algorithm uses this dependency information to attempt to; /// eagerly prune large subsets of changes. As with \see DeltaAlgorithm, the DAG; /// is not required to satisfy this property, but the algorithm will run; /// substantially fewer tests with appropriate dependencies. \see DeltaAlgorithm; /// for more information on the properties which the predicate function itself; /// should satisfy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:774,Integrability,depend,dependency,774,"/// DAGDeltaAlgorithm - Implements a ""delta debugging"" algorithm for minimizing; /// directed acyclic graphs using a predicate function.; ///; /// The result of the algorithm is a subset of the input change set which is; /// guaranteed to satisfy the predicate, assuming that the input set did. For; /// well formed predicates, the result set is guaranteed to be such that; /// removing any single element not required by the dependencies on the other; /// elements would falsify the predicate.; ///; /// The DAG should be used to represent dependencies in the changes which are; /// likely to hold across the predicate function. That is, for a particular; /// changeset S and predicate P:; ///; /// P(S) => P(S union pred(S)); ///; /// The minimization algorithm uses this dependency information to attempt to; /// eagerly prune large subsets of changes. As with \see DeltaAlgorithm, the DAG; /// is not required to satisfy this property, but the algorithm will run; /// substantially fewer tests with appropriate dependencies. \see DeltaAlgorithm; /// for more information on the properties which the predicate function itself; /// should satisfy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:1015,Integrability,depend,dependencies,1015,"/// DAGDeltaAlgorithm - Implements a ""delta debugging"" algorithm for minimizing; /// directed acyclic graphs using a predicate function.; ///; /// The result of the algorithm is a subset of the input change set which is; /// guaranteed to satisfy the predicate, assuming that the input set did. For; /// well formed predicates, the result set is guaranteed to be such that; /// removing any single element not required by the dependencies on the other; /// elements would falsify the predicate.; ///; /// The DAG should be used to represent dependencies in the changes which are; /// likely to hold across the predicate function. That is, for a particular; /// changeset S and predicate P:; ///; /// P(S) => P(S union pred(S)); ///; /// The minimization algorithm uses this dependency information to attempt to; /// eagerly prune large subsets of changes. As with \see DeltaAlgorithm, the DAG; /// is not required to satisfy this property, but the algorithm will run; /// substantially fewer tests with appropriate dependencies. \see DeltaAlgorithm; /// for more information on the properties which the predicate function itself; /// should satisfy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:992,Testability,test,tests,992,"/// DAGDeltaAlgorithm - Implements a ""delta debugging"" algorithm for minimizing; /// directed acyclic graphs using a predicate function.; ///; /// The result of the algorithm is a subset of the input change set which is; /// guaranteed to satisfy the predicate, assuming that the input set did. For; /// well formed predicates, the result set is guaranteed to be such that; /// removing any single element not required by the dependencies on the other; /// elements would falsify the predicate.; ///; /// The DAG should be used to represent dependencies in the changes which are; /// likely to hold across the predicate function. That is, for a particular; /// changeset S and predicate P:; ///; /// P(S) => P(S union pred(S)); ///; /// The minimization algorithm uses this dependency information to attempt to; /// eagerly prune large subsets of changes. As with \see DeltaAlgorithm, the DAG; /// is not required to satisfy this property, but the algorithm will run; /// substantially fewer tests with appropriate dependencies. \see DeltaAlgorithm; /// for more information on the properties which the predicate function itself; /// should satisfy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:594,Availability,error,error,594,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:77,Integrability,Depend,Dependencies,77,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:252,Integrability,Depend,Dependencies,252,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:329,Integrability,Depend,Dependencies,329,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:354,Integrability,depend,dependencies,354,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:410,Integrability,Depend,Dependencies,410,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:620,Integrability,depend,dependencies,620,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:215,Testability,test,test,215,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:517,Testability,test,tested,517,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:4,Deployability,Update,UpdatedSearchState,4,/// UpdatedSearchState - Callback used when the search state changes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:38,Testability,test,test,38,/// ExecuteOneTest - Execute a single test predicate on the change set \p S.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:793,Availability,error,error,793,"/// DeltaAlgorithm - Implements the delta debugging algorithm (A. Zeller '99); /// for minimizing arbitrary sets using a predicate function.; ///; /// The result of the algorithm is a subset of the input change set which is; /// guaranteed to satisfy the predicate, assuming that the input set did. For; /// well formed predicates, the result set is guaranteed to be such that; /// removing any single element would falsify the predicate.; ///; /// For best results the predicate function *should* (but need not) satisfy; /// certain properties, in particular:; /// (1) The predicate should return false on an empty set and true on the full; /// set.; /// (2) If the predicate returns true for a set of changes, it should return; /// true for all supersets of that set.; ///; /// It is not an error to provide a predicate that does not satisfy these; /// requirements, and the algorithm will generally produce reasonable; /// results. However, it may run substantially more tests than with a good; /// predicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:974,Testability,test,tests,974,"/// DeltaAlgorithm - Implements the delta debugging algorithm (A. Zeller '99); /// for minimizing arbitrary sets using a predicate function.; ///; /// The result of the algorithm is a subset of the input change set which is; /// guaranteed to satisfy the predicate, assuming that the input set did. For; /// well formed predicates, the result set is guaranteed to be such that; /// removing any single element would falsify the predicate.; ///; /// For best results the predicate function *should* (but need not) satisfy; /// certain properties, in particular:; /// (1) The predicate should return false on an empty set and true on the full; /// set.; /// (2) If the predicate returns true for a set of changes, it should return; /// true for all supersets of that set.; ///; /// It is not an error to provide a predicate that does not satisfy these; /// requirements, and the algorithm will generally produce reasonable; /// results. However, it may run substantially more tests than with a good; /// predicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:96,Energy Efficiency,reduce,reduce,96,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:4,Performance,Cache,Cache,4,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:68,Performance,cache,cached,68,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:20,Testability,test,test,20,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:45,Testability,test,test,45,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:73,Performance,cache,cache,73,"/// GetTestResult - Get the test result for the \p Changes from the; /// cache, executing the test if necessary.; ///; /// \param Changes - The change set to test.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:28,Testability,test,test,28,"/// GetTestResult - Get the test result for the \p Changes from the; /// cache, executing the test if necessary.; ///; /// \param Changes - The change set to test.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:94,Testability,test,test,94,"/// GetTestResult - Get the test result for the \p Changes from the; /// cache, executing the test if necessary.; ///; /// \param Changes - The change set to test.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:158,Testability,test,test,158,"/// GetTestResult - Get the test result for the \p Changes from the; /// cache, executing the test if necessary.; ///; /// \param Changes - The change set to test.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:183,Testability,test,test,183,"/// GetTestResult - Get the test result for the \p Changes from the; /// cache, executing the test if necessary.; ///; /// \param Changes - The change set to test.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:4,Deployability,Update,UpdatedSearchState,4,/// UpdatedSearchState - Callback used when the search state changes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:38,Testability,test,test,38,/// ExecuteOneTest - Execute a single test predicate on the change set \p S.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h:162,Testability,test,test,162,/// Run - Minimize the set \p Changes by executing \see ExecuteOneTest() on; /// subsets of changes and returning the smallest set which still satisfies; /// the test predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DeltaAlgorithm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:42,Security,hash,hash,42,"//===- llvm/ADT/DenseMap.h - Dense probed hash table ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the DenseMap class.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:6,Modifiability,extend,extend,6,// We extend a pair to allow users to override the bucket type with their own; // implementation without requiring two members.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:26,Safety,avoid,avoid,26,"// When the map is empty, avoid the overhead of advancing/retreating past; // empty buckets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:9,Usability,simpl,simpler,9,// Use a simpler loop when values don't need destruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:52,Safety,abort,abort,52,"/// at - Return the entry for the specified key, or abort if no such; /// entry exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:143,Deployability,update,update,143,"// Inserts key,value pair into the map if the key isn't already in the map.; // If the key is already in the map, it returns false and doesn't update the; // value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:143,Deployability,update,update,143,"// Inserts key,value pair into the map if the key isn't already in the map.; // If the key is already in the map, it returns false and doesn't update the; // value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:37,Energy Efficiency,allocate,allocate,37,/// Returns the number of buckets to allocate to ensure that the DenseMap can; /// accommodate \p NumEntries without need to grow().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:10,Performance,load,load,10,"// If the load of the hash table is more than 3/4, or if fewer than 1/8 of; // the buckets are empty (meaning that many are filled with tombstones),; // grow the table.; //; // The later case is tricky. For example, if we had one empty bucket with; // tons of tombstones, failing lookups (e.g. for insertion) would have to; // probe almost the entire table until it found the empty bucket. If the; // table completely filled with tombstones, no lookup would ever succeed,; // causing infinite loops in lookup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:22,Security,hash,hash,22,"// If the load of the hash table is more than 3/4, or if fewer than 1/8 of; // the buckets are empty (meaning that many are filled with tombstones),; // grow the table.; //; // The later case is tricky. For example, if we had one empty bucket with; // tons of tombstones, failing lookups (e.g. for insertion) would have to; // probe almost the entire table until it found the empty bucket. If the; // table completely filled with tombstones, no lookup would ever succeed,; // causing infinite loops in lookup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:8,Deployability,update,update,8,// Only update the state after we've grown our bucket space appropriately; // so that when growing buckets we have self-consistent entry count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:61,Security,hash,hash,61,"// Remember the first tombstone found.; // Otherwise, it's a hash collision or a tombstone, continue quadratic; // probing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:318,Security,hash,hash,318,"/// Equality comparison for DenseMap.; ///; /// Iterates over elements of LHS confirming that each (key, value) pair in LHS; /// is also in RHS, and that no additional pairs are in RHS.; /// Equivalent to N calls to RHS.find and N value comparisons. Amortized; /// complexity is linear, worst case is O(N^2) (if every hash collides).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:98,Performance,perform,performance,98,/// Inequality comparison for DenseMap.; ///; /// Equivalent to !(LHS == RHS). See operator== for performance notes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:28,Integrability,depend,dependent,28,// Lift some types from the dependent base class into this class for; // simplicity of referring to them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:73,Usability,simpl,simplicity,73,// Lift some types from the dependent base class into this class for; // simplicity of referring to them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:3,Energy Efficiency,Reduce,Reduce,3,// Reduce the number of buckets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:28,Integrability,depend,dependent,28,// Lift some types from the dependent base class into this class for; // simplicity of referring to them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:73,Usability,simpl,simplicity,73,// Lift some types from the dependent base class into this class for; // simplicity of referring to them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:241,Security,hash,hash,241,"// This is similar to the standard move-from-old-buckets, but the bucket; // count hasn't actually rotated in this case. So we have to carefully; // move construct the keys and values into their new locations, but there; // is no need to re-hash things.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:3,Energy Efficiency,Reduce,Reduce,3,// Reduce the number of buckets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:61,Testability,assert,assert,61,"// Note that this cast does not violate aliasing rules as we assert that; // the memory's dynamic type is the small, inline bucket buffer, and the; // 'storage' is a POD containing a char buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h:37,Security,hash,hash,37,/// Simplistic combination of 32-bit hash values into 32-bit hash values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h:61,Security,hash,hash,61,/// Simplistic combination of 32-bit hash values into 32-bit hash values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h:4,Usability,Simpl,Simplistic,4,/// Simplistic combination of 32-bit hash values into 32-bit hash values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h:132,Safety,avoid,avoid,132,"// Provide DenseMapInfo for all pointers. Come up with sentinel pointer values; // that are aligned to alignof(T) bytes, but try to avoid requiring T to be; // complete. This allows clients to instantiate DenseMap<T*, ...> with forward; // declared key types. Assume that no pointer key type requires more than 4096; // bytes of alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h:3,Security,Expose,Expose,3,// Expose an additional function intended to be used by other; // specializations of DenseMapInfo without needing to know how; // to combine hash values manually,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h:141,Security,hash,hash,141,// Expose an additional function intended to be used by other; // specializations of DenseMapInfo without needing to know how; // to combine hash values manually,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfoVariant.h:20,Security,hash,hash,20,// Include index in hash to make sure same value as different; // alternatives don't collide.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfoVariant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfoVariant.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h:42,Security,hash,hash,42,"//===- llvm/ADT/DenseSet.h - Dense probed hash table ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the DenseSet and SmallDenseSet classes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h:290,Security,hash,hash,290,"/// Equality comparison for DenseSet.; ///; /// Iterates over elements of LHS confirming that each element is also a member; /// of RHS, and that RHS contains no additional values.; /// Equivalent to N calls to RHS.count. Amortized complexity is linear, worst; /// case is O(N^2) (if every hash collides).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h:98,Performance,perform,performance,98,/// Inequality comparison for DenseSet.; ///; /// Equivalent to !(LHS == RHS). See operator== for performance notes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h:55,Security,hash,hash-table,55,// end namespace detail; /// Implements a dense probed hash-table based set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h:30,Security,hash,hash-table,30,/// Implements a dense probed hash-table based set with some number of buckets; /// stored inline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h:987,Energy Efficiency,efficient,efficient,987,"//===- llvm/ADT/DepthFirstIterator.h - Depth First iterator -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file builds on the ADT/GraphTraits.h file to build generic depth; /// first graph iterator. This file exposes the following functions/types:; ///; /// df_begin/df_end/df_iterator; /// * Normal depth-first iteration - visit a node and then all of its; /// children.; ///; /// idf_begin/idf_end/idf_iterator; /// * Depth-first iteration on the 'inverse' graph.; ///; /// df_ext_begin/df_ext_end/df_ext_iterator; /// * Normal depth-first iteration - visit a node and then all of its; /// children. This iterator stores the 'visited' set in an external set,; /// which allows it to be more efficient, and allows external clients to; /// use the set for other purposes.; ///; /// idf_ext_begin/idf_ext_end/idf_ext_iterator; /// * Depth-first iteration on the 'inverse' graph.; /// This iterator stores the 'visited' set in an external set, which; /// allows it to be more efficient, and allows external clients to use; /// the set for other purposes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h:1268,Energy Efficiency,efficient,efficient,1268,"//===- llvm/ADT/DepthFirstIterator.h - Depth First iterator -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file builds on the ADT/GraphTraits.h file to build generic depth; /// first graph iterator. This file exposes the following functions/types:; ///; /// df_begin/df_end/df_iterator; /// * Normal depth-first iteration - visit a node and then all of its; /// children.; ///; /// idf_begin/idf_end/idf_iterator; /// * Depth-first iteration on the 'inverse' graph.; ///; /// df_ext_begin/df_ext_end/df_ext_iterator; /// * Normal depth-first iteration - visit a node and then all of its; /// children. This iterator stores the 'visited' set in an external set,; /// which allows it to be more efficient, and allows external clients to; /// use the set for other purposes.; ///; /// idf_ext_begin/idf_ext_end/idf_ext_iterator; /// * Depth-first iteration on the 'inverse' graph.; /// This iterator stores the 'visited' set in an external set, which; /// allows it to be more efficient, and allows external clients to use; /// the set for other purposes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h:503,Security,expose,exposes,503,"//===- llvm/ADT/DepthFirstIterator.h - Depth First iterator -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file builds on the ADT/GraphTraits.h file to build generic depth; /// first graph iterator. This file exposes the following functions/types:; ///; /// df_begin/df_end/df_iterator; /// * Normal depth-first iteration - visit a node and then all of its; /// children.; ///; /// idf_begin/idf_end/idf_iterator; /// * Depth-first iteration on the 'inverse' graph.; ///; /// df_ext_begin/df_ext_end/df_ext_iterator; /// * Normal depth-first iteration - visit a node and then all of its; /// children. This iterator stores the 'visited' set in an external set,; /// which allows it to be more efficient, and allows external clients to; /// use the set for other purposes.; ///; /// idf_ext_begin/idf_ext_end/idf_ext_iterator; /// * Depth-first iteration on the 'inverse' graph.; /// This iterator stores the 'visited' set in an external set, which; /// allows it to be more efficient, and allows external clients to use; /// the set for other purposes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h:45,Usability,simpl,simple,45,"// The visited stated for the iteration is a simple set augmented with; // one more method, completed, which is invoked when all children of a; // node have been processed. It is intended to distinguish of back and; // cross edges in the spanning tree but is not used in the common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h:96,Deployability,update,updated,96,"// Notice that we directly mutate *Opt here, so that; // VisitStack.back().second actually gets updated as the iterator; // increases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h:198,Safety,risk,risk,198,"/// Skips all children of the current node and traverses to next node; ///; /// Note: This function takes care of incrementing the iterator. If you; /// always increment and call this function, you risk walking off the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h:14,Security,access,accessor,14,// Provide an accessor method to use them in range-based patterns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h:14,Security,access,accessor,14,// Provide an accessor method to use them in range-based patterns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h:418,Integrability,interface,interface,418,"//===- llvm/ADT/DirectedGraph.h - Directed Graph ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the interface and a base class implementation for a; /// directed graph.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h:11,Modifiability,polymorphi,polymorphism,11,/// Static polymorphism: delegate implementation (via isEqualTo) to the; /// derived class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h:11,Modifiability,polymorphi,polymorphism,11,/// Static polymorphism: delegate implementation (via isEqualTo) to the; /// derived class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h:4,Testability,Test,Test,4,/// Test whether there is an edge that goes from this node to \p N.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h:4,Usability,Clear,Clear,4,/// Clear the outgoing edges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/edit_distance.h:551,Integrability,rout,routine,551,"/// Determine the edit distance between two sequences.; ///; /// \param FromArray the first sequence to compare.; ///; /// \param ToArray the second sequence to compare.; ///; /// \param Map A Functor to apply to each item of the sequences before; /// comparison.; ///; /// \param AllowReplacements whether to allow element replacements (change one; /// element into another) as a single operation, rather than as two operations; /// (an insertion and a removal).; ///; /// \param MaxEditDistance If non-zero, the maximum edit distance that this; /// routine is allowed to compute. If the edit distance will exceed that; /// maximum, returns \c MaxEditDistance+1.; ///; /// \returns the minimum number of element insertions, removals, or (if; /// \p AllowReplacements is \c true) replacements needed to transform one of; /// the given sequences into the other. If zero, the sequences are identical.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/edit_distance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/edit_distance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/edit_distance.h:408,Deployability,update,update,408,"// The algorithm implemented below is the ""classic""; // dynamic-programming algorithm for computing the Levenshtein; // distance, which is described here:; //; // http://en.wikipedia.org/wiki/Levenshtein_distance; //; // Although the algorithm is typically described using an m x n; // array, only one row plus one element are used at a time, so this; // implementation just keeps one vector for the row. To update one entry,; // only the entries to the left, top, and top-left are needed. The left; // entry is in Row[x-1], the top entry is what's in Row[x] from the last; // iteration, and the top-left entry is stored in Previous.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/edit_distance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/edit_distance.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:563,Testability,assert,asserts,563,"//===- llvm/ADT/EpochTracker.h - ADT epoch tracking --------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the DebugEpochBase and DebugEpochBase::HandleBase classes.; /// These can be used to write iterators that are fail-fast when LLVM is built; /// with asserts enabled.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:306,Integrability,rout,routines,306,"/// A base class for data structure classes wishing to make iterators; /// (""handles"") pointing into themselves fail-fast. When building without; /// asserts, this class is empty and does nothing.; ///; /// DebugEpochBase does not by itself track handles pointing into itself. The; /// expectation is that routines touching the handles will poll on; /// isHandleInSync at appropriate points to assert that the handle they're using; /// is still valid.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:150,Testability,assert,asserts,150,"/// A base class for data structure classes wishing to make iterators; /// (""handles"") pointing into themselves fail-fast. When building without; /// asserts, this class is empty and does nothing.; ///; /// DebugEpochBase does not by itself track handles pointing into itself. The; /// expectation is that routines touching the handles will poll on; /// isHandleInSync at appropriate points to assert that the handle they're using; /// is still valid.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:394,Testability,assert,assert,394,"/// A base class for data structure classes wishing to make iterators; /// (""handles"") pointing into themselves fail-fast. When building without; /// asserts, this class is empty and does nothing.; ///; /// DebugEpochBase does not by itself track handles pointing into itself. The; /// expectation is that routines touching the handles will poll on; /// isHandleInSync at appropriate points to assert that the handle they're using; /// is still valid.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:319,Integrability,rout,routines,319,"/// A base class for iterator classes (""handles"") that wish to poll for; /// iterator invalidating modifications in the underlying data structure.; /// When LLVM is built without asserts, this class is empty and does nothing.; ///; /// HandleBase does not track the parent data structure by itself. It expects; /// the routines modifying the data structure to call incrementEpoch when they; /// make an iterator-invalidating modification.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:179,Testability,assert,asserts,179,"/// A base class for iterator classes (""handles"") that wish to poll for; /// iterator invalidating modifications in the underlying data structure.; /// When LLVM is built without asserts, this class is empty and does nothing.; ///; /// HandleBase does not track the parent data structure by itself. It expects; /// the routines modifying the data structure to call incrementEpoch when they; /// make an iterator-invalidating modification.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EpochTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:472,Energy Efficiency,efficient,efficient,472,"//===- llvm/ADT/EquivalenceClasses.h - Generic Equiv. Classes ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Generic implementation of equivalence classes through the use Tarjan's; /// efficient union-find algorithm.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:101,Energy Efficiency,efficient,efficient,101,"/// EquivalenceClasses - This represents a collection of equivalence classes and; /// supports three efficient operations: insert an element into a class of its; /// own, union two classes, and find the class for a given element. In; /// addition to these modification methods, it is possible to iterate over all; /// of the equivalence classes and all of the elements in a class.; ///; /// This implementation is an efficient implementation that only stores one copy; /// of the element being indexed per entry in the set, and allows any arbitrary; /// type to be indexed (as long as it can be ordered with operator< or a; /// comparator is provided).; ///; /// Here is a simple example using integers:; ///; /// \code; /// EquivalenceClasses<int> EC;; /// EC.unionSets(1, 2); // insert 1, 2 into the same set; /// EC.insert(4); EC.insert(5); // insert 4, 5 into own sets; /// EC.unionSets(5, 1); // merge the set for 1 with 5's set.; ///; /// for (EquivalenceClasses<int>::iterator I = EC.begin(), E = EC.end();; /// I != E; ++I) { // Iterate over all of the equivalence sets.; /// if (!I->isLeader()) continue; // Ignore non-leader sets.; /// for (EquivalenceClasses<int>::member_iterator MI = EC.member_begin(I);; /// MI != EC.member_end(); ++MI) // Loop over members in this set.; /// cerr << *MI << "" ""; // Print member.; /// cerr << ""\n""; // Finish set.; /// }; /// \endcode; ///; /// This example prints:; /// 4; /// 5 1 2; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:417,Energy Efficiency,efficient,efficient,417,"/// EquivalenceClasses - This represents a collection of equivalence classes and; /// supports three efficient operations: insert an element into a class of its; /// own, union two classes, and find the class for a given element. In; /// addition to these modification methods, it is possible to iterate over all; /// of the equivalence classes and all of the elements in a class.; ///; /// This implementation is an efficient implementation that only stores one copy; /// of the element being indexed per entry in the set, and allows any arbitrary; /// type to be indexed (as long as it can be ordered with operator< or a; /// comparator is provided).; ///; /// Here is a simple example using integers:; ///; /// \code; /// EquivalenceClasses<int> EC;; /// EC.unionSets(1, 2); // insert 1, 2 into the same set; /// EC.insert(4); EC.insert(5); // insert 4, 5 into own sets; /// EC.unionSets(5, 1); // merge the set for 1 with 5's set.; ///; /// for (EquivalenceClasses<int>::iterator I = EC.begin(), E = EC.end();; /// I != E; ++I) { // Iterate over all of the equivalence sets.; /// if (!I->isLeader()) continue; // Ignore non-leader sets.; /// for (EquivalenceClasses<int>::member_iterator MI = EC.member_begin(I);; /// MI != EC.member_end(); ++MI) // Loop over members in this set.; /// cerr << *MI << "" ""; // Print member.; /// cerr << ""\n""; // Finish set.; /// }; /// \endcode; ///; /// This example prints:; /// 4; /// 5 1 2; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:673,Usability,simpl,simple,673,"/// EquivalenceClasses - This represents a collection of equivalence classes and; /// supports three efficient operations: insert an element into a class of its; /// own, union two classes, and find the class for a given element. In; /// addition to these modification methods, it is possible to iterate over all; /// of the equivalence classes and all of the elements in a class.; ///; /// This implementation is an efficient implementation that only stores one copy; /// of the element being indexed per entry in the set, and allows any arbitrary; /// type to be indexed (as long as it can be ordered with operator< or a; /// comparator is provided).; ///; /// Here is a simple example using integers:; ///; /// \code; /// EquivalenceClasses<int> EC;; /// EC.unionSets(1, 2); // insert 1, 2 into the same set; /// EC.insert(4); EC.insert(5); // insert 4, 5 into own sets; /// EC.unionSets(5, 1); // merge the set for 1 with 5's set.; ///; /// for (EquivalenceClasses<int>::iterator I = EC.begin(), E = EC.end();; /// I != E; ++I) { // Iterate over all of the equivalence sets.; /// if (!I->isLeader()) continue; // Ignore non-leader sets.; /// for (EquivalenceClasses<int>::member_iterator MI = EC.member_begin(I);; /// MI != EC.member_end(); ++MI) // Loop over members in this set.; /// cerr << *MI << "" ""; // Print member.; /// cerr << ""\n""; // Finish set.; /// }; /// \endcode; ///; /// This example prints:; /// 4; /// 5 1 2; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:408,Integrability,depend,depending,408,"/// ECValue - The EquivalenceClasses data structure is just a set of these.; /// Each of these represents a relation for a value. First it stores the; /// value itself, which provides the ordering that the set queries. Next, it; /// provides a ""next pointer"", which is used to enumerate all of the elements; /// in the unioned set. Finally, it defines either a ""end of list pointer"" or; /// ""leader pointer"" depending on whether the value itself is a leader. A; /// ""leader pointer"" points to the node that is the leader for this element,; /// if the node is not a leader. A ""end of list pointer"" points to the last; /// node in the list of members of this list. Whether or not a node is a; /// leader is determined by a bit stolen from one of the pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:6,Integrability,wrap,wrapper,6,"/// A wrapper of the comparator, to be passed to the set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:97,Availability,error,error,97,"/// getLeaderValue - Return the leader for the specified value that is in the; /// set. It is an error to call this method for a value that is not yet in; /// the set. For that, call getOrInsertLeaderValue(V).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:3,Deployability,Update,Update,3,// Update L1LV's end of list pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:3,Usability,Clear,Clear,3,// Clear L2's leader flag:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:31,Integrability,Wrap,Wrapper,31,"//===--- fallible_iterator.h - Wrapper for fallible iterators ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:245,Availability,Error,Error,245,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:263,Availability,Error,Error,263,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:585,Availability,Error,Error,585,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:665,Availability,Error,Error,665,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:981,Availability,Error,Error,981,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1120,Availability,Error,Error,1120,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1253,Availability,Error,Error,1253,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1265,Availability,Error,Error,1265,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1416,Availability,error,error,1416,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1494,Availability,Error,Error,1494,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1736,Availability,error,error,1736,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1787,Availability,Error,Error,1787,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1872,Availability,redundant,redundant,1872,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1882,Availability,error,error,1882,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:6,Integrability,wrap,wrapper,6,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:85,Integrability,wrap,wraps,85,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:315,Integrability,interface,interface,315,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:466,Integrability,wrap,wrapper,466,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1465,Integrability,wrap,wrapper,1465,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1872,Safety,redund,redundant,1872,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1571,Usability,clear,clears,1571,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:250,Availability,error,error,250,"/// Construct a fallible iterator that *cannot* be used as an end-of-range; /// value.; ///; /// A value created by this method can be dereferenced, incremented,; /// decremented and compared, providing the underlying type supports it.; ///; /// The error that is passed in will be initially marked as checked, so if the; /// iterator is not used at all the Error need not be checked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:358,Availability,Error,Error,358,"/// Construct a fallible iterator that *cannot* be used as an end-of-range; /// value.; ///; /// A value created by this method can be dereferenced, incremented,; /// decremented and compared, providing the underlying type supports it.; ///; /// The error that is passed in will be initially marked as checked, so if the; /// iterator is not used at all the Error need not be checked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:106,Availability,Error,Error,106,"/// Increment the fallible iterator.; ///; /// If the underlying 'inc' operation fails, this will set the Error value; /// and update this iterator value to point to end-of-range.; ///; /// The Error value is marked as needing checking, regardless of whether the; /// 'inc' operation succeeds or fails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:194,Availability,Error,Error,194,"/// Increment the fallible iterator.; ///; /// If the underlying 'inc' operation fails, this will set the Error value; /// and update this iterator value to point to end-of-range.; ///; /// The Error value is marked as needing checking, regardless of whether the; /// 'inc' operation succeeds or fails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:127,Deployability,update,update,127,"/// Increment the fallible iterator.; ///; /// If the underlying 'inc' operation fails, this will set the Error value; /// and update this iterator value to point to end-of-range.; ///; /// The Error value is marked as needing checking, regardless of whether the; /// 'inc' operation succeeds or fails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:106,Availability,Error,Error,106,"/// Decrement the fallible iterator.; ///; /// If the underlying 'dec' operation fails, this will set the Error value; /// and update this iterator value to point to end-of-range.; ///; /// The Error value is marked as needing checking, regardless of whether the; /// 'dec' operation succeeds or fails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:194,Availability,Error,Error,194,"/// Decrement the fallible iterator.; ///; /// If the underlying 'dec' operation fails, this will set the Error value; /// and update this iterator value to point to end-of-range.; ///; /// The Error value is marked as needing checking, regardless of whether the; /// 'dec' operation succeeds or fails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:127,Deployability,update,update,127,"/// Decrement the fallible iterator.; ///; /// If the underlying 'dec' operation fails, this will set the Error value; /// and update this iterator value to point to end-of-range.; ///; /// The Error value is marked as needing checking, regardless of whether the; /// 'dec' operation succeeds or fails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:319,Availability,Error,Error,319,"/// Compare fallible iterators for equality.; ///; /// Returns true if both LHS and RHS are end-of-range values, or if both are; /// non-end-of-range values whose underlying iterator values compare equal.; ///; /// If this is a comparison between an end-of-range iterator and a; /// non-end-of-range iterator, then the Error (referenced by the; /// non-end-of-range value) is marked as checked: Since all; /// increment/decrement operations result in an end-of-range value, comparing; /// false against end-of-range is equivalent to checking that the Error value; /// is success. This flag management enables early returns from loop bodies; /// without redundant Error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:551,Availability,Error,Error,551,"/// Compare fallible iterators for equality.; ///; /// Returns true if both LHS and RHS are end-of-range values, or if both are; /// non-end-of-range values whose underlying iterator values compare equal.; ///; /// If this is a comparison between an end-of-range iterator and a; /// non-end-of-range iterator, then the Error (referenced by the; /// non-end-of-range value) is marked as checked: Since all; /// increment/decrement operations result in an end-of-range value, comparing; /// false against end-of-range is equivalent to checking that the Error value; /// is success. This flag management enables early returns from loop bodies; /// without redundant Error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:653,Availability,redundant,redundant,653,"/// Compare fallible iterators for equality.; ///; /// Returns true if both LHS and RHS are end-of-range values, or if both are; /// non-end-of-range values whose underlying iterator values compare equal.; ///; /// If this is a comparison between an end-of-range iterator and a; /// non-end-of-range iterator, then the Error (referenced by the; /// non-end-of-range value) is marked as checked: Since all; /// increment/decrement operations result in an end-of-range value, comparing; /// false against end-of-range is equivalent to checking that the Error value; /// is success. This flag management enables early returns from loop bodies; /// without redundant Error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:663,Availability,Error,Error,663,"/// Compare fallible iterators for equality.; ///; /// Returns true if both LHS and RHS are end-of-range values, or if both are; /// non-end-of-range values whose underlying iterator values compare equal.; ///; /// If this is a comparison between an end-of-range iterator and a; /// non-end-of-range iterator, then the Error (referenced by the; /// non-end-of-range value) is marked as checked: Since all; /// increment/decrement operations result in an end-of-range value, comparing; /// false against end-of-range is equivalent to checking that the Error value; /// is success. This flag management enables early returns from loop bodies; /// without redundant Error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:653,Safety,redund,redundant,653,"/// Compare fallible iterators for equality.; ///; /// Returns true if both LHS and RHS are end-of-range values, or if both are; /// non-end-of-range values whose underlying iterator values compare equal.; ///; /// If this is a comparison between an end-of-range iterator and a; /// non-end-of-range iterator, then the Error (referenced by the; /// non-end-of-range value) is marked as checked: Since all; /// increment/decrement operations result in an end-of-range value, comparing; /// false against end-of-range is equivalent to checking that the Error value; /// is success. This flag management enables early returns from loop bodies; /// without redundant Error checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:82,Availability,Error,Error,82,// If the iterators differ and this is a comparison against end then mark; // the Error as checked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:113,Availability,Error,Error,113,/// Convenience wrapper to make a fallible_iterator value from an instance; /// of an underlying iterator and an Error reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:16,Integrability,wrap,wrapper,16,/// Convenience wrapper to make a fallible_iterator value from an instance; /// of an underlying iterator and an Error reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:16,Integrability,wrap,wrapper,16,/// Convenience wrapper to make a fallible_iterator end value from an instance; /// of an underlying iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:580,Availability,error,errors,580,"/// Rounding mode.; ///; /// Enumerates supported rounding modes, as well as some special values. The set; /// of the modes must agree with IEEE-754, 4.3.1 and 4.3.2. The constants; /// assigned to the IEEE rounding modes must agree with the values used by; /// FLT_ROUNDS (C11, 5.2.4.2.2p8).; ///; /// This value is packed into bitfield in some cases, including \c FPOptions, so; /// the rounding mode values and the special value \c Dynamic must fit into the; /// the bit field (now - 3 bits). The value \c Invalid is used only in values; /// returned by intrinsics to indicate errors, it should never be stored as; /// rounding mode value, so it does not need to fit the bit fields.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:25,Testability,test,tests,25,"/// Floating-point class tests, supported by 'is_fpclass' intrinsic. Actual; /// test may be an OR combination of basic tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:81,Testability,test,test,81,"/// Floating-point class tests, supported by 'is_fpclass' intrinsic. Actual; /// test may be an OR combination of basic tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:120,Testability,test,tests,120,"/// Floating-point class tests, supported by 'is_fpclass' intrinsic. Actual; /// test may be an OR combination of basic tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:20,Availability,mask,mask,20,/// Return the test mask which returns true if the value's sign bit is flipped.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:15,Testability,test,test,15,/// Return the test mask which returns true if the value's sign bit is flipped.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:20,Availability,mask,mask,20,/// Return the test mask which returns true after fabs is applied to the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:15,Testability,test,test,15,/// Return the test mask which returns true after fabs is applied to the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:20,Availability,mask,mask,20,"/// Return the test mask which returns true if the value could have the same set; /// of classes, but with a different sign.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:15,Testability,test,test,15,"/// Return the test mask which returns true if the value could have the same set; /// of classes, but with a different sign.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h:38,Availability,Mask,Mask,38,/// Write a human readable form of \p Mask to \p OS,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FloatingPointMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:40,Security,Hash,Hash,40,"//===- llvm/ADT/FoldingSet.h - Uniquing Hash Set ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines a hash set that can be used to remove duplication of nodes; /// in a graph. This code was originally created by Chris Lattner for use with; /// SelectionDAGCSEMap, but was isolated to provide use across the llvm code; /// set.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:416,Security,hash,hash,416,"//===- llvm/ADT/FoldingSet.h - Uniquing Hash Set ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines a hash set that can be used to remove duplication of nodes; /// in a graph. This code was originally created by Chris Lattner for use with; /// SelectionDAGCSEMap, but was isolated to provide use across the llvm code; /// set.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:1575,Availability,avail,available,1575,"a subclass of; /// FoldingSetNode. The node class must also define a Profile method used to; /// establish the unique bits of data for the node. The Profile method is; /// passed a FoldingSetNodeID object which is used to gather the bits. Just; /// call one of the Add* functions defined in the FoldingSetBase::NodeID class.; /// NOTE: That the folding set does not own the nodes and it is the; /// responsibility of the user to dispose of the nodes.; ///; /// Eg.; /// class MyNode : public FoldingSetNode {; /// private:; /// std::string Name;; /// unsigned Value;; /// public:; /// MyNode(const char *N, unsigned V) : Name(N), Value(V) {}; /// ...; /// void Profile(FoldingSetNodeID &ID) const {; /// ID.AddString(Name);; /// ID.AddInteger(Value);; /// }; /// ...; /// };; ///; /// To define the folding set itself use the FoldingSet template;; ///; /// Eg.; /// FoldingSet<MyNode> MyFoldingSet;; ///; /// Four public methods are available to manipulate the folding set;; ///; /// 1) If you have an existing node that you want add to the set but unsure; /// that the node might already exist then call;; ///; /// MyNode *M = MyFoldingSet.GetOrInsertNode(N);; ///; /// If The result is equal to the input then the node has been inserted.; /// Otherwise, the result is the node existing in the folding set, and the; /// input can be discarded (use the result instead.); ///; /// 2) If you are ready to construct a node but want to check if it already; /// exists, then call FindNodeOrInsertPos with a FoldingSetNodeID of the bits to; /// check;; ///; /// FoldingSetNodeID ID;; /// ID.AddString(Name);; /// ID.AddInteger(Value);; /// void *InsertPoint;; ///; /// MyNode *M = MyFoldingSet.FindNodeOrInsertPos(ID, InsertPoint);; ///; /// If found then M will be non-NULL, else InsertPoint will point to where it; /// should be inserted using InsertNode.; ///; /// 3) If you get a NULL result from FindNodeOrInsertPos then you can insert a; /// new node with InsertNode;; ///; /// MyFoldingSet.InsertNode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:396,Security,hash,hash,396,"/// This folding set used for two purposes:; /// 1. Given information about a node we want to create, look up the unique; /// instance of the node in the set. If the node already exists, return; /// it, otherwise return the bucket it should be inserted into.; /// 2. Given a node that has already been created, remove it from the set.; ///; /// This class is implemented as a single-link chained hash table, where the; /// ""buckets"" are actually the nodes themselves (the next pointer is in the; /// node). The last node points back to the bucket to simplify node removal.; ///; /// Any node that is to be included in the folding set must be a subclass of; /// FoldingSetNode. The node class must also define a Profile method used to; /// establish the unique bits of data for the node. The Profile method is; /// passed a FoldingSetNodeID object which is used to gather the bits. Just; /// call one of the Add* functions defined in the FoldingSetBase::NodeID class.; /// NOTE: That the folding set does not own the nodes and it is the; /// responsibility of the user to dispose of the nodes.; ///; /// Eg.; /// class MyNode : public FoldingSetNode {; /// private:; /// std::string Name;; /// unsigned Value;; /// public:; /// MyNode(const char *N, unsigned V) : Name(N), Value(V) {}; /// ...; /// void Profile(FoldingSetNodeID &ID) const {; /// ID.AddString(Name);; /// ID.AddInteger(Value);; /// }; /// ...; /// };; ///; /// To define the folding set itself use the FoldingSet template;; ///; /// Eg.; /// FoldingSet<MyNode> MyFoldingSet;; ///; /// Four public methods are available to manipulate the folding set;; ///; /// 1) If you have an existing node that you want add to the set but unsure; /// that the node might already exist then call;; ///; /// MyNode *M = MyFoldingSet.GetOrInsertNode(N);; ///; /// If The result is equal to the input then the node has been inserted.; /// Otherwise, the result is the node existing in the folding set, and the; /// input can be discarded (use the result",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:550,Usability,simpl,simplify,550,"/// This folding set used for two purposes:; /// 1. Given information about a node we want to create, look up the unique; /// instance of the node in the set. If the node already exists, return; /// it, otherwise return the bucket it should be inserted into.; /// 2. Given a node that has already been created, remove it from the set.; ///; /// This class is implemented as a single-link chained hash table, where the; /// ""buckets"" are actually the nodes themselves (the next pointer is in the; /// node). The last node points back to the bucket to simplify node removal.; ///; /// Any node that is to be included in the folding set must be a subclass of; /// FoldingSetNode. The node class must also define a Profile method used to; /// establish the unique bits of data for the node. The Profile method is; /// passed a FoldingSetNodeID object which is used to gather the bits. Just; /// call one of the Add* functions defined in the FoldingSetBase::NodeID class.; /// NOTE: That the folding set does not own the nodes and it is the; /// responsibility of the user to dispose of the nodes.; ///; /// Eg.; /// class MyNode : public FoldingSetNode {; /// private:; /// std::string Name;; /// unsigned Value;; /// public:; /// MyNode(const char *N, unsigned V) : Name(N), Value(V) {}; /// ...; /// void Profile(FoldingSetNodeID &ID) const {; /// ID.AddString(Name);; /// ID.AddInteger(Value);; /// }; /// ...; /// };; ///; /// To define the folding set itself use the FoldingSet template;; ///; /// Eg.; /// FoldingSet<MyNode> MyFoldingSet;; ///; /// Four public methods are available to manipulate the folding set;; ///; /// 1) If you have an existing node that you want add to the set but unsure; /// that the node might already exist then call;; ///; /// MyNode *M = MyFoldingSet.GetOrInsertNode(N);; ///; /// If The result is equal to the input then the node has been inserted.; /// Otherwise, the result is the node existing in the folding set, and the; /// input can be discarded (use the result",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:223,Security,hash,hash,223,//===----------------------------------------------------------------------===//; /// FoldingSetBase - Implements the folding set functionality. The main; /// structure is an array of buckets. Each bucket is indexed by the hash of; /// the nodes it contains. The bucket itself points to the nodes contained; /// in the bucket via a singly linked list. The last node in the list points; /// back to the bucket to facilitate node removal.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:55,Energy Efficiency,power,power,55,/// NumBuckets - Length of the Buckets array. Always a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:3,Security,Access,Accessors,3,// Accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:4,Usability,clear,clear,4,/// clear - Remove all nodes from the folding set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:108,Performance,perform,performed,108,/// capacity - Returns the number of nodes permitted in the folding set; /// before a rebucket operation is performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:14,Performance,load,load,14,"// We allow a load factor of up to 2.0,; // so that means our capacity is NumBuckets * 2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:106,Security,hash,hash,106,/// ComputeNodeHash - Instantiations of the FoldingSet template implement; /// this function to compute a hash value for the given node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:43,Security,hash,hash,43,/// GrowHashTable - Double the size of the hash table and rehash everything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:97,Energy Efficiency,power,power,97,"/// GrowBucketCount - resize the hash table and rehash everything.; /// NewBucketCount must be a power of two, and must be greater than the old; /// bucket count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:33,Security,hash,hash,33,"/// GrowBucketCount - resize the hash table and rehash everything.; /// NewBucketCount must be a power of two, and must be greater than the old; /// bucket count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:248,Energy Efficiency,allocate,allocate,248,// The below methods are protected to encourage subclasses to provide a more; // type-safe API.; /// reserve - Increase the number of buckets such that adding the; /// EltCount-th node won't cause a rebucket operation. reserve is permitted; /// to allocate more space than requested by EltCount.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:86,Safety,safe,safe,86,// The below methods are protected to encourage subclasses to provide a more; // type-safe API.; /// reserve - Increase the number of buckets such that adding the; /// EltCount-th node won't cause a rebucket operation. reserve is permitted; /// to allocate more space than requested by EltCount.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:46,Usability,simpl,simple,46,"/// GetOrInsertNode - If there is an existing simple Node exactly; /// equal to the specified node, return it. Otherwise, insert 'N' and return; /// it instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:246,Energy Efficiency,efficient,efficient,246,"// Equals - Test if the profile for X would match ID, using TempID; // to compute a temporary ID if necessary. The default implementation; // just calls Profile and does a regular comparison. Implementations; // can override this to provide more efficient implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:12,Testability,Test,Test,12,"// Equals - Test if the profile for X would match ID, using TempID; // to compute a temporary ID if necessary. The default implementation; // just calls Profile and does a regular comparison. Implementations; // can override this to provide more efficient implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:243,Energy Efficiency,efficient,efficient,243,"// ComputeHash - Compute a hash value for X, using TempID to; // compute a temporary ID if necessary. The default implementation; // just calls Profile and does a regular hash computation.; // Implementations can override this to provide more efficient; // implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:27,Security,hash,hash,27,"// ComputeHash - Compute a hash value for X, using TempID to; // compute a temporary ID if necessary. The default implementation; // just calls Profile and does a regular hash computation.; // Implementations can override this to provide more efficient; // implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:171,Security,hash,hash,171,"// ComputeHash - Compute a hash value for X, using TempID to; // compute a temporary ID if necessary. The default implementation; // just calls Profile and does a regular hash computation.; // Implementations can override this to provide more efficient; // implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:35,Security,hash,hash,35,"/// ComputeHash - Compute a strong hash value for this FoldingSetNodeIDRef,; /// used to lookup the node in the FoldingSetBase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:241,Security,hash,hash,241,//===--------------------------------------------------------------------===//; /// FoldingSetNodeID - This class is used to gather all the unique data bits of; /// a node. When all the bits are gathered this class is used to produce a; /// hash value for the node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:92,Safety,avoid,avoid,92,/// Bits - Vector of all the data bits that make the node unique.; /// Use a SmallVector to avoid a heap allocation in the common case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:76,Integrability,depend,depend,76,"// Note: this adds pointers to the hash using sizes and endianness that; // depend on the host. It doesn't matter, however, because hashing on; // pointer values is inherently unstable. Nothing should depend on the; // ordering of nodes in the folding set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:201,Integrability,depend,depend,201,"// Note: this adds pointers to the hash using sizes and endianness that; // depend on the host. It doesn't matter, however, because hashing on; // pointer values is inherently unstable. Nothing should depend on the; // ordering of nodes in the folding set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:35,Security,hash,hash,35,"// Note: this adds pointers to the hash using sizes and endianness that; // depend on the host. It doesn't matter, however, because hashing on; // pointer values is inherently unstable. Nothing should depend on the; // ordering of nodes in the folding set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:132,Security,hash,hashing,132,"// Note: this adds pointers to the hash using sizes and endianness that; // depend on the host. It doesn't matter, however, because hashing on; // pointer values is inherently unstable. Nothing should depend on the; // ordering of nodes in the folding set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:4,Usability,clear,clear,4,"/// clear - Clear the accumulated profile, allowing this FoldingSetNodeID; /// object to be used to compute a new profile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:12,Usability,Clear,Clear,12,"/// clear - Clear the accumulated profile, allowing this FoldingSetNodeID; /// object to be used to compute a new profile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:35,Security,hash,hash,35,"/// ComputeHash - Compute a strong hash value for this FoldingSetNodeID, used; /// to lookup the node in the FoldingSetBase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:54,Energy Efficiency,allocate,allocated,54,/// Intern - Copy this node's data to a memory region allocated from the; /// given allocator and return a FoldingSetNodeIDRef describing the; /// interned data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:151,Energy Efficiency,allocate,allocate,151,/// reserve - Increase the number of buckets such that adding the; /// EltCount-th node won't cause a rebucket operation. reserve is permitted; /// to allocate more space than requested by EltCount.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:46,Usability,simpl,simple,46,"/// GetOrInsertNode - If there is an existing simple Node exactly; /// equal to the specified node, return it. Otherwise, insert 'N' and; /// return it instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:84,Security,hash,hash,84,/// ComputeNodeHash - Instantiations may optionally provide a way to compute a; /// hash value directly from a node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:180,Integrability,interface,interface,180,//===----------------------------------------------------------------------===//; /// FoldingSetVector - This template class combines a FoldingSet and a vector; /// to provide the interface of FoldingSet but with deterministic iteration; /// order based on the insertion order. T must be a subclass of FoldingSetNode; /// and implement a Profile function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:4,Usability,clear,clear,4,/// clear - Remove all nodes from the folding set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:46,Usability,simpl,simple,46,"/// GetOrInsertNode - If there is an existing simple Node exactly; /// equal to the specified node, return it. Otherwise, insert 'N' and; /// return it instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:220,Security,hash,hash,220,"//===----------------------------------------------------------------------===//; /// FoldingSetIteratorImpl - This is the common iterator support shared by all; /// folding sets, which knows how to walk the folding set hash table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:259,Security,hash,hash,259,"//===----------------------------------------------------------------------===//; /// FoldingSetBucketIteratorImpl - This is the common bucket iterator support; /// shared by all folding sets, which knows how to walk a particular bucket; /// of a folding set hash table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:142,Integrability,wrap,wrap,142,"//===----------------------------------------------------------------------===//; /// FoldingSetNodeWrapper - This template class is used to ""wrap"" arbitrary; /// types in an enclosing object so that they can be inserted into FoldingSets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:1172,Usability,simpl,simplified,1172,"//===- FunctionExtras.h - Function type erasure utilities -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides a collection of function (or more generally, callable); /// type erasure utilities supplementing those provided by the standard library; /// in `<function>`.; ///; /// It provides `unique_function`, which works like `std::function` but supports; /// move-only callable objects and const-qualification.; ///; /// Future plans:; /// - Add a `function` that provides ref-qualified support, which doesn't work; /// with `std::function`.; /// - Provide support for specifying multiple signatures to type erase callable; /// objects with an overload set, such as those produced by generic lambdas.; /// - Expand to include a copyable utility that directly replaces std::function; /// but brings the above improvements.; ///; /// Note that LLVM's utilities are greatly simplified by not supporting; /// allocators.; ///; /// If the standard library ever begins to provide comparable facilities we can; /// consider switching to those.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:122,Availability,error,error,122,// This specialization ensures that 'AdjustedParam<V<T>&>' or; // 'AdjustedParam<V<T>&&>' does not trigger a compile-time error when 'T' is; // an incomplete type and V a templated type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:389,Integrability,Wrap,Wrap,389,"// The pointers to call/move/destroy functions are determined for each; // callable type (and called-as type, which determines the overload chosen).; // (definitions are out-of-line).; // By default, we need an object that contains all the different; // type erased behaviors needed. Create a static instance of the struct type; // here and each instance will contain a pointer to it.; // Wrap in a struct to avoid https://gcc.gnu.org/PR71954",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:409,Safety,avoid,avoid,409,"// The pointers to call/move/destroy functions are determined for each; // callable type (and called-as type, which determines the overload chosen).; // (definitions are out-of-line).; // By default, we need an object that contains all the different; // type erased behaviors needed. Create a static instance of the struct type; // here and each instance will contain a pointer to it.; // Wrap in a struct to avoid https://gcc.gnu.org/PR71954",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:5,Usability,simpl,simple,5,// A simple tag type so the call-as type to be passed to the constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:3,Energy Efficiency,Allocate,Allocate,3,// Allocate out-of-line storage. FIXME: Use an explicit alignment; // parameter in C++17 mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:3,Performance,Cache,Cache,3,// Cache this value so we don't re-check it after type-erased operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:3,Usability,Clear,Clear,3,// Clear the old callback and inline flag to get back to as-if-null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:49,Safety,safe,safety,49,// Because we don't try to provide any exception safety guarantees we can; // implement move assignment very simply by first destroying the current; // object and then move-constructing over top of it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:109,Usability,simpl,simply,109,// Because we don't try to provide any exception safety guarantees we can; // implement move assignment very simply by first destroying the current; // object and then move-constructing over top of it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericConvergenceVerifier.h:3,Performance,Cache,Cache,3,// Cache token uses found so far. Note that we track the unique definitions; // and not the token values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericConvergenceVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericConvergenceVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h:481,Integrability,inject,injected,481,"//===- GenericCycleImpl.h -------------------------------------*- C++ -*---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This template implementation resides in a separate file so that it; /// does not get injected into every .cpp file that includes the; /// generic header.; ///; /// DO NOT INCLUDE THIS FILE WHEN MERELY USING CYCLEINFO.; ///; /// This file should only be included by files that implement a; /// specialization of the relevant templates. Currently these are:; /// - llvm/lib/IR/CycleInfo.cpp; /// - llvm/lib/CodeGen/MachineCycleAnalysis.cpp; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h:481,Security,inject,injected,481,"//===- GenericCycleImpl.h -------------------------------------*- C++ -*---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This template implementation resides in a separate file so that it; /// does not get injected into every .cpp file that includes the; /// generic header.; ///; /// DO NOT INCLUDE THIS FILE WHEN MERELY USING CYCLEINFO.; ///; /// This file should only be included by files that implement a; /// specialization of the relevant templates. Currently these are:; /// - llvm/lib/IR/CycleInfo.cpp; /// - llvm/lib/CodeGen/MachineCycleAnalysis.cpp; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h:11,Security,Validat,Validate,11,"/// \brief Validate the internal consistency of the cycle tree.; ///; /// Note that this does \em not check that cycles are really cycles in the CFG,; /// or that the right set of cycles in the CFG were found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h:734,Integrability,depend,depending,734,"//===- GenericCycleInfo.h - Info for Cycles in any IR ------*- C++ -*------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Find all cycles in a control-flow graph, including irreducible loops.; ///; /// See docs/CycleTerminology.rst for a formal definition of cycles.; ///; /// Briefly:; /// - A cycle is a generalization of a loop which can represent; /// irreducible control flow.; /// - Cycles identified in a program are implementation defined,; /// depending on the DFS traversal chosen.; /// - Cycles are well-nested, and form a forest with a parent-child; /// relationship.; /// - In any choice of DFS, every natural loop L is represented by a; /// unique cycle C which is a superset of L.; /// - In the absence of irreducible control flow, the cycles are; /// exactly the natural loops in the program.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h:124,Safety,avoid,avoid,124,"/// The entry block(s) of the cycle. The header is the only entry if; /// this is a loop. Is empty for the root ""cycle"", to avoid; /// unnecessary memory use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h:130,Deployability,update,update,130,/// Move \p Child to \p NewParent by manipulating Children vectors.; ///; /// Note: This is an incomplete operation that does not update the depth of; /// the subtree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h:31,Testability,test,test,31,/// Methods for debug and self-test.; //@{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericSSAContext.h:105,Security,access,access,105,// Ideally this should have been a stateless traits class. But the print methods; // for Machine IR need access to the owning function. So we track that state in; // the template itself.; //; // We use FunctionT as a template argument and not GenericSSATraits to allow; // forward declarations using well-known typenames.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericSSAContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericSSAContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericSSAContext.h:62,Usability,simpl,simply,62,"// The null value for ValueRefT. For LLVM IR and MIR, this is simply the; // default constructed value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericSSAContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericSSAContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:1665,Deployability,update,update,1665,"yImpl.h -----------------------*- C++ -*------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This template implementation resides in a separate file so that it; // does not get injected into every .cpp file that includes the; // generic header.; //; // DO NOT INCLUDE THIS FILE WHEN MERELY USING UNIFORMITYINFO.; //; // This file should only be included by files that implement a; // specialization of the relvant templates. Currently these are:; // - UniformityAnalysis.cpp; //; // Note: The DEBUG_TYPE macro should be defined before using this; // file so that any use of LLVM_DEBUG is associated with the; // including file rather than this file.; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Implementation of uniformity analysis.; ///; /// The algorithm is a fixed point iteration that starts with the assumption; /// that all control flow and all values are uniform. Starting from sources of; /// divergence (whose discovery must be implemented by a CFG- or even; /// target-specific derived class), divergence of values is propagated from; /// definition to uses in a straight-forward way. The main complexity lies in; /// the propagation of the impact of divergent control flow on the divergence of; /// values (sync dependencies).; ///; /// NOTE: In general, no interface exists for a transform to update; /// (Machine)UniformityInfo. Additionally, (Machine)CycleAnalysis is a; /// transitive dependence, but it also does not provide an interface for; /// updating itself. Given that, transforms should not preserve uniformity in; /// their getAnalysisUsage() callback.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:467,Integrability,inject,injected,467,"//===- GenericUniformityImpl.h -----------------------*- C++ -*------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This template implementation resides in a separate file so that it; // does not get injected into every .cpp file that includes the; // generic header.; //; // DO NOT INCLUDE THIS FILE WHEN MERELY USING UNIFORMITYINFO.; //; // This file should only be included by files that implement a; // specialization of the relvant templates. Currently these are:; // - UniformityAnalysis.cpp; //; // Note: The DEBUG_TYPE macro should be defined before using this; // file so that any use of LLVM_DEBUG is associated with the; // including file rather than this file.; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Implementation of uniformity analysis.; ///; /// The algorithm is a fixed point iteration that starts with the assumption; /// that all control flow and all values are uniform. Starting from sources of; /// divergence (whose discovery must be implemented by a CFG- or even; /// target-specific derived class), divergence of values is propagated from; /// definition to uses in a straight-forward way. The main complexity lies in; /// the propagation of the impact of divergent control flow on the divergence of; /// values (sync dependencies).; ///; /// NOTE: In general, no interface exists for a transform to update; /// (Machine)UniformityInfo. Additionally, (Machine)CycleAnalysis is a; /// transitive dependence, but it also does not provide an interface for; /// updating itself. Given that, transforms should not preserve uniformity in; /// their getAnalysisUsage() callback.; ///; //===-----------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:1583,Integrability,depend,dependencies,1583,"yImpl.h -----------------------*- C++ -*------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This template implementation resides in a separate file so that it; // does not get injected into every .cpp file that includes the; // generic header.; //; // DO NOT INCLUDE THIS FILE WHEN MERELY USING UNIFORMITYINFO.; //; // This file should only be included by files that implement a; // specialization of the relvant templates. Currently these are:; // - UniformityAnalysis.cpp; //; // Note: The DEBUG_TYPE macro should be defined before using this; // file so that any use of LLVM_DEBUG is associated with the; // including file rather than this file.; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Implementation of uniformity analysis.; ///; /// The algorithm is a fixed point iteration that starts with the assumption; /// that all control flow and all values are uniform. Starting from sources of; /// divergence (whose discovery must be implemented by a CFG- or even; /// target-specific derived class), divergence of values is propagated from; /// definition to uses in a straight-forward way. The main complexity lies in; /// the propagation of the impact of divergent control flow on the divergence of; /// values (sync dependencies).; ///; /// NOTE: In general, no interface exists for a transform to update; /// (Machine)UniformityInfo. Additionally, (Machine)CycleAnalysis is a; /// transitive dependence, but it also does not provide an interface for; /// updating itself. Given that, transforms should not preserve uniformity in; /// their getAnalysisUsage() callback.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:1629,Integrability,interface,interface,1629,"yImpl.h -----------------------*- C++ -*------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This template implementation resides in a separate file so that it; // does not get injected into every .cpp file that includes the; // generic header.; //; // DO NOT INCLUDE THIS FILE WHEN MERELY USING UNIFORMITYINFO.; //; // This file should only be included by files that implement a; // specialization of the relvant templates. Currently these are:; // - UniformityAnalysis.cpp; //; // Note: The DEBUG_TYPE macro should be defined before using this; // file so that any use of LLVM_DEBUG is associated with the; // including file rather than this file.; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Implementation of uniformity analysis.; ///; /// The algorithm is a fixed point iteration that starts with the assumption; /// that all control flow and all values are uniform. Starting from sources of; /// divergence (whose discovery must be implemented by a CFG- or even; /// target-specific derived class), divergence of values is propagated from; /// definition to uses in a straight-forward way. The main complexity lies in; /// the propagation of the impact of divergent control flow on the divergence of; /// values (sync dependencies).; ///; /// NOTE: In general, no interface exists for a transform to update; /// (Machine)UniformityInfo. Additionally, (Machine)CycleAnalysis is a; /// transitive dependence, but it also does not provide an interface for; /// updating itself. Given that, transforms should not preserve uniformity in; /// their getAnalysisUsage() callback.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:1760,Integrability,depend,dependence,1760,"yImpl.h -----------------------*- C++ -*------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This template implementation resides in a separate file so that it; // does not get injected into every .cpp file that includes the; // generic header.; //; // DO NOT INCLUDE THIS FILE WHEN MERELY USING UNIFORMITYINFO.; //; // This file should only be included by files that implement a; // specialization of the relvant templates. Currently these are:; // - UniformityAnalysis.cpp; //; // Note: The DEBUG_TYPE macro should be defined before using this; // file so that any use of LLVM_DEBUG is associated with the; // including file rather than this file.; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Implementation of uniformity analysis.; ///; /// The algorithm is a fixed point iteration that starts with the assumption; /// that all control flow and all values are uniform. Starting from sources of; /// divergence (whose discovery must be implemented by a CFG- or even; /// target-specific derived class), divergence of values is propagated from; /// definition to uses in a straight-forward way. The main complexity lies in; /// the propagation of the impact of divergent control flow on the divergence of; /// values (sync dependencies).; ///; /// NOTE: In general, no interface exists for a transform to update; /// (Machine)UniformityInfo. Additionally, (Machine)CycleAnalysis is a; /// transitive dependence, but it also does not provide an interface for; /// updating itself. Given that, transforms should not preserve uniformity in; /// their getAnalysisUsage() callback.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:1804,Integrability,interface,interface,1804,"yImpl.h -----------------------*- C++ -*------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This template implementation resides in a separate file so that it; // does not get injected into every .cpp file that includes the; // generic header.; //; // DO NOT INCLUDE THIS FILE WHEN MERELY USING UNIFORMITYINFO.; //; // This file should only be included by files that implement a; // specialization of the relvant templates. Currently these are:; // - UniformityAnalysis.cpp; //; // Note: The DEBUG_TYPE macro should be defined before using this; // file so that any use of LLVM_DEBUG is associated with the; // including file rather than this file.; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Implementation of uniformity analysis.; ///; /// The algorithm is a fixed point iteration that starts with the assumption; /// that all control flow and all values are uniform. Starting from sources of; /// divergence (whose discovery must be implemented by a CFG- or even; /// target-specific derived class), divergence of values is propagated from; /// definition to uses in a straight-forward way. The main complexity lies in; /// the propagation of the impact of divergent control flow on the divergence of; /// values (sync dependencies).; ///; /// NOTE: In general, no interface exists for a transform to update; /// (Machine)UniformityInfo. Additionally, (Machine)CycleAnalysis is a; /// transitive dependence, but it also does not provide an interface for; /// updating itself. Given that, transforms should not preserve uniformity in; /// their getAnalysisUsage() callback.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:467,Security,inject,injected,467,"//===- GenericUniformityImpl.h -----------------------*- C++ -*------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This template implementation resides in a separate file so that it; // does not get injected into every .cpp file that includes the; // generic header.; //; // DO NOT INCLUDE THIS FILE WHEN MERELY USING UNIFORMITYINFO.; //; // This file should only be included by files that implement a; // specialization of the relvant templates. Currently these are:; // - UniformityAnalysis.cpp; //; // Note: The DEBUG_TYPE macro should be defined before using this; // file so that any use of LLVM_DEBUG is associated with the; // including file rather than this file.; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Implementation of uniformity analysis.; ///; /// The algorithm is a fixed point iteration that starts with the assumption; /// that all control flow and all values are uniform. Starting from sources of; /// divergence (whose discovery must be implemented by a CFG- or even; /// target-specific derived class), divergence of values is propagated from; /// definition to uses in a straight-forward way. The main complexity lies in; /// the propagation of the impact of divergent control flow on the divergence of; /// values (sync dependencies).; ///; /// NOTE: In general, no interface exists for a transform to update; /// (Machine)UniformityInfo. Additionally, (Machine)CycleAnalysis is a; /// transitive dependence, but it also does not provide an interface for; /// updating itself. Given that, transforms should not preserve uniformity in; /// their getAnalysisUsage() callback.; ///; //===-----------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:2237,Energy Efficiency,reduce,reduce,2237," 1, %else ]; //; // Suppose %tid holds the thread ID. Although %a is not data dependent on %tid; // because %tid is not on its use-def chains, %a is sync dependent on %tid; // because the branch ""br i1 %cond"" depends on %tid and affects which value %a; // is assigned to.; //; //; // -- Reduction to SSA construction --; // There are two disjoint paths from A to X, if a certain variant of SSA; // construction places a phi node in X under the following set-up scheme.; //; // This variant of SSA construction ignores incoming undef values.; // That is paths from the entry without a definition do not result in; // phi nodes.; //; // entry; // / \; // A \; // / \ Y; // B C /; // \ / \ /; // D E; // \ /; // F; //; // Assume that A contains a divergent branch. We are interested; // in the set of all blocks where each block is reachable from A; // via two disjoint paths. This would be the set {D, F} in this; // case.; // To generally reduce this query to SSA construction we introduce; // a virtual variable x and assign to x different values in each; // successor block of A.; //; // entry; // / \; // A \; // / \ Y; // x = 0 x = 1 /; // \ / \ /; // D E; // \ /; // F; //; // Our flavor of SSA construction for x will construct the following; //; // entry; // / \; // A \; // / \ Y; // x0 = 0 x1 = 1 /; // \ / \ /; // x2 = phi E; // \ /; // x3 = phi; //; // The blocks D and F contain phi nodes and are thus each reachable; // by two disjoins paths from A.; //; // -- Remarks --; // * In case of cycle exits we need to check for temporal divergence.; // To this end, we check whether the definition of x differs between the; // cycle exit and the cycle header (_after_ SSA construction).; //; // * In the presence of irreducible control flow, the fixed point is; // reached only after multiple iterations. This is because labels; // reaching the header of a cycle must be repropagated through the; // cycle. This is true even in a reducible cycle, since the labels; // may have been produced by ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:986,Integrability,depend,dependence,986,"// \class GenericSyncDependenceAnalysis; ///; /// \brief Locate join blocks for disjoint paths starting at a divergent branch.; ///; /// An analysis per divergent branch that returns the set of basic; /// blocks whose phi nodes become divergent due to divergent control.; /// These are the blocks that are reachable by two disjoint paths from; /// the branch, or cycle exits reachable along a path that is disjoint; /// from a path to the cycle latch.; // --- Above line is not a doxygen comment; intentionally left blank ---; //; // Originally implemented in SyncDependenceAnalysis.cpp for DivergenceAnalysis.; //; // The SyncDependenceAnalysis is used in the UniformityAnalysis to model; // control-induced divergence in phi nodes.; //; // -- Reference --; // The algorithm is an extension of Section 5 of; //; // An abstract interpretation for SPMD divergence; // on reducible control flow graphs.; // Julian Rosemann, Simon Moll and Sebastian Hack; // POPL '21; //; //; // -- Sync dependence --; // Sync dependence characterizes the control flow aspect of the; // propagation of branch divergence. For example,; //; // %cond = icmp slt i32 %tid, 10; // br i1 %cond, label %then, label %else; // then:; // br label %merge; // else:; // br label %merge; // merge:; // %a = phi i32 [ 0, %then ], [ 1, %else ]; //; // Suppose %tid holds the thread ID. Although %a is not data dependent on %tid; // because %tid is not on its use-def chains, %a is sync dependent on %tid; // because the branch ""br i1 %cond"" depends on %tid and affects which value %a; // is assigned to.; //; //; // -- Reduction to SSA construction --; // There are two disjoint paths from A to X, if a certain variant of SSA; // construction places a phi node in X under the following set-up scheme.; //; // This variant of SSA construction ignores incoming undef values.; // That is paths from the entry without a definition do not result in; // phi nodes.; //; // entry; // / \; // A \; // / \ Y; // B C /; // \ / \ /; // D E; // \ ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:1009,Integrability,depend,dependence,1009,"// \class GenericSyncDependenceAnalysis; ///; /// \brief Locate join blocks for disjoint paths starting at a divergent branch.; ///; /// An analysis per divergent branch that returns the set of basic; /// blocks whose phi nodes become divergent due to divergent control.; /// These are the blocks that are reachable by two disjoint paths from; /// the branch, or cycle exits reachable along a path that is disjoint; /// from a path to the cycle latch.; // --- Above line is not a doxygen comment; intentionally left blank ---; //; // Originally implemented in SyncDependenceAnalysis.cpp for DivergenceAnalysis.; //; // The SyncDependenceAnalysis is used in the UniformityAnalysis to model; // control-induced divergence in phi nodes.; //; // -- Reference --; // The algorithm is an extension of Section 5 of; //; // An abstract interpretation for SPMD divergence; // on reducible control flow graphs.; // Julian Rosemann, Simon Moll and Sebastian Hack; // POPL '21; //; //; // -- Sync dependence --; // Sync dependence characterizes the control flow aspect of the; // propagation of branch divergence. For example,; //; // %cond = icmp slt i32 %tid, 10; // br i1 %cond, label %then, label %else; // then:; // br label %merge; // else:; // br label %merge; // merge:; // %a = phi i32 [ 0, %then ], [ 1, %else ]; //; // Suppose %tid holds the thread ID. Although %a is not data dependent on %tid; // because %tid is not on its use-def chains, %a is sync dependent on %tid; // because the branch ""br i1 %cond"" depends on %tid and affects which value %a; // is assigned to.; //; //; // -- Reduction to SSA construction --; // There are two disjoint paths from A to X, if a certain variant of SSA; // construction places a phi node in X under the following set-up scheme.; //; // This variant of SSA construction ignores incoming undef values.; // That is paths from the entry without a definition do not result in; // phi nodes.; //; // entry; // / \; // A \; // / \ Y; // B C /; // \ / \ /; // D E; // \ ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:1377,Integrability,depend,dependent,1377,"Above line is not a doxygen comment; intentionally left blank ---; //; // Originally implemented in SyncDependenceAnalysis.cpp for DivergenceAnalysis.; //; // The SyncDependenceAnalysis is used in the UniformityAnalysis to model; // control-induced divergence in phi nodes.; //; // -- Reference --; // The algorithm is an extension of Section 5 of; //; // An abstract interpretation for SPMD divergence; // on reducible control flow graphs.; // Julian Rosemann, Simon Moll and Sebastian Hack; // POPL '21; //; //; // -- Sync dependence --; // Sync dependence characterizes the control flow aspect of the; // propagation of branch divergence. For example,; //; // %cond = icmp slt i32 %tid, 10; // br i1 %cond, label %then, label %else; // then:; // br label %merge; // else:; // br label %merge; // merge:; // %a = phi i32 [ 0, %then ], [ 1, %else ]; //; // Suppose %tid holds the thread ID. Although %a is not data dependent on %tid; // because %tid is not on its use-def chains, %a is sync dependent on %tid; // because the branch ""br i1 %cond"" depends on %tid and affects which value %a; // is assigned to.; //; //; // -- Reduction to SSA construction --; // There are two disjoint paths from A to X, if a certain variant of SSA; // construction places a phi node in X under the following set-up scheme.; //; // This variant of SSA construction ignores incoming undef values.; // That is paths from the entry without a definition do not result in; // phi nodes.; //; // entry; // / \; // A \; // / \ Y; // B C /; // \ / \ /; // D E; // \ /; // F; //; // Assume that A contains a divergent branch. We are interested; // in the set of all blocks where each block is reachable from A; // via two disjoint paths. This would be the set {D, F} in this; // case.; // To generally reduce this query to SSA construction we introduce; // a virtual variable x and assign to x different values in each; // successor block of A.; //; // entry; // / \; // A \; // / \ Y; // x = 0 x = 1 /; // \ / \ /; // D E; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:1453,Integrability,depend,dependent,1453,"Above line is not a doxygen comment; intentionally left blank ---; //; // Originally implemented in SyncDependenceAnalysis.cpp for DivergenceAnalysis.; //; // The SyncDependenceAnalysis is used in the UniformityAnalysis to model; // control-induced divergence in phi nodes.; //; // -- Reference --; // The algorithm is an extension of Section 5 of; //; // An abstract interpretation for SPMD divergence; // on reducible control flow graphs.; // Julian Rosemann, Simon Moll and Sebastian Hack; // POPL '21; //; //; // -- Sync dependence --; // Sync dependence characterizes the control flow aspect of the; // propagation of branch divergence. For example,; //; // %cond = icmp slt i32 %tid, 10; // br i1 %cond, label %then, label %else; // then:; // br label %merge; // else:; // br label %merge; // merge:; // %a = phi i32 [ 0, %then ], [ 1, %else ]; //; // Suppose %tid holds the thread ID. Although %a is not data dependent on %tid; // because %tid is not on its use-def chains, %a is sync dependent on %tid; // because the branch ""br i1 %cond"" depends on %tid and affects which value %a; // is assigned to.; //; //; // -- Reduction to SSA construction --; // There are two disjoint paths from A to X, if a certain variant of SSA; // construction places a phi node in X under the following set-up scheme.; //; // This variant of SSA construction ignores incoming undef values.; // That is paths from the entry without a definition do not result in; // phi nodes.; //; // entry; // / \; // A \; // / \ Y; // B C /; // \ / \ /; // D E; // \ /; // F; //; // Assume that A contains a divergent branch. We are interested; // in the set of all blocks where each block is reachable from A; // via two disjoint paths. This would be the set {D, F} in this; // case.; // To generally reduce this query to SSA construction we introduce; // a virtual variable x and assign to x different values in each; // successor block of A.; //; // entry; // / \; // A \; // / \ Y; // x = 0 x = 1 /; // \ / \ /; // D E; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:1508,Integrability,depend,depends,1508,"Above line is not a doxygen comment; intentionally left blank ---; //; // Originally implemented in SyncDependenceAnalysis.cpp for DivergenceAnalysis.; //; // The SyncDependenceAnalysis is used in the UniformityAnalysis to model; // control-induced divergence in phi nodes.; //; // -- Reference --; // The algorithm is an extension of Section 5 of; //; // An abstract interpretation for SPMD divergence; // on reducible control flow graphs.; // Julian Rosemann, Simon Moll and Sebastian Hack; // POPL '21; //; //; // -- Sync dependence --; // Sync dependence characterizes the control flow aspect of the; // propagation of branch divergence. For example,; //; // %cond = icmp slt i32 %tid, 10; // br i1 %cond, label %then, label %else; // then:; // br label %merge; // else:; // br label %merge; // merge:; // %a = phi i32 [ 0, %then ], [ 1, %else ]; //; // Suppose %tid holds the thread ID. Although %a is not data dependent on %tid; // because %tid is not on its use-def chains, %a is sync dependent on %tid; // because the branch ""br i1 %cond"" depends on %tid and affects which value %a; // is assigned to.; //; //; // -- Reduction to SSA construction --; // There are two disjoint paths from A to X, if a certain variant of SSA; // construction places a phi node in X under the following set-up scheme.; //; // This variant of SSA construction ignores incoming undef values.; // That is paths from the entry without a definition do not result in; // phi nodes.; //; // entry; // / \; // A \; // / \ Y; // B C /; // \ / \ /; // D E; // \ /; // F; //; // Assume that A contains a divergent branch. We are interested; // in the set of all blocks where each block is reachable from A; // via two disjoint paths. This would be the set {D, F} in this; // case.; // To generally reduce this query to SSA construction we introduce; // a virtual variable x and assign to x different values in each; // successor block of A.; //; // entry; // / \; // A \; // / \ Y; // x = 0 x = 1 /; // \ / \ /; // D E; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:2302,Modifiability,variab,variable,2302," 1, %else ]; //; // Suppose %tid holds the thread ID. Although %a is not data dependent on %tid; // because %tid is not on its use-def chains, %a is sync dependent on %tid; // because the branch ""br i1 %cond"" depends on %tid and affects which value %a; // is assigned to.; //; //; // -- Reduction to SSA construction --; // There are two disjoint paths from A to X, if a certain variant of SSA; // construction places a phi node in X under the following set-up scheme.; //; // This variant of SSA construction ignores incoming undef values.; // That is paths from the entry without a definition do not result in; // phi nodes.; //; // entry; // / \; // A \; // / \ Y; // B C /; // \ / \ /; // D E; // \ /; // F; //; // Assume that A contains a divergent branch. We are interested; // in the set of all blocks where each block is reachable from A; // via two disjoint paths. This would be the set {D, F} in this; // case.; // To generally reduce this query to SSA construction we introduce; // a virtual variable x and assign to x different values in each; // successor block of A.; //; // entry; // / \; // A \; // / \ Y; // x = 0 x = 1 /; // \ / \ /; // D E; // \ /; // F; //; // Our flavor of SSA construction for x will construct the following; //; // entry; // / \; // A \; // / \ Y; // x0 = 0 x1 = 1 /; // \ / \ /; // x2 = phi E; // \ /; // x3 = phi; //; // The blocks D and F contain phi nodes and are thus each reachable; // by two disjoins paths from A.; //; // -- Remarks --; // * In case of cycle exits we need to check for temporal divergence.; // To this end, we check whether the definition of x differs between the; // cycle exit and the cycle header (_after_ SSA construction).; //; // * In the presence of irreducible control flow, the fixed point is; // reached only after multiple iterations. This is because labels; // reaching the header of a cycle must be repropagated through the; // cycle. This is true even in a reducible cycle, since the labels; // may have been produced by ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:3684,Usability,simpl,simple,3684," is paths from the entry without a definition do not result in; // phi nodes.; //; // entry; // / \; // A \; // / \ Y; // B C /; // \ / \ /; // D E; // \ /; // F; //; // Assume that A contains a divergent branch. We are interested; // in the set of all blocks where each block is reachable from A; // via two disjoint paths. This would be the set {D, F} in this; // case.; // To generally reduce this query to SSA construction we introduce; // a virtual variable x and assign to x different values in each; // successor block of A.; //; // entry; // / \; // A \; // / \ Y; // x = 0 x = 1 /; // \ / \ /; // D E; // \ /; // F; //; // Our flavor of SSA construction for x will construct the following; //; // entry; // / \; // A \; // / \ Y; // x0 = 0 x1 = 1 /; // \ / \ /; // x2 = phi E; // \ /; // x3 = phi; //; // The blocks D and F contain phi nodes and are thus each reachable; // by two disjoins paths from A.; //; // -- Remarks --; // * In case of cycle exits we need to check for temporal divergence.; // To this end, we check whether the definition of x differs between the; // cycle exit and the cycle header (_after_ SSA construction).; //; // * In the presence of irreducible control flow, the fixed point is; // reached only after multiple iterations. This is because labels; // reaching the header of a cycle must be repropagated through the; // cycle. This is true even in a reducible cycle, since the labels; // may have been produced by a nested irreducible cycle.; //; // * Note that SyncDependenceAnalysis is not concerned with the points; // of convergence in an irreducible cycle. It's only purpose is to; // identify join blocks. The ""diverged entry"" criterion is; // separately applied on join blocks to determine if an entire; // irreducible cycle is assumed to be divergent.; //; // * Relevant related work:; // A simple algorithm for global data flow analysis problems.; // Matthew S. Hecht and Jeffrey D. Ullman.; // SIAM Journal on Computing, 4(4):519–532, December 1975.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:39,Integrability,depend,dependence,39,/// Information discovered by the sync dependence analysis for each; /// divergent branch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:3,Safety,Detect,Detected,3,// Detected/marked divergent values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:264,Safety,detect,detection,264,"// If the current block is the header of a reducible cycle that; // contains the divergent branch, then the label should be; // propagated to the cycle exits. Such a header is the ""last; // possible join"" of any disjoint paths within this cycle. This; // prevents detection of spurious joins at the entries of any; // irreducible child cycles.; //; // This conclusion about the header is true for any choice of DFS:; //; // If some DFS has a reducible cycle C with header H, then for; // any other DFS, H is the header of a cycle C' that is a; // superset of C. For a divergent branch inside the subgraph; // C, any join node inside C is either H, or some node; // encountered without passing through H.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:9,Deployability,update,update,9,// Floor update,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:11,Availability,avail,available,11,// already available in cache?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:24,Performance,cache,cache,24,// already available in cache?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:117,Integrability,depend,depending,117,"// Cycles that are assumed divergent due to the diverged entry; // criterion potentially contain temporal divergence depending on; // the DFS chosen. Conservatively, all values produced in such a; // cycle are assumed divergent. ""Cycle invariant"" values may be; // assumed uniform, but that requires further analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:79,Deployability,update,updated,79,// All values on the Worklist are divergent.; // Their users may not have been updated yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityInfo.h:31,Safety,detect,detected,31,/// Whether any divergence was detected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h:147,Modifiability,evolve,evolved,147,// GraphTraits - This class should be specialized by different graph types...; // which is why the default version is empty.; //; // This template evolved from supporting `BasicBlock` to also later supporting; // more complex types (e.g. CFG and DomTree).; //; // GraphTraits can be used to create a view over a graph interpreting it; // differently without requiring a copy of the original graph. This could; // be achieved by carrying more data in NodeRef. See LoopBodyTraits for one; // example.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h:1468,Availability,error,error,1468,"// Elements to provide:; // typedef NodeRef - Type of Node token in the graph, which should; // be cheap to copy.; // typedef ChildIteratorType - Type used to iterate over children in graph,; // dereference to a NodeRef.; // static NodeRef getEntryNode(const GraphType &); // Return the entry node of the graph; // static ChildIteratorType child_begin(NodeRef); // static ChildIteratorType child_end (NodeRef); // Return iterators that point to the beginning and ending of the child; // node list for the specified node.; // typedef ...iterator nodes_iterator; - dereference to a NodeRef; // static nodes_iterator nodes_begin(GraphType *G); // static nodes_iterator nodes_end (GraphType *G); // nodes_iterator/begin/end - Allow iteration over all nodes in the graph; // typedef EdgeRef - Type of Edge token in the graph, which should; // be cheap to copy.; // typedef ChildEdgeIteratorType - Type used to iterate over children edges in; // graph, dereference to a EdgeRef.; // static ChildEdgeIteratorType child_edge_begin(NodeRef); // static ChildEdgeIteratorType child_edge_end(NodeRef); // Return iterators that point to the beginning and ending of the; // edge list for the given callgraph node.; //; // static NodeRef edge_dest(EdgeRef); // Return the destination node of an edge.; // static unsigned size (GraphType *G); // Return total number of nodes in the graph; // If anyone tries to use this class without having an appropriate; // specialization, make an error. If you get this error, it's because you; // need to include the appropriate specialization of GraphTraits<> for your; // graph, or you need to define it for a new graph type. Either that or; // your argument to XXX_begin(...) is unknown or needs to have the proper .h; // file #include'd.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h:1491,Availability,error,error,1491,"// Elements to provide:; // typedef NodeRef - Type of Node token in the graph, which should; // be cheap to copy.; // typedef ChildIteratorType - Type used to iterate over children in graph,; // dereference to a NodeRef.; // static NodeRef getEntryNode(const GraphType &); // Return the entry node of the graph; // static ChildIteratorType child_begin(NodeRef); // static ChildIteratorType child_end (NodeRef); // Return iterators that point to the beginning and ending of the child; // node list for the specified node.; // typedef ...iterator nodes_iterator; - dereference to a NodeRef; // static nodes_iterator nodes_begin(GraphType *G); // static nodes_iterator nodes_end (GraphType *G); // nodes_iterator/begin/end - Allow iteration over all nodes in the graph; // typedef EdgeRef - Type of Edge token in the graph, which should; // be cheap to copy.; // typedef ChildEdgeIteratorType - Type used to iterate over children edges in; // graph, dereference to a EdgeRef.; // static ChildEdgeIteratorType child_edge_begin(NodeRef); // static ChildEdgeIteratorType child_edge_end(NodeRef); // Return iterators that point to the beginning and ending of the; // edge list for the given callgraph node.; //; // static NodeRef edge_dest(EdgeRef); // Return the destination node of an edge.; // static unsigned size (GraphType *G); // Return total number of nodes in the graph; // If anyone tries to use this class without having an appropriate; // specialization, make an error. If you get this error, it's because you; // need to include the appropriate specialization of GraphTraits<> for your; // graph, or you need to define it for a new graph type. Either that or; // your argument to XXX_begin(...) is unknown or needs to have the proper .h; // file #include'd.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h:219,Integrability,depend,depends,219,"// Inverse - This class is used as a little marker class to tell the graph; // iterator to iterate over the graph in a graph defined ""Inverse"" ordering.; // Not all graphs define an inverse ordering, and if they do, it depends on; // the graph exactly what that is. Here's an example of usage with the; // df_iterator:; //; // idf_iterator<Method*> I = idf_begin(M), E = idf_end(M);; // for (; I != E; ++I) { ... }; //; // Which is equivalent to:; // df_iterator<Inverse<Method*>> I = idf_begin(M), E = idf_end(M);; // for (; I != E; ++I) { ... }; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:436,Integrability,interface,interfaces,436,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:539,Integrability,interface,interface,539,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:685,Integrability,interface,interfaces,685,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1976,Integrability,rout,routine,1976,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1058,Safety,risk,risky,1058,"hing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' cont",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:17,Security,Hash,Hashing,17,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:43,Security,hash,hashing,43,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:451,Security,hash,hashing,451,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:491,Security,hash,hash,491,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:815,Security,hash,hash,815,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:874,Security,hash,hashing,874,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:916,Security,hash,hash,916,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:929,Security,checksum,checksumming,929,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:968,Security,hash,hashes,968,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1379,Security,hash,hashing,1379,"--------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // un",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1531,Security,hash,hashing,1531,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:2075,Security,hash,hashing,2075,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:2305,Security,hash,hash,2305,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1910,Testability,log,logically,1910,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:2065,Testability,log,logic,2065,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:2136,Testability,log,logic,2136,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:2244,Testability,benchmark,benchmarked,2244,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1811,Usability,intuit,intuitively,1811,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:224,Integrability,wrap,wraps,224,"/// An opaque object representing a hash code.; ///; /// This object represents the result of hashing some entity. It is intended to; /// be used to implement hashtables or other hashing-based data structures.; /// While it wraps and exposes a numeric value, this value should not be; /// trusted to be stable or predictable across processes or executions.; ///; /// In order to obtain the hash_code for an object 'x':; /// \code; /// using llvm::hash_value;; /// llvm::hash_code code = hash_value(x);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:313,Safety,predict,predictable,313,"/// An opaque object representing a hash code.; ///; /// This object represents the result of hashing some entity. It is intended to; /// be used to implement hashtables or other hashing-based data structures.; /// While it wraps and exposes a numeric value, this value should not be; /// trusted to be stable or predictable across processes or executions.; ///; /// In order to obtain the hash_code for an object 'x':; /// \code; /// using llvm::hash_value;; /// llvm::hash_code code = hash_value(x);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:36,Security,hash,hash,36,"/// An opaque object representing a hash code.; ///; /// This object represents the result of hashing some entity. It is intended to; /// be used to implement hashtables or other hashing-based data structures.; /// While it wraps and exposes a numeric value, this value should not be; /// trusted to be stable or predictable across processes or executions.; ///; /// In order to obtain the hash_code for an object 'x':; /// \code; /// using llvm::hash_value;; /// llvm::hash_code code = hash_value(x);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:94,Security,hash,hashing,94,"/// An opaque object representing a hash code.; ///; /// This object represents the result of hashing some entity. It is intended to; /// be used to implement hashtables or other hashing-based data structures.; /// While it wraps and exposes a numeric value, this value should not be; /// trusted to be stable or predictable across processes or executions.; ///; /// In order to obtain the hash_code for an object 'x':; /// \code; /// using llvm::hash_value;; /// llvm::hash_code code = hash_value(x);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:159,Security,hash,hashtables,159,"/// An opaque object representing a hash code.; ///; /// This object represents the result of hashing some entity. It is intended to; /// be used to implement hashtables or other hashing-based data structures.; /// While it wraps and exposes a numeric value, this value should not be; /// trusted to be stable or predictable across processes or executions.; ///; /// In order to obtain the hash_code for an object 'x':; /// \code; /// using llvm::hash_value;; /// llvm::hash_code code = hash_value(x);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:179,Security,hash,hashing-based,179,"/// An opaque object representing a hash code.; ///; /// This object represents the result of hashing some entity. It is intended to; /// be used to implement hashtables or other hashing-based data structures.; /// While it wraps and exposes a numeric value, this value should not be; /// trusted to be stable or predictable across processes or executions.; ///; /// In order to obtain the hash_code for an object 'x':; /// \code; /// using llvm::hash_value;; /// llvm::hash_code code = hash_value(x);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:234,Security,expose,exposes,234,"/// An opaque object representing a hash code.; ///; /// This object represents the result of hashing some entity. It is intended to; /// be used to implement hashtables or other hashing-based data structures.; /// While it wraps and exposes a numeric value, this value should not be; /// trusted to be stable or predictable across processes or executions.; ///; /// In order to obtain the hash_code for an object 'x':; /// \code; /// using llvm::hash_value;; /// llvm::hash_code code = hash_value(x);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:11,Security,hash,hash,11,/// Form a hash code directly from a numerical value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:16,Security,hash,hash,16,/// Convert the hash code to its numerical value for use.; /*explicit*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:70,Security,hash,hashes,70,/// Compute a hash_code for a pointer's address.; ///; /// N.B.: This hashes the *address*. Not the value and not the type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:67,Security,hash,hashing,67,"/// Override the execution seed with a fixed value.; ///; /// This hashing library uses a per-execution seed designed to change on each; /// run with high probability in order to ensure that the hash codes are not; /// attackable and to ensure that output which is intended to be stable does; /// not rely on the particulars of the hash codes produced.; ///; /// That said, there are use cases where it is important to be able to; /// reproduce *exactly* a specific behavior. To that end, we provide a function; /// which will forcibly set the seed to a fixed value. This must be done at the; /// start of the program, before any hashes are computed. Also, it cannot be; /// undone. This makes it thread-hostile and very hard to use outside of; /// immediately on start of a simple program designed for reproducible; /// behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:195,Security,hash,hash,195,"/// Override the execution seed with a fixed value.; ///; /// This hashing library uses a per-execution seed designed to change on each; /// run with high probability in order to ensure that the hash codes are not; /// attackable and to ensure that output which is intended to be stable does; /// not rely on the particulars of the hash codes produced.; ///; /// That said, there are use cases where it is important to be able to; /// reproduce *exactly* a specific behavior. To that end, we provide a function; /// which will forcibly set the seed to a fixed value. This must be done at the; /// start of the program, before any hashes are computed. Also, it cannot be; /// undone. This makes it thread-hostile and very hard to use outside of; /// immediately on start of a simple program designed for reproducible; /// behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:219,Security,attack,attackable,219,"/// Override the execution seed with a fixed value.; ///; /// This hashing library uses a per-execution seed designed to change on each; /// run with high probability in order to ensure that the hash codes are not; /// attackable and to ensure that output which is intended to be stable does; /// not rely on the particulars of the hash codes produced.; ///; /// That said, there are use cases where it is important to be able to; /// reproduce *exactly* a specific behavior. To that end, we provide a function; /// which will forcibly set the seed to a fixed value. This must be done at the; /// start of the program, before any hashes are computed. Also, it cannot be; /// undone. This makes it thread-hostile and very hard to use outside of; /// immediately on start of a simple program designed for reproducible; /// behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:332,Security,hash,hash,332,"/// Override the execution seed with a fixed value.; ///; /// This hashing library uses a per-execution seed designed to change on each; /// run with high probability in order to ensure that the hash codes are not; /// attackable and to ensure that output which is intended to be stable does; /// not rely on the particulars of the hash codes produced.; ///; /// That said, there are use cases where it is important to be able to; /// reproduce *exactly* a specific behavior. To that end, we provide a function; /// which will forcibly set the seed to a fixed value. This must be done at the; /// start of the program, before any hashes are computed. Also, it cannot be; /// undone. This makes it thread-hostile and very hard to use outside of; /// immediately on start of a simple program designed for reproducible; /// behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:630,Security,hash,hashes,630,"/// Override the execution seed with a fixed value.; ///; /// This hashing library uses a per-execution seed designed to change on each; /// run with high probability in order to ensure that the hash codes are not; /// attackable and to ensure that output which is intended to be stable does; /// not rely on the particulars of the hash codes produced.; ///; /// That said, there are use cases where it is important to be able to; /// reproduce *exactly* a specific behavior. To that end, we provide a function; /// which will forcibly set the seed to a fixed value. This must be done at the; /// start of the program, before any hashes are computed. Also, it cannot be; /// undone. This makes it thread-hostile and very hard to use outside of; /// immediately on start of a simple program designed for reproducible; /// behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:675,Usability,undo,undone,675,"/// Override the execution seed with a fixed value.; ///; /// This hashing library uses a per-execution seed designed to change on each; /// run with high probability in order to ensure that the hash codes are not; /// attackable and to ensure that output which is intended to be stable does; /// not rely on the particulars of the hash codes produced.; ///; /// That said, there are use cases where it is important to be able to; /// reproduce *exactly* a specific behavior. To that end, we provide a function; /// which will forcibly set the seed to a fixed value. This must be done at the; /// start of the program, before any hashes are computed. Also, it cannot be; /// undone. This makes it thread-hostile and very hard to use outside of; /// immediately on start of a simple program designed for reproducible; /// behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:775,Usability,simpl,simple,775,"/// Override the execution seed with a fixed value.; ///; /// This hashing library uses a per-execution seed designed to change on each; /// run with high probability in order to ensure that the hash codes are not; /// attackable and to ensure that output which is intended to be stable does; /// not rely on the particulars of the hash codes produced.; ///; /// That said, there are use cases where it is important to be able to; /// reproduce *exactly* a specific behavior. To that end, we provide a function; /// which will forcibly set the seed to a fixed value. This must be done at the; /// start of the program, before any hashes are computed. Also, it cannot be; /// undone. This makes it thread-hostile and very hard to use outside of; /// immediately on start of a simple program designed for reproducible; /// behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:130,Integrability,rout,routines,130,// All of the implementation details of actually computing the various hash; // code values are held within this namespace. These routines are included in; // the header file mainly to allow inlining and constant propagation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:71,Security,hash,hash,71,// All of the implementation details of actually computing the various hash; // code values are held within this namespace. These routines are included in; // the header file mainly to allow inlining and constant propagation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:3,Safety,Avoid,Avoid,3,// Avoid shifting by 64: doing so yields an undefined result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:19,Security,hash,hashing,19,// Murmur-inspired hashing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:39,Security,hash,hashing,39,"/// The intermediate state used during hashing.; /// Currently, the algorithm for computing hash codes is based on CityHash and; /// keeps 56 bytes of arbitrary state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:92,Security,hash,hash,92,"/// The intermediate state used during hashing.; /// Currently, the algorithm for computing hash codes is based on CityHash and; /// keeps 56 bytes of arbitrary state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:130,Performance,perform,performs,130,/// Create a new hash_state structure and initialize it based on the; /// seed and the first 64-byte chunk.; /// This effectively performs the initial mix.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:29,Security,hash,hash,29,/// Compute the final 64-bit hash code value based on the current; /// state and the length of bytes hashed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:101,Security,hash,hashed,101,/// Compute the final 64-bit hash code value based on the current; /// state and the length of bytes hashed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:34,Modifiability,variab,variable,34,"/// A global, fixed seed-override variable.; ///; /// This variable can be set using the \see llvm::set_fixed_execution_seed; /// function. See that function for details. Do not, under any circumstances,; /// set or read this variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:59,Modifiability,variab,variable,59,"/// A global, fixed seed-override variable.; ///; /// This variable can be set using the \see llvm::set_fixed_execution_seed; /// function. See that function for details. Do not, under any circumstances,; /// set or read this variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:226,Modifiability,variab,variable,226,"/// A global, fixed seed-override variable.; ///; /// This variable can be set using the \see llvm::set_fixed_execution_seed; /// function. See that function for details. Do not, under any circumstances,; /// set or read this variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:51,Security,hash,hashed,51,"/// Trait to indicate whether a type's bits can be hashed directly.; ///; /// A type trait which is true if we want to combine values for hashing by; /// reading the underlying data. It is false if values of this type must; /// first be passed to hash_value, and the resulting hash_codes combined.; //; // FIXME: We want to replace is_integral_or_enum and is_pointer here with; // a predicate which asserts that comparing the underlying storage of two; // values of the type for equality is equivalent to comparing the two values; // for equality. For all the platforms we care about, this holds for integers; // and pointers, but there are platforms where it doesn't and we would like to; // support user-defined types which happen to satisfy this property.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:138,Security,hash,hashing,138,"/// Trait to indicate whether a type's bits can be hashed directly.; ///; /// A type trait which is true if we want to combine values for hashing by; /// reading the underlying data. It is false if values of this type must; /// first be passed to hash_value, and the resulting hash_codes combined.; //; // FIXME: We want to replace is_integral_or_enum and is_pointer here with; // a predicate which asserts that comparing the underlying storage of two; // values of the type for equality is equivalent to comparing the two values; // for equality. For all the platforms we care about, this holds for integers; // and pointers, but there are platforms where it doesn't and we would like to; // support user-defined types which happen to satisfy this property.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:399,Testability,assert,asserts,399,"/// Trait to indicate whether a type's bits can be hashed directly.; ///; /// A type trait which is true if we want to combine values for hashing by; /// reading the underlying data. It is false if values of this type must; /// first be passed to hash_value, and the resulting hash_codes combined.; //; // FIXME: We want to replace is_integral_or_enum and is_pointer here with; // a predicate which asserts that comparing the underlying storage of two; // values of the type for equality is equivalent to comparing the two values; // for equality. For all the platforms we care about, this holds for integers; // and pointers, but there are platforms where it doesn't and we would like to; // support user-defined types which happen to satisfy this property.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:29,Safety,detect,detect,29,"// Special case std::pair to detect when both types are viable and when there; // is no alignment-derived padding in the pair. This is a bit of a lie because; // std::pair isn't truly POD, but it's close enough in all reasonable; // implementations for our use case of hashing the underlying data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:269,Security,hash,hashing,269,"// Special case std::pair to detect when both types are viable and when there; // is no alignment-derived padding in the pair. This is a bit of a lie because; // std::pair isn't truly POD, but it's close enough in all reasonable; // implementations for our use case of hashing the underlying data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:22,Security,hash,hashable,22,/// Helper to get the hashable data representation for a type.; /// This variant is enabled when the type itself can be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:22,Security,hash,hashable,22,/// Helper to get the hashable data representation for a type.; /// This variant is enabled when we must first call hash_value and use the; /// result as our data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:114,Integrability,rout,routine,114,"/// Helper to store data from a value into a buffer and advance the; /// pointer into that buffer.; ///; /// This routine first checks whether there is enough space in the provided; /// buffer, and if not immediately returns false. If there is space, it; /// copies the underlying bytes of value into the buffer, advances the; /// buffer_ptr past the copied bytes, and returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:247,Performance,optimiz,optimization,247,"/// Implement the combining of integral values into a hash_code.; ///; /// This overload is selected when the value type of the iterator is; /// integral. Rather than computing a hash_code for each object and then; /// combining them, this (as an optimization) directly combines the integers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:32,Usability,clear,clear,32,"// Fill up the buffer. We don't clear it, which re-mixes the last round; // when only a partial 64-byte chunk is left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:418,Integrability,rout,routine,418,"/// Implement the combining of integral values into a hash_code.; ///; /// This overload is selected when the value type of the iterator is integral; /// and when the input iterator is actually a pointer. Rather than computing; /// a hash_code for each object and then combining them, this (as an; /// optimization) directly combines the integers. Also, because the integers; /// are stored in contiguous memory, this routine avoids copying each value; /// and directly reads from the underlying memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:302,Performance,optimiz,optimization,302,"/// Implement the combining of integral values into a hash_code.; ///; /// This overload is selected when the value type of the iterator is integral; /// and when the input iterator is actually a pointer. Rather than computing; /// a hash_code for each object and then combining them, this (as an; /// optimization) directly combines the integers. Also, because the integers; /// are stored in contiguous memory, this routine avoids copying each value; /// and directly reads from the underlying memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:426,Safety,avoid,avoids,426,"/// Implement the combining of integral values into a hash_code.; ///; /// This overload is selected when the value type of the iterator is integral; /// and when the input iterator is actually a pointer. Rather than computing; /// a hash_code for each object and then combining them, this (as an; /// optimization) directly combines the integers. Also, because the integers; /// are stored in contiguous memory, this routine avoids copying each value; /// and directly reads from the underlying memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:13,Security,hash,hashing,13,"// namespace hashing; /// Compute a hash_code for a sequence of values.; ///; /// This hashes a sequence of values. It produces the same hash_code as; /// 'hash_combine(a, b, c, ...)', but can run over arbitrary sized sequences; /// and is significantly faster given pointers and types which can be hashed as; /// a sequence of bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:87,Security,hash,hashes,87,"// namespace hashing; /// Compute a hash_code for a sequence of values.; ///; /// This hashes a sequence of values. It produces the same hash_code as; /// 'hash_combine(a, b, c, ...)', but can run over arbitrary sized sequences; /// and is significantly faster given pointers and types which can be hashed as; /// a sequence of bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:299,Security,hash,hashed,299,"// namespace hashing; /// Compute a hash_code for a sequence of values.; ///; /// This hashes a sequence of values. It produces the same hash_code as; /// 'hash_combine(a, b, c, ...)', but can run over arbitrary sized sequences; /// and is significantly faster given pointers and types which can be hashed as; /// a sequence of bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:26,Security,hash,hash,26,"/// Construct a recursive hash combining helper.; ///; /// This sets up the state for a recursive hash combine, including getting; /// the seed and buffer setup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:98,Security,hash,hash,98,"/// Construct a recursive hash combining helper.; ///; /// This sets up the state for a recursive hash combine, including getting; /// the seed and buffer setup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:57,Security,hash,hash,57,"/// Combine one chunk of data into the current in-flight hash.; ///; /// This merges one chunk of data into the hash. First it tries to buffer; /// the data. If the buffer is full, it hashes the buffer into its; /// hash_state, empties it, and then merges the new chunk in. This also; /// handles cases where the data straddles the end of the buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:112,Security,hash,hash,112,"/// Combine one chunk of data into the current in-flight hash.; ///; /// This merges one chunk of data into the hash. First it tries to buffer; /// the data. If the buffer is full, it hashes the buffer into its; /// hash_state, empties it, and then merges the new chunk in. This also; /// handles cases where the data straddles the end of the buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:184,Security,hash,hashes,184,"/// Combine one chunk of data into the current in-flight hash.; ///; /// This merges one chunk of data into the hash. First it tries to buffer; /// the data. If the buffer is full, it hashes the buffer into its; /// hash_state, empties it, and then merges the new chunk in. This also; /// handles cases where the data straddles the end of the buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:55,Security,hash,hash,55,"// If the store fails, our buffer is full and ready to hash. We have to; // either initialize the hash state (on the first full buffer) or mix; // this buffer into the existing hash state. Length tracks the *hashed*; // length, not the buffered length.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:98,Security,hash,hash,98,"// If the store fails, our buffer is full and ready to hash. We have to; // either initialize the hash state (on the first full buffer) or mix; // this buffer into the existing hash state. Length tracks the *hashed*; // length, not the buffered length.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:177,Security,hash,hash,177,"// If the store fails, our buffer is full and ready to hash. We have to; // either initialize the hash state (on the first full buffer) or mix; // this buffer into the existing hash state. Length tracks the *hashed*; // length, not the buffered length.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:208,Security,hash,hashed,208,"// If the store fails, our buffer is full and ready to hash. We have to; // either initialize the hash state (on the first full buffer) or mix; // this buffer into the existing hash state. Length tracks the *hashed*; // length, not the buffered length.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:141,Security,hash,hash,141,"/// Recursive, variadic combining method.; ///; /// This function recurses through each argument, combining that argument; /// into a single hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:110,Integrability,rout,routine,110,"// Check whether the entire set of values fit in the buffer. If so, we'll; // use the optimized short hashing routine and skip state entirely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:86,Performance,optimiz,optimized,86,"// Check whether the entire set of values fit in the buffer. If so, we'll; // use the optimized short hashing routine and skip state entirely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:102,Security,hash,hashing,102,"// Check whether the entire set of values fit in the buffer. If so, we'll; // use the optimized short hashing routine and skip state entirely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:81,Integrability,rout,routine,81,"// namespace hashing; /// Combine values into a single hash_code.; ///; /// This routine accepts a varying number of arguments of any type. It will; /// attempt to combine them into a single hash_code. For user-defined types it; /// attempts to call a \see hash_value overload (via ADL) for the type. For; /// integer and pointer types it directly combines their data into the; /// resulting hash_code.; ///; /// The result is suitable for returning from a user's hash_value; /// *implementation* for their user-defined type. Consumers of a type should; /// *not* call this routine, they should instead call 'hash_value'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:574,Integrability,rout,routine,574,"// namespace hashing; /// Combine values into a single hash_code.; ///; /// This routine accepts a varying number of arguments of any type. It will; /// attempt to combine them into a single hash_code. For user-defined types it; /// attempts to call a \see hash_value overload (via ADL) for the type. For; /// integer and pointer types it directly combines their data into the; /// resulting hash_code.; ///; /// The result is suitable for returning from a user's hash_value; /// *implementation* for their user-defined type. Consumers of a type should; /// *not* call this routine, they should instead call 'hash_value'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:13,Security,hash,hashing,13,"// namespace hashing; /// Combine values into a single hash_code.; ///; /// This routine accepts a varying number of arguments of any type. It will; /// attempt to combine them into a single hash_code. For user-defined types it; /// attempts to call a \see hash_value overload (via ADL) for the type. For; /// integer and pointer types it directly combines their data into the; /// resulting hash_code.; ///; /// The result is suitable for returning from a user's hash_value; /// *implementation* for their user-defined type. Consumers of a type should; /// *not* call this routine, they should instead call 'hash_value'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:15,Security,hash,hash,15,// Recursively hash each argument using a helper class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:14,Security,hash,hash,14,"/// Helper to hash the value of a single integer.; ///; /// Overloads for smaller integer types are not provided to ensure consistent; /// behavior in the presence of integral promotions. Essentially,; /// ""hash_value('4')"" and ""hash_value('0' + 4)"" should be the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:122,Availability,avail,available,122,"// namespace hashing; // Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:13,Security,hash,hashing,13,"// namespace hashing; // Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:92,Security,hash,hashing,92,"// namespace hashing; // Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:100,Availability,avail,available,100,"// Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:70,Security,hash,hashing,70,"// Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:100,Availability,avail,available,100,"// Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:70,Security,hash,hashing,70,"// Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:100,Availability,avail,available,100,"// Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:70,Security,hash,hashing,70,"// Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:38,Security,hash,hash,38,// namespace llvm; /// Implement std::hash so that hash_code can be used in STL containers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:88,Modifiability,inherit,inherit,88,"/// Custom traits to do nothing on deletion.; ///; /// Specialize ilist_alloc_traits to inherit from this to disable the; /// non-intrusive deletion in iplist (which implies ownership).; ///; /// If you want purely intrusive semantics with no callbacks, consider using \a; /// simple_ilist instead.; ///; /// \code; /// template <>; /// struct ilist_alloc_traits<MyType> : ilist_noalloc_traits<MyType> {};; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:92,Integrability,wrap,wrapper,92,"//===----------------------------------------------------------------------===//; //; /// A wrapper around an intrusive list with callbacks and non-intrusive; /// ownership.; ///; /// This wraps a purely intrusive list (like simple_ilist) with a configurable; /// traits class. The traits can implement callbacks and customize the; /// ownership semantics.; ///; /// This is a subset of ilist functionality that can safely be used on nodes of; /// polymorphic types, i.e. a heterogeneous list with a common base class that; /// holds the next/prev pointers. The only state of the list itself is an; /// ilist_sentinel, which holds pointers to the first and last nodes in the; /// list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:189,Integrability,wrap,wraps,189,"//===----------------------------------------------------------------------===//; //; /// A wrapper around an intrusive list with callbacks and non-intrusive; /// ownership.; ///; /// This wraps a purely intrusive list (like simple_ilist) with a configurable; /// traits class. The traits can implement callbacks and customize the; /// ownership semantics.; ///; /// This is a subset of ilist functionality that can safely be used on nodes of; /// polymorphic types, i.e. a heterogeneous list with a common base class that; /// holds the next/prev pointers. The only state of the list itself is an; /// ilist_sentinel, which holds pointers to the first and last nodes in the; /// list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:246,Modifiability,config,configurable,246,"//===----------------------------------------------------------------------===//; //; /// A wrapper around an intrusive list with callbacks and non-intrusive; /// ownership.; ///; /// This wraps a purely intrusive list (like simple_ilist) with a configurable; /// traits class. The traits can implement callbacks and customize the; /// ownership semantics.; ///; /// This is a subset of ilist functionality that can safely be used on nodes of; /// polymorphic types, i.e. a heterogeneous list with a common base class that; /// holds the next/prev pointers. The only state of the list itself is an; /// ilist_sentinel, which holds pointers to the first and last nodes in the; /// list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:448,Modifiability,polymorphi,polymorphic,448,"//===----------------------------------------------------------------------===//; //; /// A wrapper around an intrusive list with callbacks and non-intrusive; /// ownership.; ///; /// This wraps a purely intrusive list (like simple_ilist) with a configurable; /// traits class. The traits can implement callbacks and customize the; /// ownership semantics.; ///; /// This is a subset of ilist functionality that can safely be used on nodes of; /// polymorphic types, i.e. a heterogeneous list with a common base class that; /// holds the next/prev pointers. The only state of the list itself is an; /// ilist_sentinel, which holds pointers to the first and last nodes in the; /// list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:416,Safety,safe,safely,416,"//===----------------------------------------------------------------------===//; //; /// A wrapper around an intrusive list with callbacks and non-intrusive; /// ownership.; ///; /// This wraps a purely intrusive list (like simple_ilist) with a configurable; /// traits class. The traits can implement callbacks and customize the; /// ownership semantics.; ///; /// This is a subset of ilist functionality that can safely be used on nodes of; /// polymorphic types, i.e. a heterogeneous list with a common base class that; /// holds the next/prev pointers. The only state of the list itself is an; /// ilist_sentinel, which holds pointers to the first and last nodes in the; /// list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:28,Integrability,rout,routines,28,// Miscellaneous inspection routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:250,Performance,cache,cache,250,"/// Remove all nodes from the list like clear(), but do not call; /// removeNodeFromList() or deleteNode().; ///; /// This should only be used immediately before freeing nodes in bulk to; /// avoid traversing the list and bringing all the nodes into cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:192,Safety,avoid,avoid,192,"/// Remove all nodes from the list like clear(), but do not call; /// removeNodeFromList() or deleteNode().; ///; /// This should only be used immediately before freeing nodes in bulk to; /// avoid traversing the list and bringing all the nodes into cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:40,Usability,clear,clear,40,"/// Remove all nodes from the list like clear(), but do not call; /// removeNodeFromList() or deleteNode().; ///; /// This should only be used immediately before freeing nodes in bulk to; /// avoid traversing the list and bringing all the nodes into cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:258,Availability,avail,available,258,"/// An intrusive list with ownership and callbacks specified/controlled by; /// ilist_traits, only with API safe for polymorphic types.; ///; /// The \p Options parameters are the same as those for \a simple_ilist. See; /// there for a description of what's available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:117,Modifiability,polymorphi,polymorphic,117,"/// An intrusive list with ownership and callbacks specified/controlled by; /// ilist_traits, only with API safe for polymorphic types.; ///; /// The \p Options parameters are the same as those for \a simple_ilist. See; /// there for a description of what's available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:108,Safety,safe,safe,108,"/// An intrusive list with ownership and callbacks specified/controlled by; /// ilist_traits, only with API safe for polymorphic types.; ///; /// The \p Options parameters are the same as those for \a simple_ilist. See; /// there for a description of what's available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h:3,Security,Access,Accessors,3,// Accessors...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h:3,Security,Access,Accessors,3,// Accessors...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h:40,Security,access,accessible,40,// ilist_iterator_w_bits should also be accessible via isa/dyn_cast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:191,Integrability,wrap,wrapper,191,"/// Implementation for an ilist node.; ///; /// Templated on an appropriate \a ilist_detail::node_options, usually computed; /// by \a ilist_detail::compute_node_options.; ///; /// This is a wrapper around \a ilist_node_base whose main purpose is to; /// provide type safety: you can't insert nodes of \a ilist_node_impl into the; /// wrong \a simple_ilist or \a iplist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:268,Safety,safe,safety,268,"/// Implementation for an ilist node.; ///; /// Templated on an appropriate \a ilist_detail::node_options, usually computed; /// by \a ilist_detail::compute_node_options.; ///; /// This is a wrapper around \a ilist_node_base whose main purpose is to; /// provide type safety: you can't insert nodes of \a ilist_node_impl into the; /// wrong \a simple_ilist or \a iplist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:35,Availability,avail,available,35,"// Under-approximation, but always available for assertions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:49,Testability,assert,assertions,49,"// Under-approximation, but always available for assertions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:648,Availability,mask,mask,648,"/// An intrusive list node.; ///; /// A base class to enable membership in intrusive lists, including \a; /// simple_ilist, \a iplist, and \a ilist. The first template parameter is the; /// \a value_type for the list.; ///; /// An ilist node can be configured with compile-time options to change; /// behaviour and/or add API.; ///; /// By default, an \a ilist_node knows whether it is the list sentinel (an; /// instance of \a ilist_sentinel) if and only if; /// LLVM_ENABLE_ABI_BREAKING_CHECKS. The function \a isKnownSentinel() always; /// returns \c false tracking is off. Sentinel tracking steals a bit from the; /// ""prev"" link, which adds a mask operation when decrementing an iterator, but; /// enables bug-finding assertions in \a ilist_iterator.; ///; /// To turn sentinel tracking on all the time, pass in the; /// ilist_sentinel_tracking<true> template parameter. This also enables the \a; /// isSentinel() function. The same option must be passed to the intrusive; /// list. (ilist_sentinel_tracking<false> turns sentinel tracking off all the; /// time.); ///; /// A type can inherit from ilist_node multiple times by passing in different; /// \a ilist_tag options. This allows a single instance to be inserted into; /// multiple lists simultaneously, where each list is given the same tag.; ///; /// \example; /// struct A {};; /// struct B {};; /// struct N : ilist_node<N, ilist_tag<A>>, ilist_node<N, ilist_tag<B>> {};; ///; /// void foo() {; /// simple_ilist<N, ilist_tag<A>> ListA;; /// simple_ilist<N, ilist_tag<B>> ListB;; /// N N1;; /// ListA.push_back(N1);; /// ListB.push_back(N1);; /// }; /// \endexample; ///; /// See \a is_valid_option for steps on adding a new option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:249,Modifiability,config,configured,249,"/// An intrusive list node.; ///; /// A base class to enable membership in intrusive lists, including \a; /// simple_ilist, \a iplist, and \a ilist. The first template parameter is the; /// \a value_type for the list.; ///; /// An ilist node can be configured with compile-time options to change; /// behaviour and/or add API.; ///; /// By default, an \a ilist_node knows whether it is the list sentinel (an; /// instance of \a ilist_sentinel) if and only if; /// LLVM_ENABLE_ABI_BREAKING_CHECKS. The function \a isKnownSentinel() always; /// returns \c false tracking is off. Sentinel tracking steals a bit from the; /// ""prev"" link, which adds a mask operation when decrementing an iterator, but; /// enables bug-finding assertions in \a ilist_iterator.; ///; /// To turn sentinel tracking on all the time, pass in the; /// ilist_sentinel_tracking<true> template parameter. This also enables the \a; /// isSentinel() function. The same option must be passed to the intrusive; /// list. (ilist_sentinel_tracking<false> turns sentinel tracking off all the; /// time.); ///; /// A type can inherit from ilist_node multiple times by passing in different; /// \a ilist_tag options. This allows a single instance to be inserted into; /// multiple lists simultaneously, where each list is given the same tag.; ///; /// \example; /// struct A {};; /// struct B {};; /// struct N : ilist_node<N, ilist_tag<A>>, ilist_node<N, ilist_tag<B>> {};; ///; /// void foo() {; /// simple_ilist<N, ilist_tag<A>> ListA;; /// simple_ilist<N, ilist_tag<B>> ListB;; /// N N1;; /// ListA.push_back(N1);; /// ListB.push_back(N1);; /// }; /// \endexample; ///; /// See \a is_valid_option for steps on adding a new option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:1089,Modifiability,inherit,inherit,1089,"/// An intrusive list node.; ///; /// A base class to enable membership in intrusive lists, including \a; /// simple_ilist, \a iplist, and \a ilist. The first template parameter is the; /// \a value_type for the list.; ///; /// An ilist node can be configured with compile-time options to change; /// behaviour and/or add API.; ///; /// By default, an \a ilist_node knows whether it is the list sentinel (an; /// instance of \a ilist_sentinel) if and only if; /// LLVM_ENABLE_ABI_BREAKING_CHECKS. The function \a isKnownSentinel() always; /// returns \c false tracking is off. Sentinel tracking steals a bit from the; /// ""prev"" link, which adds a mask operation when decrementing an iterator, but; /// enables bug-finding assertions in \a ilist_iterator.; ///; /// To turn sentinel tracking on all the time, pass in the; /// ilist_sentinel_tracking<true> template parameter. This also enables the \a; /// isSentinel() function. The same option must be passed to the intrusive; /// list. (ilist_sentinel_tracking<false> turns sentinel tracking off all the; /// time.); ///; /// A type can inherit from ilist_node multiple times by passing in different; /// \a ilist_tag options. This allows a single instance to be inserted into; /// multiple lists simultaneously, where each list is given the same tag.; ///; /// \example; /// struct A {};; /// struct B {};; /// struct N : ilist_node<N, ilist_tag<A>>, ilist_node<N, ilist_tag<B>> {};; ///; /// void foo() {; /// simple_ilist<N, ilist_tag<A>> ListA;; /// simple_ilist<N, ilist_tag<B>> ListB;; /// N N1;; /// ListA.push_back(N1);; /// ListB.push_back(N1);; /// }; /// \endexample; ///; /// See \a is_valid_option for steps on adding a new option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:723,Testability,assert,assertions,723,"/// An intrusive list node.; ///; /// A base class to enable membership in intrusive lists, including \a; /// simple_ilist, \a iplist, and \a ilist. The first template parameter is the; /// \a value_type for the list.; ///; /// An ilist node can be configured with compile-time options to change; /// behaviour and/or add API.; ///; /// By default, an \a ilist_node knows whether it is the list sentinel (an; /// instance of \a ilist_sentinel) if and only if; /// LLVM_ENABLE_ABI_BREAKING_CHECKS. The function \a isKnownSentinel() always; /// returns \c false tracking is off. Sentinel tracking steals a bit from the; /// ""prev"" link, which adds a mask operation when decrementing an iterator, but; /// enables bug-finding assertions in \a ilist_iterator.; ///; /// To turn sentinel tracking on all the time, pass in the; /// ilist_sentinel_tracking<true> template parameter. This also enables the \a; /// isSentinel() function. The same option must be passed to the intrusive; /// list. (ilist_sentinel_tracking<false> turns sentinel tracking off all the; /// time.); ///; /// A type can inherit from ilist_node multiple times by passing in different; /// \a ilist_tag options. This allows a single instance to be inserted into; /// multiple lists simultaneously, where each list is given the same tag.; ///; /// \example; /// struct A {};; /// struct B {};; /// struct N : ilist_node<N, ilist_tag<A>>, ilist_node<N, ilist_tag<B>> {};; ///; /// void foo() {; /// simple_ilist<N, ilist_tag<A>> ListA;; /// simple_ilist<N, ilist_tag<B>> ListB;; /// N N1;; /// ListA.push_back(N1);; /// ListB.push_back(N1);; /// }; /// \endexample; ///; /// See \a is_valid_option for steps on adding a new option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:170,Modifiability,inherit,inherit,170,/// An access class for ilist_node private API.; ///; /// This gives access to the private parts of ilist nodes. Nodes for an ilist; /// should friend this class if they inherit privately from ilist_node.; ///; /// Using this class outside of the ilist implementation is unsupported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:7,Security,access,access,7,/// An access class for ilist_node private API.; ///; /// This gives access to the private parts of ilist nodes. Nodes for an ilist; /// should friend this class if they inherit privately from ilist_node.; ///; /// Using this class outside of the ilist implementation is unsupported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:69,Security,access,access,69,/// An access class for ilist_node private API.; ///; /// This gives access to the private parts of ilist nodes. Nodes for an ilist; /// should friend this class if they inherit privately from ilist_node.; ///; /// Using this class outside of the ilist implementation is unsupported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:27,Security,access,access,27,"/// An ilist node that can access its parent list.; ///; /// Requires \c NodeTy to have \a getParent() to find the parent node, and the; /// \c ParentTy to have \a getSublistAccess() to get a reference to the list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:105,Availability,error,error,105,"/// Forward to NodeTy::getParent().; ///; /// Note: do not use the name ""getParent()"". We want a compile error; /// (instead of recursion) when the subclass fails to implement \a; /// getParent().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:24,Security,Access,Accessors,24,"/// @name Adjacent Node Accessors; /// @{; /// Get the previous node, or \c nullptr for the list head.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h:146,Integrability,depend,depends,146,"/// Option to choose whether to track sentinels.; ///; /// This option affects the ABI for the nodes. When not specified explicitly,; /// the ABI depends on LLVM_ENABLE_ABI_BREAKING_CHECKS. Specify explicitly to; /// enable \a ilist_node::isSentinel().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h:484,Modifiability,inherit,inherit,484,"/// Check whether an option is valid.; ///; /// The steps for adding and enabling a new ilist option include:; /// \li define the option, ilist_foo<Bar>, above;; /// \li add new parameters for Bar to \a ilist_detail::node_options;; /// \li add an extraction meta-function, ilist_detail::extract_foo;; /// \li call extract_foo from \a ilist_detail::compute_node_options and pass it; /// into \a ilist_detail::node_options; and; /// \li specialize \c is_valid_option<ilist_foo<Bar>> to inherit from \c; /// std::true_type to get static assertions passing in \a simple_ilist and \a; /// ilist_node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h:534,Testability,assert,assertions,534,"/// Check whether an option is valid.; ///; /// The steps for adding and enabling a new ilist option include:; /// \li define the option, ilist_foo<Bar>, above;; /// \li add new parameters for Bar to \a ilist_detail::node_options;; /// \li add an extraction meta-function, ilist_detail::extract_foo;; /// \li call extract_foo from \a ilist_detail::compute_node_options and pass it; /// into \a ilist_detail::node_options; and; /// \li specialize \c is_valid_option<ilist_foo<Bar>> to inherit from \c; /// std::true_type to get static assertions passing in \a simple_ilist and \a; /// ilist_node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h:137,Integrability,depend,depending,137,"/// Extract sentinel tracking option.; ///; /// Look through \p Options for the \a ilist_sentinel_tracking option, with the; /// default depending on LLVM_ENABLE_ABI_BREAKING_CHECKS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h:54,Integrability,interface,interface,54,"//==--- ImmutableList.h - Immutable (functional) list interface --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the ImmutableList class.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h:549,Deployability,release,released,549,"/// ImmutableList - This class represents an immutable (functional) list.; /// It is implemented as a smart pointer (wraps ImmutableListImpl), so it; /// it is intended to always be copied by value as if it were a pointer.; /// This interface matches ImmutableSet and ImmutableMap. ImmutableList; /// objects should almost never be created directly, and instead should; /// be created by ImmutableListFactory objects that manage the lifetime; /// of a group of lists. When the factory object is reclaimed, all lists; /// created by that factory are released as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h:117,Integrability,wrap,wraps,117,"/// ImmutableList - This class represents an immutable (functional) list.; /// It is implemented as a smart pointer (wraps ImmutableListImpl), so it; /// it is intended to always be copied by value as if it were a pointer.; /// This interface matches ImmutableSet and ImmutableMap. ImmutableList; /// objects should almost never be created directly, and instead should; /// be created by ImmutableListFactory objects that manage the lifetime; /// of a group of lists. When the factory object is reclaimed, all lists; /// created by that factory are released as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h:233,Integrability,interface,interface,233,"/// ImmutableList - This class represents an immutable (functional) list.; /// It is implemented as a smart pointer (wraps ImmutableListImpl), so it; /// it is intended to always be copied by value as if it were a pointer.; /// This interface matches ImmutableSet and ImmutableMap. ImmutableList; /// objects should almost never be created directly, and instead should; /// be created by ImmutableListFactory objects that manage the lifetime; /// of a group of lists. When the factory object is reclaimed, all lists; /// created by that factory are released as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h:59,Performance,cache,cache,59,// Profile the new list to see if it already exists in our cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h:34,Performance,cache,cache,34,// The list does not exist in our cache. Create it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h:32,Performance,cache,cache,32,// Insert the new list into the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h:53,Integrability,interface,interface,53,"//===--- ImmutableMap.h - Immutable (functional) map interface --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the ImmutableMap class.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h:69,Testability,test,testing,69,//===--------------------------------------------------===//; // For testing.; //===--------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h:69,Testability,test,testing,69,//===--------------------------------------------------===//; // For testing.; //===--------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:53,Integrability,interface,interface,53,"//===--- ImmutableSet.h - Immutable (functional) set interface --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the ImutAVLTree and ImmutableSet classes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:74,Integrability,Interface,Interface,74,//===----------------------------------------------------===//; // Public Interface.; //===----------------------------------------------------===//; /// Return a pointer to the left subtree. This value; /// is NULL if there is no left subtree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:114,Performance,perform,performance,114,/// isEqual - Compares two trees for structural equality and returns true; /// if they are equal. This worst case performance of this operation is; // linear in the sizes of the trees.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:63,Performance,Perform,Performance,63,/// isNotEqual - Compares two trees for structural inequality. Performance; /// is the same is isEqual.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:148,Testability,log,logarithmic,148,/// contains - Returns true if this tree contains a subtree (node) that; /// has an data element that matches the specified key. Complexity; /// is logarithmic in the size of the tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:4,Security,validat,validateTree,4,"/// validateTree - A utility method that checks that the balancing and; /// ordering invariants of the tree are satisfied. It is a recursive; /// method that returns the height of the tree, which is then consumed; /// by the enclosing validateTree call. External callers should ignore the; /// return value. An invalid tree will cause an assertion to fire in; /// a debug build.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:235,Security,validat,validateTree,235,"/// validateTree - A utility method that checks that the balancing and; /// ordering invariants of the tree are satisfied. It is a recursive; /// method that returns the height of the tree, which is then consumed; /// by the enclosing validateTree call. External callers should ignore the; /// return value. An invalid tree will cause an assertion to fire in; /// a debug build.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:338,Testability,assert,assertion,338,"/// validateTree - A utility method that checks that the balancing and; /// ordering invariants of the tree are satisfied. It is a recursive; /// method that returns the height of the tree, which is then consumed; /// by the enclosing validateTree call. External callers should ignore the; /// return value. An invalid tree will cause an assertion to fire in; /// a debug build.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:66,Performance,cache,cached,66,/// hasCachedDigest - Returns true if the digest for this tree is cached.; /// This can only be true if the tree is immutable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:637,Availability,error,error,637,"//===----------------------------------------------------===//; // Mutating operations. A tree root can be manipulated as; // long as its reference has not ""escaped"" from internal; // methods of a factory object (see below). When a tree; // pointer is externally viewable by client code, the; // internal ""mutable bit"" is cleared to mark the tree; // immutable. Note that a tree that still has its mutable; // bit set may have children (subtrees) that are themselves; // immutable.; //===----------------------------------------------------===//; /// markImmutable - Clears the mutable flag for a tree. After this happens,; /// it is an error to call setLeft(), setRight(), and setHeight().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:322,Usability,clear,cleared,322,"//===----------------------------------------------------===//; // Mutating operations. A tree root can be manipulated as; // long as its reference has not ""escaped"" from internal; // methods of a factory object (see below). When a tree; // pointer is externally viewable by client code, the; // internal ""mutable bit"" is cleared to mark the tree; // immutable. Note that a tree that still has its mutable; // bit set may have children (subtrees) that are themselves; // immutable.; //===----------------------------------------------------===//; /// markImmutable - Clears the mutable flag for a tree. After this happens,; /// it is an error to call setLeft(), setRight(), and setHeight().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:567,Usability,Clear,Clears,567,"//===----------------------------------------------------===//; // Mutating operations. A tree root can be manipulated as; // long as its reference has not ""escaped"" from internal; // methods of a factory object (see below). When a tree; // pointer is externally viewable by client code, the; // internal ""mutable bit"" is cleared to mark the tree; // immutable. Note that a tree that still has its mutable; // bit set may have children (subtrees) that are themselves; // immutable.; //===----------------------------------------------------===//; /// markImmutable - Clears the mutable flag for a tree. After this happens,; /// it is an error to call setLeft(), setRight(), and setHeight().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:25,Usability,Clear,Clears,25,/// markedCachedDigest - Clears the NoCachedDigest flag for a tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:116,Availability,recover,recoverNodes,116,// We need to clear the mutability bit in case we are; // destroying the node as part of a sweep in ImutAVLFactory::recoverNodes().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:116,Safety,recover,recoverNodes,116,// We need to clear the mutability bit in case we are; // destroying the node as part of a sweep in ImutAVLFactory::recoverNodes().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:14,Usability,clear,clear,14,// We need to clear the mutability bit in case we are; // destroying the node as part of a sweep in ImutAVLFactory::recoverNodes().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:72,Integrability,interface,interface,72,//===--------------------------------------------------===//; // Public interface.; //===--------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:165,Usability,simpl,simply,165,"//===--------------------------------------------------===//; // ""createNode"" is used to generate new tree roots that link; // to other trees. The function may also simply move links; // in an existing root if that root is still marked mutable.; // This is necessary because otherwise our balancing code; // would leak memory as it would create nodes that are; // then discarded later before the finished tree is; // returned to the caller.; //===--------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:20,Usability,Clear,Clears,20,/// markImmutable - Clears the mutable bits of a root and all of its; /// descendants.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:14,Security,hash,hashtable,14,"// Search the hashtable for another tree with the same digest, and; // if find a collision compare those trees by their contents.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:26,Integrability,wrap,wraps,26,/// Generic iterator that wraps a T::TreeTy::iterator and exposes; /// iterator::getValue() on dereference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:58,Security,expose,exposes,58,/// Generic iterator that wraps a T::TreeTy::iterator and exposes; /// iterator::getValue() on dereference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:229,Modifiability,inherit,inherit,229,"//===----------------------------------------------------------------------===//; // Trait classes that contain element comparison operators and type; // definitions used by ImutAVLTree, ImmutableSet, and ImmutableMap. These; // inherit from the profile traits (ImutProfileInfo) to include operations; // for element profiling.; //===----------------------------------------------------------------------===//; /// ImutContainerInfo - Generic definition of comparison operations for; /// elements of immutable containers that defaults to using; /// std::equal_to<> and std::less<> to perform comparison of elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:584,Performance,perform,perform,584,"//===----------------------------------------------------------------------===//; // Trait classes that contain element comparison operators and type; // definitions used by ImutAVLTree, ImmutableSet, and ImmutableMap. These; // inherit from the profile traits (ImutProfileInfo) to include operations; // for element profiling.; //===----------------------------------------------------------------------===//; /// ImutContainerInfo - Generic definition of comparison operations for; /// elements of immutable containers that defaults to using; /// std::equal_to<> and std::less<> to perform comparison of elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:408,Deployability,release,released,408,"/// add - Creates a new immutable set that contains all of the values; /// of the original set with the addition of the specified value. If; /// the original set already included the value, then the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:246,Energy Efficiency,allocate,allocated,246,"/// add - Creates a new immutable set that contains all of the values; /// of the original set with the addition of the specified value. If; /// the original set already included the value, then the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:374,Energy Efficiency,allocate,allocated,374,"/// add - Creates a new immutable set that contains all of the values; /// of the original set with the addition of the specified value. If; /// the original set already included the value, then the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:313,Testability,log,logarithmic,313,"/// add - Creates a new immutable set that contains all of the values; /// of the original set with the addition of the specified value. If; /// the original set already included the value, then the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:406,Deployability,release,released,406,"/// remove - Creates a new immutable set that contains all of the values; /// of the original set with the exception of the specified value. If; /// the original set did not contain the value, the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:244,Energy Efficiency,allocate,allocated,244,"/// remove - Creates a new immutable set that contains all of the values; /// of the original set with the exception of the specified value. If; /// the original set did not contain the value, the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:372,Energy Efficiency,allocate,allocated,372,"/// remove - Creates a new immutable set that contains all of the values; /// of the original set with the exception of the specified value. If; /// the original set did not contain the value, the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:311,Testability,log,logarithmic,311,"/// remove - Creates a new immutable set that contains all of the values; /// of the original set with the exception of the specified value. If; /// the original set did not contain the value, the original set is; /// returned and no memory is allocated. The time and space complexity; /// of this operation is logarithmic in the size of the original set.; /// The memory allocated to represent the set is released when the; /// factory object that created the set is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:69,Testability,test,testing,69,//===--------------------------------------------------===//; // For testing.; //===--------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:69,Testability,test,testing,69,//===--------------------------------------------------===//; // For testing.; //===--------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IndexedMap.h:128,Energy Efficiency,efficient,efficiently,128,// Prefer SmallVector with zero inline storage over std::vector. IndexedMaps; // can grow very large and SmallVector grows more efficiently as long as T; // is trivially copyable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IndexedMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IndexedMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntEqClasses.h:4,Usability,clear,clear,4,/// clear - Clear all classes so that grow() will assign a unique class to; /// every integer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntEqClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntEqClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntEqClasses.h:12,Usability,Clear,Clear,12,/// clear - Clear all classes so that grow() will assign a unique class to; /// every integer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntEqClasses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntEqClasses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:1463,Performance,optimiz,optimized,1463,"ed to ValT objects. Intervals of keys that map to the; /// same value are represented in a compressed form.; ///; /// Iterators provide ordered access to the compressed intervals rather than the; /// individual keys, and insert and erase operations use key intervals as well.; ///; /// Like SmallVector, IntervalMap will store the first N intervals in the map; /// object itself without any allocations. When space is exhausted it switches; /// to a B+-tree representation with very small overhead for small key and; /// value objects.; ///; /// A Traits class specifies how keys are compared. It also allows IntervalMap; /// to work with both closed and half-open intervals.; ///; /// Keys and values are not stored next to each other in a std::pair, so we; /// don't provide such a value_type. Dereferencing iterators only returns the; /// mapped value. The interval bounds are accessible through the start() and; /// stop() iterator methods.; ///; /// IntervalMap is optimized for small key and value objects, 4 or 8 bytes; /// each is the optimal size. For large objects use std::map instead.; //; //===----------------------------------------------------------------------===//; //; // Synopsis:; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap {; // public:; // typedef KeyT key_type;; // typedef ValT mapped_type;; // typedef RecyclingAllocator<...> Allocator;; // class iterator;; // class const_iterator;; //; // explicit IntervalMap(Allocator&);; // ~IntervalMap():; //; // bool empty() const;; // KeyT start() const;; // KeyT stop() const;; // ValT lookup(KeyT x, Value NotFound = Value()) const;; //; // const_iterator begin() const;; // const_iterator end() const;; // iterator begin();; // iterator end();; // const_iterator find(KeyT x) const;; // iterator find(KeyT x);; //; // void insert(KeyT a, KeyT b, ValT y);; // void clear();; // };; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class Interva",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:637,Security,access,access,637,"//===- llvm/ADT/IntervalMap.h - A sorted interval map -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a coalescing interval map for small objects.; ///; /// KeyT objects are mapped to ValT objects. Intervals of keys that map to the; /// same value are represented in a compressed form.; ///; /// Iterators provide ordered access to the compressed intervals rather than the; /// individual keys, and insert and erase operations use key intervals as well.; ///; /// Like SmallVector, IntervalMap will store the first N intervals in the map; /// object itself without any allocations. When space is exhausted it switches; /// to a B+-tree representation with very small overhead for small key and; /// value objects.; ///; /// A Traits class specifies how keys are compared. It also allows IntervalMap; /// to work with both closed and half-open intervals.; ///; /// Keys and values are not stored next to each other in a std::pair, so we; /// don't provide such a value_type. Dereferencing iterators only returns the; /// mapped value. The interval bounds are accessible through the start() and; /// stop() iterator methods.; ///; /// IntervalMap is optimized for small key and value objects, 4 or 8 bytes; /// each is the optimal size. For large objects use std::map instead.; //; //===----------------------------------------------------------------------===//; //; // Synopsis:; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap {; // public:; // typedef KeyT key_type;; // typedef ValT mapped_type;; // typedef RecyclingAllocator<...> Allocator;; // class iterator;; // class const_iterator;; //; // explicit IntervalMap(Allocator&);; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:1373,Security,access,accessible,1373,"/// This file implements a coalescing interval map for small objects.; ///; /// KeyT objects are mapped to ValT objects. Intervals of keys that map to the; /// same value are represented in a compressed form.; ///; /// Iterators provide ordered access to the compressed intervals rather than the; /// individual keys, and insert and erase operations use key intervals as well.; ///; /// Like SmallVector, IntervalMap will store the first N intervals in the map; /// object itself without any allocations. When space is exhausted it switches; /// to a B+-tree representation with very small overhead for small key and; /// value objects.; ///; /// A Traits class specifies how keys are compared. It also allows IntervalMap; /// to work with both closed and half-open intervals.; ///; /// Keys and values are not stored next to each other in a std::pair, so we; /// don't provide such a value_type. Dereferencing iterators only returns the; /// mapped value. The interval bounds are accessible through the start() and; /// stop() iterator methods.; ///; /// IntervalMap is optimized for small key and value objects, 4 or 8 bytes; /// each is the optimal size. For large objects use std::map instead.; //; //===----------------------------------------------------------------------===//; //; // Synopsis:; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap {; // public:; // typedef KeyT key_type;; // typedef ValT mapped_type;; // typedef RecyclingAllocator<...> Allocator;; // class iterator;; // class const_iterator;; //; // explicit IntervalMap(Allocator&);; // ~IntervalMap():; //; // bool empty() const;; // KeyT start() const;; // KeyT stop() const;; // ValT lookup(KeyT x, Value NotFound = Value()) const;; //; // const_iterator begin() const;; // const_iterator end() const;; // iterator begin();; // iterator end();; // const_iterator find(KeyT x) const;; // iterator find(KeyT x);; //; // void insert(KeyT a, KeyT b, ValT y);; // void clear();; ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:2383,Usability,clear,clear,2383,":map instead.; //; //===----------------------------------------------------------------------===//; //; // Synopsis:; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap {; // public:; // typedef KeyT key_type;; // typedef ValT mapped_type;; // typedef RecyclingAllocator<...> Allocator;; // class iterator;; // class const_iterator;; //; // explicit IntervalMap(Allocator&);; // ~IntervalMap():; //; // bool empty() const;; // KeyT start() const;; // KeyT stop() const;; // ValT lookup(KeyT x, Value NotFound = Value()) const;; //; // const_iterator begin() const;; // const_iterator end() const;; // iterator begin();; // iterator end();; // const_iterator find(KeyT x) const;; // iterator find(KeyT x);; //; // void insert(KeyT a, KeyT b, ValT y);; // void clear();; // };; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap::const_iterator {; // public:; // using iterator_category = std::bidirectional_iterator_tag;; // using value_type = ValT;; // using difference_type = std::ptrdiff_t;; // using pointer = value_type *;; // using reference = value_type &;; //; // bool operator==(const const_iterator &) const;; // bool operator!=(const const_iterator &) const;; // bool valid() const;; //; // const KeyT &start() const;; // const KeyT &stop() const;; // const ValT &value() const;; // const ValT &operator*() const;; // const ValT *operator->() const;; //; // const_iterator &operator++();; // const_iterator &operator++(int);; // const_iterator &operator--();; // const_iterator &operator--(int);; // void goToBegin();; // void goToEnd();; // void find(KeyT x);; // void advanceTo(KeyT x);; // };; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap::iterator : public const_iterator {; // public:; // void insert(KeyT a, KeyT b, Value y);; // void erase();; // };; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:704,Energy Efficiency,allocate,allocated,704,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeBase ---//; //===----------------------------------------------------------------------===//; //; // Both leaf and branch nodes store vectors of pairs.; // Leaves store ((KeyT, KeyT), ValT) pairs, branches use (NodeRef, KeyT).; //; // Keys and values are stored in separate arrays to avoid padding caused by; // different object alignments. This also helps improve locality of reference; // when searching the keys.; //; // The nodes don't know how many elements they contain - that information is; // stored elsewhere. Omitting the size field prevents padding and allows a node; // to fill the allocated cache lines completely.; //; // These are typical key and value sizes, the node branching factor (N), and; // wasted space when nodes are sized to fit in three cache lines (192 bytes):; //; // T1 T2 N Waste Used by; // 4 4 24 0 Branch<4> (32-bit pointers); // 8 4 16 0 Leaf<4,4>, Branch<4>; // 8 8 12 0 Leaf<4,8>, Branch<8>; // 16 4 9 12 Leaf<8,4>; // 16 8 8 0 Leaf<8,8>; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:714,Performance,cache,cache,714,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeBase ---//; //===----------------------------------------------------------------------===//; //; // Both leaf and branch nodes store vectors of pairs.; // Leaves store ((KeyT, KeyT), ValT) pairs, branches use (NodeRef, KeyT).; //; // Keys and values are stored in separate arrays to avoid padding caused by; // different object alignments. This also helps improve locality of reference; // when searching the keys.; //; // The nodes don't know how many elements they contain - that information is; // stored elsewhere. Omitting the size field prevents padding and allows a node; // to fill the allocated cache lines completely.; //; // These are typical key and value sizes, the node branching factor (N), and; // wasted space when nodes are sized to fit in three cache lines (192 bytes):; //; // T1 T2 N Waste Used by; // 4 4 24 0 Branch<4> (32-bit pointers); // 8 4 16 0 Leaf<4,4>, Branch<4>; // 8 8 12 0 Leaf<4,8>, Branch<8>; // 16 4 9 12 Leaf<8,4>; // 16 8 8 0 Leaf<8,8>; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:874,Performance,cache,cache,874,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeBase ---//; //===----------------------------------------------------------------------===//; //; // Both leaf and branch nodes store vectors of pairs.; // Leaves store ((KeyT, KeyT), ValT) pairs, branches use (NodeRef, KeyT).; //; // Keys and values are stored in separate arrays to avoid padding caused by; // different object alignments. This also helps improve locality of reference; // when searching the keys.; //; // The nodes don't know how many elements they contain - that information is; // stored elsewhere. Omitting the size field prevents padding and allows a node; // to fill the allocated cache lines completely.; //; // These are typical key and value sizes, the node branching factor (N), and; // wasted space when nodes are sized to fit in three cache lines (192 bytes):; //; // T1 T2 N Waste Used by; // 4 4 24 0 Branch<4> (32-bit pointers); // 8 4 16 0 Leaf<4,4>, Branch<4>; // 8 8 12 0 Leaf<4,8>, Branch<8>; // 16 4 9 12 Leaf<8,4>; // 16 8 8 0 Leaf<8,8>; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:393,Safety,avoid,avoid,393,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeBase ---//; //===----------------------------------------------------------------------===//; //; // Both leaf and branch nodes store vectors of pairs.; // Leaves store ((KeyT, KeyT), ValT) pairs, branches use (NodeRef, KeyT).; //; // Keys and values are stored in separate arrays to avoid padding caused by; // different object alignments. This also helps improve locality of reference; // when searching the keys.; //; // The nodes don't know how many elements they contain - that information is; // stored elsewhere. Omitting the size field prevents padding and allows a node; // to fill the allocated cache lines completely.; //; // These are typical key and value sizes, the node branching factor (N), and; // wasted space when nodes are sized to fit in three cache lines (192 bytes):; //; // T1 T2 N Waste Used by; // 4 4 24 0 Branch<4> (32-bit pointers); // 8 4 16 0 Leaf<4,4>, Branch<4>; // 8 8 12 0 Leaf<4,8>, Branch<8>; // 16 4 9 12 Leaf<8,4>; // 16 8 8 0 Leaf<8,8>; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:324,Performance,cache,cache,324,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeSizer ---//; //===----------------------------------------------------------------------===//; //; // Compute node sizes from key and value types.; //; // The branching factors are chosen to make nodes fit in three cache lines.; // This may not be possible if keys or values are very large. Such large objects; // are handled correctly, but a std::map would probably give better performance.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:488,Performance,perform,performance,488,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeSizer ---//; //===----------------------------------------------------------------------===//; //; // Compute node sizes from key and value types.; //; // The branching factors are chosen to make nodes fit in three cache lines.; // This may not be possible if keys or values are very large. Such large objects; // are handled correctly, but a std::map would probably give better performance.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Performance,Cache,Cache,3,// Cache line size. Most architectures have 32 or 64 byte cache lines.; // We use 64 bytes here because it provides good branching factors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:58,Performance,cache,cache,58,// Cache line size. Most architectures have 32 or 64 byte cache lines.; // We use 64 bytes here because it provides good branching factors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:77,Performance,cache,cache,77,"// Compute the leaf node branching factor that makes a node fit in three; // cache lines. The branching factor must be at least 3, or some B+-tree; // balancing algorithms won't work.; // LeafSize can't be larger than CacheLineBytes. This is required by the; // PointerIntPair used by NodeRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:218,Performance,Cache,CacheLineBytes,218,"// Compute the leaf node branching factor that makes a node fit in three; // cache lines. The branching factor must be at least 3, or some B+-tree; // balancing algorithms won't work.; // LeafSize can't be larger than CacheLineBytes. This is required by the; // PointerIntPair used by NodeRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:127,Performance,cache,cache,127,"// Now that we have the leaf branching factor, compute the actual allocation; // unit size by rounding up to a whole number of cache lines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:605,Availability,fault,faulting,605,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeRef ---//; //===----------------------------------------------------------------------===//; //; // B+-tree nodes can be leaves or branches, so we need a polymorphic node; // pointer that can point to both kinds.; //; // All nodes are cache line aligned and the low 6 bits of a node pointer are; // always 0. These bits are used to store the number of elements in the; // referenced node. Besides saving space, placing node sizes in the parents; // allow tree balancing algorithms to run without faulting cache lines for nodes; // that may not need to be modified.; //; // A NodeRef doesn't know whether it references a leaf node or a branch node.; // It is the responsibility of the caller to use the correct types.; //; // Nodes are never supposed to be empty, and it is invalid to store a node size; // of 0 in a NodeRef. The valid range of sizes is 1-64.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:263,Modifiability,polymorphi,polymorphic,263,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeRef ---//; //===----------------------------------------------------------------------===//; //; // B+-tree nodes can be leaves or branches, so we need a polymorphic node; // pointer that can point to both kinds.; //; // All nodes are cache line aligned and the low 6 bits of a node pointer are; // always 0. These bits are used to store the number of elements in the; // referenced node. Besides saving space, placing node sizes in the parents; // allow tree balancing algorithms to run without faulting cache lines for nodes; // that may not need to be modified.; //; // A NodeRef doesn't know whether it references a leaf node or a branch node.; // It is the responsibility of the caller to use the correct types.; //; // Nodes are never supposed to be empty, and it is invalid to store a node size; // of 0 in a NodeRef. The valid range of sizes is 1-64.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:344,Performance,cache,cache,344,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeRef ---//; //===----------------------------------------------------------------------===//; //; // B+-tree nodes can be leaves or branches, so we need a polymorphic node; // pointer that can point to both kinds.; //; // All nodes are cache line aligned and the low 6 bits of a node pointer are; // always 0. These bits are used to store the number of elements in the; // referenced node. Besides saving space, placing node sizes in the parents; // allow tree balancing algorithms to run without faulting cache lines for nodes; // that may not need to be modified.; //; // A NodeRef doesn't know whether it references a leaf node or a branch node.; // It is the responsibility of the caller to use the correct types.; //; // Nodes are never supposed to be empty, and it is invalid to store a node size; // of 0 in a NodeRef. The valid range of sizes is 1-64.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:614,Performance,cache,cache,614,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeRef ---//; //===----------------------------------------------------------------------===//; //; // B+-tree nodes can be leaves or branches, so we need a polymorphic node; // pointer that can point to both kinds.; //; // All nodes are cache line aligned and the low 6 bits of a node pointer are; // always 0. These bits are used to store the number of elements in the; // referenced node. Besides saving space, placing node sizes in the parents; // allow tree balancing algorithms to run without faulting cache lines for nodes; // that may not need to be modified.; //; // A NodeRef doesn't know whether it references a leaf node or a branch node.; // It is the responsibility of the caller to use the correct types.; //; // Nodes are never supposed to be empty, and it is invalid to store a node size; // of 0 in a NodeRef. The valid range of sizes is 1-64.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:20,Safety,Detect,Detect,20,/// operator bool - Detect a null ref.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:14,Deployability,Update,Update,14,/// setSize - Update the node size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:76,Integrability,depend,depends,76,/// subtree - Access the i'th subtree reference in a branch node.; /// This depends on branch nodes storing the NodeRef array as their first; /// member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:14,Security,Access,Access,14,/// subtree - Access the i'th subtree reference in a branch node.; /// This depends on branch nodes storing the NodeRef array as their first; /// member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:4,Safety,safe,safeFind,4,"/// safeFind - Find an interval that is known to exist. This is the same as; /// findFrom except is it assumed that x is at least within range of the last; /// interval.; /// @param i Starting index for the search.; /// @param x Key to search for.; /// @return First index with !stopLess(key[i].stop, x), never size.; /// This is the first interval that can possibly contain x.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:4,Safety,safe,safeLookup,4,/// safeLookup - Lookup mapped value for a safe key.; /// It is assumed that x is within range of the last entry.; /// @param x Key to search for.; /// @param NotFound Value to return if x is not in any interval.; /// @return The mapped value at x or NotFound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:43,Safety,safe,safe,43,/// safeLookup - Lookup mapped value for a safe key.; /// It is assumed that x is within range of the last entry.; /// @param x Key to search for.; /// @param NotFound Value to return if x is not in any interval.; /// @return The mapped value at x or NotFound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Safety,Detect,Detect,3,// Detect overflow.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:28,Safety,Detect,Detect,28,// We must insert before i. Detect overflow.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:380,Availability,redundant,redundant,380,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::BranchNode ---//; //===----------------------------------------------------------------------===//; //; // A branch node stores references to 1--N subtrees all of the same height.; //; // The key array in a branch node holds the rightmost stop key of each subtree.; // It is redundant to store the last stop key since it can be found in the; // parent node, but doing so makes tree balancing a lot simpler.; //; // It is unusual for a branch node to only have one subtree, but it can happen; // in the root node if it is smaller than the normal nodes.; //; // When all of the leaf nodes from all the subtrees are concatenated, they must; // satisfy the same constraints as a single leaf node. They must be sorted,; // sane, and fully coalesced.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:380,Safety,redund,redundant,380,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::BranchNode ---//; //===----------------------------------------------------------------------===//; //; // A branch node stores references to 1--N subtrees all of the same height.; //; // The key array in a branch node holds the rightmost stop key of each subtree.; // It is redundant to store the last stop key since it can be found in the; // parent node, but doing so makes tree balancing a lot simpler.; //; // It is unusual for a branch node to only have one subtree, but it can happen; // in the root node if it is smaller than the normal nodes.; //; // When all of the leaf nodes from all the subtrees are concatenated, they must; // satisfy the same constraints as a single leaf node. They must be sorted,; // sane, and fully coalesced.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:503,Usability,simpl,simpler,503,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::BranchNode ---//; //===----------------------------------------------------------------------===//; //; // A branch node stores references to 1--N subtrees all of the same height.; //; // The key array in a branch node holds the rightmost stop key of each subtree.; // It is redundant to store the last stop key since it can be found in the; // parent node, but doing so makes tree balancing a lot simpler.; //; // It is unusual for a branch node to only have one subtree, but it can happen; // in the root node if it is smaller than the normal nodes.; //; // When all of the leaf nodes from all the subtrees are concatenated, they must; // satisfy the same constraints as a single leaf node. They must be sorted,; // sane, and fully coalesced.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:4,Safety,safe,safeFind,4,"/// safeFind - Find a subtree that is known to exist. This is the same as; /// findFrom except is it assumed that x is in range.; /// @param i Starting index for the search.; /// @param x Key to search for.; /// @return First index with !stopLess(key[i], x), never size.; /// This is the first subtree that can possibly contain x.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:4,Safety,safe,safeLookup,4,"/// safeLookup - Get the subtree containing x, Assuming that x is in range.; /// @param x Key to search for.; /// @return Subtree containing x",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:8,Security,access,accessors,8,// Node accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:8,Security,access,accessors,8,// Leaf accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:120,Deployability,update,update,120,/// reset - Reset cached information about node(Level) from subtree(Level -1).; /// @param Level 1..height. The node to update after parent node changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:18,Performance,cache,cached,18,/// reset - Reset cached information about node(Level) from subtree(Level -1).; /// @param Level 1..height. The node to update after parent node changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:14,Usability,Clear,Clear,14,/// setRoot - Clear the path and set a new root node.; /// @param Node New root node.; /// @param Size New root size.; /// @param Offset Offset into root node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:154,Safety,avoid,avoid,154,///@{; /// NOTE: The moved-from or copied-from object's allocator needs to have a; /// lifetime equal to or exceeding the moved-to or copied-to object to avoid; /// undefined behaviour.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:19,Testability,assert,assertion,19,// Future-proofing assertion: this function assumes the IntervalMap; // constructor doesn't add any nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:19,Testability,assert,assertion,19,// Future-proofing assertion: this function assumes the IntervalMap; // constructor doesn't add any nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:11,Usability,clear,clear,11,// Calling clear deallocates memory and switches to rootLeaf.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:4,Usability,clear,clear,4,/// clear - Remove all entries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Energy Efficiency,Allocate,Allocate,3,// Allocate new nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Energy Efficiency,Allocate,Allocate,3,// Allocate new nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:4,Safety,unsafe,unsafeStart,4,/// unsafeStart - Writable access to start() for iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:27,Security,access,access,27,/// unsafeStart - Writable access to start() for iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:4,Safety,unsafe,unsafeStop,4,/// unsafeStop - Writable access to stop() for iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:26,Security,access,access,26,/// unsafeStop - Writable access to stop() for iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:4,Safety,unsafe,unsafeValue,4,/// unsafeValue - Writable access to value() for iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:27,Security,access,access,27,/// unsafeValue - Writable access to value() for iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:33,Usability,usab,usable,33,// Search towards the root for a usable subtree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:29,Usability,usab,usable,29,// The branch node at l+1 is usable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:25,Usability,usab,usable,25,// Is the level-1 Branch usable?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Deployability,Update,Update,3,// Update keys in branch nodes as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:18,Deployability,Update,Update,18,/// setNodeStop - Update the stop key of the current node at level and above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:59,Deployability,update,update,59,"// There are no references to the root node, so nothing to update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Deployability,Update,Update,3,// Update nodes pointing to the current node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Deployability,Update,Update,3,// Update root separately since it has a different layout.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:7,Usability,simpl,simple,7,// Try simple root leaf insert.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:32,Modifiability,extend,extend,32,// Check if this insertion will extend the node to the left.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:105,Modifiability,Extend,Extend,105,"// This insertion will coalesce with the last entry in SibLeaf. We can; // handle it in two ways:; // 1. Extend SibLeaf.stop to b and be done, or; // 2. Extend a to SibLeaf, erase the SibLeaf entry and continue.; // We prefer 1., but need 2 when coalescing to the right as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:153,Modifiability,Extend,Extend,153,"// This insertion will coalesce with the last entry in SibLeaf. We can; // handle it in two ways:; // 1. Extend SibLeaf.stop to b and be done, or; // 2. Extend a to SibLeaf, erase the SibLeaf entry and continue.; // We prefer 1., but need 2 when coalescing to the right as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:14,Modifiability,extend,extend,14,"// Easy, just extend SibLeaf and we're done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Deployability,Update,UpdateRoot,3,/* UpdateRoot= */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:44,Deployability,Update,Update,44,// No left sibling means we are at begin(). Update cached bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:51,Performance,cache,cached,51,// No left sibling means we are at begin(). Update cached bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:60,Deployability,update,update,60,"// When we are inserting at the end of a leaf node, we must update stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:13,Deployability,update,update,13,"// Inserted, update offset and leaf size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:35,Deployability,update,update,35,"// Insert was the last node entry, update stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Deployability,Update,Update,3,// Update rootBranchStart if we erased begin().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:33,Deployability,update,update,33,"// When we erase the last entry, update stop and move to a legal position.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:11,Usability,clear,cleared,11,"// If this cleared the root, switch to height=0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:34,Deployability,update,update,34,"// If we removed the last branch, update stop and move to a legal pos.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:3,Deployability,Update,Update,3,// Update path cache for the new right sibling position.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:15,Performance,cache,cache,15,// Update path cache for the new right sibling position.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:17,Energy Efficiency,allocate,allocate,17,// Do we need to allocate a new node?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:38,Deployability,update,update,38,"// Elements have been rearranged, now update node sizes and stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:415,Testability,Test,Test,415,"//===----------------------------------------------------------------------===//; //--- IntervalMapOverlaps ----//; //===----------------------------------------------------------------------===//; /// IntervalMapOverlaps - Iterate over the overlaps of mapped intervals in two; /// IntervalMaps. The maps may be different, but the KeyT and Traits types; /// should be the same.; ///; /// Typical uses:; ///; /// 1. Test for overlap:; /// bool overlap = IntervalMapOverlaps(a, b).valid();; ///; /// 2. Enumerate overlaps:; /// for (IntervalMapOverlaps I(a, b); I.valid() ; ++I) { ... }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:8,Security,access,access,8,/// a - access the left hand side in the overlap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:8,Security,access,access,8,/// b - access the right hand side in the overlap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h:2718,Performance,optimiz,optimize,2718,"43),; // [50, 75] <- (5075), [10, 85] <- (1085); //; // The data represents a set of overlapping intervals:; //; // 30--35 39------------50 55----61; // 31------------------------56; // 12--------21 25------------41 49-------------65 71-----79; // 11----16 20-----30 36----------------54 60------70 74---- 80; // 15---------------------40 43--43 50--------------------75; // 10----------------------------------------------------------------------85; //; // The items are stored in a binary tree with each node storing:; //; // MP: A middle point.; // IL: All intervals whose left value are completely to the left of the middle; // point. They are sorted in ascending order by their beginning point.; // IR: All intervals whose right value are completely to the right of the; // middle point. They are sorted in descending order by their ending point.; // LS: Left subtree.; // RS: Right subtree.; //; // As IL and IR will contain the same intervals, in order to optimize space,; // instead of storing intervals on each node, we use two vectors that will; // contain the intervals described by IL and IR. Each node will contain an; // index into that vector (global bucket), to indicate the beginning of the; // intervals assigned to the node.; //; // The following is the output from print():; //; // 0: MP:43 IR [10,85] [31,56] [36,54] [39,50] [43,43]; // 0: MP:43 IL [10,85] [31,56] [36,54] [39,50] [43,43]; // 1: MP:25 IR [25,41] [15,40] [20,30]; // 1: MP:25 IL [15,40] [20,30] [25,41]; // 2: MP:15 IR [12,21] [11,16]; // 2: MP:15 IL [11,16] [12,21]; // 2: MP:36 IR []; // 2: MP:36 IL []; // 3: MP:31 IR [30,35]; // 3: MP:31 IL [30,35]; // 1: MP:61 IR [50,75] [60,70] [49,65] [55,61]; // 1: MP:61 IL [49,65] [50,75] [55,61] [60,70]; // 2: MP:74 IR [74,80] [71,79]; // 2: MP:74 IL [71,79] [74,80]; //; // with:; // 0: Root Node.; // MP: Middle point.; // IL: Intervals to the left (in ascending order by beginning point).; // IR: Intervals to the right (in descending order by ending point).; //; ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h:5065,Testability,test,tested,5065,"der by beginning point).; // IR: Intervals to the right (in descending order by ending point).; //; // Root; // |; // V; // +------------MP:43------------+; // | IL IR |; // | [10,85] [10,85] |; // LS | [31,56] [31,56] | RS; // | [36,54] [36,54] |; // | [39,50] [39,50] |; // | [43,43] [43,43] |; // V V; // +------------MP:25------------+ MP:61------------+; // | IL IR | IL IR |; // | [15,40] [25,41] | [49,65] [50,75] |; // LS | [20,30] [15,40] | RS [50,75] [60,70] | RS; // | [25,41] [20,30] | [55,61] [49,65] |; // | | [60,70] [55,61] |; // V V V; // MP:15 +-------MP:36 MP:74; // IL IR | IL IR IL IR; // [11,16] [12,21] LS | [] [] [71,79] [74,80]; // [12,21] [11,16] | [74,80] [71,79]; // V; // MP:31; // IL IR; // [30,35] [30,35]; //; // The creation of an interval tree is done in 2 steps:; // 1) Insert the interval items by calling; // void insert(PointT Left, PointT Right, ValueT Value);; // Left, Right: the interval left and right limits.; // Value: the data associated with that specific interval.; //; // 2) Create the interval tree by calling; // void create();; //; // Once the tree is created, it is switched to query mode.; // Query the tree by using iterators or container.; //; // a) Iterators over intervals overlapping the given point with very weak; // ordering guarantees.; // find_iterator begin(PointType Point) const;; // find_iterator end() const;; // Point: a target point to be tested for inclusion in any interval.; //; // b) Container:; // IntervalReferences getContaining(PointT Point);; // Point: a target point to be tested for inclusion in any interval.; // Returns vector with all the intervals containing the target point.; //; // The returned intervals are in their natural tree location. They can; // be sorted:; //; // static void sortIntervals(IntervalReferences &Intervals, Sorting Sort);; //; // Ability to print the constructed interval tree:; // void print(raw_ostream &OS, bool HexFormat = true);; // Display the associated data in hexadecimal format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h:5209,Testability,test,tested,5209,"der by beginning point).; // IR: Intervals to the right (in descending order by ending point).; //; // Root; // |; // V; // +------------MP:43------------+; // | IL IR |; // | [10,85] [10,85] |; // LS | [31,56] [31,56] | RS; // | [36,54] [36,54] |; // | [39,50] [39,50] |; // | [43,43] [43,43] |; // V V; // +------------MP:25------------+ MP:61------------+; // | IL IR | IL IR |; // | [15,40] [25,41] | [49,65] [50,75] |; // LS | [20,30] [15,40] | RS [50,75] [60,70] | RS; // | [25,41] [20,30] | [55,61] [49,65] |; // | | [60,70] [55,61] |; // V V V; // MP:15 +-------MP:36 MP:74; // IL IR | IL IR IL IR; // [11,16] [12,21] LS | [] [] [71,79] [74,80]; // [12,21] [11,16] | [74,80] [71,79]; // V; // MP:31; // IL IR; // [30,35] [30,35]; //; // The creation of an interval tree is done in 2 steps:; // 1) Insert the interval items by calling; // void insert(PointT Left, PointT Right, ValueT Value);; // Left, Right: the interval left and right limits.; // Value: the data associated with that specific interval.; //; // 2) Create the interval tree by calling; // void create();; //; // Once the tree is created, it is switched to query mode.; // Query the tree by using iterators or container.; //; // a) Iterators over intervals overlapping the given point with very weak; // ordering guarantees.; // find_iterator begin(PointType Point) const;; // find_iterator end() const;; // Point: a target point to be tested for inclusion in any interval.; //; // b) Container:; // IntervalReferences getContaining(PointT Point);; // Point: a target point to be tested for inclusion in any interval.; // Returns vector with all the intervals containing the target point.; //; // The returned intervals are in their natural tree location. They can; // be sorted:; //; // static void sortIntervals(IntervalReferences &Intervals, Sorting Sort);; //; // Ability to print the constructed interval tree:; // void print(raw_ostream &OS, bool HexFormat = true);; // Display the associated data in hexadecimal format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h:1078,Usability,clear,clear,1078,"// IntervalTree is a light tree data structure to hold intervals. It allows; // finding all intervals that overlap with any given point. At this time,; // it does not support any deletion or rebalancing operations.; //; // The IntervalTree is designed to be set up once, and then queried without; // any further additions.; //; // Synopsis:; // Closed intervals delimited by PointT objects are mapped to ValueT objects.; //; // Restrictions:; // PointT must be a fundamental type.; // ValueT must be a fundamental or pointer type.; //; // template <typename PointT, typename ValueT, typename DataT>; // class IntervalTree {; // public:; //; // IntervalTree();; // ~IntervalTree():; //; // using IntervalReferences = SmallVector<IntervalData *>;; //; // void create();; // void insert(PointT Left, PointT Right, ValueT Value);; //; // IntervalReferences getContaining(PointT Point);; // static void sortIntervals(IntervalReferences &Intervals, Sorting Sort);; //; // find_iterator begin(PointType Point) const;; // find_iterator end() const;; //; // bool empty() const;; // void clear();; //; // void print(raw_ostream &OS, bool HexFormat = true);; // };; //; //===----------------------------------------------------------------------===//; //; // In the below given dataset; //; // [a, b] <- (x); //; // 'a' and 'b' describe a range and 'x' the value for that interval.; //; // The following data are purely for illustrative purposes:; //; // [30, 35] <- (3035), [39, 50] <- (3950), [55, 61] <- (5561),; // [31, 56] <- (3156), [12, 21] <- (1221), [25, 41] <- (2541),; // [49, 65] <- (4965), [71, 79] <- (7179), [11, 16] <- (1116),; // [20, 30] <- (2030), [36, 54] <- (3654), [60, 70] <- (6070),; // [74, 80] <- (7480), [15, 40] <- (1540), [43, 43] <- (4343),; // [50, 75] <- (5075), [10, 85] <- (1085); //; // The data represents a set of overlapping intervals:; //; // 30--35 39------------50 55----61; // 31------------------------56; // 12--------21 25------------41 49-------------65 71-----79; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h:125,Usability,clear,cleared,125,// Intervals to the right of middle point.; // Working vector used during the tree creation to sort the intervals. It is; // cleared once the tree is created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h:16,Availability,avail,available,16,"// If there are available intervals that contain the reference point,; // traverse them; otherwise move to the left or right node, depending; // on the middle point value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h:131,Integrability,depend,depending,131,"// If there are available intervals that contain the reference point,; // traverse them; otherwise move to the left or right node, depending; // on the middle point value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h:77,Energy Efficiency,efficient,efficiently,77,"// Given a set of n intervals, construct a data structure so that; // we can efficiently retrieve all intervals overlapping another; // interval or point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h:11,Usability,clear,clear,11,"// Save to clear this storage, as it used only to sort the intervals.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:2089,Deployability,Release,Release,2089,"cense-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the RefCountedBase, ThreadSafeRefCountedBase, and; /// IntrusiveRefCntPtr classes.; ///; /// IntrusiveRefCntPtr is a smart pointer to an object which maintains a; /// reference count. (ThreadSafe)RefCountedBase is a mixin class that adds a; /// refcount member variable and methods for updating the refcount. An object; /// that inherits from (ThreadSafe)RefCountedBase deletes itself when its; /// refcount hits zero.; ///; /// For example:; ///; /// ```; /// class MyClass : public RefCountedBase<MyClass> {};; ///; /// void foo() {; /// // Constructing an IntrusiveRefCntPtr increases the pointee's refcount; /// // by 1 (from 0 in this case).; /// IntrusiveRefCntPtr<MyClass> Ptr1(new MyClass());; ///; /// // Copying an IntrusiveRefCntPtr increases the pointee's refcount by 1.; /// IntrusiveRefCntPtr<MyClass> Ptr2(Ptr1);; ///; /// // Constructing an IntrusiveRefCntPtr has no effect on the object's; /// // refcount. After a move, the moved-from pointer is null.; /// IntrusiveRefCntPtr<MyClass> Ptr3(std::move(Ptr1));; /// assert(Ptr1 == nullptr);; ///; /// // Clearing an IntrusiveRefCntPtr decreases the pointee's refcount by 1.; /// Ptr2.reset();; ///; /// // The object deletes itself when we return from the function, because; /// // Ptr3's destructor decrements its refcount to 0.; /// }; /// ```; ///; /// You can use IntrusiveRefCntPtr with isa<T>(), dyn_cast<T>(), etc.:; ///; /// ```; /// IntrusiveRefCntPtr<MyClass> Ptr(new MyClass());; /// OtherClass *Other = dyn_cast<OtherClass>(Ptr); // Ptr.get() not required; /// ```; ///; /// IntrusiveRefCntPtr works with any class that; ///; /// - inherits from (ThreadSafe)RefCountedBase,; /// - has Retain() and Release() methods, or; /// - specializes IntrusiveRefCntPtrInfo.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:675,Modifiability,variab,variable,675,"//==- llvm/ADT/IntrusiveRefCntPtr.h - Smart Refcounting Pointer --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the RefCountedBase, ThreadSafeRefCountedBase, and; /// IntrusiveRefCntPtr classes.; ///; /// IntrusiveRefCntPtr is a smart pointer to an object which maintains a; /// reference count. (ThreadSafe)RefCountedBase is a mixin class that adds a; /// refcount member variable and methods for updating the refcount. An object; /// that inherits from (ThreadSafe)RefCountedBase deletes itself when its; /// refcount hits zero.; ///; /// For example:; ///; /// ```; /// class MyClass : public RefCountedBase<MyClass> {};; ///; /// void foo() {; /// // Constructing an IntrusiveRefCntPtr increases the pointee's refcount; /// // by 1 (from 0 in this case).; /// IntrusiveRefCntPtr<MyClass> Ptr1(new MyClass());; ///; /// // Copying an IntrusiveRefCntPtr increases the pointee's refcount by 1.; /// IntrusiveRefCntPtr<MyClass> Ptr2(Ptr1);; ///; /// // Constructing an IntrusiveRefCntPtr has no effect on the object's; /// // refcount. After a move, the moved-from pointer is null.; /// IntrusiveRefCntPtr<MyClass> Ptr3(std::move(Ptr1));; /// assert(Ptr1 == nullptr);; ///; /// // Clearing an IntrusiveRefCntPtr decreases the pointee's refcount by 1.; /// Ptr2.reset();; ///; /// // The object deletes itself when we return from the function, because; /// // Ptr3's destructor decrements its refcount to 0.; /// }; /// ```; ///; /// You can use IntrusiveRefCntPtr with isa<T>(), dyn_cast<T>(), etc.:; ///; /// ```; /// IntrusiveRefCntPtr<MyClass> Ptr(new MyClass());; /// OtherClass *Other = dyn_cast<OtherClass>(Ptr); // Ptr.get() not required; /// ```; ///; /// IntrusiveRefCntPtr works with any c",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:743,Modifiability,inherit,inherits,743,"//==- llvm/ADT/IntrusiveRefCntPtr.h - Smart Refcounting Pointer --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the RefCountedBase, ThreadSafeRefCountedBase, and; /// IntrusiveRefCntPtr classes.; ///; /// IntrusiveRefCntPtr is a smart pointer to an object which maintains a; /// reference count. (ThreadSafe)RefCountedBase is a mixin class that adds a; /// refcount member variable and methods for updating the refcount. An object; /// that inherits from (ThreadSafe)RefCountedBase deletes itself when its; /// refcount hits zero.; ///; /// For example:; ///; /// ```; /// class MyClass : public RefCountedBase<MyClass> {};; ///; /// void foo() {; /// // Constructing an IntrusiveRefCntPtr increases the pointee's refcount; /// // by 1 (from 0 in this case).; /// IntrusiveRefCntPtr<MyClass> Ptr1(new MyClass());; ///; /// // Copying an IntrusiveRefCntPtr increases the pointee's refcount by 1.; /// IntrusiveRefCntPtr<MyClass> Ptr2(Ptr1);; ///; /// // Constructing an IntrusiveRefCntPtr has no effect on the object's; /// // refcount. After a move, the moved-from pointer is null.; /// IntrusiveRefCntPtr<MyClass> Ptr3(std::move(Ptr1));; /// assert(Ptr1 == nullptr);; ///; /// // Clearing an IntrusiveRefCntPtr decreases the pointee's refcount by 1.; /// Ptr2.reset();; ///; /// // The object deletes itself when we return from the function, because; /// // Ptr3's destructor decrements its refcount to 0.; /// }; /// ```; ///; /// You can use IntrusiveRefCntPtr with isa<T>(), dyn_cast<T>(), etc.:; ///; /// ```; /// IntrusiveRefCntPtr<MyClass> Ptr(new MyClass());; /// OtherClass *Other = dyn_cast<OtherClass>(Ptr); // Ptr.get() not required; /// ```; ///; /// IntrusiveRefCntPtr works with any c",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:2023,Modifiability,inherit,inherits,2023,"cense-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the RefCountedBase, ThreadSafeRefCountedBase, and; /// IntrusiveRefCntPtr classes.; ///; /// IntrusiveRefCntPtr is a smart pointer to an object which maintains a; /// reference count. (ThreadSafe)RefCountedBase is a mixin class that adds a; /// refcount member variable and methods for updating the refcount. An object; /// that inherits from (ThreadSafe)RefCountedBase deletes itself when its; /// refcount hits zero.; ///; /// For example:; ///; /// ```; /// class MyClass : public RefCountedBase<MyClass> {};; ///; /// void foo() {; /// // Constructing an IntrusiveRefCntPtr increases the pointee's refcount; /// // by 1 (from 0 in this case).; /// IntrusiveRefCntPtr<MyClass> Ptr1(new MyClass());; ///; /// // Copying an IntrusiveRefCntPtr increases the pointee's refcount by 1.; /// IntrusiveRefCntPtr<MyClass> Ptr2(Ptr1);; ///; /// // Constructing an IntrusiveRefCntPtr has no effect on the object's; /// // refcount. After a move, the moved-from pointer is null.; /// IntrusiveRefCntPtr<MyClass> Ptr3(std::move(Ptr1));; /// assert(Ptr1 == nullptr);; ///; /// // Clearing an IntrusiveRefCntPtr decreases the pointee's refcount by 1.; /// Ptr2.reset();; ///; /// // The object deletes itself when we return from the function, because; /// // Ptr3's destructor decrements its refcount to 0.; /// }; /// ```; ///; /// You can use IntrusiveRefCntPtr with isa<T>(), dyn_cast<T>(), etc.:; ///; /// ```; /// IntrusiveRefCntPtr<MyClass> Ptr(new MyClass());; /// OtherClass *Other = dyn_cast<OtherClass>(Ptr); // Ptr.get() not required; /// ```; ///; /// IntrusiveRefCntPtr works with any class that; ///; /// - inherits from (ThreadSafe)RefCountedBase,; /// - has Retain() and Release() methods, or; /// - specializes IntrusiveRefCntPtrInfo.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:1445,Testability,assert,assert,1445,"cense-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the RefCountedBase, ThreadSafeRefCountedBase, and; /// IntrusiveRefCntPtr classes.; ///; /// IntrusiveRefCntPtr is a smart pointer to an object which maintains a; /// reference count. (ThreadSafe)RefCountedBase is a mixin class that adds a; /// refcount member variable and methods for updating the refcount. An object; /// that inherits from (ThreadSafe)RefCountedBase deletes itself when its; /// refcount hits zero.; ///; /// For example:; ///; /// ```; /// class MyClass : public RefCountedBase<MyClass> {};; ///; /// void foo() {; /// // Constructing an IntrusiveRefCntPtr increases the pointee's refcount; /// // by 1 (from 0 in this case).; /// IntrusiveRefCntPtr<MyClass> Ptr1(new MyClass());; ///; /// // Copying an IntrusiveRefCntPtr increases the pointee's refcount by 1.; /// IntrusiveRefCntPtr<MyClass> Ptr2(Ptr1);; ///; /// // Constructing an IntrusiveRefCntPtr has no effect on the object's; /// // refcount. After a move, the moved-from pointer is null.; /// IntrusiveRefCntPtr<MyClass> Ptr3(std::move(Ptr1));; /// assert(Ptr1 == nullptr);; ///; /// // Clearing an IntrusiveRefCntPtr decreases the pointee's refcount by 1.; /// Ptr2.reset();; ///; /// // The object deletes itself when we return from the function, because; /// // Ptr3's destructor decrements its refcount to 0.; /// }; /// ```; ///; /// You can use IntrusiveRefCntPtr with isa<T>(), dyn_cast<T>(), etc.:; ///; /// ```; /// IntrusiveRefCntPtr<MyClass> Ptr(new MyClass());; /// OtherClass *Other = dyn_cast<OtherClass>(Ptr); // Ptr.get() not required; /// ```; ///; /// IntrusiveRefCntPtr works with any class that; ///; /// - inherits from (ThreadSafe)RefCountedBase,; /// - has Retain() and Release() methods, or; /// - specializes IntrusiveRefCntPtrInfo.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:1483,Usability,Clear,Clearing,1483,"cense-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the RefCountedBase, ThreadSafeRefCountedBase, and; /// IntrusiveRefCntPtr classes.; ///; /// IntrusiveRefCntPtr is a smart pointer to an object which maintains a; /// reference count. (ThreadSafe)RefCountedBase is a mixin class that adds a; /// refcount member variable and methods for updating the refcount. An object; /// that inherits from (ThreadSafe)RefCountedBase deletes itself when its; /// refcount hits zero.; ///; /// For example:; ///; /// ```; /// class MyClass : public RefCountedBase<MyClass> {};; ///; /// void foo() {; /// // Constructing an IntrusiveRefCntPtr increases the pointee's refcount; /// // by 1 (from 0 in this case).; /// IntrusiveRefCntPtr<MyClass> Ptr1(new MyClass());; ///; /// // Copying an IntrusiveRefCntPtr increases the pointee's refcount by 1.; /// IntrusiveRefCntPtr<MyClass> Ptr2(Ptr1);; ///; /// // Constructing an IntrusiveRefCntPtr has no effect on the object's; /// // refcount. After a move, the moved-from pointer is null.; /// IntrusiveRefCntPtr<MyClass> Ptr3(std::move(Ptr1));; /// assert(Ptr1 == nullptr);; ///; /// // Clearing an IntrusiveRefCntPtr decreases the pointee's refcount by 1.; /// Ptr2.reset();; ///; /// // The object deletes itself when we return from the function, because; /// // Ptr3's destructor decrements its refcount to 0.; /// }; /// ```; ///; /// You can use IntrusiveRefCntPtr with isa<T>(), dyn_cast<T>(), etc.:; ///; /// ```; /// IntrusiveRefCntPtr<MyClass> Ptr(new MyClass());; /// OtherClass *Other = dyn_cast<OtherClass>(Ptr); // Ptr.get() not required; /// ```; ///; /// IntrusiveRefCntPtr works with any class that; ///; /// - inherits from (ThreadSafe)RefCountedBase,; /// - has Retain() and Release() methods, or; /// - specializes IntrusiveRefCntPtrInfo.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:162,Deployability,Release,Release,162,"/// A CRTP mixin class that adds reference counting to a type.; ///; /// The lifetime of an object which inherits from RefCountedBase is managed by; /// calls to Release() and Retain(), which increment and decrement the object's; /// refcount, respectively. When a Release() call decrements the refcount to 0,; /// the object deletes itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:265,Deployability,Release,Release,265,"/// A CRTP mixin class that adds reference counting to a type.; ///; /// The lifetime of an object which inherits from RefCountedBase is managed by; /// calls to Release() and Retain(), which increment and decrement the object's; /// refcount, respectively. When a Release() call decrements the refcount to 0,; /// the object deletes itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:105,Modifiability,inherit,inherits,105,"/// A CRTP mixin class that adds reference counting to a type.; ///; /// The lifetime of an object which inherits from RefCountedBase is managed by; /// calls to Release() and Retain(), which increment and decrement the object's; /// refcount, respectively. When a Release() call decrements the refcount to 0,; /// the object deletes itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:29,Deployability,release,release,29,"// Default the destructor in release builds, A trivial destructor may enable; // better codegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:13,Safety,safe,safe,13,/// A thread-safe version of \c RefCountedBase.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:29,Deployability,release,release,29,"// Default the destructor in release builds, A trivial destructor may enable; // better codegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:54,Deployability,release,release,54,"/// Class you can specialize to provide custom retain/release functionality for; /// a type.; ///; /// Usually specializing this class is not necessary, as IntrusiveRefCntPtr; /// works with any type which defines Retain() and Release() functions -- you; /// can define those functions yourself if RefCountedBase doesn't work for you.; ///; /// One case when you might want to specialize this type is if you have; /// - Foo.h defines type Foo and includes Bar.h, and; /// - Bar.h uses IntrusiveRefCntPtr<Foo> in inline functions.; ///; /// Because Foo.h includes Bar.h, Bar.h can't include Foo.h in order to pull in; /// the declaration of Foo. Without the declaration of Foo, normally Bar.h; /// wouldn't be able to use IntrusiveRefCntPtr<Foo>, which wants to call; /// T::Retain and T::Release.; ///; /// To resolve this, Bar.h could include a third header, FooFwd.h, which; /// forward-declares Foo and specializes IntrusiveRefCntPtrInfo<Foo>. Then; /// Bar.h could use IntrusiveRefCntPtr<Foo>, although it still couldn't call any; /// functions on Foo itself, because Foo would be an incomplete type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:227,Deployability,Release,Release,227,"/// Class you can specialize to provide custom retain/release functionality for; /// a type.; ///; /// Usually specializing this class is not necessary, as IntrusiveRefCntPtr; /// works with any type which defines Retain() and Release() functions -- you; /// can define those functions yourself if RefCountedBase doesn't work for you.; ///; /// One case when you might want to specialize this type is if you have; /// - Foo.h defines type Foo and includes Bar.h, and; /// - Bar.h uses IntrusiveRefCntPtr<Foo> in inline functions.; ///; /// Because Foo.h includes Bar.h, Bar.h can't include Foo.h in order to pull in; /// the declaration of Foo. Without the declaration of Foo, normally Bar.h; /// wouldn't be able to use IntrusiveRefCntPtr<Foo>, which wants to call; /// T::Retain and T::Release.; ///; /// To resolve this, Bar.h could include a third header, FooFwd.h, which; /// forward-declares Foo and specializes IntrusiveRefCntPtrInfo<Foo>. Then; /// Bar.h could use IntrusiveRefCntPtr<Foo>, although it still couldn't call any; /// functions on Foo itself, because Foo would be an incomplete type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:788,Deployability,Release,Release,788,"/// Class you can specialize to provide custom retain/release functionality for; /// a type.; ///; /// Usually specializing this class is not necessary, as IntrusiveRefCntPtr; /// works with any type which defines Retain() and Release() functions -- you; /// can define those functions yourself if RefCountedBase doesn't work for you.; ///; /// One case when you might want to specialize this type is if you have; /// - Foo.h defines type Foo and includes Bar.h, and; /// - Bar.h uses IntrusiveRefCntPtr<Foo> in inline functions.; ///; /// Because Foo.h includes Bar.h, Bar.h can't include Foo.h in order to pull in; /// the declaration of Foo. Without the declaration of Foo, normally Bar.h; /// wouldn't be able to use IntrusiveRefCntPtr<Foo>, which wants to call; /// T::Retain and T::Release.; ///; /// To resolve this, Bar.h could include a third header, FooFwd.h, which; /// forward-declares Foo and specializes IntrusiveRefCntPtrInfo<Foo>. Then; /// Bar.h could use IntrusiveRefCntPtr<Foo>, although it still couldn't call any; /// functions on Foo itself, because Foo would be an incomplete type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:55,Modifiability,inherit,inherits,55,"/// A smart pointer to a reference-counted object that inherits from; /// RefCountedBase or ThreadSafeRefCountedBase.; ///; /// This class increments its pointee's reference count when it is created, and; /// decrements its refcount when it's destroyed (or is changed to point to a; /// different object).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:114,Integrability,interface,interface,114,"/// CRTP base class which implements the entire standard iterator facade; /// in terms of a minimal subset of the interface.; ///; /// Use this when it is reasonable to implement most of the iterator; /// functionality in terms of a core subset. If you need special behavior or; /// there are performance implications for this, you may want to override the; /// relevant members instead.; ///; /// Note, one abstraction that this does *not* provide is implementing; /// subtraction in terms of addition by negating the difference. Negation isn't; /// always information preserving, and I can see very reasonable iterator; /// designs where this doesn't work well. It doesn't really force much added; /// boilerplate anyways.; ///; /// Another abstraction that this doesn't provide is implementing increment in; /// terms of addition of one. These aren't equivalent for all iterator; /// categories, and respecting that adds a lot of complexity for little gain.; ///; /// Iterators are expected to have const rules analogous to pointers, with a; /// single, const-qualified operator*() that returns ReferenceT. This matches; /// the second and third pointers in the following example:; /// \code; /// int Value;; /// { int *I = &Value; } // ReferenceT 'int&'; /// { int *const I = &Value; } // ReferenceT 'int&'; const; /// { const int *I = &Value; } // ReferenceT 'const int&'; /// { const int *const I = &Value; } // ReferenceT 'const int&'; const; /// \endcode; /// If an iterator facade returns a handle to its own state, then T (and; /// PointerT and ReferenceT) should usually be const-qualified. Otherwise, if; /// clients are expected to modify the handle itself, the field can be declared; /// mutable or use const_cast.; ///; /// Classes wishing to use `iterator_facade_base` should implement the following; /// methods:; ///; /// Forward Iterators:; /// (All of the following methods); /// - DerivedT &operator=(const DerivedT &R);; /// - bool operator==(const DerivedT &R) const;; /// - T &",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:293,Performance,perform,performance,293,"/// CRTP base class which implements the entire standard iterator facade; /// in terms of a minimal subset of the interface.; ///; /// Use this when it is reasonable to implement most of the iterator; /// functionality in terms of a core subset. If you need special behavior or; /// there are performance implications for this, you may want to override the; /// relevant members instead.; ///; /// Note, one abstraction that this does *not* provide is implementing; /// subtraction in terms of addition by negating the difference. Negation isn't; /// always information preserving, and I can see very reasonable iterator; /// designs where this doesn't work well. It doesn't really force much added; /// boilerplate anyways.; ///; /// Another abstraction that this doesn't provide is implementing increment in; /// terms of addition of one. These aren't equivalent for all iterator; /// categories, and respecting that adds a lot of complexity for little gain.; ///; /// Iterators are expected to have const rules analogous to pointers, with a; /// single, const-qualified operator*() that returns ReferenceT. This matches; /// the second and third pointers in the following example:; /// \code; /// int Value;; /// { int *I = &Value; } // ReferenceT 'int&'; /// { int *const I = &Value; } // ReferenceT 'int&'; const; /// { const int *I = &Value; } // ReferenceT 'const int&'; /// { const int *const I = &Value; } // ReferenceT 'const int&'; const; /// \endcode; /// If an iterator facade returns a handle to its own state, then T (and; /// PointerT and ReferenceT) should usually be const-qualified. Otherwise, if; /// clients are expected to modify the handle itself, the field can be declared; /// mutable or use const_cast.; ///; /// Classes wishing to use `iterator_facade_base` should implement the following; /// methods:; ///; /// Forward Iterators:; /// (All of the following methods); /// - DerivedT &operator=(const DerivedT &R);; /// - bool operator==(const DerivedT &R) const;; /// - T &",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:2194,Security,access,access,2194,"nd I can see very reasonable iterator; /// designs where this doesn't work well. It doesn't really force much added; /// boilerplate anyways.; ///; /// Another abstraction that this doesn't provide is implementing increment in; /// terms of addition of one. These aren't equivalent for all iterator; /// categories, and respecting that adds a lot of complexity for little gain.; ///; /// Iterators are expected to have const rules analogous to pointers, with a; /// single, const-qualified operator*() that returns ReferenceT. This matches; /// the second and third pointers in the following example:; /// \code; /// int Value;; /// { int *I = &Value; } // ReferenceT 'int&'; /// { int *const I = &Value; } // ReferenceT 'int&'; const; /// { const int *I = &Value; } // ReferenceT 'const int&'; /// { const int *const I = &Value; } // ReferenceT 'const int&'; const; /// \endcode; /// If an iterator facade returns a handle to its own state, then T (and; /// PointerT and ReferenceT) should usually be const-qualified. Otherwise, if; /// clients are expected to modify the handle itself, the field can be declared; /// mutable or use const_cast.; ///; /// Classes wishing to use `iterator_facade_base` should implement the following; /// methods:; ///; /// Forward Iterators:; /// (All of the following methods); /// - DerivedT &operator=(const DerivedT &R);; /// - bool operator==(const DerivedT &R) const;; /// - T &operator*() const;; /// - DerivedT &operator++();; ///; /// Bidirectional Iterators:; /// (All methods of forward iterators, plus the following); /// - DerivedT &operator--();; ///; /// Random-access Iterators:; /// (All methods of bidirectional iterators excluding the following); /// - DerivedT &operator++();; /// - DerivedT &operator--();; /// (and plus the following); /// - bool operator<(const DerivedT &RHS) const;; /// - DifferenceTypeT operator-(const DerivedT &R) const;; /// - DerivedT &operator+=(DifferenceTypeT N);; /// - DerivedT &operator-=(DifferenceTypeT N);; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:274,Security,expose,exposes,274,/// A proxy object for computing a reference via indirecting a copy of an; /// iterator. This is used in APIs which need to produce a reference via; /// indirection but for which the iterator object might be a temporary. The; /// proxy preserves the iterator internally and exposes the indirected; /// reference via a conversion operator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:249,Security,expose,exposes,249,/// A proxy object for computing a pointer via indirecting a copy of a; /// reference. This is used in APIs which need to produce a pointer but for; /// which the reference might be a temporary. The proxy preserves the; /// reference internally and exposes the pointer via a arrow operator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:24,Energy Efficiency,adapt,adapting,24,/// CRTP base class for adapting an iterator to a different type.; ///; /// This class can be used through CRTP to adapt one iterator into another.; /// Typically this is done through providing in the derived class a custom \c; /// operator* implementation. Other methods can be overridden as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:115,Energy Efficiency,adapt,adapt,115,/// CRTP base class for adapting an iterator to a different type.; ///; /// This class can be used through CRTP to adapt one iterator into another.; /// Typically this is done through providing in the derived class a custom \c; /// operator* implementation. Other methods can be overridden as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:24,Modifiability,adapt,adapting,24,/// CRTP base class for adapting an iterator to a different type.; ///; /// This class can be used through CRTP to adapt one iterator into another.; /// Typically this is done through providing in the derived class a custom \c; /// operator* implementation. Other methods can be overridden as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:115,Modifiability,adapt,adapt,115,/// CRTP base class for adapting an iterator to a different type.; ///; /// This class can be used through CRTP to adapt one iterator into another.; /// Typically this is done through providing in the derived class a custom \c; /// operator* implementation. Other methods can be overridden as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:100,Integrability,Wrap,WrappedIteratorT,100,// We have to explicitly provide ++ and -- rather than letting the facade; // forward to += because WrappedIteratorT might not support +=.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:133,Security,expose,expose,133,"/// An iterator type that allows iterating over the pointees via some; /// other iterator.; ///; /// The typical usage of this is to expose a type that iterates over Ts, but; /// which is implemented with some iterator over T*s:; ///; /// \code; /// using iterator = pointee_iterator<SmallVectorImpl<T *>::iterator>;; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h:34,Energy Efficiency,adapt,adaptor,34,"//===- iterator_range.h - A range adaptor for iterators ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This provides a very simple, boring adaptor for a begin and end iterator; /// into a range type. This should be used to build range views that work well; /// with range based for loops and range based constructors.; ///; /// Note that code here follows more standards-based coding conventions as it; /// is mirroring proposed interfaces for standardization.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h:427,Energy Efficiency,adapt,adaptor,427,"//===- iterator_range.h - A range adaptor for iterators ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This provides a very simple, boring adaptor for a begin and end iterator; /// into a range type. This should be used to build range views that work well; /// with range based for loops and range based constructors.; ///; /// Note that code here follows more standards-based coding conventions as it; /// is mirroring proposed interfaces for standardization.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h:717,Integrability,interface,interfaces,717,"//===- iterator_range.h - A range adaptor for iterators ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This provides a very simple, boring adaptor for a begin and end iterator; /// into a range type. This should be used to build range views that work well; /// with range based for loops and range based constructors.; ///; /// Note that code here follows more standards-based coding conventions as it; /// is mirroring proposed interfaces for standardization.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h:34,Modifiability,adapt,adaptor,34,"//===- iterator_range.h - A range adaptor for iterators ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This provides a very simple, boring adaptor for a begin and end iterator; /// into a range type. This should be used to build range views that work well; /// with range based for loops and range based constructors.; ///; /// Note that code here follows more standards-based coding conventions as it; /// is mirroring proposed interfaces for standardization.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h:427,Modifiability,adapt,adaptor,427,"//===- iterator_range.h - A range adaptor for iterators ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This provides a very simple, boring adaptor for a begin and end iterator; /// into a range type. This should be used to build range views that work well; /// with range based for loops and range based constructors.; ///; /// Note that code here follows more standards-based coding conventions as it; /// is mirroring proposed interfaces for standardization.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h:412,Usability,simpl,simple,412,"//===- iterator_range.h - A range adaptor for iterators ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This provides a very simple, boring adaptor for a begin and end iterator; /// into a range type. This should be used to build range views that work well; /// with range based for loops and range based constructors.; ///; /// Note that code here follows more standards-based coding conventions as it; /// is mirroring proposed interfaces for standardization.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:61,Performance,concurren,concurrent,61,"/// Atomic pointer that's lock-free, but that can coordinate concurrent writes; /// from a lazy generator. Should be reserved for cases where concurrent uses of; /// a generator for the same storage is unlikely.; ///; /// The laziness comes in with \a loadOrGenerate(), which lazily calls the; /// provided generator ONLY when the value is currently \c nullptr. With; /// concurrent calls, only one generator is called and the rest see that value.; ///; /// Most other APIs treat an in-flight \a loadOrGenerate() as if \c nullptr; /// were stored. APIs that are required to write a value will spin.; ///; /// The underlying storage is \a std::atomic<uintptr_t>.; ///; /// TODO: In C++20, use std::atomic<T>::wait() instead of spinning and call; /// std::atomic<T>::notify_all() in \a loadOrGenerate().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:142,Performance,concurren,concurrent,142,"/// Atomic pointer that's lock-free, but that can coordinate concurrent writes; /// from a lazy generator. Should be reserved for cases where concurrent uses of; /// a generator for the same storage is unlikely.; ///; /// The laziness comes in with \a loadOrGenerate(), which lazily calls the; /// provided generator ONLY when the value is currently \c nullptr. With; /// concurrent calls, only one generator is called and the rest see that value.; ///; /// Most other APIs treat an in-flight \a loadOrGenerate() as if \c nullptr; /// were stored. APIs that are required to write a value will spin.; ///; /// The underlying storage is \a std::atomic<uintptr_t>.; ///; /// TODO: In C++20, use std::atomic<T>::wait() instead of spinning and call; /// std::atomic<T>::notify_all() in \a loadOrGenerate().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:252,Performance,load,loadOrGenerate,252,"/// Atomic pointer that's lock-free, but that can coordinate concurrent writes; /// from a lazy generator. Should be reserved for cases where concurrent uses of; /// a generator for the same storage is unlikely.; ///; /// The laziness comes in with \a loadOrGenerate(), which lazily calls the; /// provided generator ONLY when the value is currently \c nullptr. With; /// concurrent calls, only one generator is called and the rest see that value.; ///; /// Most other APIs treat an in-flight \a loadOrGenerate() as if \c nullptr; /// were stored. APIs that are required to write a value will spin.; ///; /// The underlying storage is \a std::atomic<uintptr_t>.; ///; /// TODO: In C++20, use std::atomic<T>::wait() instead of spinning and call; /// std::atomic<T>::notify_all() in \a loadOrGenerate().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:372,Performance,concurren,concurrent,372,"/// Atomic pointer that's lock-free, but that can coordinate concurrent writes; /// from a lazy generator. Should be reserved for cases where concurrent uses of; /// a generator for the same storage is unlikely.; ///; /// The laziness comes in with \a loadOrGenerate(), which lazily calls the; /// provided generator ONLY when the value is currently \c nullptr. With; /// concurrent calls, only one generator is called and the rest see that value.; ///; /// Most other APIs treat an in-flight \a loadOrGenerate() as if \c nullptr; /// were stored. APIs that are required to write a value will spin.; ///; /// The underlying storage is \a std::atomic<uintptr_t>.; ///; /// TODO: In C++20, use std::atomic<T>::wait() instead of spinning and call; /// std::atomic<T>::notify_all() in \a loadOrGenerate().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:496,Performance,load,loadOrGenerate,496,"/// Atomic pointer that's lock-free, but that can coordinate concurrent writes; /// from a lazy generator. Should be reserved for cases where concurrent uses of; /// a generator for the same storage is unlikely.; ///; /// The laziness comes in with \a loadOrGenerate(), which lazily calls the; /// provided generator ONLY when the value is currently \c nullptr. With; /// concurrent calls, only one generator is called and the rest see that value.; ///; /// Most other APIs treat an in-flight \a loadOrGenerate() as if \c nullptr; /// were stored. APIs that are required to write a value will spin.; ///; /// The underlying storage is \a std::atomic<uintptr_t>.; ///; /// TODO: In C++20, use std::atomic<T>::wait() instead of spinning and call; /// std::atomic<T>::notify_all() in \a loadOrGenerate().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:784,Performance,load,loadOrGenerate,784,"/// Atomic pointer that's lock-free, but that can coordinate concurrent writes; /// from a lazy generator. Should be reserved for cases where concurrent uses of; /// a generator for the same storage is unlikely.; ///; /// The laziness comes in with \a loadOrGenerate(), which lazily calls the; /// provided generator ONLY when the value is currently \c nullptr. With; /// concurrent calls, only one generator is called and the rest see that value.; ///; /// Most other APIs treat an in-flight \a loadOrGenerate() as if \c nullptr; /// were stored. APIs that are required to write a value will spin.; ///; /// The underlying storage is \a std::atomic<uintptr_t>.; ///; /// TODO: In C++20, use std::atomic<T>::wait() instead of spinning and call; /// std::atomic<T>::notify_all() in \a loadOrGenerate().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:29,Performance,concurren,concurrent,29,/// Store a value. Waits for concurrent \a loadOrGenerate() calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:43,Performance,load,loadOrGenerate,43,/// Store a value. Waits for concurrent \a loadOrGenerate() calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:49,Performance,concurren,concurrent,49,/// Set a value. Return the old value. Waits for concurrent \a; /// loadOrGenerate() calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:68,Performance,load,loadOrGenerate,68,/// Set a value. Return the old value. Waits for concurrent \a; /// loadOrGenerate() calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:53,Performance,concurren,concurrent,53,"/// Compare-exchange. Returns \c false if there is a concurrent \a; /// loadOrGenerate() call, setting \p ExistingValue to \c nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:72,Performance,load,loadOrGenerate,72,"/// Compare-exchange. Returns \c false if there is a concurrent \a; /// loadOrGenerate() call, setting \p ExistingValue to \c nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:49,Performance,concurren,concurrent,49,/// Compare-exchange. Keeps trying if there is a concurrent; /// \a loadOrGenerate() call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:68,Performance,load,loadOrGenerate,68,/// Compare-exchange. Keeps trying if there is a concurrent; /// \a loadOrGenerate() call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:67,Performance,concurren,concurrent,67,/// Return the current stored value. Returns \a None if there is a concurrent; /// \a loadOrGenerate() in flight.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h:86,Performance,load,loadOrGenerate,86,/// Return the current stored value. Returns \a None if there is a concurrent; /// \a loadOrGenerate() in flight.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/LazyAtomicPointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h:473,Integrability,interface,interface,473,"//===- llvm/ADT/MapVector.h - Map w/ deterministic value order --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a map that provides insertion order iteration. The; /// interface is purposefully minimal. The key is assumed to be cheap to copy; /// and 2 copies are kept, one for indexing in a DenseMap, one for iteration in; /// a SmallVector.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h:51,Security,access,access,51,"/// This class implements a map that also provides access to all stored values; /// in a deterministic order. The values are kept in a SmallVector<*, 0> and the; /// mapping is done with DenseMap from Keys to indexes in that vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h:4,Usability,Clear,Clear,4,/// Clear the MapVector and return the underlying vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h:3,Deployability,Update,Update,3,// Update indices in the map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h:22,Deployability,update,update,22,// Move the value and update the index in the map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h:21,Performance,perform,performs,21,/// A MapVector that performs no allocations if smaller than a certain; /// size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PackedVector.h:279,Testability,assert,assertion,279,"/// Store a vector of values using a specific number of bits for each; /// value. Both signed and unsigned types can be used, e.g; /// @code; /// PackedVector<signed, 2> vec;; /// @endcode; /// will create a vector accepting values -2, -1, 0, 1. Any other value will hit; /// an assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PackedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PackedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:40,Energy Efficiency,allocate,allocated,40,"//===- llvm/ADT/PagedVector.h - 'Lazily allocated' vectors --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the PagedVector class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:18,Energy Efficiency,allocate,allocates,18,"/// A vector that allocates memory in pages.; ///; /// Order is kept, but memory is allocated only when one element of the page is; /// accessed. This introduces a level of indirection, but it is useful when you; /// have a sparsely initialised vector where the full size is allocated upfront.; ///; /// As a side effect the elements are initialised later than in a normal vector.; /// On the first access to one of the elements of a given page, all the elements; /// of the page are initialised. This also means that the elements of the page; /// are initialised beyond the size of the vector.; ///; /// Similarly on destruction the elements are destroyed only when the page is; /// not needed anymore, delaying invoking the destructor of the elements.; ///; /// Notice that this has iterators only on materialized elements. This; /// is deliberately done under the assumption you would dereference the elements; /// while iterating, therefore materialising them and losing the gains in terms; /// of memory usage this container provides. If you have such a use case, you; /// probably want to use a normal std::vector or a llvm::SmallVector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:84,Energy Efficiency,allocate,allocated,84,"/// A vector that allocates memory in pages.; ///; /// Order is kept, but memory is allocated only when one element of the page is; /// accessed. This introduces a level of indirection, but it is useful when you; /// have a sparsely initialised vector where the full size is allocated upfront.; ///; /// As a side effect the elements are initialised later than in a normal vector.; /// On the first access to one of the elements of a given page, all the elements; /// of the page are initialised. This also means that the elements of the page; /// are initialised beyond the size of the vector.; ///; /// Similarly on destruction the elements are destroyed only when the page is; /// not needed anymore, delaying invoking the destructor of the elements.; ///; /// Notice that this has iterators only on materialized elements. This; /// is deliberately done under the assumption you would dereference the elements; /// while iterating, therefore materialising them and losing the gains in terms; /// of memory usage this container provides. If you have such a use case, you; /// probably want to use a normal std::vector or a llvm::SmallVector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:275,Energy Efficiency,allocate,allocated,275,"/// A vector that allocates memory in pages.; ///; /// Order is kept, but memory is allocated only when one element of the page is; /// accessed. This introduces a level of indirection, but it is useful when you; /// have a sparsely initialised vector where the full size is allocated upfront.; ///; /// As a side effect the elements are initialised later than in a normal vector.; /// On the first access to one of the elements of a given page, all the elements; /// of the page are initialised. This also means that the elements of the page; /// are initialised beyond the size of the vector.; ///; /// Similarly on destruction the elements are destroyed only when the page is; /// not needed anymore, delaying invoking the destructor of the elements.; ///; /// Notice that this has iterators only on materialized elements. This; /// is deliberately done under the assumption you would dereference the elements; /// while iterating, therefore materialising them and losing the gains in terms; /// of memory usage this container provides. If you have such a use case, you; /// probably want to use a normal std::vector or a llvm::SmallVector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:136,Security,access,accessed,136,"/// A vector that allocates memory in pages.; ///; /// Order is kept, but memory is allocated only when one element of the page is; /// accessed. This introduces a level of indirection, but it is useful when you; /// have a sparsely initialised vector where the full size is allocated upfront.; ///; /// As a side effect the elements are initialised later than in a normal vector.; /// On the first access to one of the elements of a given page, all the elements; /// of the page are initialised. This also means that the elements of the page; /// are initialised beyond the size of the vector.; ///; /// Similarly on destruction the elements are destroyed only when the page is; /// not needed anymore, delaying invoking the destructor of the elements.; ///; /// Notice that this has iterators only on materialized elements. This; /// is deliberately done under the assumption you would dereference the elements; /// while iterating, therefore materialising them and losing the gains in terms; /// of memory usage this container provides. If you have such a use case, you; /// probably want to use a normal std::vector or a llvm::SmallVector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:399,Security,access,access,399,"/// A vector that allocates memory in pages.; ///; /// Order is kept, but memory is allocated only when one element of the page is; /// accessed. This introduces a level of indirection, but it is useful when you; /// have a sparsely initialised vector where the full size is allocated upfront.; ///; /// As a side effect the elements are initialised later than in a normal vector.; /// On the first access to one of the elements of a given page, all the elements; /// of the page are initialised. This also means that the elements of the page; /// are initialised beyond the size of the vector.; ///; /// Similarly on destruction the elements are destroyed only when the page is; /// not needed anymore, delaying invoking the destructor of the elements.; ///; /// Notice that this has iterators only on materialized elements. This; /// is deliberately done under the assumption you would dereference the elements; /// while iterating, therefore materialising them and losing the gains in terms; /// of memory usage this container provides. If you have such a use case, you; /// probably want to use a normal std::vector or a llvm::SmallVector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:61,Security,access,accessed,61,/// The actual number of elements in the vector which can be accessed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:87,Energy Efficiency,allocate,allocated,87,/// The position of the initial element of the page in the Data vector.; /// Pages are allocated contiguously in the Data vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:48,Energy Efficiency,allocate,allocated,48,/// Actual page data. All the page elements are allocated on the; /// first access of any of the elements of the page. Elements are default; /// constructed and elements of the page are stored contiguously.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:76,Security,access,access,76,/// Actual page data. All the page elements are allocated on the; /// first access of any of the elements of the page. Elements are default; /// constructed and elements of the page are stored contiguously.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:27,Energy Efficiency,allocate,allocated,27,"// If the page was not yet allocated, allocate it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:38,Energy Efficiency,allocate,allocate,38,"// If the page was not yet allocated, allocate it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:128,Security,access,accessed,128,"/// Resize the vector. Notice that the constructor of the elements will not; /// be invoked until an element of a given page is accessed, at which point; /// all the elements of the page will be constructed.; ///; /// If the new size is smaller than the current size, the elements of the; /// pages that are not needed anymore will be destroyed, however, elements of; /// the last page will not be destroyed.; ///; /// For these reason the usage of this vector is discouraged if you rely; /// on the construction / destructor of the elements to be invoked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:421,Security,access,access,421,"// Handle shrink case: destroy the elements in the pages that are not; // needed any more and deallocate the pages.; //; // On the other hand, we do not destroy the extra elements in the last page,; // because we might need them later and the logic is simpler if we do not; // destroy them. This means that elements are only destroyed when the; // page they belong to is destroyed. This is similar to what happens on; // access of the elements of a page, where all the elements of the page are; // constructed not only the one effectively needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:243,Testability,log,logic,243,"// Handle shrink case: destroy the elements in the pages that are not; // needed any more and deallocate the pages.; //; // On the other hand, we do not destroy the extra elements in the last page,; // because we might need them later and the logic is simpler if we do not; // destroy them. This means that elements are only destroyed when the; // page they belong to is destroyed. This is similar to what happens on; // access of the elements of a page, where all the elements of the page are; // constructed not only the one effectively needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:252,Usability,simpl,simpler,252,"// Handle shrink case: destroy the elements in the pages that are not; // needed any more and deallocate the pages.; //; // On the other hand, we do not destroy the extra elements in the last page,; // because we might need them later and the logic is simpler if we do not; // destroy them. This means that elements are only destroyed when the; // page they belong to is destroyed. This is similar to what happens on; // access of the elements of a page, where all the elements of the page are; // constructed not only the one effectively needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:37,Energy Efficiency,allocate,allocated,37,"/// Clear the vector, i.e. clear the allocated pages, the whole page; /// lookup index and reset the size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:4,Usability,Clear,Clear,4,"/// Clear the vector, i.e. clear the allocated pages, the whole page; /// lookup index and reset the size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:27,Usability,clear,clear,27,"/// Clear the vector, i.e. clear the allocated pages, the whole page; /// lookup index and reset the size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:28,Usability,simpl,simply,28,"// If we own the allocator, simply reset it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:114,Energy Efficiency,allocate,allocated,114,"/// Iterators over the materialized elements of the vector.; ///; /// This includes all the elements belonging to allocated pages,; /// even if they have not been accessed yet. It's enough to access; /// one element of a page to materialize all the elements of the page.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:163,Security,access,accessed,163,"/// Iterators over the materialized elements of the vector.; ///; /// This includes all the elements belonging to allocated pages,; /// even if they have not been accessed yet. It's enough to access; /// one element of a page to materialize all the elements of the page.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:192,Security,access,access,192,"/// Iterators over the materialized elements of the vector.; ///; /// This includes all the elements belonging to allocated pages,; /// even if they have not been accessed yet. It's enough to access; /// one element of a page to materialize all the elements of the page.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h:505,Testability,test,tested,505,"/// Utility to embed an integer into a pointer-like type. This is specifically; /// intended to allow embedding integers where fewer bits are required than; /// exist in a pointer, and the integer can participate in abstractions along; /// side other pointer-like types. For example it can be placed into a \c; /// PointerSumType or \c PointerUnion.; ///; /// Note that much like pointers, an integer value of zero has special utility; /// due to boolean conversions. For example, a non-null value can be tested for; /// in the above abstractions without testing the particular active member.; /// Also, the default constructed value zero initializes the integer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h:555,Testability,test,testing,555,"/// Utility to embed an integer into a pointer-like type. This is specifically; /// intended to allow embedding integers where fewer bits are required than; /// exist in a pointer, and the integer can participate in abstractions along; /// side other pointer-like types. For example it can be placed into a \c; /// PointerSumType or \c PointerUnion.; ///; /// Note that much like pointers, an integer value of zero has special utility; /// due to boolean conversions. For example, a non-null value can be tested for; /// in the above abstractions without testing the particular active member.; /// Also, the default constructed value zero initializes the integer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h:30,Availability,mask,mask,30,// We also want to be able to mask out the preserved bits for asserts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h:62,Testability,assert,asserts,62,// We also want to be able to mask out the preserved bits for asserts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h:3,Testability,Assert,Asserts,3,// Asserts that allow us to let the compiler implement the destructor and; // copy/move constructors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h:336,Availability,avail,available,336,"/// PointerIntPair - This class implements a pair of a pointer and small; /// integer. It is designed to represent this in the space required by one; /// pointer by bitmangling the integer into the low part of the pointer. This; /// can only be done for small integers: typically up to 3 bits, but it depends; /// on the number of bits available according to PointerLikeTypeTraits for the; /// type.; ///; /// Note that PointerIntPair always puts the IntVal part in the highest bits; /// possible. For example, PointerIntPair<void*, 1, bool> will put the bit for; /// the bool into bit #2, not bit #0, which allows the low two bits to be used; /// for something else. For example, this allows:; /// PointerIntPair<PointerIntPair<void*, 1, bool>, 1, bool>; /// ... and the two bools will land in different bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h:301,Integrability,depend,depends,301,"/// PointerIntPair - This class implements a pair of a pointer and small; /// integer. It is designed to represent this in the space required by one; /// pointer by bitmangling the integer into the low part of the pointer. This; /// can only be done for small integers: typically up to 3 bits, but it depends; /// on the number of bits available according to PointerLikeTypeTraits for the; /// type.; ///; /// Note that PointerIntPair always puts the IntVal part in the highest bits; /// possible. For example, PointerIntPair<void*, 1, bool> will put the bit for; /// the bool into bit #2, not bit #0, which allows the low two bits to be used; /// for something else. For example, this allows:; /// PointerIntPair<PointerIntPair<void*, 1, bool>, 1, bool>; /// ... and the two bools will land in different bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h:36,Availability,mask,mask,36,/// IntMask - This is the unshifted mask for valid bits of the int type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h:31,Deployability,update,update,31,"// Preserve all low bits, just update the pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:702,Integrability,interface,interface,702,"// end namespace detail; /// A sum type over pointer-like types.; ///; /// This is a normal tagged union across pointer-like types that uses the low; /// bits of the pointers to store the tag.; ///; /// Each member of the sum type is specified by passing a \c; /// PointerSumTypeMember specialization in the variadic member argument list.; /// This allows the user to control the particular tag value associated with; /// a particular type, use the same type for multiple different tags, and; /// customize the pointer-like traits used for a particular member. Note that; /// these *must* be specializations of \c PointerSumTypeMember, no other type; /// will suffice, even if it provides a compatible interface.; ///; /// This type implements all of the comparison operators and even hash table; /// support by comparing the underlying storage of the pointer values. It; /// doesn't support delegating to particular members for comparisons.; ///; /// It also default constructs to a zero tag with a null pointer, whatever that; /// would be. This means that the zero value for the tag type is significant; /// and may be desirable to set to a state that is particularly desirable to; /// default construct.; ///; /// Having a supported zero-valued tag also enables getting the address of a; /// pointer stored with that tag provided it is stored in its natural bit; /// representation. This works because in the case of a zero-valued tag, the; /// pointer's value is directly stored into this object and we can expose the; /// address of that internal storage. This is especially useful when building an; /// `ArrayRef` of a single pointer stored in a sum type.; ///; /// There is no support for constructing or accessing with a dynamic tag as; /// that would fundamentally violate the type safety provided by the sum type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:1792,Safety,safe,safety,1792,"// end namespace detail; /// A sum type over pointer-like types.; ///; /// This is a normal tagged union across pointer-like types that uses the low; /// bits of the pointers to store the tag.; ///; /// Each member of the sum type is specified by passing a \c; /// PointerSumTypeMember specialization in the variadic member argument list.; /// This allows the user to control the particular tag value associated with; /// a particular type, use the same type for multiple different tags, and; /// customize the pointer-like traits used for a particular member. Note that; /// these *must* be specializations of \c PointerSumTypeMember, no other type; /// will suffice, even if it provides a compatible interface.; ///; /// This type implements all of the comparison operators and even hash table; /// support by comparing the underlying storage of the pointer values. It; /// doesn't support delegating to particular members for comparisons.; ///; /// It also default constructs to a zero tag with a null pointer, whatever that; /// would be. This means that the zero value for the tag type is significant; /// and may be desirable to set to a state that is particularly desirable to; /// default construct.; ///; /// Having a supported zero-valued tag also enables getting the address of a; /// pointer stored with that tag provided it is stored in its natural bit; /// representation. This works because in the case of a zero-valued tag, the; /// pointer's value is directly stored into this object and we can expose the; /// address of that internal storage. This is especially useful when building an; /// `ArrayRef` of a single pointer stored in a sum type.; ///; /// There is no support for constructing or accessing with a dynamic tag as; /// that would fundamentally violate the type safety provided by the sum type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:785,Security,hash,hash,785,"// end namespace detail; /// A sum type over pointer-like types.; ///; /// This is a normal tagged union across pointer-like types that uses the low; /// bits of the pointers to store the tag.; ///; /// Each member of the sum type is specified by passing a \c; /// PointerSumTypeMember specialization in the variadic member argument list.; /// This allows the user to control the particular tag value associated with; /// a particular type, use the same type for multiple different tags, and; /// customize the pointer-like traits used for a particular member. Note that; /// these *must* be specializations of \c PointerSumTypeMember, no other type; /// will suffice, even if it provides a compatible interface.; ///; /// This type implements all of the comparison operators and even hash table; /// support by comparing the underlying storage of the pointer values. It; /// doesn't support delegating to particular members for comparisons.; ///; /// It also default constructs to a zero tag with a null pointer, whatever that; /// would be. This means that the zero value for the tag type is significant; /// and may be desirable to set to a state that is particularly desirable to; /// default construct.; ///; /// Having a supported zero-valued tag also enables getting the address of a; /// pointer stored with that tag provided it is stored in its natural bit; /// representation. This works because in the case of a zero-valued tag, the; /// pointer's value is directly stored into this object and we can expose the; /// address of that internal storage. This is especially useful when building an; /// `ArrayRef` of a single pointer stored in a sum type.; ///; /// There is no support for constructing or accessing with a dynamic tag as; /// that would fundamentally violate the type safety provided by the sum type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:1512,Security,expose,expose,1512,"// end namespace detail; /// A sum type over pointer-like types.; ///; /// This is a normal tagged union across pointer-like types that uses the low; /// bits of the pointers to store the tag.; ///; /// Each member of the sum type is specified by passing a \c; /// PointerSumTypeMember specialization in the variadic member argument list.; /// This allows the user to control the particular tag value associated with; /// a particular type, use the same type for multiple different tags, and; /// customize the pointer-like traits used for a particular member. Note that; /// these *must* be specializations of \c PointerSumTypeMember, no other type; /// will suffice, even if it provides a compatible interface.; ///; /// This type implements all of the comparison operators and even hash table; /// support by comparing the underlying storage of the pointer values. It; /// doesn't support delegating to particular members for comparisons.; ///; /// It also default constructs to a zero tag with a null pointer, whatever that; /// would be. This means that the zero value for the tag type is significant; /// and may be desirable to set to a state that is particularly desirable to; /// default construct.; ///; /// Having a supported zero-valued tag also enables getting the address of a; /// pointer stored with that tag provided it is stored in its natural bit; /// representation. This works because in the case of a zero-valued tag, the; /// pointer's value is directly stored into this object and we can expose the; /// address of that internal storage. This is especially useful when building an; /// `ArrayRef` of a single pointer stored in a sum type.; ///; /// There is no support for constructing or accessing with a dynamic tag as; /// that would fundamentally violate the type safety provided by the sum type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:1713,Security,access,accessing,1713,"// end namespace detail; /// A sum type over pointer-like types.; ///; /// This is a normal tagged union across pointer-like types that uses the low; /// bits of the pointers to store the tag.; ///; /// Each member of the sum type is specified by passing a \c; /// PointerSumTypeMember specialization in the variadic member argument list.; /// This allows the user to control the particular tag value associated with; /// a particular type, use the same type for multiple different tags, and; /// customize the pointer-like traits used for a particular member. Note that; /// these *must* be specializations of \c PointerSumTypeMember, no other type; /// will suffice, even if it provides a compatible interface.; ///; /// This type implements all of the comparison operators and even hash table; /// support by comparing the underlying storage of the pointer values. It; /// doesn't support delegating to particular members for comparisons.; ///; /// It also default constructs to a zero tag with a null pointer, whatever that; /// would be. This means that the zero value for the tag type is significant; /// and may be desirable to set to a state that is particularly desirable to; /// default construct.; ///; /// Having a supported zero-valued tag also enables getting the address of a; /// pointer stored with that tag provided it is stored in its natural bit; /// representation. This works because in the case of a zero-valued tag, the; /// pointer's value is directly stored into this object and we can expose the; /// address of that internal storage. This is especially useful when building an; /// `ArrayRef` of a single pointer stored in a sum type.; ///; /// There is no support for constructing or accessing with a dynamic tag as; /// that would fundamentally violate the type safety provided by the sum type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:606,Safety,avoid,avoid,606,"// We keep both the raw value and the min tag value's pointer in a union. When; // the minimum tag value is zero, this allows code below to cleanly expose the; // address of the zero-tag pointer instead of just the zero-tag pointer; // itself. This is especially useful when building `ArrayRef`s out of a single; // pointer. However, we have to carefully access the union due to the active; // member potentially changing. When we *store* a new value, we directly; // access the union to allow us to store using the obvious types. However,; // when we *read* a value, we copy the underlying storage out to avoid relying; // on one member or the other being active.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:148,Security,expose,expose,148,"// We keep both the raw value and the min tag value's pointer in a union. When; // the minimum tag value is zero, this allows code below to cleanly expose the; // address of the zero-tag pointer instead of just the zero-tag pointer; // itself. This is especially useful when building `ArrayRef`s out of a single; // pointer. However, we have to carefully access the union due to the active; // member potentially changing. When we *store* a new value, we directly; // access the union to allow us to store using the obvious types. However,; // when we *read* a value, we copy the underlying storage out to avoid relying; // on one member or the other being active.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:355,Security,access,access,355,"// We keep both the raw value and the min tag value's pointer in a union. When; // the minimum tag value is zero, this allows code below to cleanly expose the; // address of the zero-tag pointer instead of just the zero-tag pointer; // itself. This is especially useful when building `ArrayRef`s out of a single; // pointer. However, we have to carefully access the union due to the active; // member potentially changing. When we *store* a new value, we directly; // access the union to allow us to store using the obvious types. However,; // when we *read* a value, we copy the underlying storage out to avoid relying; // on one member or the other being active.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:468,Security,access,access,468,"// We keep both the raw value and the min tag value's pointer in a union. When; // the minimum tag value is zero, this allows code below to cleanly expose the; // address of the zero-tag pointer instead of just the zero-tag pointer; // itself. This is especially useful when building `ArrayRef`s out of a single; // pointer. However, we have to carefully access the union due to the active; // member potentially changing. When we *store* a new value, we directly; // access the union to allow us to store using the obvious types. However,; // when we *read* a value, we copy the underlying storage out to avoid relying; // on one member or the other being active.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:4,Usability,Clear,Clear,4,/// Clear the value to null with the min tag type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:7,Deployability,update,update,7,// Now update the active member of the union to be the actual pointer-typed; // member so that accessing it indirectly through the returned address is; // valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:95,Security,access,accessing,95,// Now update the active member of the union to be the actual pointer-typed; // member so that accessing it indirectly through the returned address is; // valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:12,Security,validat,validate,12,"// Finally, validate that this was a no-op as expected by reading it back; // out using the same underlying-storage read as above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:46,Availability,avail,available,46,// Next we need to compute the number of bits available for the discriminant; // by taking the min of the bits available for each member. Much of this; // would be amazingly easier with good constexpr support.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:111,Availability,avail,available,111,// Next we need to compute the number of bits available for the discriminant; // by taking the min of the bits available for each member. Much of this; // would be amazingly easier with good constexpr support.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:54,Availability,mask,masks,54,// Also compute the smallest discriminant and various masks for convenience.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:532,Availability,failure,failure,532,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:584,Availability,failure,failure,584,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:691,Availability,failure,failure,691,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:749,Availability,failure,failure,749,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:158,Energy Efficiency,efficient,efficient,158,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:263,Safety,safe,safe,263,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:522,Testability,assert,assertion,522,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:681,Testability,assert,assertion,681,"/// A discriminated union of two or more pointer types, with the discriminator; /// in the low bit of the pointer.; ///; /// This implementation is extremely efficient in space due to leveraging the; /// low bits of the pointer, while exposing a natural and type-safe API.; ///; /// Common use patterns would be something like this:; /// PointerUnion<int*, float*> P;; /// P = (int*)0;; /// printf(""%d %d"", P.is<int*>(), P.is<float*>()); // prints ""1 0""; /// X = P.get<int*>(); // ok.; /// Y = P.get<float*>(); // runtime assertion failure.; /// Z = P.get<double*>(); // compile time failure.; /// P = (float*)0;; /// Y = P.get<float*>(); // ok.; /// X = P.get<int*>(); // runtime assertion failure.; /// PointerUnion<int*, int*> Q; // compile time failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:61,Security,access,access,61,/// This is needed to give the CastInfo implementation below access; /// to protected members.; /// Refer to its definition for further details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:4,Testability,Test,Test,4,"/// Test if the pointer held in the union is null, regardless of; /// which type it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:113,Testability,Test,Test,113,"// FIXME: Replace the uses of is(), get() and dyn_cast() with; // isa<T>, cast<T> and the llvm::dyn_cast<T>; /// Test if the Union currently holds the type matching T.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:107,Testability,assert,assert,107,"/// Returns the value of the specified pointer type.; ///; /// If the specified pointer type is incorrect, assert.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:39,Usability,clear,clears,39,/// Assignment from nullptr which just clears the union.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:340,Integrability,bridg,bridge,340,"/// We can't (at least, at this moment with C++14) declare CastInfo; /// as a friend of PointerUnion like this:; /// ```; /// template<typename To>; /// friend struct CastInfo<To, PointerUnion<PTs...>>;; /// ```; /// The compiler complains 'Partial specialization cannot be declared as a; /// friend'.; /// So we define this struct to be a bridge between CastInfo and; /// PointerUnion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:89,Availability,avail,available,89,"// Teach SmallPtrSet that PointerUnion is ""basically a pointer"", that has; // # low bits available = min(PT1bits,PT2bits)-1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:22,Availability,avail,available,22,// The number of bits available are the min of the pointer types minus the; // bits needed for the discriminator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PostOrderIterator.h:45,Security,access,access,45,"// The po_iterator_storage template provides access to the set of already; // visited nodes during the po_iterator's depth-first traversal.; //; // The default implementation simply contains a set of visited nodes, while; // the External=true version uses a reference to an external set.; //; // It is possible to prune the depth-first traversal in several ways:; //; // - When providing an external set that already contains some graph nodes,; // those nodes won't be visited again. This is useful for restarting a; // post-order traversal on a graph with nodes that aren't dominated by a; // single node.; //; // - By providing a custom SetType class, unwanted graph nodes can be excluded; // by having the insert() function return false. This could for example; // confine a CFG traversal to blocks in a specific loop.; //; // - Finally, by specializing the po_iterator_storage template itself, graph; // edges can be pruned by returning false in the insertEdge() function. This; // could be used to remove loop back-edges from the CFG seen by po_iterator.; //; // A specialized po_iterator_storage class can observe both the pre-order and; // the post-order. The insertEdge() function is called in a pre-order, while; // the finishPostorder() function is called just before the po_iterator moves; // on to the next node.; /// Default po_iterator_storage implementation with an internal set object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PostOrderIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PostOrderIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PostOrderIterator.h:175,Usability,simpl,simply,175,"// The po_iterator_storage template provides access to the set of already; // visited nodes during the po_iterator's depth-first traversal.; //; // The default implementation simply contains a set of visited nodes, while; // the External=true version uses a reference to an external set.; //; // It is possible to prune the depth-first traversal in several ways:; //; // - When providing an external set that already contains some graph nodes,; // those nodes won't be visited again. This is useful for restarting a; // post-order traversal on a graph with nodes that aren't dominated by a; // single node.; //; // - By providing a custom SetType class, unwanted graph nodes can be excluded; // by having the insert() function return false. This could for example; // confine a CFG traversal to blocks in a specific loop.; //; // - Finally, by specializing the po_iterator_storage template itself, graph; // edges can be pruned by returning false in the insertEdge() function. This; // could be used to remove loop back-edges from the CFG seen by po_iterator.; //; // A specialized po_iterator_storage class can observe both the pre-order and; // the post-order. The insertEdge() function is called in a pre-order, while; // the finishPostorder() function is called just before the po_iterator moves; // on to the next node.; /// Default po_iterator_storage implementation with an internal set object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PostOrderIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PostOrderIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:43,Performance,queue,queues,43,"//===- llvm/ADT/PriorityQueue.h - Priority queues ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the PriorityQueue class.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:43,Performance,queue,queue,43,"/// erase_one - Erase one element from the queue, regardless of its; /// position. This operation performs a linear search to find an element; /// equal to t, but then uses all logarithmic-time algorithms to do; /// the erase operation.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:98,Performance,perform,performs,98,"/// erase_one - Erase one element from the queue, regardless of its; /// position. This operation performs a linear search to find an element; /// equal to t, but then uses all logarithmic-time algorithms to do; /// the erase operation.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:177,Testability,log,logarithmic-time,177,"/// erase_one - Erase one element from the queue, regardless of its; /// position. This operation performs a linear search to find an element; /// equal to t, but then uses all logarithmic-time algorithms to do; /// the erase operation.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:3,Testability,Log,Logarithmic-time,3,// Logarithmic-time heap bubble-up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:37,Performance,queue,queue,37,"/// reheapify - If an element in the queue has changed in a way that; /// affects its standing in the comparison function, the queue's; /// internal state becomes invalid. Calling reheapify() resets the; /// queue's state, making it valid again. This operation has time; /// complexity proportional to the number of elements in the queue,; /// so don't plan to use it a lot.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:127,Performance,queue,queue,127,"/// reheapify - If an element in the queue has changed in a way that; /// affects its standing in the comparison function, the queue's; /// internal state becomes invalid. Calling reheapify() resets the; /// queue's state, making it valid again. This operation has time; /// complexity proportional to the number of elements in the queue,; /// so don't plan to use it a lot.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:208,Performance,queue,queue,208,"/// reheapify - If an element in the queue has changed in a way that; /// affects its standing in the comparison function, the queue's; /// internal state becomes invalid. Calling reheapify() resets the; /// queue's state, making it valid again. This operation has time; /// complexity proportional to the number of elements in the queue,; /// so don't plan to use it a lot.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:332,Performance,queue,queue,332,"/// reheapify - If an element in the queue has changed in a way that; /// affects its standing in the comparison function, the queue's; /// internal state becomes invalid. Calling reheapify() resets the; /// queue's state, making it valid again. This operation has time; /// complexity proportional to the number of elements in the queue,; /// so don't plan to use it a lot.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:40,Performance,queue,queue,40,/// clear - Erase all elements from the queue.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:4,Usability,clear,clear,4,/// clear - Erase all elements from the queue.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:692,Availability,error,error,692,"/// A FILO worklist that prioritizes on re-insertion without duplication.; ///; /// This is very similar to a \c SetVector with the primary difference that; /// while re-insertion does not create a duplicate, it does adjust the; /// visitation order to respect the last insertion point. This can be useful; /// when the visit order needs to be prioritized based on insertion point; /// without actually having duplicate visits.; ///; /// Note that this doesn't prevent re-insertion of elements which have been; /// visited -- if you need to break cycles, a set will still be necessary.; ///; /// The type \c T must be default constructable to a null value that will be; /// ignored. It is an error to insert such a value, and popping elements will; /// never produce such a value. It is expected to be used with common nullable; /// types like pointers or optionals.; ///; /// Internally this uses a vector to store the worklist and a map to identify; /// existing elements in the worklist. Both of these may be customized, but the; /// map must support the basic DenseMap API for mapping from a T to an integer; /// index into the vector.; ///; /// A partial specialization is provided to automatically select a SmallVector; /// and a SmallDenseMap if custom data structures are not provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:50,Usability,clear,clear,50,// Otherwise the existing one comes first so just clear out the value in; // this slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:275,Security,expose,expose,275,"/// Erase items from the set vector based on a predicate function.; ///; /// This is intended to be equivalent to the following code, if we could; /// write it:; ///; /// \code; /// V.erase(remove_if(V, P), V.end());; /// \endcode; ///; /// However, PriorityWorklist doesn't expose non-const iterators, making any; /// algorithm like remove_if impossible to use.; ///; /// \returns true if any element is removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:195,Usability,clear,clear,195,/// Reverse the items in the PriorityWorklist.; ///; /// This does an in-place reversal. Other kinds of reverse aren't easy to; /// support in the face of the worklist semantics.; /// Completely clear the PriorityWorklist,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:6,Integrability,wrap,wrapper,6,/// A wrapper predicate designed for use with std::remove_if.; ///; /// This predicate wraps a predicate suitable for use with std::remove_if to; /// call M.erase(x) on each element which is slated for removal. This just; /// allows the predicate to be move only which we can't do with lambdas; /// today.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:87,Integrability,wrap,wraps,87,/// A wrapper predicate designed for use with std::remove_if.; ///; /// This predicate wraps a predicate suitable for use with std::remove_if to; /// call M.erase(x) on each element which is slated for removal. This just; /// allows the predicate to be move only which we can't do with lambdas; /// today.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:61,Performance,optimiz,optimized,61,/// A version of \c PriorityWorklist that selects small size optimized data; /// structures for the vector and map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:821,Integrability,wrap,wrappers,821,"//===- ADT/SCCIterator.h - Strongly Connected Comp. Iter. -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This builds on the llvm/ADT/GraphTraits.h file to find the strongly; /// connected components (SCCs) of a graph in O(N+E) time using Tarjan's DFS; /// algorithm.; ///; /// The SCC iterator has the important property that if a node in SCC S1 has an; /// edge to a node in SCC S2, then it visits S1 *after* S2.; ///; /// To visit S1 *before* S2, use the scc_iterator on the Inverse graph. (NOTE:; /// This requires some simple wrappers and is not supported yet.); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:814,Usability,simpl,simple,814,"//===- ADT/SCCIterator.h - Strongly Connected Comp. Iter. -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This builds on the llvm/ADT/GraphTraits.h file to find the strongly; /// connected components (SCCs) of a graph in O(N+E) time using Tarjan's DFS; /// algorithm.; ///; /// The SCC iterator has the important property that if a node in SCC S1 has an; /// edge to a node in SCC S2, then it visits S1 *after* S2.; ///; /// To visit S1 *before* S2, use the scc_iterator on the Inverse graph. (NOTE:; /// This requires some simple wrappers and is not supported yet.); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:31,Safety,detect,detect,31,"/// The visit counters used to detect when a complete SCC is on the stack.; /// visitNum is the global counter.; ///; /// nodeVisitNumbers are per-node visit numbers, also used as DFS flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:47,Energy Efficiency,efficient,efficient,47,/// Direct loop termination test which is more efficient than; /// comparison with \c end().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:28,Testability,test,test,28,/// Direct loop termination test which is more efficient than; /// comparison with \c end().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:4,Testability,Test,Test,4,"/// Test if the current SCC has a cycle.; ///; /// If the SCC has more than one node, this is trivially true. If not, it may; /// still contain a cycle if the node has an edge back to itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:45,Safety,detect,detect,45,// Propagate MinVisitNum to parent so we can detect the SCC starting node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:46,Performance,queue,queue,46,"// Walk through SortedEdges to initialize the queue, instead of using NodeInfoMap; // to ensure an ordered deterministic push.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:407,Energy Efficiency,efficient,efficient,407,"//===- ScopedHashTable.h - A simple scoped hash table -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an efficient scoped hash table, which is useful for; // things like dominator-based optimizations. This allows clients to do things; // like this:; //; // ScopedHashTable<int, int> HT;; // {; // ScopedHashTableScope<int, int> Scope1(HT);; // HT.insert(0, 0);; // HT.insert(1, 1);; // {; // ScopedHashTableScope<int, int> Scope2(HT);; // HT.insert(0, 42);; // }; // }; //; // Looking up the value for ""0"" in the Scope2 block will return 42. Looking; // up the value for 0 before 42 is inserted or after Scope2 is popped will; // return 0.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:488,Performance,optimiz,optimizations,488,"//===- ScopedHashTable.h - A simple scoped hash table -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an efficient scoped hash table, which is useful for; // things like dominator-based optimizations. This allows clients to do things; // like this:; //; // ScopedHashTable<int, int> HT;; // {; // ScopedHashTableScope<int, int> Scope1(HT);; // HT.insert(0, 0);; // HT.insert(1, 1);; // {; // ScopedHashTableScope<int, int> Scope2(HT);; // HT.insert(0, 42);; // }; // }; //; // Looking up the value for ""0"" in the Scope2 block will return 42. Looking; // up the value for 0 before 42 is inserted or after Scope2 is popped will; // return 0.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:43,Security,hash,hash,43,"//===- ScopedHashTable.h - A simple scoped hash table -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an efficient scoped hash table, which is useful for; // things like dominator-based optimizations. This allows clients to do things; // like this:; //; // ScopedHashTable<int, int> HT;; // {; // ScopedHashTableScope<int, int> Scope1(HT);; // HT.insert(0, 0);; // HT.insert(1, 1);; // {; // ScopedHashTableScope<int, int> Scope2(HT);; // HT.insert(0, 42);; // }; // }; //; // Looking up the value for ""0"" in the Scope2 block will return 42. Looking; // up the value for 0 before 42 is inserted or after Scope2 is popped will; // return 0.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:424,Security,hash,hash,424,"//===- ScopedHashTable.h - A simple scoped hash table -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an efficient scoped hash table, which is useful for; // things like dominator-based optimizations. This allows clients to do things; // like this:; //; // ScopedHashTable<int, int> HT;; // {; // ScopedHashTableScope<int, int> Scope1(HT);; // HT.insert(0, 0);; // HT.insert(1, 1);; // {; // ScopedHashTableScope<int, int> Scope2(HT);; // HT.insert(0, 42);; // }; // }; //; // Looking up the value for ""0"" in the Scope2 block will return 42. Looking; // up the value for 0 before 42 is inserted or after Scope2 is popped will; // return 0.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:29,Usability,simpl,simple,29,"//===- ScopedHashTable.h - A simple scoped hash table -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an efficient scoped hash table, which is useful for; // things like dominator-based optimizations. This allows clients to do things; // like this:; //; // ScopedHashTable<int, int> HT;; // {; // ScopedHashTableScope<int, int> Scope1(HT);; // HT.insert(0, 0);; // HT.insert(1, 1);; // {; // ScopedHashTableScope<int, int> Scope2(HT);; // HT.insert(0, 42);; // }; // }; //; // Looking up the value for ""0"" in the Scope2 block will return 42. Looking; // up the value for 0 before 42 is inserted or after Scope2 is popped will; // return 0.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:13,Security,hash,hashtable,13,/// HT - The hashtable that we are active for.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:72,Security,access,access,72,/// ScopeTy - This is a helpful typedef that allows clients to get easy access; /// to the name of the scope for this hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:118,Security,hash,hash,118,/// ScopeTy - This is a helpful typedef that allows clients to get easy access; /// to the name of the scope for this hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:4,Security,Access,Access,4,/// Access to the allocator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:32,Deployability,Install,Install,32,/// ScopedHashTableScope ctor - Install this as the current scope for the hash; /// table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:74,Security,hash,hash,74,/// ScopedHashTableScope ctor - Install this as the current scope for the hash; /// table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h:485,Testability,log,logic,485,"//===- llvm/ADT/ScopeExit.h - Execute code at scope exit --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the make_scope_exit function, which executes user-defined; /// cleanup logic at scope exit.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h:28,Deployability,release,release,28,// False once moved-from or release()d.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h:209,Integrability,Interface,Interface,209,"// end namespace detail; // Keeps the callable object that is passed in, and execute it at the; // destruction of the returned object (usually at the scope exit where the; // returned object is kept).; //; // Interface is specified by p0052r2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopeExit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:712,Safety,safe,safely,712,"//===- Sequence.h - Utility for producing sequences of values ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Provides some synthesis utilities to produce sequences of values. The names; /// are intentionally kept very short as they tend to occur in common and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> stru",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:1412,Safety,safe,safe,1412,"s; /// are intentionally kept very short as they tend to occur in common and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> struct enum_iteration_traits<MyClass::Safe> {; /// static contexpr bool is_iterable = true;; /// };; /// ```; ///; /// ```; /// for (auto v : enum_seq(MyClass::Safe::D, MyClass::Safe::F)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `3 4 `.; ///; /// ```; /// for (auto v : enum_seq(MyClass::MaybeUnsafe::H, MyClass::MaybeUnsafe::I,; /// force_iteration_on_noniterable_enum)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `2 3 `.; ///; //===-----",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:1506,Safety,unsafe,unsafe,1506,"s; /// are intentionally kept very short as they tend to occur in common and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> struct enum_iteration_traits<MyClass::Safe> {; /// static contexpr bool is_iterable = true;; /// };; /// ```; ///; /// ```; /// for (auto v : enum_seq(MyClass::Safe::D, MyClass::Safe::F)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `3 4 `.; ///; /// ```; /// for (auto v : enum_seq(MyClass::MaybeUnsafe::H, MyClass::MaybeUnsafe::I,; /// force_iteration_on_noniterable_enum)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `2 3 `.; ///; //===-----",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:1898,Safety,Safe,Safe,1898,"n and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> struct enum_iteration_traits<MyClass::Safe> {; /// static contexpr bool is_iterable = true;; /// };; /// ```; ///; /// ```; /// for (auto v : enum_seq(MyClass::Safe::D, MyClass::Safe::F)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `3 4 `.; ///; /// ```; /// for (auto v : enum_seq(MyClass::MaybeUnsafe::H, MyClass::MaybeUnsafe::I,; /// force_iteration_on_noniterable_enum)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `2 3 `.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:2035,Safety,Safe,Safe,2035,"n and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> struct enum_iteration_traits<MyClass::Safe> {; /// static contexpr bool is_iterable = true;; /// };; /// ```; ///; /// ```; /// for (auto v : enum_seq(MyClass::Safe::D, MyClass::Safe::F)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `3 4 `.; ///; /// ```; /// for (auto v : enum_seq(MyClass::MaybeUnsafe::H, MyClass::MaybeUnsafe::I,; /// force_iteration_on_noniterable_enum)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `2 3 `.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:2157,Safety,Safe,Safe,2157,"n and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> struct enum_iteration_traits<MyClass::Safe> {; /// static contexpr bool is_iterable = true;; /// };; /// ```; ///; /// ```; /// for (auto v : enum_seq(MyClass::Safe::D, MyClass::Safe::F)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `3 4 `.; ///; /// ```; /// for (auto v : enum_seq(MyClass::MaybeUnsafe::H, MyClass::MaybeUnsafe::I,; /// force_iteration_on_noniterable_enum)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `2 3 `.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:2175,Safety,Safe,Safe,2175,"n and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> struct enum_iteration_traits<MyClass::Safe> {; /// static contexpr bool is_iterable = true;; /// };; /// ```; ///; /// ```; /// for (auto v : enum_seq(MyClass::Safe::D, MyClass::Safe::F)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `3 4 `.; ///; /// ```; /// for (auto v : enum_seq(MyClass::MaybeUnsafe::H, MyClass::MaybeUnsafe::I,; /// force_iteration_on_noniterable_enum)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `2 3 `.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:3,Testability,assert,assert,3,// assert,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:35,Safety,safe,safe,35,"// Enum traits that marks enums as safe or unsafe to iterate over.; // By default, enum types are *not* considered safe for iteration.; // To allow iteration for your enum type, provide a specialization with; // `is_iterable` set to `true` in the `llvm` namespace.; // Alternatively, you can pass the `force_iteration_on_noniterable_enum` tag; // to `enum_seq` or `enum_seq_inclusive`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:43,Safety,unsafe,unsafe,43,"// Enum traits that marks enums as safe or unsafe to iterate over.; // By default, enum types are *not* considered safe for iteration.; // To allow iteration for your enum type, provide a specialization with; // `is_iterable` set to `true` in the `llvm` namespace.; // Alternatively, you can pass the `force_iteration_on_noniterable_enum` tag; // to `enum_seq` or `enum_seq_inclusive`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:115,Safety,safe,safe,115,"// Enum traits that marks enums as safe or unsafe to iterate over.; // By default, enum types are *not* considered safe for iteration.; // To allow iteration for your enum type, provide a specialization with; // `is_iterable` set to `true` in the `llvm` namespace.; // Alternatively, you can pass the `force_iteration_on_noniterable_enum` tag; // to `enum_seq` or `enum_seq_inclusive`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:24,Testability,assert,asserts,24,"// An integer type that asserts when:; // - constructed from a value that doesn't fit into intmax_t,; // - casted to a type that cannot hold the current value,; // - its internal representation overflows.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:25,Testability,assert,asserts,25,"// Integral constructor, asserts if Value cannot be represented as intmax_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:21,Testability,assert,asserts,21,"// Enum constructor, asserts if Value cannot be represented as intmax_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:24,Testability,assert,asserts,24,"// Convert to integral, asserts if Value cannot be represented as Integral.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:20,Testability,assert,asserts,20,"// Convert to enum, asserts if Value cannot be represented as Enum's; // underlying type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:114,Safety,safe,safely,114,"/// Iterate over an enum type from Begin up to - but not including - End, even; /// when `EnumT` is not marked as safely iterable by `enum_iteration_traits`.; /// Note: `enum_seq` will generate each consecutive value, even if no; /// enumerator with that value exists.; /// Note: Begin and End values have to be within [INTMAX_MIN, INTMAX_MAX] for; /// forward iteration (resp. [INTMAX_MIN + 1, INTMAX_MAX] for reverse; /// iteration).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:99,Safety,safe,safely,99,"/// Iterate over an enum type from Begin to End inclusive, even when `EnumT`; /// is not marked as safely iterable by `enum_iteration_traits`.; /// Note: `enum_seq_inclusive` will generate each consecutive value, even if no; /// enumerator with that value exists.; /// Note: Begin and End values have to be within [INTMAX_MIN, INTMAX_MAX - 1]; /// for forward iteration (resp. [INTMAX_MIN + 1, INTMAX_MAX - 1] for reverse; /// iteration).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:610,Integrability,interface,interface,610,"//===- llvm/ADT/SetVector.h - Set with insert order iteration ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a set that has insertion order iteration; /// characteristics. This is useful for keeping a set of things that need to be; /// visited later but in a deterministic order (insertion order). The interface; /// is purposefully minimal.; ///; /// This file defines SetVector and SmallSetVector, which performs no; /// allocations if the SetVector has less than a certain number of elements.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:714,Performance,perform,performs,714,"//===- llvm/ADT/SetVector.h - Set with insert order iteration ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a set that has insertion order iteration; /// characteristics. This is useful for keeping a set of things that need to be; /// visited later but in a deterministic order (insertion order). The interface; /// is purposefully minimal.; ///; /// This file defines SetVector and SmallSetVector, which performs no; /// allocations if the SetVector has less than a certain number of elements.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:62,Energy Efficiency,adapt,adapter,62,"/// A vector that has set insertion semantics.; ///; /// This adapter class provides a way to keep a set of things that also has the; /// property of a deterministic iteration order. The order of iteration is the; /// order of insertion.; ///; /// The key and value types are derived from the Set and Vector types; /// respectively. This allows the vector-type operations and set-type operations; /// to have different types. In particular, this is useful when storing pointers; /// as ""Foo *"" values but looking them up as ""const Foo *"" keys.; ///; /// No constraint is placed on the key and value types, although it is assumed; /// that value_type can be converted into key_type for insertion. Users must be; /// aware of any loss of information in this conversion. For example, setting; /// value_type to float and key_type to int can produce very surprising results,; /// but it is not explicitly disallowed.; ///; /// The parameter N specifies the ""small"" size of the container, which is the; /// number of elements upto which a linear scan over the Vector will be used; /// when searching for elements instead of checking Set, due to it being better; /// for performance. A value of 0 means that this mode of operation is not used,; /// and is the default value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:62,Integrability,adapter,adapter,62,"/// A vector that has set insertion semantics.; ///; /// This adapter class provides a way to keep a set of things that also has the; /// property of a deterministic iteration order. The order of iteration is the; /// order of insertion.; ///; /// The key and value types are derived from the Set and Vector types; /// respectively. This allows the vector-type operations and set-type operations; /// to have different types. In particular, this is useful when storing pointers; /// as ""Foo *"" values but looking them up as ""const Foo *"" keys.; ///; /// No constraint is placed on the key and value types, although it is assumed; /// that value_type can be converted into key_type for insertion. Users must be; /// aware of any loss of information in this conversion. For example, setting; /// value_type to float and key_type to int can produce very surprising results,; /// but it is not explicitly disallowed.; ///; /// The parameter N specifies the ""small"" size of the container, which is the; /// number of elements upto which a linear scan over the Vector will be used; /// when searching for elements instead of checking Set, due to it being better; /// for performance. A value of 0 means that this mode of operation is not used,; /// and is the default value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:62,Modifiability,adapt,adapter,62,"/// A vector that has set insertion semantics.; ///; /// This adapter class provides a way to keep a set of things that also has the; /// property of a deterministic iteration order. The order of iteration is the; /// order of insertion.; ///; /// The key and value types are derived from the Set and Vector types; /// respectively. This allows the vector-type operations and set-type operations; /// to have different types. In particular, this is useful when storing pointers; /// as ""Foo *"" values but looking them up as ""const Foo *"" keys.; ///; /// No constraint is placed on the key and value types, although it is assumed; /// that value_type can be converted into key_type for insertion. Users must be; /// aware of any loss of information in this conversion. For example, setting; /// value_type to float and key_type to int can produce very surprising results,; /// but it is not explicitly disallowed.; ///; /// The parameter N specifies the ""small"" size of the container, which is the; /// number of elements upto which a linear scan over the Vector will be used; /// when searching for elements instead of checking Set, due to it being better; /// for performance. A value of 0 means that this mode of operation is not used,; /// and is the default value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:1165,Performance,perform,performance,1165,"/// A vector that has set insertion semantics.; ///; /// This adapter class provides a way to keep a set of things that also has the; /// property of a deterministic iteration order. The order of iteration is the; /// order of insertion.; ///; /// The key and value types are derived from the Set and Vector types; /// respectively. This allows the vector-type operations and set-type operations; /// to have different types. In particular, this is useful when storing pointers; /// as ""Foo *"" values but looking them up as ""const Foo *"" keys.; ///; /// No constraint is placed on the key and value types, although it is assumed; /// that value_type can be converted into key_type for insertion. Users must be; /// aware of any loss of information in this conversion. For example, setting; /// value_type to float and key_type to int can produce very surprising results,; /// but it is not explicitly disallowed.; ///; /// The parameter N specifies the ""small"" size of the container, which is the; /// number of elements upto which a linear scan over the Vector will be used; /// when searching for elements instead of checking Set, due to it being better; /// for performance. A value of 0 means that this mode of operation is not used,; /// and is the default value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:4,Usability,Clear,Clear,4,/// Clear the SetVector and return the underlying vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:269,Security,expose,expose,269,"/// Remove items from the set vector based on a predicate function.; ///; /// This is intended to be equivalent to the following code, if we could; /// write it:; ///; /// \code; /// V.erase(remove_if(V, P), V.end());; /// \endcode; ///; /// However, SetVector doesn't expose non-const iterators, making any; /// algorithm like remove_if impossible to use.; ///; /// \returns true if any element is removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:15,Usability,clear,clear,15,/// Completely clear the SetVector,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:148,Integrability,interface,interface,148,"/// Compute This := This u S, return whether 'This' changed.; /// TODO: We should be able to use set_union from SetOperations.h, but; /// SetVector interface is inconsistent with DenseSet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:119,Integrability,interface,interface,119,"/// Compute This := This - B; /// TODO: We should be able to use set_subtract from SetOperations.h, but; /// SetVector interface is inconsistent with DenseSet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:6,Integrability,wrap,wrapper,6,/// A wrapper predicate designed for use with std::remove_if.; ///; /// This predicate wraps a predicate suitable for use with std::remove_if to; /// call set_.erase(x) on each element which is slated for removal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:87,Integrability,wrap,wraps,87,/// A wrapper predicate designed for use with std::remove_if.; ///; /// This predicate wraps a predicate suitable for use with std::remove_if to; /// call set_.erase(x) on each element which is slated for removal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:21,Performance,perform,performs,21,/// A SetVector that performs no allocations if smaller than; /// a certain size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:33,Usability,Simpl,Simple,33,"//===- llvm/ADT/simple_ilist.h - Simple Intrusive List ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:1460,Availability,avail,available,1460,"pt for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel() API. Unlike \a ilist_node::isKnownSentinel(),; /// which is only appropriate for assertions, \a ilist_node::isSentinel() is; /// appropriate for real logic.; ///; /// Here are examples of \p Options usage:; /// \li \c simple_ilist<T> gives the defaults. \li \c; /// simple_ilist<T,ilist_sentinel_tracking<true>> enables the \a; /// ilist_node::isSentinel() API.; /// \li \c simple_ilist<T,ilist_tag<A>,ilist_sentinel_tracking<false>>; /// specifies a tag of A and that t",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:102,Modifiability,inherit,inherits,102,"/// A simple intrusive list implementation.; ///; /// This is a simple intrusive list for a \c T that inherits from \c; /// ilist_node<T>. The list never takes ownership of anything inserted in it.; ///; /// Unlike \a iplist<T> and \a ilist<T>, \a simple_ilist<T> never deletes; /// values, and has no callback traits.; ///; /// The API for adding nodes include \a push_front(), \a push_back(), and \a; /// insert(). These all take values by reference (not by pointer), except for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:2085,Testability,assert,assertions,2085,"s the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel() API. Unlike \a ilist_node::isKnownSentinel(),; /// which is only appropriate for assertions, \a ilist_node::isSentinel() is; /// appropriate for real logic.; ///; /// Here are examples of \p Options usage:; /// \li \c simple_ilist<T> gives the defaults. \li \c; /// simple_ilist<T,ilist_sentinel_tracking<true>> enables the \a; /// ilist_node::isSentinel() API.; /// \li \c simple_ilist<T,ilist_tag<A>,ilist_sentinel_tracking<false>>; /// specifies a tag of A and that tracking should be off (even when; /// LLVM_ENABLE_ABI_BREAKING_CHECKS are enabled).; /// \li \c simple_ilist<T,ilist_sentinel_tracking<false>,ilist_tag<A>> is; /// equivalent to the last.; ///; /// See \a is_valid_option for steps on adding a new option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:2154,Testability,log,logic,2154,"s the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel() API. Unlike \a ilist_node::isKnownSentinel(),; /// which is only appropriate for assertions, \a ilist_node::isSentinel() is; /// appropriate for real logic.; ///; /// Here are examples of \p Options usage:; /// \li \c simple_ilist<T> gives the defaults. \li \c; /// simple_ilist<T,ilist_sentinel_tracking<true>> enables the \a; /// ilist_node::isSentinel() API.; /// \li \c simple_ilist<T,ilist_tag<A>,ilist_sentinel_tracking<false>>; /// specifies a tag of A and that tracking should be off (even when; /// LLVM_ENABLE_ABI_BREAKING_CHECKS are enabled).; /// \li \c simple_ilist<T,ilist_sentinel_tracking<false>,ilist_tag<A>> is; /// equivalent to the last.; ///; /// See \a is_valid_option for steps on adding a new option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:6,Usability,simpl,simple,6,"/// A simple intrusive list implementation.; ///; /// This is a simple intrusive list for a \c T that inherits from \c; /// ilist_node<T>. The list never takes ownership of anything inserted in it.; ///; /// Unlike \a iplist<T> and \a ilist<T>, \a simple_ilist<T> never deletes; /// values, and has no callback traits.; ///; /// The API for adding nodes include \a push_front(), \a push_back(), and \a; /// insert(). These all take values by reference (not by pointer), except for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:64,Usability,simpl,simple,64,"/// A simple intrusive list implementation.; ///; /// This is a simple intrusive list for a \c T that inherits from \c; /// ilist_node<T>. The list never takes ownership of anything inserted in it.; ///; /// Unlike \a iplist<T> and \a ilist<T>, \a simple_ilist<T> never deletes; /// values, and has no callback traits.; ///; /// The API for adding nodes include \a push_front(), \a push_back(), and \a; /// insert(). These all take values by reference (not by pointer), except for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:756,Usability,clear,clear,756,"/// A simple intrusive list implementation.; ///; /// This is a simple intrusive list for a \c T that inherits from \c; /// ilist_node<T>. The list never takes ownership of anything inserted in it.; ///; /// Unlike \a iplist<T> and \a ilist<T>, \a simple_ilist<T> never deletes; /// values, and has no callback traits.; ///; /// The API for adding nodes include \a push_front(), \a push_back(), and \a; /// insert(). These all take values by reference (not by pointer), except for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:1051,Usability,clear,clear,1051,"s ownership of anything inserted in it.; ///; /// Unlike \a iplist<T> and \a ilist<T>, \a simple_ilist<T> never deletes; /// values, and has no callback traits.; ///; /// The API for adding nodes include \a push_front(), \a push_back(), and \a; /// insert(). These all take values by reference (not by pointer), except for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel() API. Unlike \a ilist_node::isKnownSentinel(),; /// which is only appropriate for assertions, \a ilist_node::isSentinel() is; /// appropriate for real logi",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:1247,Usability,clear,clearAndDispose,1247,"s ownership of anything inserted in it.; ///; /// Unlike \a iplist<T> and \a ilist<T>, \a simple_ilist<T> never deletes; /// values, and has no callback traits.; ///; /// The API for adding nodes include \a push_front(), \a push_back(), and \a; /// insert(). These all take values by reference (not by pointer), except for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel() API. Unlike \a ilist_node::isKnownSentinel(),; /// which is only appropriate for assertions, \a ilist_node::isSentinel() is; /// appropriate for real logi",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:4,Usability,Clear,Clear,4,/// Clear the list; never deletes.; ///; /// \see \a clearAndDispose() if the nodes should be deleted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:53,Usability,clear,clearAndDispose,53,/// Clear the list; never deletes.; ///; /// \see \a clearAndDispose() if the nodes should be deleted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:4,Usability,Clear,Clear,4,/// Clear the list and dispose of the nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:265,Energy Efficiency,allocate,allocated,265,"/// This is a 'bitvector' (really, a variable-sized bit array), optimized for; /// the case when the array is small. It contains one pointer-sized field, which; /// is directly used as a plain collection of bits when possible, or as a; /// pointer to a larger heap-allocated array when necessary. This allows normal; /// ""small"" cases to be fast without losing generality for large inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:37,Modifiability,variab,variable-sized,37,"/// This is a 'bitvector' (really, a variable-sized bit array), optimized for; /// the case when the array is small. It contains one pointer-sized field, which; /// is directly used as a plain collection of bits when possible, or as a; /// pointer to a larger heap-allocated array when necessary. This allows normal; /// ""small"" cases to be fast without losing generality for large inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:64,Performance,optimiz,optimized,64,"/// This is a 'bitvector' (really, a variable-sized bit array), optimized for; /// the case when the array is small. It contains one pointer-sized field, which; /// is directly used as a plain collection of bits when possible, or as a; /// pointer to a larger heap-allocated array when necessary. This allows normal; /// ""small"" cases to be fast without losing generality for large inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:129,Energy Efficiency,efficient,efficient,129,"// TODO: In ""large"" mode, a pointer to a BitVector is used, leading to an; // unnecessary level of indirection. It would be more efficient to use a; // pointer to memory containing size, allocation size, and the array of bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Testability,Test,Tests,4,/// Tests whether there are no bits in this bitvector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:3,Availability,Mask,Mask,3,// Mask off previous bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:3,Availability,Mask,Mask,3,// Mask in previous bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:3,Availability,Mask,Mask,3,// Mask in unused bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Usability,Clear,Clear,4,/// Clear all bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Energy Efficiency,Efficient,Efficiently,4,"/// Efficiently set a range of bits in [I, E)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Energy Efficiency,Efficient,Efficiently,4,"/// Efficiently reset a range of bits in [I, E)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Testability,Test,Test,4,/// Test if any common bits are set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:22,Availability,Mask,Mask,22,"/// Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:86,Availability,Mask,Mask,86,"/// Add '1' bits from Mask to this vector. Don't resize.; /// This computes ""*this |= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:50,Availability,Mask,Mask,50,"/// Clear any bits in this vector that are set in Mask. Don't resize.; /// This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:100,Availability,Mask,Mask,100,"/// Clear any bits in this vector that are set in Mask. Don't resize.; /// This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Usability,Clear,Clear,4,"/// Clear any bits in this vector that are set in Mask. Don't resize.; /// This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:50,Availability,Mask,Mask,50,"/// Add a bit to this vector for every '0' bit in Mask. Don't resize.; /// This computes ""*this |= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:100,Availability,Mask,Mask,100,"/// Add a bit to this vector for every '0' bit in Mask. Don't resize.; /// This computes ""*this |= ~Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:52,Availability,Mask,Mask,52,"/// Clear a bit in this vector for every '0' bit in Mask. Don't resize.; /// This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:101,Availability,Mask,Mask,101,"/// Clear a bit in this vector for every '0' bit in Mask. Don't resize.; /// This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Usability,Clear,Clear,4,"/// Clear a bit in this vector for every '0' bit in Mask. Don't resize.; /// This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:237,Energy Efficiency,allocate,allocated,237,"/// SmallPtrSetImplBase - This is the common code shared among all the; /// SmallPtrSet<>'s, which is almost everything. SmallPtrSet has two modes, one; /// for small and one for large sets.; ///; /// Small sets use an array of pointers allocated in the SmallPtrSet object,; /// which is treated as a simple array of pointers. When a pointer is added to; /// the set, the array is scanned to see if the element already exists, if not; /// the element is 'pushed back' onto the array. If we run out of space in the; /// array, we grow into the 'large set' case. SmallSet should be used when the; /// sets are often small. In this case, no memory allocation is used, and only; /// light-weight and cache-efficient scanning is used.; ///; /// Large sets use a classic exponentially-probed hash table. Empty buckets are; /// represented with an illegal pointer value (-1) to allow null pointers to be; /// inserted. Tombstones are represented with another illegal pointer value; /// (-2), to allow deletion. The hash table is resized when the table is 3/4 or; /// more. When this happens, the table is doubled in size.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:702,Energy Efficiency,efficient,efficient,702,"/// SmallPtrSetImplBase - This is the common code shared among all the; /// SmallPtrSet<>'s, which is almost everything. SmallPtrSet has two modes, one; /// for small and one for large sets.; ///; /// Small sets use an array of pointers allocated in the SmallPtrSet object,; /// which is treated as a simple array of pointers. When a pointer is added to; /// the set, the array is scanned to see if the element already exists, if not; /// the element is 'pushed back' onto the array. If we run out of space in the; /// array, we grow into the 'large set' case. SmallSet should be used when the; /// sets are often small. In this case, no memory allocation is used, and only; /// light-weight and cache-efficient scanning is used.; ///; /// Large sets use a classic exponentially-probed hash table. Empty buckets are; /// represented with an illegal pointer value (-1) to allow null pointers to be; /// inserted. Tombstones are represented with another illegal pointer value; /// (-2), to allow deletion. The hash table is resized when the table is 3/4 or; /// more. When this happens, the table is doubled in size.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:696,Performance,cache,cache-efficient,696,"/// SmallPtrSetImplBase - This is the common code shared among all the; /// SmallPtrSet<>'s, which is almost everything. SmallPtrSet has two modes, one; /// for small and one for large sets.; ///; /// Small sets use an array of pointers allocated in the SmallPtrSet object,; /// which is treated as a simple array of pointers. When a pointer is added to; /// the set, the array is scanned to see if the element already exists, if not; /// the element is 'pushed back' onto the array. If we run out of space in the; /// array, we grow into the 'large set' case. SmallSet should be used when the; /// sets are often small. In this case, no memory allocation is used, and only; /// light-weight and cache-efficient scanning is used.; ///; /// Large sets use a classic exponentially-probed hash table. Empty buckets are; /// represented with an illegal pointer value (-1) to allow null pointers to be; /// inserted. Tombstones are represented with another illegal pointer value; /// (-2), to allow deletion. The hash table is resized when the table is 3/4 or; /// more. When this happens, the table is doubled in size.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:786,Security,hash,hash,786,"/// SmallPtrSetImplBase - This is the common code shared among all the; /// SmallPtrSet<>'s, which is almost everything. SmallPtrSet has two modes, one; /// for small and one for large sets.; ///; /// Small sets use an array of pointers allocated in the SmallPtrSet object,; /// which is treated as a simple array of pointers. When a pointer is added to; /// the set, the array is scanned to see if the element already exists, if not; /// the element is 'pushed back' onto the array. If we run out of space in the; /// array, we grow into the 'large set' case. SmallSet should be used when the; /// sets are often small. In this case, no memory allocation is used, and only; /// light-weight and cache-efficient scanning is used.; ///; /// Large sets use a classic exponentially-probed hash table. Empty buckets are; /// represented with an illegal pointer value (-1) to allow null pointers to be; /// inserted. Tombstones are represented with another illegal pointer value; /// (-2), to allow deletion. The hash table is resized when the table is 3/4 or; /// more. When this happens, the table is doubled in size.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:1008,Security,hash,hash,1008,"/// SmallPtrSetImplBase - This is the common code shared among all the; /// SmallPtrSet<>'s, which is almost everything. SmallPtrSet has two modes, one; /// for small and one for large sets.; ///; /// Small sets use an array of pointers allocated in the SmallPtrSet object,; /// which is treated as a simple array of pointers. When a pointer is added to; /// the set, the array is scanned to see if the element already exists, if not; /// the element is 'pushed back' onto the array. If we run out of space in the; /// array, we grow into the 'large set' case. SmallSet should be used when the; /// sets are often small. In this case, no memory allocation is used, and only; /// light-weight and cache-efficient scanning is used.; ///; /// Large sets use a classic exponentially-probed hash table. Empty buckets are; /// represented with an illegal pointer value (-1) to allow null pointers to be; /// inserted. Tombstones are represented with another illegal pointer value; /// (-2), to allow deletion. The hash table is resized when the table is 3/4 or; /// more. When this happens, the table is doubled in size.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:301,Usability,simpl,simple,301,"/// SmallPtrSetImplBase - This is the common code shared among all the; /// SmallPtrSet<>'s, which is almost everything. SmallPtrSet has two modes, one; /// for small and one for large sets.; ///; /// Small sets use an array of pointers allocated in the SmallPtrSet object,; /// which is treated as a simple array of pointers. When a pointer is added to; /// the set, the array is scanned to see if the element already exists, if not; /// the element is 'pushed back' onto the array. If we run out of space in the; /// array, we grow into the 'large set' case. SmallSet should be used when the; /// sets are often small. In this case, no memory allocation is used, and only; /// light-weight and cache-efficient scanning is used.; ///; /// Large sets use a classic exponentially-probed hash table. Empty buckets are; /// represented with an illegal pointer value (-1) to allow null pointers to be; /// inserted. Tombstones are represented with another illegal pointer value; /// (-2), to allow deletion. The hash table is resized when the table is 3/4 or; /// more. When this happens, the table is doubled in size.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:23,Energy Efficiency,allocate,allocated,23,"/// CurArraySize - The allocated size of CurArray, always a power of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:60,Energy Efficiency,power,power,60,"/// CurArraySize - The allocated size of CurArray, always a power of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:42,Energy Efficiency,efficient,efficiently,42,// Note that -1 is chosen to make clear() efficiently implementable with; // memset and because it's not a valid pointer value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:34,Usability,clear,clear,34,// Note that -1 is chosen to make clear() efficiently implementable with; // memset and because it's not a valid pointer value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:11,Energy Efficiency,Allocate,Allocate,11,/// Grow - Allocate a larger backing store for the buckets and move it over.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:86,Energy Efficiency,power,power,86,/// RoundUpToPowerOfTwo - This is a helper template that rounds N up to the next; /// power of two (which means N itself if N is already a power of two).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:139,Energy Efficiency,power,power,139,/// RoundUpToPowerOfTwo - This is a helper template that rounds N up to the next; /// power of two (which means N itself if N is already a power of two).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:41,Energy Efficiency,power,power,41,"/// RoundUpToPowerOfTwoH - If N is not a power of two, increase it. This is a; /// helper template used to implement RoundUpToPowerOfTwo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:79,Integrability,interface,interface,79,/// A templated base class for \c SmallPtrSet which provides the; /// typesafe interface that is common across all small sizes.; ///; /// This is particularly useful for passing around between interface boundaries; /// to avoid encoding a particular small size in the interface boundary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:193,Integrability,interface,interface,193,/// A templated base class for \c SmallPtrSet which provides the; /// typesafe interface that is common across all small sizes.; ///; /// This is particularly useful for passing around between interface boundaries; /// to avoid encoding a particular small size in the interface boundary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:268,Integrability,interface,interface,268,/// A templated base class for \c SmallPtrSet which provides the; /// typesafe interface that is common across all small sizes.; ///; /// This is particularly useful for passing around between interface boundaries; /// to avoid encoding a particular small size in the interface boundary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:222,Safety,avoid,avoid,222,/// A templated base class for \c SmallPtrSet which provides the; /// typesafe interface that is common across all small sizes.; ///; /// This is particularly useful for passing around between interface boundaries; /// to avoid encoding a particular small size in the interface boundary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:163,Energy Efficiency,power,power,163,/// SmallPtrSet - This class implements a set which is optimized for holding; /// SmallSize or less elements. This internally rounds up SmallSize to the next; /// power of two if it is not already a power of two. See the comments above; /// SmallPtrSetImplBase for details of the algorithm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:199,Energy Efficiency,power,power,199,/// SmallPtrSet - This class implements a set which is optimized for holding; /// SmallSize or less elements. This internally rounds up SmallSize to the next; /// power of two if it is not already a power of two. See the comments above; /// SmallPtrSetImplBase for details of the algorithm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:55,Performance,optimiz,optimized,55,/// SmallPtrSet - This class implements a set which is optimized for holding; /// SmallSize or less elements. This internally rounds up SmallSize to the next; /// power of two if it is not already a power of two. See the comments above; /// SmallPtrSetImplBase for details of the algorithm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:33,Energy Efficiency,power,power,33,"// Make sure that SmallSize is a power of two, round up if not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h:82,Integrability,depend,depending,82,/// Iterators to the parts of the SmallSet containing the data. They are set; /// depending on isSmall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h:54,Performance,optimiz,optimizing,54,"/// SmallSet - This maintains a set of unique values, optimizing for the case; /// when the set is small (less than N). In this case, the set can be; /// maintained with no mallocs. If the set gets large, we expand to using an; /// std::set to maintain reasonable lookup times.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h:108,Safety,avoid,avoid,108,/// Use a SmallVector to hold the elements here (even though it will never; /// reach its 'large' stage) to avoid calling the default ctors of elements; /// we will never use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h:94,Performance,perform,performance,94,"/// If this set is of pointer values, transparently switch over to using; /// SmallPtrSet for performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h:369,Security,hash,hash,369,"/// Equality comparison for SmallSet.; ///; /// Iterates over elements of LHS confirming that each element is also a member; /// of RHS, and that RHS contains no additional values.; /// Equivalent to N calls to RHS.count.; /// For small-set mode amortized complexity is O(N^2); /// For large-set mode amortized complexity is linear, worst case is O(N^2) (if; /// every hash collides).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h:98,Performance,perform,performance,98,/// Inequality comparison for SmallSet.; ///; /// Equivalent to !(LHS == RHS). See operator== for performance notes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h:71,Security,access,accessors,71,/// SmallString - A SmallString is just a SmallVector with methods and accessors; /// that make it work better as a string (e.g. operator+ etc).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h:89,Energy Efficiency,efficient,efficient,89,/// @}; /// @name String Comparison; /// @{; /// Check for string equality. This is more efficient than compare() when; /// the relative ordering of inequal strings isn't needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h:34,Safety,safe,safe,34,"// TODO: Make this const, if it's safe...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:121,Availability,error,error,121,/// This is a helper for \a grow() that's out of line to reduce code; /// duplication. This function will report a fatal error if it can't grow at; /// least to \p MinSize.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:57,Energy Efficiency,reduce,reduce,57,/// This is a helper for \a grow() that's out of line to reduce code; /// duplication. This function will report a fatal error if it can't grow at; /// least to \p MinSize.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:182,Availability,error,error,182,/// This is an implementation of the grow() method which only works; /// on POD-like data types and is out of line to reduce code duplication.; /// This function will report a fatal error if it cannot increase capacity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:118,Energy Efficiency,reduce,reduce,118,/// This is an implementation of the grow() method which only works; /// on POD-like data types and is out of line to reduce code duplication.; /// This function will report a fatal error if it cannot increase capacity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:549,Energy Efficiency,allocate,allocate,549,"/// If vector was first created with capacity 0, getFirstEl() points to the; /// memory right after, an area unallocated. If a subsequent allocation,; /// that grows the vector, happens to return the same pointer as getFirstEl(),; /// get a new allocation, otherwise isSmall() will falsely return that no; /// allocation was done (true) and the memory will not be freed in the; /// destructor. If a VSize is given (vector size), also copy that many; /// elements to the new allocation - used if realloca fails to increase; /// space, and happens to allocate precisely at BeginX.; /// This is unlikely to be called often, but resolves a memory leak when the; /// situation does occur.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:63,Integrability,depend,depend,63,/// This is the part of SmallVectorTemplateBase which does not depend on whether; /// the type T is a POD. The extra dummy template argument is used by ArrayRef; /// to avoid unnecessarily requiring T to be complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:169,Safety,avoid,avoid,169,/// This is the part of SmallVectorTemplateBase which does not depend on whether; /// the type T is a POD. The extra dummy template argument is used by ArrayRef; /// to avoid unnecessarily requiring T to be complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:79,Energy Efficiency,allocate,allocated,79,/// Return true if this is a smallvector which has not had dynamic; /// memory allocated for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:20,Safety,avoid,avoid,20,// Use std::less to avoid UB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:20,Safety,avoid,avoid,20,// Use std::less to avoid UB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:63,Usability,clear,clearing,63,/// Check whether any part of the range will be invalidated by clearing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:60,Deployability,update,updated,60,"/// Reserve enough space to add one element, and return the updated element; /// pointer in case it was a reference to the storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:13,Energy Efficiency,allocate,allocated,13,"/// Grow the allocated memory (without initializing new elements), doubling; /// the size of the allocated memory. Guarantees space for at least one more; /// element, or MinSize more elements if specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:97,Energy Efficiency,allocate,allocated,97,"/// Grow the allocated memory (without initializing new elements), doubling; /// the size of the allocated memory. Guarantees space for at least one more; /// element, or MinSize more elements if specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:60,Deployability,update,updated,60,"/// Reserve enough space to add one element, and return the updated element; /// pointer in case it was a reference to the storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:60,Deployability,update,updated,60,"/// Reserve enough space to add one element, and return the updated element; /// pointer in case it was a reference to the storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:68,Safety,avoid,avoids,68,/// True if it's cheap enough to take parameters by value. Doing so avoids; /// overhead related to mitigations for reference invalidation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:26,Integrability,depend,depending,26,"/// Either const T& or T, depending on whether it's cheap enough to take; /// parameters by value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:112,Performance,optimiz,optimizes,112,"// Use memcpy for PODs iterated by pointers (which includes SmallVector; // iterators): std::uninitialized_copy optimizes to memmove, but we can; // use memcpy here. Note that I and E are iterators and thus might be; // invalid for memcpy if they are equal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:27,Energy Efficiency,allocate,allocated,27,"/// Double the size of the allocated memory, guaranteeing space for at; /// least one more element or MinSize if specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:60,Deployability,update,updated,60,"/// Reserve enough space to add one element, and return the updated element; /// pointer in case it was a reference to the storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:60,Deployability,update,updated,60,"/// Reserve enough space to add one element, and return the updated element; /// pointer in case it was a reference to the storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:37,Integrability,depend,depending,37,"/// Copy \p V or return a reference, depending on \a ValueParamT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:136,Performance,optimiz,optimization,136,"// Elt has been copied in case it's an internal reference, side-stepping; // reference invalidation problems without losing the realloc optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:150,Performance,optimiz,optimization,150,"// Use push_back with a copy in case Args has an internal reference,; // side-stepping reference invalidation problems without losing the realloc; // optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:85,Energy Efficiency,reduce,reduce,85,/// This class consists of common code factored out of the SmallVector class to; /// reduce code duplication based on the SmallVector 'N' template parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:30,Safety,avoid,avoid,30,// Make set_size() private to avoid misuse in subclasses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:65,Usability,clear,clearing,65,"// FIXME: Consider assigning over existing elements, rather than clearing &; // re-initializing them - for all assign(...) variants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:18,Availability,down,down,18,// Shift all elts down one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:18,Availability,down,down,18,// Shift all elts down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:60,Deployability,update,update,60,"// If we just moved the element we're inserting, be sure to update; // the reference (never happens if TakesParamByValue).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:31,Safety,avoid,avoid,31,// Convert iterator to elt# to avoid invalidating iterator when we reserve(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:52,Deployability,update,updated,52,"// Ensure there is enough space, and get the (maybe updated) address of; // Elt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:131,Usability,simpl,simple,131,"// If there are more elements between the insertion point and the end of the; // range than there are being inserted, we can use a simple approach to; // insertion. Since we already reserved space, we know that this won't; // reallocate the vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:60,Deployability,update,update,60,"// If we just moved the element we're inserting, be sure to update; // the reference (never happens if TakesParamByValue).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:60,Deployability,update,update,60,"// If we just moved the element we're inserting, be sure to update; // the reference (never happens if TakesParamByValue).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:31,Safety,avoid,avoid,31,// Convert iterator to elt# to avoid invalidating iterator when we reserve(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:131,Usability,simpl,simple,131,"// If there are more elements between the insertion point and the end of the; // range than there are being inserted, we can use a simple approach to; // insertion. Since we already reserved space, we know that this won't; // reallocate the vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:15,Safety,avoid,avoid,15,// We can only avoid copying elements if neither vector is small.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:3,Safety,Avoid,Avoid,3,// Avoid self-assignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:171,Energy Efficiency,efficient,efficiently,171,"// If we have to grow to have enough elements, destroy the current elements.; // This allows us to avoid copying them during the grow.; // FIXME: don't do this if they're efficiently moveable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:99,Safety,avoid,avoid,99,"// If we have to grow to have enough elements, destroy the current elements.; // This allows us to avoid copying them during the grow.; // FIXME: don't do this if they're efficiently moveable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:3,Safety,Avoid,Avoid,3,// Avoid self-assignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:27,Usability,clear,clear,27,"// If the RHS isn't small, clear this vector and then steal its buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:3,Usability,Clear,Clear,3,// Clear the RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:193,Energy Efficiency,efficient,efficiently,193,"// If we have to grow to have enough elements, destroy the current elements.; // This allows us to avoid copying them during the grow.; // FIXME: this may not actually make any sense if we can efficiently move; // elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:99,Safety,avoid,avoid,99,"// If we have to grow to have enough elements, destroy the current elements.; // This allows us to avoid copying them during the grow.; // FIXME: this may not actually make any sense if we can efficiently move; // elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:87,Safety,avoid,avoid,87,/// Storage for the SmallVector elements. This is specialized for the N=0 case; /// to avoid allocating unnecessary storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:181,Energy Efficiency,allocate,allocate,181,"// static_assert that sizeof(T) is not ""too big"".; //; // Because our policy guarantees at least one inlined element, it is possible; // for an arbitrarily large inlined element to allocate an arbitrarily large; // amount of inline storage. We generally consider it an antipattern for a; // SmallVector to allocate an excessive amount of inline storage, so we want; // to call attention to these cases and make sure that users are making an; // intentional decision if they request a lot of inline storage.; //; // We want this assertion to trigger in pathological cases, but otherwise; // not be too easy to hit. To accomplish that, the cutoff is actually somewhat; // larger than kPreferredSmallVectorSizeof (otherwise,; // `SmallVector<SmallVector<T>>` would be one easy way to trip it, and that; // pattern seems useful in practice).; //; // One wrinkle is that this assertion is in theory non-portable, since; // sizeof(T) is in general platform-dependent. However, we don't expect this; // to be much of an issue, because most LLVM development happens on 64-bit; // hosts, and therefore sizeof(T) is expected to *decrease* when compiled for; // 32-bit hosts, dodging the issue. The reverse situation, where development; // happens on a 32-bit host and then fails due to sizeof(T) *increasing* on a; // 64-bit host, is expected to be very rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:306,Energy Efficiency,allocate,allocate,306,"// static_assert that sizeof(T) is not ""too big"".; //; // Because our policy guarantees at least one inlined element, it is possible; // for an arbitrarily large inlined element to allocate an arbitrarily large; // amount of inline storage. We generally consider it an antipattern for a; // SmallVector to allocate an excessive amount of inline storage, so we want; // to call attention to these cases and make sure that users are making an; // intentional decision if they request a lot of inline storage.; //; // We want this assertion to trigger in pathological cases, but otherwise; // not be too easy to hit. To accomplish that, the cutoff is actually somewhat; // larger than kPreferredSmallVectorSizeof (otherwise,; // `SmallVector<SmallVector<T>>` would be one easy way to trip it, and that; // pattern seems useful in practice).; //; // One wrinkle is that this assertion is in theory non-portable, since; // sizeof(T) is in general platform-dependent. However, we don't expect this; // to be much of an issue, because most LLVM development happens on 64-bit; // hosts, and therefore sizeof(T) is expected to *decrease* when compiled for; // 32-bit hosts, dodging the issue. The reverse situation, where development; // happens on a 32-bit host and then fails due to sizeof(T) *increasing* on a; // 64-bit host, is expected to be very rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:951,Integrability,depend,dependent,951,"// static_assert that sizeof(T) is not ""too big"".; //; // Because our policy guarantees at least one inlined element, it is possible; // for an arbitrarily large inlined element to allocate an arbitrarily large; // amount of inline storage. We generally consider it an antipattern for a; // SmallVector to allocate an excessive amount of inline storage, so we want; // to call attention to these cases and make sure that users are making an; // intentional decision if they request a lot of inline storage.; //; // We want this assertion to trigger in pathological cases, but otherwise; // not be too easy to hit. To accomplish that, the cutoff is actually somewhat; // larger than kPreferredSmallVectorSizeof (otherwise,; // `SmallVector<SmallVector<T>>` would be one easy way to trip it, and that; // pattern seems useful in practice).; //; // One wrinkle is that this assertion is in theory non-portable, since; // sizeof(T) is in general platform-dependent. However, we don't expect this; // to be much of an issue, because most LLVM development happens on 64-bit; // hosts, and therefore sizeof(T) is expected to *decrease* when compiled for; // 32-bit hosts, dodging the issue. The reverse situation, where development; // happens on a 32-bit host and then fails due to sizeof(T) *increasing* on a; // 64-bit host, is expected to be very rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:898,Modifiability,portab,portable,898,"// static_assert that sizeof(T) is not ""too big"".; //; // Because our policy guarantees at least one inlined element, it is possible; // for an arbitrarily large inlined element to allocate an arbitrarily large; // amount of inline storage. We generally consider it an antipattern for a; // SmallVector to allocate an excessive amount of inline storage, so we want; // to call attention to these cases and make sure that users are making an; // intentional decision if they request a lot of inline storage.; //; // We want this assertion to trigger in pathological cases, but otherwise; // not be too easy to hit. To accomplish that, the cutoff is actually somewhat; // larger than kPreferredSmallVectorSizeof (otherwise,; // `SmallVector<SmallVector<T>>` would be one easy way to trip it, and that; // pattern seems useful in practice).; //; // One wrinkle is that this assertion is in theory non-portable, since; // sizeof(T) is in general platform-dependent. However, we don't expect this; // to be much of an issue, because most LLVM development happens on 64-bit; // hosts, and therefore sizeof(T) is expected to *decrease* when compiled for; // 32-bit hosts, dodging the issue. The reverse situation, where development; // happens on a 32-bit host and then fails due to sizeof(T) *increasing* on a; // 64-bit host, is expected to be very rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:528,Testability,assert,assertion,528,"// static_assert that sizeof(T) is not ""too big"".; //; // Because our policy guarantees at least one inlined element, it is possible; // for an arbitrarily large inlined element to allocate an arbitrarily large; // amount of inline storage. We generally consider it an antipattern for a; // SmallVector to allocate an excessive amount of inline storage, so we want; // to call attention to these cases and make sure that users are making an; // intentional decision if they request a lot of inline storage.; //; // We want this assertion to trigger in pathological cases, but otherwise; // not be too easy to hit. To accomplish that, the cutoff is actually somewhat; // larger than kPreferredSmallVectorSizeof (otherwise,; // `SmallVector<SmallVector<T>>` would be one easy way to trip it, and that; // pattern seems useful in practice).; //; // One wrinkle is that this assertion is in theory non-portable, since; // sizeof(T) is in general platform-dependent. However, we don't expect this; // to be much of an issue, because most LLVM development happens on 64-bit; // hosts, and therefore sizeof(T) is expected to *decrease* when compiled for; // 32-bit hosts, dodging the issue. The reverse situation, where development; // happens on a 32-bit host and then fails due to sizeof(T) *increasing* on a; // 64-bit host, is expected to be very rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:871,Testability,assert,assertion,871,"// static_assert that sizeof(T) is not ""too big"".; //; // Because our policy guarantees at least one inlined element, it is possible; // for an arbitrarily large inlined element to allocate an arbitrarily large; // amount of inline storage. We generally consider it an antipattern for a; // SmallVector to allocate an excessive amount of inline storage, so we want; // to call attention to these cases and make sure that users are making an; // intentional decision if they request a lot of inline storage.; //; // We want this assertion to trigger in pathological cases, but otherwise; // not be too easy to hit. To accomplish that, the cutoff is actually somewhat; // larger than kPreferredSmallVectorSizeof (otherwise,; // `SmallVector<SmallVector<T>>` would be one easy way to trip it, and that; // pattern seems useful in practice).; //; // One wrinkle is that this assertion is in theory non-portable, since; // sizeof(T) is in general platform-dependent. However, we don't expect this; // to be much of an issue, because most LLVM development happens on 64-bit; // hosts, and therefore sizeof(T) is expected to *decrease* when compiled for; // 32-bit hosts, dodging the issue. The reverse situation, where development; // happens on a 32-bit host and then fails due to sizeof(T) *increasing* on a; // 64-bit host, is expected to be very rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:34,Modifiability,variab,variable-sized,34,"/// This is a 'vector' (really, a variable-sized array), optimized; /// for the case when the array is small. It contains some number of elements; /// in-place, which allows it to avoid heap allocation when the actual number of; /// elements is below that threshold. This allows normal ""small"" cases to be; /// fast without losing generality for large inputs.; ///; /// \note; /// In the absence of a well-motivated choice for the number of inlined; /// elements \p N, it is recommended to use \c SmallVector<T> (that is,; /// omitting the \p N). This will choose a default number of inlined elements; /// reasonable for allocation on the stack (for example, trying to keep \c; /// sizeof(SmallVector<T>) around 64 bytes).; ///; /// \warning This does not attempt to be exception safe.; ///; /// \see https://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:57,Performance,optimiz,optimized,57,"/// This is a 'vector' (really, a variable-sized array), optimized; /// for the case when the array is small. It contains some number of elements; /// in-place, which allows it to avoid heap allocation when the actual number of; /// elements is below that threshold. This allows normal ""small"" cases to be; /// fast without losing generality for large inputs.; ///; /// \note; /// In the absence of a well-motivated choice for the number of inlined; /// elements \p N, it is recommended to use \c SmallVector<T> (that is,; /// omitting the \p N). This will choose a default number of inlined elements; /// reasonable for allocation on the stack (for example, trying to keep \c; /// sizeof(SmallVector<T>) around 64 bytes).; ///; /// \warning This does not attempt to be exception safe.; ///; /// \see https://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:180,Safety,avoid,avoid,180,"/// This is a 'vector' (really, a variable-sized array), optimized; /// for the case when the array is small. It contains some number of elements; /// in-place, which allows it to avoid heap allocation when the actual number of; /// elements is below that threshold. This allows normal ""small"" cases to be; /// fast without losing generality for large inputs.; ///; /// \note; /// In the absence of a well-motivated choice for the number of inlined; /// elements \p N, it is recommended to use \c SmallVector<T> (that is,; /// omitting the \p N). This will choose a default number of inlined elements; /// reasonable for allocation on the stack (for example, trying to keep \c; /// sizeof(SmallVector<T>) around 64 bytes).; ///; /// \warning This does not attempt to be exception safe.; ///; /// \see https://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:780,Safety,safe,safe,780,"/// This is a 'vector' (really, a variable-sized array), optimized; /// for the case when the array is small. It contains some number of elements; /// in-place, which allows it to avoid heap allocation when the actual number of; /// elements is below that threshold. This allows normal ""small"" cases to be; /// fast without losing generality for large inputs.; ///; /// \note; /// In the absence of a well-motivated choice for the number of inlined; /// elements \p N, it is recommended to use \c SmallVector<T> (that is,; /// omitting the \p N). This will choose a default number of inlined elements; /// reasonable for allocation on the stack (for example, trying to keep \c; /// sizeof(SmallVector<T>) around 64 bytes).; ///; /// \warning This does not attempt to be exception safe.; ///; /// \see https://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:57,Performance,Optimiz,Optimize,57,// SmallVectorImpl<T>::operator= does not leverage N==0. Optimize the; // case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:36,Energy Efficiency,Efficient,Efficient,36,"//===- llvm/ADT/SparseBitVector.h - Efficient Sparse BitVector --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the SparseBitVector class. See the doxygen comment for; /// SparseBitVector for more details on the algorithm used.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:801,Performance,perform,perform,801,"/// SparseBitVector is an implementation of a bitvector that is sparse by only; /// storing the elements that have non-zero bits set. In order to make this; /// fast for the most common cases, SparseBitVector is implemented as a linked; /// list of SparseBitVectorElements. We maintain a pointer to the last; /// SparseBitVectorElement accessed (in the form of a list iterator), in order; /// to make multiple in-order test/set constant time after the first one is; /// executed. Note that using vectors to store SparseBitVectorElement's does; /// not work out very well because it causes insertion in the middle to take; /// enormous amounts of time with a large amount of bits. Other structures that; /// have better worst cases for insertion in the middle (various balanced trees,; /// etc) do not perform as well in practice as a linked list with this iterator; /// kept up to date. They are also significantly more memory intensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:336,Security,access,accessed,336,"/// SparseBitVector is an implementation of a bitvector that is sparse by only; /// storing the elements that have non-zero bits set. In order to make this; /// fast for the most common cases, SparseBitVector is implemented as a linked; /// list of SparseBitVectorElements. We maintain a pointer to the last; /// SparseBitVectorElement accessed (in the form of a list iterator), in order; /// to make multiple in-order test/set constant time after the first one is; /// executed. Note that using vectors to store SparseBitVectorElement's does; /// not work out very well because it causes insertion in the middle to take; /// enormous amounts of time with a large amount of bits. Other structures that; /// have better worst cases for insertion in the middle (various balanced trees,; /// etc) do not perform as well in practice as a linked list with this iterator; /// kept up to date. They are also significantly more memory intensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:419,Testability,test,test,419,"/// SparseBitVector is an implementation of a bitvector that is sparse by only; /// storing the elements that have non-zero bits set. In order to make this; /// fast for the most common cases, SparseBitVector is implemented as a linked; /// list of SparseBitVectorElements. We maintain a pointer to the last; /// SparseBitVectorElement accessed (in the form of a list iterator), in order; /// to make multiple in-order test/set constant time after the first one is; /// executed. Note that using vectors to store SparseBitVectorElement's does; /// not work out very well because it causes insertion in the middle to take; /// enormous amounts of time with a large amount of bits. Other structures that; /// have better worst cases for insertion in the middle (various balanced trees,; /// etc) do not perform as well in practice as a linked list with this iterator; /// kept up to date. They are also significantly more memory intensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:3,Availability,Mask,Mask,3,// Mask off previous bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:136,Performance,perform,performance,136,"// Pointer to our current Element. This has no visible effect on the external; // state of a SparseBitVector, it's just used to improve performance in the; // common case of testing/modifying bits with similar indices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:174,Testability,test,testing,174,"// Pointer to our current Element. This has no visible effect on the external; // state of a SparseBitVector, it's just used to improve performance in the; // common case of testing/modifying bits with similar indices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:6,Performance,cache,cache,6,// We cache a non-const iterator so we're forced to resort to const_cast to; // get the begin/end in the case where 'this' is const. To avoid duplication; // of code with the only difference being whether the const cast is present; // 'this' is always const in this particular function and we sort out the; // difference in FindLowerBound and FindLowerBoundConst.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:136,Safety,avoid,avoid,136,// We cache a non-const iterator so we're forced to resort to const_cast to; // get the begin/end in the case where 'this' is const. To avoid duplication; // of code with the only difference being whether the const cast is present; // 'this' is always const in this particular function and we sort out the; // difference in FindLowerBound and FindLowerBoundConst.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:71,Integrability,depend,depending,71,"// Search from our current iterator, either backwards or forwards,; // depending on what element we are looking for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:111,Energy Efficiency,efficient,efficient,111,"// Iterator to walk set bits in the bitmap. This iterator is a lot uglier; // than it would be, in order to be efficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:3,Usability,Clear,Clear,3,// Clear.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:3,Testability,Test,Test,3,"// Test, Reset, and Set a bit in the bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:122,Energy Efficiency,allocate,allocates,122,"/// Fast multiset implementation for objects that can be identified by small; /// unsigned keys.; ///; /// SparseMultiSet allocates memory proportional to the size of the key; /// universe, so it is not recommended for building composite data structures.; /// It is useful for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseMultiSet provides constant-time; /// fast clear() as fast as a vector. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:604,Integrability,depend,depend,604,"/// Fast multiset implementation for objects that can be identified by small; /// unsigned keys.; ///; /// SparseMultiSet allocates memory proportional to the size of the key; /// universe, so it is not recommended for building composite data structures.; /// It is useful for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseMultiSet provides constant-time; /// fast clear() as fast as a vector. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:644,Integrability,depend,depends,644,"/// Fast multiset implementation for objects that can be identified by small; /// unsigned keys.; ///; /// SparseMultiSet allocates memory proportional to the size of the key; /// universe, so it is not recommended for building composite data structures.; /// It is useful for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseMultiSet provides constant-time; /// fast clear() as fast as a vector. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:1456,Performance,cache,cache,1456,"r. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable number of entries per key, as it will retain the; /// SparseSet algorithmic properties despite being growable. Thus, it is often a; /// better choice than a SparseSet of growable containers or a vector of; /// vectors. SparseMultiSet also keeps iterators valid after erasure (provided; /// the iterators don't point to the element erased), allowing for more; /// intuitive and fast removal.; ///; /// @tparam ValueT The type of objects in the set.; /// ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:1600,Performance,cache,cache,1600,"ion order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable number of entries per key, as it will retain the; /// SparseSet algorithmic properties despite being growable. Thus, it is often a; /// better choice than a SparseSet of growable containers or a vector of; /// vectors. SparseMultiSet also keeps iterators valid after erasure (provided; /// the iterators don't point to the element erased), allowing for more; /// intuitive and fast removal.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:559,Security,hash,hash,559,"/// Fast multiset implementation for objects that can be identified by small; /// unsigned keys.; ///; /// SparseMultiSet allocates memory proportional to the size of the key; /// universe, so it is not recommended for building composite data structures.; /// It is useful for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseMultiSet provides constant-time; /// fast clear() as fast as a vector. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:429,Usability,clear,clear,429,"/// Fast multiset implementation for objects that can be identified by small; /// unsigned keys.; ///; /// SparseMultiSet allocates memory proportional to the size of the key; /// universe, so it is not recommended for building composite data structures.; /// It is useful for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseMultiSet provides constant-time; /// fast clear() as fast as a vector. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:963,Usability,clear,clear,963,"/// Fast multiset implementation for objects that can be identified by small; /// unsigned keys.; ///; /// SparseMultiSet allocates memory proportional to the size of the key; /// universe, so it is not recommended for building composite data structures.; /// It is useful for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseMultiSet provides constant-time; /// fast clear() as fast as a vector. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:2365,Usability,intuit,intuitive,2365,"order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable number of entries per key, as it will retain the; /// SparseSet algorithmic properties despite being growable. Thus, it is often a; /// better choice than a SparseSet of growable containers or a vector of; /// vectors. SparseMultiSet also keeps iterators valid after erasure (provided; /// the iterators don't point to the element erased), allowing for more; /// intuitive and fast removal.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:238,Energy Efficiency,efficient,efficient,238,"/// The actual data that's stored, as a doubly-linked list implemented via; /// indices into the DenseVector. The doubly linked list is implemented; /// circular in Prev indices, and INVALID-terminated in Next indices. This; /// provides efficient access to list tails. These nodes can also be; /// tombstones, in which case they are actually nodes in a single-linked; /// freelist of recyclable slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:248,Security,access,access,248,"/// The actual data that's stored, as a doubly-linked list implemented via; /// indices into the DenseVector. The doubly linked list is implemented; /// circular in Prev indices, and INVALID-terminated in Next indices. This; /// provides efficient access to list tails. These nodes can also be; /// tombstones, in which case they are actually nodes in a single-linked; /// freelist of recyclable slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:131,Energy Efficiency,efficient,efficient,131,"/// Whether the given entry is the head of the list. List heads's previous; /// pointers are to the tail of the list, allowing for efficient access to the; /// list tail. D must be a valid entry node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:141,Security,access,access,141,"/// Whether the given entry is the head of the list. List heads's previous; /// pointers are to the tail of the list, allowing for efficient access to the; /// list tail. D must be a valid entry node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:72,Availability,avail,available,72,/// Add in the given SMSNode. Uses a free entry in our freelist if; /// available. Returns the index of the added node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:4,Usability,Clear,Clears,4,/// Clears the set. This is a very fast constant time operation.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:30,Usability,clear,cleared,30,"// Sparse does not need to be cleared, see find().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:377,Testability,test,test,377,"/// Erases an existing element identified by a valid iterator.; ///; /// This invalidates iterators pointing at the same entry, but erase() returns; /// an iterator pointing to the next element in the subset's list. This makes; /// it possible to erase selected elements while iterating over the subset:; ///; /// tie(I, E) = Set.equal_range(Key);; /// while (I != E); /// if (test(*I)); /// I = Set.erase(I);; /// else; /// ++I;; ///; /// Note that if the last element in the subset list is erased, this will; /// return an end iterator which can be decremented to get the new tail (if it; /// exists):; ///; /// tie(B, I) = Set.equal_range(Key);; /// for (bool isBegin = B == I; !isBegin; /* empty */) {; /// isBegin = (--I) == B;; /// if (test(I)); /// break;; /// I = erase(I);; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:742,Testability,test,test,742,"/// Erases an existing element identified by a valid iterator.; ///; /// This invalidates iterators pointing at the same entry, but erase() returns; /// an iterator pointing to the next element in the subset's list. This makes; /// it possible to erase selected elements while iterating over the subset:; ///; /// tie(I, E) = Set.equal_range(Key);; /// while (I != E); /// if (test(*I)); /// I = Set.erase(I);; /// else; /// ++I;; ///; /// Note that if the last element in the subset list is erased, this will; /// return an end iterator which can be decremented to get the new tail (if it; /// exists):; ///; /// tie(B, I) = Set.equal_range(Key);; /// for (bool isBegin = B == I; !isBegin; /* empty */) {; /// isBegin = (--I) == B;; /// if (test(I)); /// break;; /// I = erase(I);; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:27,Deployability,update,update,27,"// If we're the head, then update the sparse array and our next.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:27,Deployability,update,update,27,"// If we're the tail, then update our head and our previous.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:498,Energy Efficiency,efficient,efficient,498,"//===- llvm/ADT/SparseSet.h - Sparse set ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the SparseSet class derived from the version described in; /// Briggs, Torczon, ""An efficient representation for sparse sets"", ACM Letters; /// on Programming Languages and Systems, Volume 2 Issue 1-4, March-Dec. 1993.; ///; /// A sparse set holds a small number of objects identified by integer keys from; /// a moderately sized universe. The sparse set uses more memory than other; /// containers in order to provide faster operations.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:585,Usability,simpl,simple,585,"/// SparseSetValTraits - Objects in a SparseSet are identified by keys that can; /// be uniquely converted to a small integer less than the set's universe. This; /// class allows the set to hold values that differ from the set's key type as; /// long as an index can still be derived from the value. SparseSet never; /// directly compares ValueT, only their indices, so it can map keys to; /// arbitrary values. SparseSetValTraits computes the index from the value; /// object. To compute the index from a key, SparseSet uses a separate; /// KeyFunctorT template argument.; ///; /// A simple type declaration, SparseSet<Type>, handles these cases:; /// - unsigned key, identity index, identity value; /// - unsigned key, identity index, fat value providing getSparseSetIndex(); ///; /// The type declaration SparseSet<Type, UnaryFunction> handles:; /// - unsigned key, remapped index, identity value (virtual registers); /// - pointer key, pointer-derived index, identity value (node+ID); /// - pointer key, pointer-derived index, fat value with getSparseSetIndex(); ///; /// Only other, unexpected cases require specializing SparseSetValTraits.; ///; /// For best results, ValueT should not require a destructor.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:124,Energy Efficiency,allocate,allocates,124,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:615,Integrability,depend,depend,615,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:660,Integrability,depend,depends,660,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:1396,Performance,cache,cache,1396,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:1540,Performance,cache,cache,1540,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:570,Security,hash,hash,570,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:426,Usability,clear,clear,426,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:909,Usability,clear,clear,909,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:4,Usability,clear,clear,4,/// clear - Clears the set. This is a very fast constant time operation.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:12,Usability,Clear,Clears,12,/// clear - Clears the set. This is a very fast constant time operation.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:30,Usability,clear,cleared,30,"// Sparse does not need to be cleared, see find().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:30,Usability,clear,cleared,30,"// Sparse does not need to be cleared, see find().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:343,Testability,test,test,343,"/// erase - Erases an existing element identified by a valid iterator.; ///; /// This invalidates all iterators, but erase() returns an iterator pointing; /// to the next element. This makes it possible to erase selected elements; /// while iterating over the set:; ///; /// for (SparseSet::iterator I = Set.begin(); I != Set.end();); /// if (test(*I)); /// I = Set.erase(I);; /// else; /// ++I;; ///; /// Note that end() changes when elements are erased, unlike std::list.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:8,Integrability,depend,depends,8,// This depends on SmallVector::pop_back() not invalidating iterators.; // std::vector::pop_back() doesn't give that guarantee.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:55,Security,hash,hashing,55,"//===- llvm/ADT/StableHashing.h - Utilities for stable hashing * C++ *-----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides types and functions for computing and combining stable; // hashes. Stable hashes can be useful for hashing across different modules,; // processes, or compiler runs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:461,Security,hash,hashes,461,"//===- llvm/ADT/StableHashing.h - Utilities for stable hashing * C++ *-----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides types and functions for computing and combining stable; // hashes. Stable hashes can be useful for hashing across different modules,; // processes, or compiler runs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:476,Security,hash,hashes,476,"//===- llvm/ADT/StableHashing.h - Utilities for stable hashing * C++ *-----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides types and functions for computing and combining stable; // hashes. Stable hashes can be useful for hashing across different modules,; // processes, or compiler runs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:501,Security,hash,hashing,501,"//===- llvm/ADT/StableHashing.h - Utilities for stable hashing * C++ *-----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides types and functions for computing and combining stable; // hashes. Stable hashes can be useful for hashing across different modules,; // processes, or compiler runs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:43,Security,hash,hash,43,"/// An opaque object representing a stable hash code. It can be serialized,; /// deserialized, and is stable across processes and executions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:10,Security,hash,hashes,10,// Stable hashes are based on the 64-bit FNV-1 hash:; // https://en.wikipedia.org/wiki/Fowler-Noll-Vo_hash_function,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:47,Security,hash,hash,47,// Stable hashes are based on the 64-bit FNV-1 hash:; // https://en.wikipedia.org/wiki/Fowler-Noll-Vo_hash_function,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:13,Security,hash,hashing,13,// namespace hashing,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:67,Security,hash,hashes,67,"/// Compute a stable_hash for a sequence of values.; ///; /// This hashes a sequence of values. It produces the same stable_hash as; /// 'stable_hash_combine(a, b, c, ...)', but can run over arbitrary sized; /// sequences and is significantly faster given pointers and types which; /// can be hashed as a sequence of bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:293,Security,hash,hashed,293,"/// Compute a stable_hash for a sequence of values.; ///; /// This hashes a sequence of values. It produces the same stable_hash as; /// 'stable_hash_combine(a, b, c, ...)', but can run over arbitrary sized; /// sequences and is significantly faster given pointers and types which; /// can be hashed as a sequence of bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:1013,Modifiability,variab,variables,1013,"//===-- llvm/ADT/Statistic.h - Easy way to expose stats ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the 'Statistic' class, which is designed to be an easy way; /// to expose various metrics from passes. These statistics are printed at the; /// end of a run (from llvm_shutdown), when the -stats command line option is; /// passed on the command line.; ///; /// This is useful for reporting information like the number of instructions; /// simplified, optimized or removed by various transformations, like this:; ///; /// static Statistic NumInstsKilled(""gcse"", ""Number of instructions killed"");; ///; /// Later, in the code: ++NumInstsKilled;; ///; /// NOTE: Statistics *must* be declared as global variables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:765,Performance,optimiz,optimized,765,"//===-- llvm/ADT/Statistic.h - Easy way to expose stats ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the 'Statistic' class, which is designed to be an easy way; /// to expose various metrics from passes. These statistics are printed at the; /// end of a run (from llvm_shutdown), when the -stats command line option is; /// passed on the command line.; ///; /// This is useful for reporting information like the number of instructions; /// simplified, optimized or removed by various transformations, like this:; ///; /// static Statistic NumInstsKilled(""gcse"", ""Number of instructions killed"");; ///; /// Later, in the code: ++NumInstsKilled;; ///; /// NOTE: Statistics *must* be declared as global variables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:43,Security,expose,expose,43,"//===-- llvm/ADT/Statistic.h - Easy way to expose stats ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the 'Statistic' class, which is designed to be an easy way; /// to expose various metrics from passes. These statistics are printed at the; /// end of a run (from llvm_shutdown), when the -stats command line option is; /// passed on the command line.; ///; /// This is useful for reporting information like the number of instructions; /// simplified, optimized or removed by various transformations, like this:; ///; /// static Statistic NumInstsKilled(""gcse"", ""Number of instructions killed"");; ///; /// Later, in the code: ++NumInstsKilled;; ///; /// NOTE: Statistics *must* be declared as global variables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:481,Security,expose,expose,481,"//===-- llvm/ADT/Statistic.h - Easy way to expose stats ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the 'Statistic' class, which is designed to be an easy way; /// to expose various metrics from passes. These statistics are printed at the; /// end of a run (from llvm_shutdown), when the -stats command line option is; /// passed on the command line.; ///; /// This is useful for reporting information like the number of instructions; /// simplified, optimized or removed by various transformations, like this:; ///; /// static Statistic NumInstsKilled(""gcse"", ""Number of instructions killed"");; ///; /// Later, in the code: ++NumInstsKilled;; ///; /// NOTE: Statistics *must* be declared as global variables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:753,Usability,simpl,simplified,753,"//===-- llvm/ADT/Statistic.h - Easy way to expose stats ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the 'Statistic' class, which is designed to be an easy way; /// to expose various metrics from passes. These statistics are printed at the; /// end of a run (from llvm_shutdown), when the -stats command line option is; /// passed on the command line.; ///; /// This is useful for reporting information like the number of instructions; /// simplified, optimized or removed by various transformations, like this:; ///; /// static Statistic NumInstsKilled(""gcse"", ""Number of instructions killed"");; ///; /// Later, in the code: ++NumInstsKilled;; ///; /// NOTE: Statistics *must* be declared as global variables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:109,Modifiability,config,config,109,// Determine whether statistics should be enabled. We must do it here rather; // than in CMake because multi-config generators cannot determine this at; // configure time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:156,Modifiability,config,configure,156,// Determine whether statistics should be enabled. We must do it here rather; // than in CMake because multi-config generators cannot determine this at; // configure time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:18,Deployability,update,update,18,// Keep trying to update max until we succeed or another thread produces; // a bigger max than us.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:63,Usability,simpl,simple,63,// STATISTIC - A macro to make definition of statistics really simple. This; // automatically passes the DEBUG_TYPE of the file into the statistic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:129,Usability,clear,cleared,129,"/// Print statistics in JSON format. This does include all global timers (\see; /// Timer, TimerGroup). Note that the timers are cleared after printing and will; /// not be printed in human readable form or in a second call of; /// PrintStatisticsJSON().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:170,Deployability,update,updated,170,"/// Get the statistics. This can be used to look up the value of; /// statistics without needing to parse JSON.; ///; /// This function does not prevent statistics being updated by other threads; /// during it's execution. It will return the value at the point that it is; /// read. However, it will prevent new statistics from registering until it; /// completes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:348,Deployability,update,update,348,"/// Reset the statistics. This can be used to zero and de-register the; /// statistics in order to measure a compilation.; ///; /// When this function begins to call destructors prior to returning, all; /// statistics will be zero and unregistered. However, that might not remain the; /// case by the time this function finishes returning. Whether update from other; /// threads are lost or merely deferred until during the function return is; /// timing sensitive.; ///; /// Callers who intend to use this to measure statistics for a single; /// compilation should ensure that no compilations are in progress at the point; /// this function is called and that only one compilation executes until calling; /// GetStatistics().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:29,Safety,Detect,Detects,29,"// end namespace detail; /// Detects if a given trait holds for some set of arguments 'Args'.; /// For example, the given trait could be used to detect if a given type; /// has a copy assignment operator:; /// template<class T>; /// using has_copy_assign_t = decltype(std::declval<T&>(); /// = std::declval<const T&>());; /// bool fooHasCopyAssign = is_detected<has_copy_assign_t, FooClass>::value;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:145,Safety,detect,detect,145,"// end namespace detail; /// Detects if a given trait holds for some set of arguments 'Args'.; /// For example, the given trait could be used to detect if a given type; /// has a copy assignment operator:; /// template<class T>; /// using has_copy_assign_t = decltype(std::declval<T&>(); /// = std::declval<const T&>());; /// bool fooHasCopyAssign = is_detected<has_copy_assign_t, FooClass>::value;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:85,Security,access,access,85,/// This class provides various trait information about a callable object.; /// * To access the number of arguments: Traits::num_args; /// * To access the type of an argument: Traits::arg_t<Index>; /// * To access the type of the result: Traits::result_t,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:144,Security,access,access,144,/// This class provides various trait information about a callable object.; /// * To access the number of arguments: Traits::num_args; /// * To access the type of an argument: Traits::arg_t<Index>; /// * To access the type of the result: Traits::result_t,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:207,Security,access,access,207,/// This class provides various trait information about a callable object.; /// * To access the number of arguments: Traits::num_args; /// * To access the type of an argument: Traits::arg_t<Index>; /// * To access the type of the result: Traits::result_t,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:99,Testability,assert,assert,99,"// namespace detail; /// Determine if all types in Ts are distinct.; ///; /// Useful to statically assert when Ts is intended to describe a non-multi set; /// of types.; ///; /// Expensive (currently quadratic in sizeof(Ts...)), and so should only be; /// asserted once per instantiation of a type which requires it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:256,Testability,assert,asserted,256,"// namespace detail; /// Determine if all types in Ts are distinct.; ///; /// Useful to statically assert when Ts is intended to describe a non-multi set; /// of types.; ///; /// Expensive (currently quadratic in sizeof(Ts...)), and so should only be; /// asserted once per instantiation of a type which requires it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:388,Availability,error,error,388,"/// Find the first index where a type appears in a list of types.; ///; /// FirstIndexOfType<T, Us...>::value is the first index of T in Us.; ///; /// Typically only meaningful when it is otherwise statically known that the; /// type pack has no duplicate types. This should be guaranteed explicitly with; /// static_assert(TypesAreDistinct<Us...>::value).; ///; /// It is a compile-time error to instantiate when T is not present in Us, i.e.; /// if is_one_of<T, Us...>::value is false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:22,Integrability,wrap,wrapper,22,"/// Templated storage wrapper for a callable.; ///; /// This class is consistently default constructible, copy / move; /// constructible / assignable.; ///; /// Supported callable types:; /// - Function pointer; /// - Function reference; /// - Lambda; /// - Function object",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:57,Integrability,wrap,wrapping,57,// Function specialization. No need to waste extra space wrapping with a; // std::optional.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:19,Availability,echo,echo,19,// Pointer... just echo it back.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:26,Availability,echo,echo,26,// T is a pointer... just echo it back.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:47,Energy Efficiency,adapt,adapter,47,// mapped_iterator - This is a simple iterator adapter that causes a function to; // be applied whenever operator* is invoked on the iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:47,Integrability,adapter,adapter,47,// mapped_iterator - This is a simple iterator adapter that causes a function to; // be applied whenever operator* is invoked on the iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:47,Modifiability,adapt,adapter,47,// mapped_iterator - This is a simple iterator adapter that causes a function to; // be applied whenever operator* is invoked on the iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:31,Usability,simpl,simple,31,// mapped_iterator - This is a simple iterator adapter that causes a function to; // be applied whenever operator* is invoked on the iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:186,Usability,simpl,simply,186,"/// A base type of mapped iterator, that is useful for building derived; /// iterators that do not need/want to store the map function (as in; /// mapped_iterator). These iterators must simply provide a `mapElement` method; /// that defines how to map a value of the iterator to the provided reference; /// type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:16,Energy Efficiency,adapt,adaptor,16,"/// An iterator adaptor that filters the elements of given inner iterators.; ///; /// The predicate parameter should be a callable object that accepts the wrapped; /// iterator's reference type and returns a bool. When incrementing or; /// decrementing the iterator, it will call the predicate on each element and; /// skip any where it returns false.; ///; /// \code; /// int A[] = { 1, 2, 3, 4 };; /// auto R = make_filter_range(A, [](int N) { return N % 2 == 1; });; /// // R contains { 1, 3 }.; /// \endcode; ///; /// Note: filter_iterator_base implements support for forward iteration.; /// filter_iterator_impl exists to provide support for bidirectional iteration,; /// conditional on whether the wrapped iterator supports it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:155,Integrability,wrap,wrapped,155,"/// An iterator adaptor that filters the elements of given inner iterators.; ///; /// The predicate parameter should be a callable object that accepts the wrapped; /// iterator's reference type and returns a bool. When incrementing or; /// decrementing the iterator, it will call the predicate on each element and; /// skip any where it returns false.; ///; /// \code; /// int A[] = { 1, 2, 3, 4 };; /// auto R = make_filter_range(A, [](int N) { return N % 2 == 1; });; /// // R contains { 1, 3 }.; /// \endcode; ///; /// Note: filter_iterator_base implements support for forward iteration.; /// filter_iterator_impl exists to provide support for bidirectional iteration,; /// conditional on whether the wrapped iterator supports it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:704,Integrability,wrap,wrapped,704,"/// An iterator adaptor that filters the elements of given inner iterators.; ///; /// The predicate parameter should be a callable object that accepts the wrapped; /// iterator's reference type and returns a bool. When incrementing or; /// decrementing the iterator, it will call the predicate on each element and; /// skip any where it returns false.; ///; /// \code; /// int A[] = { 1, 2, 3, 4 };; /// auto R = make_filter_range(A, [](int N) { return N % 2 == 1; });; /// // R contains { 1, 3 }.; /// \endcode; ///; /// Note: filter_iterator_base implements support for forward iteration.; /// filter_iterator_impl exists to provide support for bidirectional iteration,; /// conditional on whether the wrapped iterator supports it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:16,Modifiability,adapt,adaptor,16,"/// An iterator adaptor that filters the elements of given inner iterators.; ///; /// The predicate parameter should be a callable object that accepts the wrapped; /// iterator's reference type and returns a bool. When incrementing or; /// decrementing the iterator, it will call the predicate on each element and; /// skip any where it returns false.; ///; /// \code; /// int A[] = { 1, 2, 3, 4 };; /// auto R = make_filter_range(A, [](int N) { return N % 2 == 1; });; /// // R contains { 1, 3 }.; /// \endcode; ///; /// Note: filter_iterator_base implements support for forward iteration.; /// filter_iterator_impl exists to provide support for bidirectional iteration,; /// conditional on whether the wrapped iterator supports it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:22,Energy Efficiency,adapt,adaptor,22,"/// A pseudo-iterator adaptor that is designed to implement ""early increment""; /// style loops.; ///; /// This is *not a normal iterator* and should almost never be used directly. It; /// is intended primarily to be used with range based for loops and some range; /// algorithms.; ///; /// The iterator isn't quite an `OutputIterator` or an `InputIterator` but; /// somewhere between them. The constraints of these iterators are:; ///; /// - On construction or after being incremented, it is comparable and; /// dereferencable. It is *not* incrementable.; /// - After being dereferenced, it is neither comparable nor dereferencable, it; /// is only incrementable.; ///; /// This means you can only dereference the iterator once, and you can only; /// increment it once between dereferences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:22,Modifiability,adapt,adaptor,22,"/// A pseudo-iterator adaptor that is designed to implement ""early increment""; /// style loops.; ///; /// This is *not a normal iterator* and should almost never be used directly. It; /// is intended primarily to be used with range based for loops and some range; /// algorithms.; ///; /// The iterator isn't quite an `OutputIterator` or an `InputIterator` but; /// somewhere between them. The constraints of these iterators are:; ///; /// - On construction or after being incremented, it is comparable and; /// dereferencable. It is *not* incrementable.; /// - After being dereferenced, it is neither comparable nor dereferencable, it; /// is only incrementable.; ///; /// This means you can only dereference the iterator once, and you can only; /// increment it once between dereferences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:28,Security,access,access,28,// ^ TODO: Implement random access methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:91,Testability,assert,assertions,91,"/// zip iterator that assumes that all iteratees have the same length.; /// In builds with assertions on, this assumption is checked before the; /// iteration starts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:191,Testability,assert,assertions,191,"/// zip iterator that, for the sake of efficiency, assumes the first iteratee to; /// be the shortest. Iteration continues until the end of the first iteratee is; /// reached. In builds with assertions on, we check that the assumption about; /// the first iteratee being the shortest holds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:13,Integrability,wrap,wrapper,13,"/// Iterator wrapper that concatenates sequences together.; ///; /// This can concatenate different iterators, even with different types, into; /// a single iterator provided the value types of all the concatenated; /// iterators expose `reference` and `pointer` types that can be converted to; /// `ValueT &` and `ValueT *` respectively. It doesn't support more; /// interesting/customized pointer or reference types.; ///; /// Currently this only supports forward or higher iterator categories as; /// inputs and always exposes a forward iterator interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:549,Integrability,interface,interface,549,"/// Iterator wrapper that concatenates sequences together.; ///; /// This can concatenate different iterators, even with different types, into; /// a single iterator provided the value types of all the concatenated; /// iterators expose `reference` and `pointer` types that can be converted to; /// `ValueT &` and `ValueT *` respectively. It doesn't support more; /// interesting/customized pointer or reference types.; ///; /// Currently this only supports forward or higher iterator categories as; /// inputs and always exposes a forward iterator interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:230,Security,expose,expose,230,"/// Iterator wrapper that concatenates sequences together.; ///; /// This can concatenate different iterators, even with different types, into; /// a single iterator provided the value types of all the concatenated; /// iterators expose `reference` and `pointer` types that can be converted to; /// `ValueT &` and `ValueT *` respectively. It doesn't support more; /// interesting/customized pointer or reference types.; ///; /// Currently this only supports forward or higher iterator categories as; /// inputs and always exposes a forward iterator interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:522,Security,expose,exposes,522,"/// Iterator wrapper that concatenates sequences together.; ///; /// This can concatenate different iterators, even with different types, into; /// a single iterator provided the value types of all the concatenated; /// iterators expose `reference` and `pointer` types that can be converted to; /// `ValueT &` and `ValueT *` respectively. It doesn't support more; /// interesting/customized pointer or reference types.; ///; /// Currently this only supports forward or higher iterator categories as; /// inputs and always exposes a forward iterator interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:62,Availability,error,error,62,/// Increments the first non-end iterator.; ///; /// It is an error to call this with all iterators at the end.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:113,Availability,error,error,113,"/// Finds the first non-end iterator, dereferences, and returns the resulting; /// reference.; ///; /// It is an error to call this with all iterators at the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:64,Security,access,access,64,/// Helper to store a sequence of ranges being concatenated and access them.; ///; /// This is designed to facilitate providing actual storage when temporaries; /// are passed into the constructor such that we can use it as part of range; /// based for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:10,Security,access,access,10,/// Allow access to the constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:320,Safety,avoid,avoid,320,"/// Return a reference to the first or second member of a reference. Otherwise,; /// return a copy of the member of a temporary.; ///; /// When passing a range whose iterators return values instead of references,; /// the reference must be dropped from `decltype((elt.first))`, which will; /// always be a reference, to avoid returning a reference to a temporary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:29,Modifiability,inherit,inheritance,29,/// Utility type to build an inheritance chain that makes it easy to rank; /// overload candidates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:91,Integrability,depend,dependent,91,"// It would be better to use a std::uniform_int_distribution,; // but that would be stdlib dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:3,Safety,Avoid,Avoid,3,// Avoid self-assignment due to incorrect assertions in libstdc++; // containers (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85828).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:42,Testability,assert,assertions,42,// Avoid self-assignment due to incorrect assertions in libstdc++; // containers (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85828).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Energy Efficiency,Adapt,Adapt,4,/// Adapt std::less<T> for array_pod_sort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Modifiability,Adapt,Adapt,4,/// Adapt std::less<T> for array_pod_sort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:702,Modifiability,portab,portable,702,"/// array_pod_sort - This sorts an array with the specified start and end; /// extent. This is just like std::sort, except that it calls qsort instead of; /// using an inlined template. qsort is slightly slower than std::sort, but; /// most sorts are not performance critical in LLVM and std::sort has to be; /// template instantiated for each type, leading to significant measured code; /// bloat. This function should generally be used instead of std::sort where; /// possible.; ///; /// This function assumes that you have simple POD-like types that can be; /// compared with std::less and can be moved with memcpy. If this isn't true,; /// you should use std::sort.; ///; /// NOTE: If qsort_r were portable, we could allow a custom comparator and; /// default to std::less.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:255,Performance,perform,performance,255,"/// array_pod_sort - This sorts an array with the specified start and end; /// extent. This is just like std::sort, except that it calls qsort instead of; /// using an inlined template. qsort is slightly slower than std::sort, but; /// most sorts are not performance critical in LLVM and std::sort has to be; /// template instantiated for each type, leading to significant measured code; /// bloat. This function should generally be used instead of std::sort where; /// possible.; ///; /// This function assumes that you have simple POD-like types that can be; /// compared with std::less and can be moved with memcpy. If this isn't true,; /// you should use std::sort.; ///; /// NOTE: If qsort_r were portable, we could allow a custom comparator and; /// default to std::less.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:526,Usability,simpl,simple,526,"/// array_pod_sort - This sorts an array with the specified start and end; /// extent. This is just like std::sort, except that it calls qsort instead of; /// using an inlined template. qsort is slightly slower than std::sort, but; /// most sorts are not performance critical in LLVM and std::sort has to be; /// template instantiated for each type, leading to significant measured code; /// bloat. This function should generally be used instead of std::sort where; /// possible.; ///; /// This function assumes that you have simple POD-like types that can be; /// compared with std::less and can be moved with memcpy. If this isn't true,; /// you should use std::sort.; ///; /// NOTE: If qsort_r were portable, we could allow a custom comparator and; /// default to std::less.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:32,Integrability,wrap,wrappers,32,// namespace detail; // Provide wrappers to std::sort which shuffle the elements before sorting; // to help uncover non-deterministic behavior (PR35135).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:112,Performance,perform,performance,112,// Forward trivially copyable types to array_pod_sort. This avoids a large; // amount of code bloat for a minor performance hit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:60,Safety,avoid,avoids,60,// Forward trivially copyable types to array_pod_sort. This avoids a large; // amount of code bloat for a minor performance hit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:39,Integrability,wrap,wrapper,39,/// Get the size of a range. This is a wrapper function around std::distance; /// which is only enabled when the operation is O(1).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::for_each which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::all_of which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::any_of which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::none_of which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::find which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::find_if which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::remove_if which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::copy_if which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::replace_copy_if which take ranges instead of having; /// to pass begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::replace_copy which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::move which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:332,Security,expose,expose,332,"// namespace detail; /// Returns true if \p Element is found in \p Range. Delegates the check to; /// either `.contains(Element)`, `.find(Element)`, or `std::find`, in this; /// order of preference. This is intended as the canonical way to check if an; /// element exists in a range in generic code or range type that does not; /// expose a `.contains(Element)` member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper function around std::is_sorted to check if elements in a range \p R; /// are sorted with respect to a comparator \p C.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper function around std::is_sorted to check if elements in a range \p R; /// are sorted in non-descending order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper function around std::count to count the number of times an element; /// \p Element occurs in the given range \p Range.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper function around std::count_if to count the number of times an; /// element satisfying a given predicate occurs in a range.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper function around std::transform to apply a function to a range and; /// store the result elsewhere.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::partition which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::lower_bound which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,Integrability,wrap,wrappers,12,/// Provide wrappers to std::upper_bound which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper function around std::equal to detect if pair-wise elements between; /// two ranges are the same.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:42,Safety,detect,detect,42,/// Wrapper function around std::equal to detect if pair-wise elements between; /// two ranges are the same.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper function to remove a value from a container:; ///; /// C.erase(remove(C.begin(), C.end(), V), C.end());",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper function to append range `R` to container `C`.; ///; /// C.insert(C.end(), R.begin(), R.end());",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:160,Testability,log,logic,160,"/// An STL-style algorithm similar to std::for_each that applies a second; /// functor between every pair of elements.; ///; /// This provides the control flow logic to, for example, print a; /// comma-separated list:; /// \code; /// interleave(names.begin(), names.end(),; /// [&](StringRef name) { os << name; },; /// [&] { os << "", ""; });; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:24,Energy Efficiency,adapt,adapts,24,/// Binary functor that adapts to any other binary functor after dereferencing; /// operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:24,Modifiability,adapt,adapts,24,/// Binary functor that adapts to any other binary functor after dereferencing; /// operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:542,Integrability,depend,depend,542,"/// Zippy iterator that uses the second iterator for comparisons. For the; /// increment to be safe, the second range has to be the shortest.; /// Returns `enumerator_result` on dereference to provide `.index()` and; /// `.value()` member functions.; /// Note: Because the dereference operator returns `enumerator_result` as a; /// value instead of a reference and does not strictly conform to the C++17's; /// definition of forward iterator. However, it satisfies all the; /// forward_iterator requirements that the `zip_common` and `zippy` depend on; /// and fully conforms to the C++20 definition of forward iterator.; /// This is similar to `std::vector<bool>::iterator` that returns bit reference; /// wrappers on dereference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:707,Integrability,wrap,wrappers,707,"/// Zippy iterator that uses the second iterator for comparisons. For the; /// increment to be safe, the second range has to be the shortest.; /// Returns `enumerator_result` on dereference to provide `.index()` and; /// `.value()` member functions.; /// Note: Because the dereference operator returns `enumerator_result` as a; /// value instead of a reference and does not strictly conform to the C++17's; /// definition of forward iterator. However, it satisfies all the; /// forward_iterator requirements that the `zip_common` and `zippy` depend on; /// and fully conforms to the C++20 definition of forward iterator.; /// This is similar to `std::vector<bool>::iterator` that returns bit reference; /// wrappers on dereference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:95,Safety,safe,safe,95,"/// Zippy iterator that uses the second iterator for comparisons. For the; /// increment to be safe, the second range has to be the shortest.; /// Returns `enumerator_result` on dereference to provide `.index()` and; /// `.value()` member functions.; /// Note: Because the dereference operator returns `enumerator_result` as a; /// value instead of a reference and does not strictly conform to the C++17's; /// definition of forward iterator. However, it satisfies all the; /// forward_iterator requirements that the `zip_common` and `zippy` depend on; /// and fully conforms to the C++20 definition of forward iterator.; /// This is similar to `std::vector<bool>::iterator` that returns bit reference; /// wrappers on dereference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:219,Availability,down,down,219,"// Make this tuple mutable to avoid casts that obfuscate const-correctness; // issues. Const-correctness of references is taken care of by `zippy` that; // defines const-non and const iterator types that will propagate down to; // `enumerator_result`'s `Refs`.; // Note that unlike the results of `zip*` functions, `enumerate`'s result are; // supposed to be modifiable even when defined as; // `const`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:30,Safety,avoid,avoid,30,"// Make this tuple mutable to avoid casts that obfuscate const-correctness; // issues. Const-correctness of references is taken care of by `zippy` that; // defines const-non and const iterator types that will propagate down to; // `enumerator_result`'s `Refs`.; // Note that unlike the results of `zip*` functions, `enumerate`'s result are; // supposed to be modifiable even when defined as; // `const`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:245,Integrability,depend,depends,245,"// Note: This dereference operator returns a value instead of a reference; // and does not strictly conform to the C++17's definition of forward; // iterator. However, it satisfies all the forward_iterator requirements; // that the `zip_common` depends on and fully conforms to the C++20; // definition of forward iterator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:11,Energy Efficiency,adapt,adaptor,11,// Just an adaptor to switch the order of argument and have the predicate before; // the zipped inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:11,Modifiability,adapt,adaptor,11,// Just an adaptor to switch the order of argument and have the predicate before; // the zipped inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:120,Security,access,access,120,"/// Return true if the sequence [Begin, End) has exactly N items. Runs in O(N); /// time. Not meant for use with random-access iterators.; /// Can optionally take a predicate to filter lazily some items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:120,Security,access,access,120,"/// Return true if the sequence [Begin, End) has N or more items. Runs in O(N); /// time. Not meant for use with random-access iterators.; /// Can optionally take a predicate to lazily filter some items.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:3,Safety,Detect,Detect,3,"// Detect incomplete types, relying on the fact that their size is unknown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:25,Safety,Detect,Detects,25,// namespace detail; /// Detects when type `T` is incomplete. This is true for forward declarations; /// and false for types with a full definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLForwardCompat.h:581,Deployability,update,updated,581,"//===- STLForwardCompat.h - Library features from future STLs ------C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains library features backported from future STL versions.; ///; /// These should be replaced with their STL counterparts as the C++ version LLVM; /// is compiled with is updated.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLForwardCompat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLForwardCompat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:207,Energy Efficiency,efficient,efficient,207,"//===----------------------------------------------------------------------===//; // Extra additions to <functional>; //===----------------------------------------------------------------------===//; /// An efficient, type-erasing, non-owning reference to a callable. This is; /// intended for use as the type of a function parameter that is not used; /// after the function in question returns.; ///; /// This class does not own the callable, so it is not in general safe to store; /// a function_ref.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:468,Safety,safe,safe,468,"//===----------------------------------------------------------------------===//; // Extra additions to <functional>; //===----------------------------------------------------------------------===//; /// An efficient, type-erasing, non-owning reference to a callable. This is; /// intended for use as the type of a function parameter that is not used; /// after the function in question returns.; ///; /// This class does not own the callable, so it is not in general safe to store; /// a function_ref.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringExtras.h:116,Safety,detect,detects,116,"/// Convert the string \p S to an integer of the specified type using; /// the radix \p Base. If \p Base is 0, auto-detects the radix.; /// Returns true if the number was successfully converted, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringExtras.h:21,Modifiability,Portab,Portable,21,"/// StrInStrNoCase - Portable version of strcasestr. Locates the first; /// occurrence of string 's1' in string 's2', ignoring case. Returns; /// the offset of s2 in s1 or npos if s2 cannot be found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:43,Integrability,interface,interface,43,"//===- StringMap.h - String Hash table map interface ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the StringMap class.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:28,Security,Hash,Hash,28,"//===- StringMap.h - String Hash table map interface ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the StringMap class.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:179,Security,hash,hash,179,"// Array of NumBuckets pointers to entries, null pointers are holes.; // TheTable[NumBuckets] contains a sentinel value for easy iteration. Followed; // by an array of the actual hash values as unsigned integers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:303,Security,hash,hash,303,"/// LookupBucketFor - Look up the bucket that the specified string should end; /// up in. If it already exists as a key in the map, the Item pointer for the; /// specified bucket will be non-null. Otherwise, it will be null. In either; /// case, the FullHashValue field of the bucket will be set to the hash value; /// of the string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:100,Safety,abort,aborts,100,"/// RemoveKey - Remove the specified StringMapEntry from the table, but do not; /// delete it. This aborts if the value isn't in the table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate the table with the specified number of buckets and otherwise; /// setup the map as empty.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:230,Energy Efficiency,efficient,efficient,230,"/// StringMap - This is an unconventional map that is specialized for handling; /// keys that are ""strings"", which are basically ranges of bytes. This does some; /// funky memory allocation and hashing things to make it extremely efficient,; /// storing the string data *after* the value in the map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:194,Security,hash,hashing,194,"/// StringMap - This is an unconventional map that is specialized for handling; /// keys that are ""strings"", which are basically ranges of bytes. This does some; /// funky memory allocation and hashing things to make it extremely efficient,; /// storing the string data *after* the value in the map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate TheTable of the same size as RHS's TheTable, and set the; // sentinel appropriately (and NumBuckets).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:122,Safety,avoid,avoids,122,"// Delete all the elements in the map, but don't reset the elements; // to default values. This is a copy of clear(), but avoids unnecessary; // work not required in the destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:109,Usability,clear,clear,109,"// Delete all the elements in the map, but don't reset the elements; // to default values. This is a copy of clear(), but avoids unnecessary; // work not required in the destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:52,Safety,abort,abort,52,"/// at - Return the entry for the specified key, or abort if no such; /// entry exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:3,Usability,clear,clear,3,// clear - Empties out the StringMap,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:88,Safety,safe,safe,88,"// Zap all values, resetting the keys back to non-present (not tombstone),; // which is safe because we're removing all elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:94,Safety,abort,aborts,94,"/// remove - Remove the specified key/value pair from the map, but do not; /// erase it. This aborts if the key is not in the map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h:48,Integrability,interface,interface,48,"//===- StringMapEntry.h - String Hash table map interface -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the StringMapEntry class - it is intended to be a low; /// dependency implementation detail of StringMap that is more suitable for; /// inclusion in public headers than StringMap.h itself is.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h:473,Integrability,depend,dependency,473,"//===- StringMapEntry.h - String Hash table map interface -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the StringMapEntry class - it is intended to be a low; /// dependency implementation detail of StringMap that is more suitable for; /// inclusion in public headers than StringMap.h itself is.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h:33,Security,Hash,Hash,33,"//===- StringMapEntry.h - String Hash table map interface -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the StringMapEntry class - it is intended to be a low; /// dependency implementation detail of StringMap that is more suitable for; /// inclusion in public headers than StringMap.h itself is.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h:19,Energy Efficiency,allocate,allocate,19,"/// Helper to tail-allocate \p Key. It'd be nice to generalize this so it; /// could be reused elsewhere, maybe even taking an llvm::function_ref to; /// type-erase the allocator and put it in a source file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h:3,Energy Efficiency,Allocate,Allocate,3,// Allocate a new item with space for the string at the end and a null; // terminator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:47,Integrability,Wrap,Wrapper,47,"//===- StringRef.h - Constant String Reference Wrapper ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:308,Modifiability,extend,extends,308,"/// StringRef - Represent a constant reference to a string, i.e. a character; /// array and a length, which need not be null terminated.; ///; /// This class does not own the string data, it is expected to be used in; /// situations where the character data resides in some other buffer, whose; /// lifetime extends past that of the StringRef. For this reason, it is not in; /// general safe to store a StringRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:387,Safety,safe,safe,387,"/// StringRef - Represent a constant reference to a string, i.e. a character; /// array and a length, which need not be null terminated.; ///; /// This class does not own the string data, it is expected to be used in; /// situations where the character data resides in some other buffer, whose; /// lifetime extends past that of the StringRef. For this reason, it is not in; /// general safe to store a StringRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:10,Energy Efficiency,Allocate,Allocate,10,// copy - Allocate copy in Allocator and return StringRef to it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:53,Energy Efficiency,efficient,efficient,53,"/// equals - Check for string equality, this is more efficient than; /// compare() when the relative ordering of inequal strings isn't needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:439,Integrability,rout,routine,439,"/// Determine the edit distance between this string and another; /// string.; ///; /// \param Other the string to compare this string against.; ///; /// \param AllowReplacements whether to allow character; /// replacements (change one character into another) as a single; /// operation, rather than as two operations (an insertion and a; /// removal).; ///; /// \param MaxEditDistance If non-zero, the maximum edit distance that; /// this routine is allowed to compute. If the edit distance will exceed; /// that maximum, returns \c MaxEditDistance+1.; ///; /// \returns the minimum number of character insertions, removals,; /// or (if \p AllowReplacements is \c true) replacements needed to; /// transform one of the given strings into the other. If zero,; /// the strings are identical.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:317,Availability,error,error,317,"/// Parse the current string as an integer of the specified radix. If; /// \p Radix is specified as zero, this does radix autosensing using; /// extended C rules: 0 is octal, 0x is hex, 0b is binary.; ///; /// If the string is invalid or if only a subset of the string is valid,; /// this returns true to signify the error. The string is considered; /// erroneous if empty or if it overflows T.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:145,Modifiability,extend,extended,145,"/// Parse the current string as an integer of the specified radix. If; /// \p Radix is specified as zero, this does radix autosensing using; /// extended C rules: 0 is octal, 0x is hex, 0b is binary.; ///; /// If the string is invalid or if only a subset of the string is valid,; /// this returns true to signify the error. The string is considered; /// erroneous if empty or if it overflows T.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:60,Safety,avoid,avoid,60,// The additional cast to unsigned long long is required to avoid the; // Visual C++ warning C4805: '!=' : unsafe mix of type 'bool' and type; // 'unsigned __int64' when instantiating getAsInteger with T = bool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:107,Safety,unsafe,unsafe,107,// The additional cast to unsigned long long is required to avoid the; // Visual C++ warning C4805: '!=' : unsafe mix of type 'bool' and type; // 'unsigned __int64' when instantiating getAsInteger with T = bool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:315,Availability,error,error,315,"/// Parse the current string as an integer of the specified radix. If; /// \p Radix is specified as zero, this does radix autosensing using; /// extended C rules: 0 is octal, 0x is hex, 0b is binary.; ///; /// If the string does not begin with a number of the specified radix,; /// this returns true to signify the error. The string is considered; /// erroneous if empty or if it overflows T.; /// The portion of the string representing the discovered numeric value; /// is removed from the beginning of the string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:145,Modifiability,extend,extended,145,"/// Parse the current string as an integer of the specified radix. If; /// \p Radix is specified as zero, this does radix autosensing using; /// extended C rules: 0 is octal, 0x is hex, 0b is binary.; ///; /// If the string does not begin with a number of the specified radix,; /// this returns true to signify the error. The string is considered; /// erroneous if empty or if it overflows T.; /// The portion of the string representing the discovered numeric value; /// is removed from the beginning of the string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:318,Availability,error,error,318,"/// Parse the current string as an integer of the specified \p Radix. If; /// \p Radix is specified as zero, this does radix autosensing using; /// extended C rules: 0 is octal, 0x is hex, 0b is binary.; ///; /// If the string does not begin with a number of the specified radix,; /// this returns true to signify the error. The string is considered; /// erroneous if empty.; /// The portion of the string representing the discovered numeric value; /// is removed from the beginning of the string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:148,Modifiability,extend,extended,148,"/// Parse the current string as an integer of the specified \p Radix. If; /// \p Radix is specified as zero, this does radix autosensing using; /// extended C rules: 0 is octal, 0x is hex, 0b is binary.; ///; /// If the string does not begin with a number of the specified radix,; /// this returns true to signify the error. The string is considered; /// erroneous if empty.; /// The portion of the string representing the discovered numeric value; /// is removed from the beginning of the string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:4,Safety,Detect,Detect,4,"/// Detect the line ending style of the string.; ///; /// If the string contains a line ending, return the line ending character; /// sequence that is detected. Otherwise return '\n' for unix line endings.; ///; /// \return - The line ending character sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:151,Safety,detect,detected,151,"/// Detect the line ending style of the string.; ///; /// If the string contains a line ending, return the line ending character; /// sequence that is detected. Otherwise return '\n' for unix line endings.; ///; /// \return - The line ending character sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:6,Integrability,wrap,wrapper,6,"/// A wrapper around a string literal that serves as a proxy for constructing; /// global tables of StringRefs with the length computed at compile time.; /// In order to avoid the invocation of a global constructor, StringLiteral; /// should *only* be used in a constexpr context, as such:; ///; /// constexpr StringLiteral S(""test"");; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:170,Safety,avoid,avoid,170,"/// A wrapper around a string literal that serves as a proxy for constructing; /// global tables of StringRefs with the length computed at compile time.; /// In order to avoid the invocation of a global constructor, StringLiteral; /// should *only* be used in a constexpr context, as such:; ///; /// constexpr StringLiteral S(""test"");; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:327,Testability,test,test,327,"/// A wrapper around a string literal that serves as a proxy for constructing; /// global tables of StringRefs with the length computed at compile time.; /// In order to avoid the invocation of a global constructor, StringLiteral; /// should *only* be used in a constexpr context, as such:; ///; /// constexpr StringLiteral S(""test"");; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h:24,Energy Efficiency,efficient,efficient,24,"//===- StringSet.h - An efficient set built on StringMap --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// StringSet - A set-like wrapper for the StringMap.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h:419,Integrability,wrap,wrapper,419,"//===- StringSet.h - An efficient set built on StringMap --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// StringSet - A set-like wrapper for the StringMap.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h:18,Integrability,wrap,wrapper,18,/// StringSet - A wrapper for StringMap that provides set-like functionality.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h:591,Energy Efficiency,green,green,591,"/// A switch()-like statement whose cases are string literals.; ///; /// The StringSwitch class is a simple form of a switch() statement that; /// determines whether the given string matches one of the given string; /// literals. The template type parameter \p T is the type of the value that; /// will be returned from the string-switch expression. For example,; /// the following code switches on the name of a color in \c argv[i]:; ///; /// \code; /// Color color = StringSwitch<Color>(argv[i]); /// .Case(""red"", Red); /// .Case(""orange"", Orange); /// .Case(""yellow"", Yellow); /// .Case(""green"", Green); /// .Case(""blue"", Blue); /// .Case(""indigo"", Indigo); /// .Cases(""violet"", ""purple"", Violet); /// .Default(UnknownColor);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h:599,Energy Efficiency,Green,Green,599,"/// A switch()-like statement whose cases are string literals.; ///; /// The StringSwitch class is a simple form of a switch() statement that; /// determines whether the given string matches one of the given string; /// literals. The template type parameter \p T is the type of the value that; /// will be returned from the string-switch expression. For example,; /// the following code switches on the name of a color in \c argv[i]:; ///; /// \code; /// Color color = StringSwitch<Color>(argv[i]); /// .Case(""red"", Red); /// .Case(""orange"", Orange); /// .Case(""yellow"", Yellow); /// .Case(""green"", Green); /// .Case(""blue"", Blue); /// .Case(""indigo"", Indigo); /// .Cases(""violet"", ""purple"", Violet); /// .Default(UnknownColor);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h:101,Usability,simpl,simple,101,"/// A switch()-like statement whose cases are string literals.; ///; /// The StringSwitch class is a simple form of a switch() statement that; /// determines whether the given string matches one of the given string; /// literals. The template type parameter \p T is the type of the value that; /// will be returned from the string-switch expression. For example,; /// the following code switches on the name of a color in \c argv[i]:; ///; /// \code; /// Color color = StringSwitch<Color>(argv[i]); /// .Case(""red"", Red); /// .Case(""orange"", Orange); /// .Case(""yellow"", Yellow); /// .Case(""green"", Green); /// .Case(""blue"", Blue); /// .Case(""indigo"", Indigo); /// .Cases(""violet"", ""purple"", Violet); /// .Default(UnknownColor);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h:57,Energy Efficiency,allocate,allocate,57,"// Try to squeeze into the single slot. If it won't fit, allocate a copied; // vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h:28,Energy Efficiency,allocate,allocated,28,"// If we have a full vector allocated, try to re-use it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h:27,Energy Efficiency,allocate,allocated,27,"// If this vector has been allocated on the heap, re-use it if cheap. If it; // would require more copying, just delete it and we'll steal the other; // side.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h:34,Usability,clear,clear,34,"// If we have a vector form, just clear it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TinyPtrVector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Twine.h:45,Energy Efficiency,efficient,efficiently,45,"/// Twine - A lightweight data structure for efficiently representing the; /// concatenation of temporary values as strings.; ///; /// A Twine is a kind of rope, it represents a concatenated string using a; /// binary-tree, where the string is the preorder of the nodes. Since the; /// Twine can be efficiently rendered into a buffer when its result is used,; /// it avoids the cost of generating temporary values for intermediate string; /// results -- particularly in cases when the Twine result is never; /// required. By explicitly tracking the type of leaf nodes, we can also avoid; /// the creation of temporary strings for conversions operations (such as; /// appending an integer to a string).; ///; /// A Twine is not intended for use directly and should not be stored, its; /// implementation relies on the ability to store pointers to temporary stack; /// objects which may be deallocated at the end of a statement. Twines should; /// only be used as const references in arguments, when an API wishes; /// to accept possibly-concatenated strings.; ///; /// Twines support a special 'null' value, which always concatenates to form; /// itself, and renders as an empty string. This can be returned from APIs to; /// effectively nullify any concatenations performed on the result.; ///; /// \b Implementation; ///; /// Given the nature of a Twine, it is not possible for the Twine's; /// concatenation method to construct interior nodes; the result must be; /// represented inside the returned value. For this reason a Twine object; /// actually holds two values, the left- and right-hand sides of a; /// concatenation. We also have nullary Twine objects, which are effectively; /// sentinel values that represent empty strings.; ///; /// Thus, a Twine can effectively have zero, one, or two children. The \see; /// isNullary(), \see isUnary(), and \see isBinary() predicates exist for; /// testing the number of children.; ///; /// We maintain a number of invariants on Twine objects (FIXME: ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ADT/Twine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Twine.h
